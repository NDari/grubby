//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	astString       ast.String
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const LPAREN = 57355
const RPAREN = 57356
const COMMA = 57357
const STRING = 57358
const NamespacedModule = 57359
const ProcArg = 57360
const DO = 57361
const DEF = 57362
const END = 57363
const IF = 57364
const ELSE = 57365
const ELSIF = 57366
const UNLESS = 57367
const CLASS = 57368
const MODULE = 57369
const FOR = 57370
const WHILE = 57371
const UNTIL = 57372
const BEGIN = 57373
const RESCUE = 57374
const ENSURE = 57375
const BREAK = 57376
const NEXT = 57377
const REDO = 57378
const RETRY = 57379
const RETURN = 57380
const YIELD = 57381
const AND = 57382
const OR = 57383
const LAMBDA = 57384
const CASE = 57385
const WHEN = 57386
const ALIAS = 57387
const SELF = 57388
const NIL = 57389
const LESSTHAN = 57390
const GREATERTHAN = 57391
const EQUALTO = 57392
const BANG = 57393
const COMPLEMENT = 57394
const BINARY_PLUS = 57395
const UNARY_PLUS = 57396
const BINARY_MINUS = 57397
const UNARY_MINUS = 57398
const STAR = 57399
const RANGE = 57400
const OR_EQUALS = 57401
const AND_EQUALS = 57402
const WHITESPACE = 57403
const NEWLINE = 57404
const SEMICOLON = 57405
const COLON = 57406
const DOT = 57407
const PIPE = 57408
const SLASH = 57409
const AMPERSAND = 57410
const QUESTIONMARK = 57411
const CARET = 57412
const LBRACKET = 57413
const RBRACKET = 57414
const LBRACE = 57415
const RBRACE = 57416
const ATSIGN = 57417
const FILE_CONST_REF = 57418
const LINE_CONST_REF = 57419
const EOF = 57420

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1911

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 134,
	20, 261,
	22, 261,
	25, 261,
	26, 261,
	27, 261,
	29, 261,
	30, 261,
	31, 261,
	34, 261,
	35, 261,
	37, 261,
	38, 261,
	39, 261,
	43, 261,
	45, 261,
	63, 261,
	-2, 13,
	-1, 207,
	20, 261,
	22, 261,
	25, 261,
	26, 261,
	27, 261,
	29, 261,
	30, 261,
	31, 261,
	34, 261,
	35, 261,
	37, 261,
	38, 261,
	39, 261,
	43, 261,
	45, 261,
	63, 261,
	-2, 13,
	-1, 352,
	4, 22,
	5, 22,
	40, 22,
	41, 22,
	48, 22,
	49, 22,
	53, 22,
	55, 22,
	65, 22,
	66, 22,
	67, 22,
	68, 22,
	-2, 121,
	-1, 364,
	20, 261,
	22, 261,
	25, 261,
	26, 261,
	27, 261,
	29, 261,
	30, 261,
	31, 261,
	34, 261,
	35, 261,
	37, 261,
	38, 261,
	39, 261,
	43, 261,
	45, 261,
	63, 261,
	-2, 13,
	-1, 402,
	4, 35,
	5, 35,
	40, 35,
	41, 35,
	49, 35,
	53, 35,
	55, 35,
	62, 13,
	65, 35,
	66, 35,
	67, 35,
	68, 35,
	74, 13,
	-2, 15,
	-1, 580,
	15, 128,
	-2, 13,
}

const RubyNprod = 325
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4401

var RubyAct = []int{

	330, 449, 5, 623, 450, 182, 14, 417, 452, 253,
	136, 148, 337, 143, 137, 249, 251, 149, 26, 54,
	55, 587, 135, 401, 25, 2, 3, 69, 185, 68,
	78, 186, 77, 187, 364, 336, 318, 93, 21, 28,
	144, 4, 336, 217, 557, 309, 218, 582, 428, 302,
	371, 120, 336, 336, 539, 408, 147, 179, 180, 391,
	278, 190, 191, 80, 537, 516, 581, 94, 95, 194,
	196, 362, 81, 82, 121, 83, 266, 84, 85, 371,
	144, 99, 212, 213, 100, 147, 321, 144, 101, 92,
	415, 210, 363, 206, 145, 312, 92, 72, 71, 305,
	220, 221, 222, 195, 92, 124, 336, 409, 125, 229,
	281, 219, 92, 92, 234, 285, 414, 92, 515, 239,
	240, 97, 96, 244, 245, 246, 247, 163, 92, 336,
	371, 120, 336, 51, 211, 242, 392, 98, 474, 513,
	257, 211, 122, 123, 126, 258, 264, 159, 265, 157,
	599, 571, 269, 159, 121, 157, 470, 268, 147, 167,
	620, 295, 296, 297, 271, 299, 300, 301, 284, 306,
	307, 308, 294, 313, 314, 315, 317, 293, 273, 272,
	275, 277, 159, 153, 157, 164, 160, 370, 156, 473,
	176, 469, 147, 188, 164, 316, 188, 153, 322, 339,
	340, 341, 342, 165, 166, 469, 163, 158, 336, 569,
	354, 346, 153, 158, 601, 163, 347, 188, 188, 188,
	260, 160, 338, 349, 483, 175, 99, 482, 118, 100,
	161, 162, 336, 101, 570, 360, 188, 448, 188, 188,
	336, 188, 158, 188, 188, 188, 188, 361, 188, 379,
	619, 188, 542, 99, 188, 188, 100, 254, 172, 373,
	101, 178, 336, 252, 336, 188, 595, 596, 256, 377,
	147, 168, 188, 188, 188, 188, 279, 99, 388, 532,
	100, 618, 336, 119, 101, 153, 171, 73, 99, 604,
	188, 100, 188, 326, 327, 101, 177, 188, 147, 129,
	336, 303, 127, 269, 349, 310, 406, 255, 268, 99,
	319, 602, 100, 172, 254, 250, 101, 594, 578, 153,
	252, 168, 173, 174, 254, 256, 254, 336, 334, 573,
	169, 170, 426, 451, 128, 256, 529, 256, 153, 188,
	425, 94, 523, 508, 434, 509, 555, 470, 430, 333,
	99, 203, 431, 100, 432, 159, 556, 101, 188, 147,
	147, 188, 200, 444, 255, 201, 433, 422, 441, 423,
	188, 188, 443, 106, 255, 433, 378, 198, 426, 424,
	199, 455, 376, 429, 343, 459, 454, 636, 460, 633,
	632, 453, 631, 464, 633, 632, 466, 153, 458, 332,
	550, 467, 488, 487, 288, 380, 471, 468, 266, 115,
	116, 486, 456, 488, 487, 439, 188, 104, 105, 489,
	188, 188, 107, 188, 108, 153, 109, 117, 492, 503,
	503, 436, 178, 376, 103, 112, 110, 111, 282, 511,
	498, 480, 132, 77, 131, 132, 77, 202, 536, 522,
	132, 77, 524, 147, 358, 535, 413, 359, 412, 525,
	411, 521, 530, 399, 393, 382, 188, 381, 380, 525,
	534, 375, 188, 324, 323, 248, 224, 608, 344, 497,
	350, 398, 331, 1, 544, 209, 153, 153, 547, 91,
	90, 188, 89, 88, 87, 86, 41, 188, 40, 39,
	38, 188, 504, 20, 43, 188, 560, 561, 44, 16,
	12, 13, 11, 188, 45, 24, 23, 22, 27, 19,
	10, 567, 35, 153, 30, 18, 568, 15, 70, 574,
	576, 42, 575, 577, 17, 37, 36, 31, 188, 29,
	466, 32, 74, 579, 584, 580, 0, 0, 188, 188,
	0, 468, 0, 69, 151, 68, 78, 152, 77, 155,
	134, 0, 142, 93, 0, 156, 144, 188, 0, 0,
	0, 0, 600, 0, 188, 0, 0, 603, 0, 605,
	153, 0, 0, 0, 525, 0, 525, 52, 0, 80,
	0, 0, 0, 94, 95, 0, 0, 139, 81, 82,
	0, 83, 0, 84, 85, 0, 140, 141, 0, 0,
	0, 0, 0, 0, 0, 503, 503, 503, 138, 627,
	145, 0, 92, 72, 71, 634, 0, 0, 0, 0,
	0, 0, 558, 638, 0, 0, 503, 154, 0, 0,
	503, 503, 503, 614, 615, 616, 0, 189, 153, 0,
	189, 154, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 153, 0, 0,
	0, 189, 189, 189, 635, 188, 0, 0, 0, 0,
	0, 0, 639, 640, 0, 0, 0, 641, 0, 588,
	189, 0, 189, 189, 0, 189, 0, 189, 189, 189,
	189, 0, 189, 0, 0, 189, 0, 0, 189, 189,
	0, 0, 0, 0, 0, 188, 106, 0, 193, 189,
	0, 0, 0, 0, 0, 0, 189, 189, 189, 189,
	280, 0, 205, 188, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 189, 0, 189, 0, 0, 0,
	0, 189, 115, 116, 0, 304, 0, 0, 106, 311,
	104, 105, 227, 0, 320, 107, 0, 108, 0, 109,
	117, 236, 237, 154, 0, 0, 0, 103, 112, 110,
	111, 0, 0, 0, 407, 0, 0, 0, 0, 0,
	263, 0, 154, 189, 115, 116, 0, 0, 0, 0,
	0, 286, 104, 105, 0, 0, 0, 107, 0, 108,
	0, 109, 189, 291, 0, 189, 0, 0, 0, 103,
	112, 110, 111, 0, 189, 189, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 151, 68, 78, 152, 77, 155, 134, 335, 0,
	93, 154, 156, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 0, 0, 0, 357, 0, 0,
	189, 0, 0, 0, 189, 189, 80, 189, 0, 154,
	94, 95, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 0, 0, 0, 0, 289, 0, 145, 0, 92,
	72, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 389, 0, 0, 106, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 394, 0,
	154, 154, 0, 0, 404, 189, 106, 0, 0, 0,
	0, 189, 0, 0, 0, 189, 0, 0, 0, 189,
	0, 115, 116, 0, 0, 0, 34, 189, 0, 104,
	105, 0, 0, 0, 107, 0, 108, 154, 109, 117,
	0, 0, 115, 116, 0, 0, 103, 112, 110, 111,
	104, 105, 189, 390, 0, 107, 0, 108, 0, 109,
	435, 0, 189, 189, 106, 437, 438, 103, 112, 110,
	111, 0, 0, 0, 546, 630, 150, 0, 0, 0,
	446, 189, 0, 0, 0, 0, 150, 0, 189, 150,
	150, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	115, 116, 0, 0, 463, 150, 0, 0, 104, 105,
	150, 150, 150, 107, 0, 108, 475, 109, 477, 0,
	0, 0, 481, 0, 0, 103, 112, 110, 111, 150,
	0, 150, 150, 0, 150, 0, 150, 150, 150, 150,
	0, 150, 0, 0, 150, 0, 559, 150, 150, 0,
	0, 0, 514, 0, 0, 517, 0, 519, 150, 0,
	0, 0, 154, 0, 0, 150, 150, 150, 150, 69,
	185, 68, 78, 186, 77, 187, 79, 0, 150, 93,
	533, 154, 0, 150, 0, 150, 0, 0, 0, 189,
	150, 0, 0, 0, 540, 0, 0, 0, 543, 0,
	0, 0, 0, 589, 0, 80, 0, 0, 106, 94,
	95, 0, 150, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 336, 0, 0, 565, 189,
	106, 150, 150, 0, 75, 0, 76, 572, 92, 72,
	71, 0, 0, 0, 115, 116, 0, 189, 0, 0,
	0, 150, 104, 105, 150, 0, 0, 107, 0, 108,
	0, 109, 0, 150, 150, 0, 115, 116, 0, 103,
	112, 110, 111, 0, 104, 105, 545, 0, 0, 107,
	598, 108, 0, 109, 0, 0, 0, 0, 0, 0,
	150, 103, 112, 110, 111, 0, 606, 9, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 402, 150, 0, 150, 0, 150, 0,
	0, 0, 69, 151, 68, 78, 152, 77, 155, 134,
	0, 0, 93, 629, 156, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 637, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 80, 150,
	192, 197, 94, 95, 0, 150, 139, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 208, 0, 0, 150,
	150, 214, 215, 216, 402, 0, 0, 289, 0, 145,
	150, 92, 72, 71, 150, 0, 0, 0, 150, 0,
	223, 0, 225, 226, 0, 228, 150, 230, 231, 232,
	233, 0, 235, 0, 0, 238, 150, 0, 241, 243,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 261,
	0, 150, 0, 0, 0, 0, 267, 270, 274, 276,
	0, 150, 150, 0, 0, 0, 0, 0, 106, 146,
	0, 0, 0, 0, 290, 0, 292, 0, 0, 0,
	150, 298, 115, 116, 0, 0, 0, 150, 0, 0,
	104, 105, 0, 150, 0, 107, 0, 108, 0, 109,
	325, 0, 0, 146, 115, 116, 0, 103, 112, 110,
	111, 0, 104, 105, 410, 0, 0, 107, 0, 108,
	0, 109, 345, 351, 0, 0, 0, 0, 0, 103,
	112, 110, 111, 0, 0, 0, 372, 0, 0, 0,
	0, 0, 365, 0, 0, 366, 69, 49, 68, 78,
	50, 77, 53, 79, 368, 369, 93, 0, 0, 181,
	46, 150, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 426, 451, 64, 65, 0, 66, 63, 59,
	150, 208, 80, 62, 0, 67, 94, 95, 150, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	395, 0, 328, 329, 351, 403, 33, 405, 0, 208,
	0, 75, 0, 76, 0, 92, 72, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 0,
	0, 259, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 150, 0, 0, 0,
	427, 0, 0, 0, 130, 133, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 184,
	146, 208, 0, 0, 0, 442, 0, 0, 0, 0,
	0, 445, 0, 0, 0, 447, 0, 0, 0, 395,
	184, 184, 184, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 465, 0, 184,
	0, 184, 184, 0, 184, 0, 184, 184, 184, 184,
	0, 184, 479, 0, 184, 0, 0, 184, 184, 0,
	0, 0, 484, 485, 0, 0, 0, 0, 184, 106,
	0, 0, 0, 0, 0, 184, 184, 184, 184, 0,
	374, 183, 0, 0, 0, 0, 0, 0, 518, 383,
	113, 0, 386, 184, 208, 184, 0, 102, 0, 0,
	184, 0, 0, 0, 0, 115, 116, 0, 0, 0,
	0, 0, 0, 104, 105, 397, 0, 400, 107, 0,
	108, 0, 109, 117, 0, 0, 0, 0, 0, 0,
	103, 112, 110, 111, 114, 0, 0, 0, 0, 0,
	0, 106, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 420, 421, 0,
	0, 184, 566, 0, 184, 0, 0, 0, 0, 102,
	0, 0, 0, 184, 184, 0, 0, 115, 116, 0,
	0, 465, 0, 0, 0, 104, 105, 0, 400, 583,
	107, 0, 108, 0, 109, 0, 0, 385, 0, 0,
	0, 0, 103, 112, 110, 111, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 461, 0, 0, 184,
	0, 0, 0, 184, 184, 0, 184, 0, 0, 607,
	0, 0, 476, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 617, 0, 0,
	490, 115, 116, 0, 494, 495, 0, 496, 0, 104,
	105, 106, 0, 510, 107, 512, 108, 0, 109, 184,
	0, 0, 609, 0, 0, 184, 103, 112, 110, 111,
	114, 0, 526, 0, 527, 0, 0, 0, 0, 528,
	0, 0, 0, 0, 184, 0, 0, 115, 116, 0,
	184, 0, 0, 0, 184, 104, 105, 0, 184, 0,
	107, 0, 108, 0, 109, 0, 184, 0, 0, 548,
	549, 0, 103, 112, 110, 111, 0, 0, 554, 0,
	0, 106, 541, 0, 0, 0, 0, 0, 0, 0,
	562, 184, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 184, 0, 0, 0, 0, 0, 0, 0,
	106, 287, 0, 499, 0, 0, 0, 115, 116, 0,
	184, 0, 0, 0, 0, 104, 105, 184, 585, 0,
	107, 0, 108, 586, 109, 0, 0, 0, 591, 592,
	593, 0, 103, 112, 110, 111, 115, 116, 0, 0,
	0, 0, 0, 0, 104, 105, 0, 0, 0, 107,
	0, 108, 0, 109, 0, 0, 0, 0, 611, 612,
	613, 103, 112, 110, 111, 0, 420, 421, 0, 69,
	49, 68, 78, 50, 77, 53, 79, 0, 0, 93,
	0, 0, 0, 46, 626, 505, 625, 624, 506, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 184, 84,
	85, 0, 0, 0, 0, 501, 502, 0, 0, 0,
	0, 0, 0, 590, 75, 0, 76, 0, 92, 72,
	71, 0, 0, 0, 0, 0, 69, 49, 68, 78,
	50, 77, 53, 79, 0, 0, 93, 0, 184, 0,
	46, 622, 505, 625, 624, 506, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 184, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 501, 502, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 92, 72, 71, 69, 49,
	68, 78, 50, 77, 53, 79, 0, 0, 93, 0,
	0, 0, 46, 491, 56, 419, 418, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 92, 72, 71,
	69, 49, 68, 78, 50, 77, 53, 79, 0, 0,
	93, 0, 0, 0, 46, 416, 56, 419, 418, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 92,
	72, 71, 69, 49, 68, 78, 50, 77, 53, 79,
	0, 0, 93, 0, 0, 0, 46, 551, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 552,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 92, 72, 71, 69, 49, 68, 78, 50, 77,
	53, 79, 0, 0, 93, 0, 0, 0, 46, 0,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	6, 7, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 92, 72, 71, 8, 69, 49, 68,
	78, 50, 77, 53, 79, 0, 0, 93, 0, 0,
	0, 46, 628, 505, 0, 0, 506, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 501, 502, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 53, 79, 0, 0, 93,
	0, 0, 0, 46, 610, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 53, 79, 0,
	0, 93, 0, 0, 0, 46, 597, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 53,
	79, 0, 0, 93, 0, 0, 0, 46, 563, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 53, 79, 0, 0, 93, 0, 0, 0, 46,
	553, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 53, 79, 0, 0, 93, 0, 0,
	0, 46, 0, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 538, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 53, 79, 0, 0, 93,
	0, 0, 0, 46, 531, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 53, 79, 0,
	0, 93, 0, 0, 0, 46, 507, 505, 0, 0,
	506, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 501, 502, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 53,
	79, 0, 0, 93, 0, 0, 0, 46, 500, 505,
	0, 0, 506, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 501,
	502, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 53, 79, 0, 0, 93, 0, 0, 0, 46,
	493, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 53, 79, 0, 0, 93, 0, 0,
	0, 46, 472, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 53, 79, 0, 0, 93,
	0, 0, 0, 46, 462, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 53, 79, 0,
	0, 93, 0, 0, 0, 46, 396, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 53,
	79, 0, 0, 93, 0, 0, 0, 46, 387, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 53, 79, 0, 0, 93, 0, 0, 0, 46,
	384, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 53, 79, 0, 0, 93, 0, 0,
	0, 46, 0, 505, 0, 0, 506, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 501, 502, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 53, 79, 0, 0, 93,
	0, 0, 0, 46, 0, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 53, 79, 356,
	0, 93, 0, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 53,
	79, 0, 0, 93, 0, 0, 0, 46, 0, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 53, 79, 0, 0, 93, 0, 0, 0, 46,
	0, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 69, 352, 68,
	78, 186, 77, 187, 79, 0, 0, 93, 0, 0,
	75, 0, 76, 0, 92, 72, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 336, 0, 0, 0, 285, 0, 0,
	0, 0, 75, 0, 76, 348, 92, 72, 71, 69,
	151, 68, 78, 152, 77, 155, 79, 0, 0, 93,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 69, 185, 68, 78, 186, 77, 187, 79, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 336, 0, 0,
	0, 285, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 352, 68, 78, 186, 77, 187,
	79, 0, 0, 93, 0, 0, 69, 151, 68, 78,
	152, 77, 155, 134, 0, 0, 93, 0, 156, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 80, 84, 85, 0, 94, 95, 0, 336,
	0, 81, 82, 0, 83, 0, 84, 85, 75, 0,
	76, 348, 92, 72, 71, 0, 0, 0, 0, 0,
	0, 289, 0, 145, 0, 92, 72, 71, 69, 185,
	68, 78, 186, 77, 187, 79, 0, 0, 93, 0,
	0, 69, 151, 68, 78, 152, 77, 155, 207, 0,
	0, 93, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 62, 0, 0, 94, 95,
	0, 0, 0, 81, 82, 0, 83, 80, 84, 85,
	0, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 75, 0, 76, 0, 92, 72, 71,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 185, 68, 78, 186, 77, 187,
	79, 0, 0, 93, 0, 0, 69, 151, 68, 78,
	152, 77, 155, 79, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 80, 84, 85, 106, 94, 95, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 75, 0,
	76, 0, 92, 72, 71, 0, 106, 0, 0, 0,
	0, 75, 0, 76, 0, 92, 72, 71, 0, 0,
	0, 115, 116, 0, 0, 0, 0, 0, 0, 104,
	105, 0, 0, 0, 107, 0, 108, 0, 109, 0,
	0, 0, 115, 116, 0, 367, 103, 112, 110, 111,
	104, 105, 0, 0, 0, 107, 0, 108, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 103, 112, 110,
	111,
}
var RubyPact = []int{

	-37, 2378, -1000, -1000, -1000, 59, -1000, -1000, -1000, 1655,
	-1000, -1000, -1000, -1000, 203, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 233, 83, -1000, 79, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 295, 440, 432, 547,
	171, 144, 271, 263, 175, 246, 3819, 3819, -1000, 4257,
	3819, 3819, 4257, 4270, 355, 340, -1000, 439, -1000, -1000,
	335, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4185, -1000,
	68, 3819, 3819, 4257, 4257, 4257, -1000, -1000, -1000, -1000,
	-1000, -1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, 3819,
	3819, 3819, 4257, 469, 4257, 4257, -1000, 4257, 3819, 4257,
	4257, 4257, 4257, 3819, 4257, -1000, -1000, 4257, 3819, 3819,
	4257, 4257, 3819, 3819, 3819, 3819, 468, 250, 75, 307,
	172, 4257, 344, -1000, -1000, 68, -1000, 61, 4257, 4172,
	4257, 4257, 53, 423, 49, -1000, 1946, -1000, -1000, 389,
	3, 1256, 136, 135, 221, 208, 4257, -1000, 4257, -1000,
	3819, 3819, 3819, 4257, 3819, 3819, 3819, 42, 3819, 3819,
	3819, 38, 3819, 3819, 3819, 3819, 29, 467, 466, 328,
	231, 3603, 384, 4332, -1000, 4100, 142, -1000, 56, -1000,
	287, 266, 4332, 178, 384, -1000, -1000, 1801, 3819, 3819,
	3819, 3819, 376, -1000, 3943, 4087, 393, -1000, 1946, 3675,
	-1000, -1000, 328, 328, 4332, 4332, 4332, -1000, -1000, 447,
	328, 328, 328, 4332, 21, 4332, 4332, 1103, 4332, 328,
	4332, 4332, 4332, 4332, 328, 4311, 1103, 1103, 4332, 328,
	328, 4332, 115, 1384, 328, 328, 328, 328, 68, -1000,
	464, 418, 319, -1000, 199, 461, 460, 458, -1000, 3459,
	432, 4332, 3387, 3943, -1000, -1000, -1000, 921, -13, 64,
	1727, -1000, -1000, -1000, 1801, -1000, 1801, -1000, -1000, -1000,
	-1000, 457, 4257, 3315, -1000, 456, 3871, 4257, -1000, 4257,
	4332, 3943, 712, -17, 35, 328, 328, 328, 1362, 328,
	328, 328, -1000, -1000, -1000, 453, 328, 328, 328, -1000,
	-1000, -1000, 451, 328, 328, 328, 175, 328, -1000, -1000,
	-1000, 449, 417, 45, 19, 2234, -1000, -1000, -1000, -1000,
	328, 346, 4257, -1000, -1000, 178, -1000, 331, 4257, 328,
	328, 328, 328, -1000, 416, 4332, -1000, -1000, -1000, 389,
	400, 1946, 834, 3943, 328, -1000, -1000, 4015, -1000, -1000,
	-1000, 68, 3819, 4257, -1000, 4332, 4332, 4257, 4332, 4332,
	-1000, 4257, 187, -1000, 1460, 307, 317, 367, 398, 4257,
	-1000, -1000, 307, 1460, -1000, -1000, 3243, -1000, 378, 3943,
	141, -1000, -1000, -1000, 170, 4332, -1000, 3171, 123, -1000,
	3603, -1000, 3, 4332, 1103, 369, 393, 177, -1000, -1000,
	174, -1000, -1000, -1000, 4257, 4257, -1000, 390, 3819, -1000,
	2162, 3099, -1000, -1000, -1000, -1000, 435, 4332, 3027, 2955,
	322, -1000, -1000, 4257, 384, 67, -1000, 44, -9, -1000,
	4257, 393, 4332, -1000, 328, 1166, 3943, 4332, 3819, 321,
	300, -1000, -1000, -1000, -1000, -1000, -1000, 4332, -1000, 315,
	300, 2883, -1000, 265, -1000, 1946, -1000, -1000, 389, 3819,
	448, -1000, -1000, -1000, 441, -10, 2811, -20, 3603, 1917,
	155, 238, -1000, 3819, 1144, 942, -1000, 3819, -1000, 328,
	3603, -1000, 379, -1000, 2306, 2739, 3603, 341, 37, -1000,
	-1000, -1000, -1000, 328, -1000, 3819, 3819, -1000, -1000, -1000,
	2667, 384, 3603, -1000, 3943, -1000, -1000, 202, 4332, 220,
	101, 378, 328, -1000, 308, -1000, 3603, 1460, 1460, -1000,
	297, -1000, 68, 3943, 328, -5, -1000, -1000, -1000, -1000,
	-27, 4257, -1000, 3747, 328, 332, -1000, 328, 3603, 3603,
	-1000, -1000, -1000, -1000, 3603, 14, 432, -1000, -1000, -1000,
	255, 204, 2595, -1000, 3603, 70, 4332, -1000, -1000, 86,
	-1000, 3819, 200, -1000, 290, 300, 268, 300, -1000, -1000,
	-1000, 4257, -1000, 1847, 328, 3603, 2523, -1000, -1000, -1000,
	-1000, 3603, 3603, 3603, -1000, -1000, -1000, -1000, 70, 4257,
	328, -1000, -1000, 260, -1000, 229, 146, 754, -1000, -1000,
	-1000, 3603, 3603, 3603, 2090, 2013, 2451, 1000, -1000, -1000,
	-1000, -1000, -1000, 371, 3819, -1000, -1000, 366, -1000, 70,
	-1000, -1000, 3819, -1000, 328, 3531, -1000, 70, 328, 3531,
	3531, 3531,
}
var RubyPgo = []int{

	0, 542, 0, 287, 541, 18, 10, 539, 537, 536,
	535, 8, 39, 534, 11, 531, 6, 528, 527, 525,
	1237, 524, 587, 966, 522, 520, 519, 518, 517, 516,
	515, 514, 512, 511, 9, 133, 510, 509, 1526, 12,
	38, 508, 504, 24, 503, 502, 3, 19, 500, 499,
	498, 496, 495, 494, 493, 492, 490, 489, 1420, 485,
	4, 22, 23, 7, 483, 15, 17, 48, 1, 482,
	14, 481, 5, 480, 13, 20, 16, 479, 478, 477,
	655,
}
var RubyR1 = []int{

	0, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 79, 79, 80, 80, 58, 58, 58, 58, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 31, 31, 31,
	31, 31, 31, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 17, 17, 43, 15, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 24, 61, 61, 61, 61, 72,
	72, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	14, 74, 74, 68, 68, 25, 25, 25, 25, 25,
	25, 25, 25, 65, 65, 65, 76, 76, 76, 34,
	34, 34, 34, 32, 32, 33, 36, 38, 38, 38,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 18,
	18, 18, 75, 75, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 35, 35,
	22, 22, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 8, 3,
	1, 78, 78, 78, 78, 78, 78, 78, 4, 4,
	4, 66, 66, 73, 73, 73, 6, 6, 6, 6,
	6, 6, 62, 71, 71, 71, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 63, 63, 63,
	63, 59, 59, 59, 9, 19, 19, 19, 19, 11,
	11, 11, 11, 11, 11, 11, 11, 77, 77, 69,
	69, 60, 60, 26, 26, 27, 28, 28, 28, 28,
	30, 30, 30, 29, 29, 29, 12, 44, 44, 44,
	67, 67, 67, 67, 67, 45, 45, 45, 45, 45,
	46, 46, 46, 46, 42, 41, 10, 40, 40, 40,
	40, 39, 39, 5, 7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 6, 7,
	1, 2, 6, 6, 2, 3, 2, 3, 4, 5,
	4, 3, 4, 5, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 6, 6,
	7, 6, 6, 8, 4, 5, 8, 1, 4, 1,
	3, 0, 1, 1, 1, 1, 4, 4, 4, 4,
	2, 1, 3, 0, 2, 6, 7, 8, 8, 9,
	9, 6, 7, 1, 3, 3, 0, 1, 3, 1,
	2, 3, 2, 4, 6, 5, 4, 1, 2, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 9, 6, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 3, 3, 3, 3, 4, 3, 3, 3, 4,
	3, 3, 3, 4, 3, 3, 3, 4, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 5, 1,
	1, 0, 1, 1, 1, 4, 4, 4, 3, 5,
	5, 3, 7, 3, 7, 8, 3, 4, 5, 5,
	5, 6, 3, 0, 1, 3, 4, 5, 3, 3,
	3, 3, 3, 5, 6, 5, 3, 4, 3, 3,
	2, 0, 2, 2, 3, 4, 6, 8, 6, 2,
	3, 5, 5, 5, 4, 4, 4, 1, 3, 0,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 1,
	1, 3, 3, 1, 3, 3, 5, 5, 5, 3,
	0, 2, 2, 2, 2, 5, 6, 5, 6, 5,
	4, 3, 3, 2, 4, 4, 2, 5, 7, 4,
	6, 4, 5, 3, 3,
}
var RubyChk = []int{

	-1000, -64, 62, 63, 78, -2, 62, 63, 78, -20,
	-25, -32, -36, -33, -16, -18, -37, -13, -19, -26,
	-44, -40, -28, -29, -30, -43, -5, -27, -12, -7,
	-21, -8, -4, -38, -23, -24, -9, -10, -48, -49,
	-50, -51, -15, -42, -41, -31, 20, 26, 27, 7,
	10, -35, -22, 12, -47, -75, 22, 25, 31, 39,
	29, 30, 43, 38, 34, 35, 37, 45, 8, 6,
	-17, 77, 76, -3, -1, 71, 73, 11, 9, 13,
	42, 51, 52, 54, 56, 57, -52, -53, -54, -55,
	-56, -57, 75, 16, 46, 47, 63, 62, 78, 22,
	25, 29, 32, 65, 48, 49, 4, 53, 55, 57,
	67, 68, 66, 25, 69, 40, 41, 58, 25, 50,
	48, 71, 59, 60, 22, 25, 65, 7, -3, 4,
	-38, 4, 10, -38, 13, -61, -6, -70, 71, 50,
	59, 60, 15, -74, 19, 73, -20, -16, -14, -66,
	-23, 7, 10, -35, -22, 12, 18, 13, 71, 11,
	50, 59, 60, 71, 50, 59, 60, 15, 50, 59,
	60, 15, 50, 59, 60, 50, 15, 50, 15, -2,
	-2, -58, -72, -20, -38, 7, 10, 12, -35, -22,
	-2, -2, -20, -80, -72, -12, -16, -20, 22, 25,
	22, 25, 8, 16, -80, -80, -70, 13, -20, -59,
	-6, 73, -2, -2, -20, -20, -20, 7, 10, 75,
	-2, -2, -2, -20, 7, -20, -20, -80, -20, -2,
	-20, -20, -20, -20, -2, -20, -80, -80, -20, -2,
	-2, -20, -74, -20, -2, -2, -2, -2, 7, -65,
	65, -76, 13, -34, 7, 57, 18, 65, -65, -58,
	48, -20, -58, -80, -6, -6, 15, -20, -5, -74,
	-20, -43, -12, -40, -20, -12, -20, -12, 7, -35,
	-22, 57, 15, -58, -62, 66, -80, 5, 15, 71,
	-20, -80, -20, -5, -74, -2, -2, -2, -20, -2,
	-2, -2, 7, -35, -22, 57, -2, -2, -2, 7,
	-35, -22, 57, -2, -2, -2, -47, -2, 7, -35,
	-22, 57, -75, 7, 7, -58, 62, 63, 62, 63,
	-2, -69, 15, 62, 62, -80, 62, -39, 44, -2,
	-2, -2, -2, 8, -78, -20, -16, -14, 74, -66,
	-73, -20, 7, -80, -2, 63, 14, -80, 7, 10,
	-6, -61, 50, 71, 13, -20, -20, 64, -20, -20,
	72, 15, 72, -6, -58, 7, 15, -76, 57, 50,
	7, 7, 7, -58, 21, -38, -58, 21, -70, -80,
	72, 72, 72, 7, -80, -20, 21, -58, -71, 7,
	-58, -62, -23, -20, -80, -20, -70, 72, 72, 72,
	72, 7, 7, 7, 71, 71, 21, -63, 24, 23,
	-58, -58, 21, 23, 33, -11, 32, -20, -67, -67,
	-39, 21, 23, 44, -72, -80, 15, -80, -80, 15,
	64, -70, -20, -6, -2, -20, -80, -20, 50, -68,
	-60, 33, -11, -65, -34, 14, 14, -20, -65, -68,
	-60, -58, 21, -80, 15, -20, -16, -14, -66, 50,
	15, -14, 21, 66, 15, -80, -58, -80, -58, -20,
	72, -80, 50, 50, -20, -20, 21, 24, 23, -2,
	-58, 21, -63, 21, -58, -58, -58, -77, 5, -38,
	21, 62, 63, -2, -45, 22, 25, 21, 21, 23,
	-58, -72, -58, 72, -80, 74, 74, -80, -20, -80,
	72, -70, -2, 21, -68, -11, -58, -58, -58, 21,
	-68, 21, 14, -80, -2, 7, 7, 74, 74, 74,
	-80, 5, 14, -80, -2, 72, 72, -2, -58, -58,
	21, 21, 33, 21, -58, 5, 15, 7, -35, -22,
	-2, -2, -58, 21, -58, -80, -20, -16, -14, 7,
	14, 50, -80, 21, -68, -60, -68, -60, 21, -6,
	-14, 71, 74, -20, -2, -58, -58, 7, -35, -22,
	-38, -58, -58, -58, 62, 62, 63, 21, -80, 64,
	-2, 14, 21, -68, 21, -68, -80, -20, -79, 15,
	21, -58, -58, -58, -67, -67, -67, -20, 21, 21,
	14, 72, 21, -46, 24, 23, 21, -46, 21, -80,
	15, 21, 24, 23, -2, -67, 21, -80, -2, -67,
	-67, -67,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 0, 0, 0, 22,
	23, 25, 26, 24, 0, 0, 0, 0, 15, 284,
	0, 0, 13, 289, 293, 290, 285, 0, 19, 20,
	21, 27, 28, 29, 30, 13, 13, 159, 80, 261,
	0, 0, 0, 0, 0, 0, 47, 48, 49, 50,
	51, 52, 0, 74, 219, 220, 5, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 13, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 146,
	15, 0, 157, 15, -2, 84, 86, 94, 13, 0,
	0, 0, 0, 117, 15, 13, 122, 123, 124, 125,
	35, 22, 23, 25, 26, 24, 0, 13, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 15,
	0, 279, 283, 119, 34, 22, 23, 24, 25, 26,
	0, 0, 13, 0, 286, 287, 288, 119, 0, 0,
	0, 0, 0, 75, 221, 0, 81, -2, 122, 0,
	316, 13, 208, 209, 210, 211, 77, 188, 189, 0,
	248, 256, 299, 76, 87, 96, 98, 0, 212, 213,
	214, 215, 216, 217, 250, 0, 0, 0, 323, 252,
	168, 97, 0, 131, 180, 187, 249, 251, 91, 15,
	0, 143, 146, 147, 149, 0, 0, 0, 15, 0,
	0, 15, 0, 121, 85, 95, 13, 131, 0, 0,
	160, 161, 162, 163, 174, 175, 181, 182, 192, 193,
	194, 0, 13, 0, 15, 243, 15, 0, 13, 13,
	130, 121, 131, 0, 0, 164, 176, 183, 0, 165,
	177, 184, 196, 197, 198, 0, 166, 178, 185, 200,
	201, 202, 0, 167, 179, 186, 169, 170, 204, 205,
	206, 0, 171, 0, 0, 0, 15, 15, 16, 17,
	18, 0, 0, 300, 300, 0, 14, 0, 0, 294,
	295, 291, 292, 324, 13, 222, 223, 224, 228, 13,
	13, 0, -2, 121, 262, 263, 264, 15, 190, 191,
	88, 90, 0, 13, -2, 131, 114, 0, 314, 315,
	106, 0, 107, 92, 133, 146, 0, 0, 0, 0,
	150, 152, 146, 133, 153, 15, 0, 156, 13, 0,
	99, 102, 104, 195, 0, 132, 236, 0, 0, 244,
	13, 15, -2, 231, 0, 131, 13, 100, 103, 105,
	101, 199, 203, 207, 0, 0, 246, 0, 0, 15,
	0, 0, 265, 15, 15, 280, 15, 120, 0, 0,
	0, 319, 15, 0, 15, 0, 13, 0, 0, 13,
	0, 13, 0, 89, 93, 0, 121, 296, 0, 0,
	133, 15, 281, 15, 148, 144, 145, 151, 15, 0,
	133, 0, 155, 0, 13, 126, 127, 128, 129, 0,
	0, 118, 237, 242, 0, 0, 0, 0, 13, 0,
	99, 0, 13, 0, 0, 0, 247, 0, 15, 15,
	260, 253, 0, 255, 0, 0, 269, 15, 0, 277,
	297, 301, 302, 303, 304, 0, 0, 298, 317, 15,
	0, 15, 13, 218, 0, 229, 230, 0, 233, 0,
	108, 13, 112, 135, 0, 282, 134, 133, 133, 141,
	0, 154, 78, 0, 109, 0, 245, 238, 239, 240,
	0, 0, 83, 0, 111, 0, 173, 15, 258, 259,
	254, 266, 15, 268, 270, 0, 0, 15, 15, 15,
	15, 0, 0, 320, 13, 321, 225, 226, 227, 0,
	82, 0, 0, 136, 0, 133, 0, 133, 142, 79,
	-2, 0, 241, 11, 110, 257, 0, 15, 15, 15,
	278, 274, 275, 276, 300, 15, 15, 318, 322, 0,
	113, 115, 137, 0, 138, 0, 0, 0, 232, 12,
	267, 271, 272, 273, 0, 0, 0, 13, 139, 140,
	116, 172, 305, 0, 0, 300, 307, 0, 309, 234,
	13, 306, 0, 300, 300, 313, 308, 235, 300, 311,
	312, 310,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:227
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:229
		{
		}
	case 3:
		//line parser.y:231
		{
		}
	case 4:
		//line parser.y:233
		{
		}
	case 5:
		//line parser.y:235
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:237
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:239
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:245
		{
		}
	case 11:
		//line parser.y:247
		{
		}
	case 12:
		//line parser.y:248
		{
		}
	case 13:
		//line parser.y:250
		{
		}
	case 14:
		//line parser.y:251
		{
		}
	case 15:
		//line parser.y:254
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:256
		{
		}
	case 17:
		//line parser.y:258
		{
		}
	case 18:
		//line parser.y:260
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		//line parser.y:271
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 75:
		//line parser.y:273
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 76:
		//line parser.y:281
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:284
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 78:
		//line parser.y:287
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:296
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:306
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:312
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 82:
		//line parser.y:320
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:329
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:338
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:347
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:357
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:367
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:376
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:387
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:398
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:408
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:418
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:429
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:442
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:451
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:461
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:471
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:481
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:493
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:503
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:513
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:523
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:533
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:543
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:553
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:563
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:573
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:583
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 109:
		//line parser.y:598
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 110:
		//line parser.y:608
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 111:
		//line parser.y:618
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 112:
		//line parser.y:628
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 113:
		//line parser.y:638
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 114:
		//line parser.y:653
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 115:
		//line parser.y:665
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 116:
		//line parser.y:667
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 117:
		//line parser.y:669
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 118:
		//line parser.y:671
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:674
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:676
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:678
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 122:
		//line parser.y:680
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:682
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:684
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:686
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 126:
		//line parser.y:693
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:695
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:697
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:699
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 130:
		//line parser.y:709
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 131:
		//line parser.y:720
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 132:
		//line parser.y:722
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:726
		{
			RubyVAL.genericSlice = nil
		}
	case 134:
		//line parser.y:728
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 135:
		//line parser.y:731
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 136:
		//line parser.y:742
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 137:
		//line parser.y:754
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 138:
		//line parser.y:766
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 139:
		//line parser.y:778
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 140:
		//line parser.y:791
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 141:
		//line parser.y:804
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 142:
		//line parser.y:815
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 143:
		//line parser.y:829
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 144:
		//line parser.y:831
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 145:
		//line parser.y:833
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 146:
		//line parser.y:835
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 147:
		//line parser.y:837
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 148:
		//line parser.y:839
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 149:
		//line parser.y:842
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 150:
		//line parser.y:844
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 151:
		//line parser.y:846
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 152:
		//line parser.y:848
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 153:
		//line parser.y:852
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 154:
		//line parser.y:862
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 155:
		//line parser.y:874
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 156:
		//line parser.y:887
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 157:
		//line parser.y:898
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 158:
		//line parser.y:907
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 159:
		//line parser.y:926
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 160:
		//line parser.y:944
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 161:
		//line parser.y:953
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 162:
		//line parser.y:959
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 163:
		//line parser.y:965
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 164:
		//line parser.y:967
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 165:
		//line parser.y:976
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:985
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:994
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 168:
		//line parser.y:996
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 169:
		//line parser.y:999
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 170:
		//line parser.y:1008
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1017
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1027
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 173:
		//line parser.y:1042
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 174:
		//line parser.y:1048
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1057
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1063
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1072
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 178:
		//line parser.y:1081
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 179:
		//line parser.y:1090
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 180:
		//line parser.y:1092
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 181:
		//line parser.y:1101
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1110
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 183:
		//line parser.y:1116
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 184:
		//line parser.y:1125
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 185:
		//line parser.y:1134
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1143
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 187:
		//line parser.y:1145
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 188:
		//line parser.y:1152
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 189:
		//line parser.y:1158
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 190:
		//line parser.y:1165
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 191:
		//line parser.y:1171
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 192:
		//line parser.y:1178
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 193:
		//line parser.y:1180
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 194:
		//line parser.y:1182
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 195:
		//line parser.y:1184
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 196:
		//line parser.y:1187
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1189
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1191
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1193
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1196
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1198
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1200
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1202
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1205
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1207
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1209
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 207:
		//line parser.y:1211
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 208:
		//line parser.y:1215
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 209:
		//line parser.y:1217
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 210:
		//line parser.y:1219
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 211:
		//line parser.y:1221
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 212:
		//line parser.y:1224
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 213:
		//line parser.y:1235
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 214:
		//line parser.y:1246
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 215:
		//line parser.y:1257
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 216:
		//line parser.y:1268
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 217:
		//line parser.y:1279
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 218:
		//line parser.y:1290
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 219:
		//line parser.y:1292
		{
		}
	case 220:
		//line parser.y:1293
		{
		}
	case 221:
		//line parser.y:1295
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 222:
		//line parser.y:1297
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 223:
		//line parser.y:1299
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1301
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1303
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1305
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 227:
		//line parser.y:1307
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 228:
		//line parser.y:1310
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 229:
		//line parser.y:1312
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 230:
		//line parser.y:1316
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 231:
		//line parser.y:1325
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 232:
		//line parser.y:1329
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 233:
		//line parser.y:1334
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 234:
		//line parser.y:1341
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 235:
		//line parser.y:1348
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 236:
		//line parser.y:1356
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 237:
		//line parser.y:1361
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 238:
		//line parser.y:1366
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 239:
		//line parser.y:1371
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 240:
		//line parser.y:1376
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 241:
		//line parser.y:1381
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 242:
		//line parser.y:1390
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 243:
		//line parser.y:1392
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 244:
		//line parser.y:1394
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 245:
		//line parser.y:1396
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 246:
		//line parser.y:1399
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 247:
		//line parser.y:1408
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1418
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1427
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1436
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 251:
		//line parser.y:1445
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1454
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1463
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1472
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1482
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 256:
		//line parser.y:1491
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 257:
		//line parser.y:1502
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 258:
		//line parser.y:1511
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 259:
		//line parser.y:1519
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 260:
		//line parser.y:1527
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 261:
		//line parser.y:1535
		{
		}
	case 262:
		//line parser.y:1536
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 263:
		//line parser.y:1537
		{
		}
	case 264:
		//line parser.y:1540
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 265:
		//line parser.y:1543
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 266:
		//line parser.y:1552
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 267:
		//line parser.y:1562
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 268:
		//line parser.y:1572
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 269:
		//line parser.y:1582
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 270:
		//line parser.y:1584
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 271:
		//line parser.y:1598
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 272:
		//line parser.y:1614
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 273:
		//line parser.y:1630
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 274:
		//line parser.y:1646
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 275:
		//line parser.y:1656
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 276:
		//line parser.y:1666
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 277:
		//line parser.y:1678
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 278:
		//line parser.y:1680
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 279:
		//line parser.y:1683
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 280:
		//line parser.y:1685
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 281:
		//line parser.y:1688
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 282:
		//line parser.y:1690
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 283:
		//line parser.y:1693
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 284:
		//line parser.y:1700
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 285:
		//line parser.y:1702
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 286:
		//line parser.y:1705
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 287:
		//line parser.y:1713
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 288:
		//line parser.y:1715
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 289:
		//line parser.y:1717
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 290:
		//line parser.y:1721
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 291:
		//line parser.y:1723
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 292:
		//line parser.y:1725
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 293:
		//line parser.y:1729
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 294:
		//line parser.y:1731
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 295:
		//line parser.y:1733
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 296:
		//line parser.y:1737
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 297:
		//line parser.y:1748
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 298:
		//line parser.y:1754
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 299:
		//line parser.y:1761
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 300:
		//line parser.y:1768
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 301:
		//line parser.y:1770
		{
		}
	case 302:
		//line parser.y:1772
		{
		}
	case 303:
		//line parser.y:1774
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 304:
		//line parser.y:1776
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 305:
		//line parser.y:1779
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 306:
		//line parser.y:1787
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 307:
		//line parser.y:1796
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 308:
		//line parser.y:1804
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 309:
		//line parser.y:1813
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 310:
		//line parser.y:1822
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 311:
		//line parser.y:1830
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 312:
		//line parser.y:1838
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 313:
		//line parser.y:1846
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 314:
		//line parser.y:1855
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 315:
		//line parser.y:1858
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 316:
		//line parser.y:1861
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 317:
		//line parser.y:1868
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 318:
		//line parser.y:1874
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 319:
		//line parser.y:1880
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 320:
		//line parser.y:1886
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 321:
		//line parser.y:1893
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 322:
		//line parser.y:1895
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 323:
		//line parser.y:1898
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 324:
		//line parser.y:1905
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	}
	goto Rubystack /* stack new state and value */
}

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SPECIAL_CHAR_REF = 57349
const CAPITAL_REF = 57350
const LPAREN = 57351
const RPAREN = 57352
const COMMA = 57353
const NamespacedModule = 57354
const DO = 57355
const DEF = 57356
const END = 57357
const IF = 57358
const ELSE = 57359
const ELSIF = 57360
const UNLESS = 57361
const CLASS = 57362
const MODULE = 57363
const FOR = 57364
const WHILE = 57365
const UNTIL = 57366
const BEGIN = 57367
const RESCUE = 57368
const ENSURE = 57369
const BREAK = 57370
const NEXT = 57371
const REDO = 57372
const RETRY = 57373
const RETURN = 57374
const YIELD = 57375
const AND = 57376
const OR = 57377
const LAMBDA = 57378
const CASE = 57379
const WHEN = 57380
const TRUE = 57381
const FALSE = 57382
const LESSTHAN = 57383
const GREATERTHAN = 57384
const EQUALTO = 57385
const BANG = 57386
const COMPLEMENT = 57387
const BINARY_PLUS = 57388
const UNARY_PLUS = 57389
const BINARY_MINUS = 57390
const UNARY_MINUS = 57391
const STAR = 57392
const RANGE = 57393
const OR_EQUALS = 57394
const WHITESPACE = 57395
const NEWLINE = 57396
const SEMICOLON = 57397
const COLON = 57398
const DOT = 57399
const PIPE = 57400
const SLASH = 57401
const AMPERSAND = 57402
const QUESTIONMARK = 57403
const CARET = 57404
const LBRACKET = 57405
const RBRACKET = 57406
const LBRACE = 57407
const RBRACE = 57408
const DOLLARSIGN = 57409
const ATSIGN = 57410
const FILE_CONST_REF = 57411
const LINE_CONST_REF = 57412
const EOF = 57413

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1421

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 126,
	10, 111,
	11, 111,
	-2, 240,
	-1, 315,
	54, 13,
	66, 13,
	-2, 33,
	-1, 328,
	10, 111,
	11, 111,
	-2, 240,
}

const RubyNprod = 294
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4365

var RubyAct = []int{

	295, 413, 5, 547, 165, 32, 379, 222, 414, 218,
	302, 14, 128, 220, 127, 231, 133, 26, 54, 25,
	301, 389, 370, 364, 354, 2, 3, 283, 101, 276,
	467, 522, 187, 28, 188, 301, 270, 301, 95, 301,
	137, 96, 4, 251, 150, 377, 241, 492, 137, 473,
	301, 471, 122, 125, 152, 334, 162, 163, 110, 111,
	167, 168, 469, 334, 149, 99, 100, 171, 135, 334,
	102, 286, 103, 279, 104, 112, 93, 92, 182, 183,
	273, 98, 107, 105, 106, 223, 150, 254, 435, 88,
	114, 88, 181, 94, 189, 151, 192, 193, 88, 144,
	181, 376, 146, 149, 200, 88, 149, 301, 371, 205,
	535, 301, 115, 429, 210, 258, 355, 214, 215, 216,
	432, 258, 333, 50, 119, 301, 427, 303, 156, 224,
	438, 226, 212, 147, 437, 517, 411, 157, 233, 225,
	156, 144, 148, 301, 146, 180, 245, 244, 265, 266,
	247, 268, 269, 145, 274, 275, 233, 280, 281, 282,
	261, 257, 264, 263, 248, 250, 117, 431, 95, 118,
	153, 96, 141, 304, 305, 306, 307, 155, 144, 287,
	319, 146, 141, 301, 95, 141, 141, 96, 310, 95,
	233, 114, 96, 428, 318, 145, 240, 242, 223, 341,
	228, 221, 116, 141, 141, 141, 529, 530, 325, 153,
	326, 95, 147, 115, 96, 113, 223, 174, 154, 221,
	175, 141, 528, 141, 141, 427, 141, 299, 141, 141,
	141, 141, 145, 141, 346, 340, 141, 95, 141, 141,
	96, 172, 224, 95, 173, 146, 96, 141, 161, 219,
	237, 428, 225, 141, 141, 141, 252, 159, 476, 350,
	224, 178, 462, 141, 463, 392, 554, 393, 237, 141,
	225, 95, 297, 141, 96, 298, 271, 245, 244, 277,
	160, 291, 292, 284, 536, 394, 336, 481, 394, 158,
	504, 402, 384, 478, 385, 387, 400, 505, 387, 101,
	237, 141, 237, 387, 387, 386, 525, 562, 395, 559,
	558, 391, 557, 124, 559, 558, 506, 73, 397, 141,
	161, 390, 141, 501, 359, 443, 442, 339, 408, 110,
	111, 141, 141, 255, 452, 490, 99, 100, 124, 489,
	233, 102, 73, 103, 409, 104, 420, 416, 415, 417,
	339, 553, 98, 107, 105, 106, 109, 123, 141, 141,
	441, 124, 443, 442, 308, 73, 406, 368, 367, 368,
	349, 350, 323, 190, 324, 191, 121, 488, 120, 141,
	486, 444, 375, 141, 141, 374, 373, 363, 356, 447,
	457, 457, 343, 453, 242, 407, 342, 338, 289, 465,
	288, 217, 195, 359, 451, 474, 314, 362, 296, 313,
	1, 179, 477, 87, 86, 85, 84, 83, 423, 82,
	40, 141, 479, 39, 38, 37, 53, 141, 487, 479,
	458, 20, 42, 43, 21, 141, 485, 101, 16, 495,
	12, 141, 13, 498, 11, 44, 24, 23, 485, 22,
	27, 19, 237, 10, 141, 34, 29, 18, 141, 15,
	507, 508, 41, 17, 36, 141, 35, 110, 111, 30,
	68, 31, 67, 0, 99, 100, 141, 0, 101, 102,
	514, 103, 519, 104, 112, 0, 0, 0, 0, 0,
	98, 107, 105, 106, 0, 523, 0, 369, 0, 0,
	141, 141, 0, 0, 0, 0, 0, 0, 110, 111,
	0, 526, 0, 0, 0, 99, 100, 0, 141, 0,
	102, 51, 103, 0, 104, 112, 0, 0, 479, 141,
	0, 98, 107, 105, 106, 543, 0, 0, 353, 0,
	0, 457, 457, 457, 0, 551, 0, 0, 237, 560,
	540, 541, 542, 0, 0, 0, 0, 0, 0, 564,
	237, 0, 457, 0, 0, 0, 457, 457, 457, 0,
	142, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 565, 566, 142, 142, 0, 567, 0, 0, 0,
	0, 0, 237, 0, 141, 0, 0, 0, 0, 0,
	0, 142, 142, 142, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 142,
	0, 142, 142, 0, 142, 0, 142, 142, 142, 142,
	0, 142, 0, 0, 142, 0, 142, 142, 101, 141,
	0, 0, 0, 0, 141, 142, 141, 0, 238, 0,
	0, 142, 142, 142, 253, 0, 0, 0, 0, 141,
	97, 142, 0, 0, 0, 0, 238, 142, 110, 111,
	0, 142, 0, 0, 272, 99, 100, 278, 0, 0,
	102, 285, 103, 0, 104, 0, 0, 0, 0, 0,
	0, 98, 107, 105, 106, 109, 0, 0, 238, 142,
	238, 66, 139, 74, 140, 126, 0, 132, 73, 137,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	142, 0, 76, 0, 0, 90, 91, 0, 0, 130,
	77, 78, 101, 79, 0, 80, 81, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 142, 142, 0, 129,
	0, 138, 101, 89, 88, 70, 69, 0, 0, 0,
	0, 0, 110, 111, 0, 0, 0, 142, 33, 99,
	100, 142, 142, 0, 102, 0, 103, 0, 104, 0,
	0, 0, 110, 111, 0, 98, 107, 105, 106, 99,
	100, 0, 545, 0, 102, 0, 103, 0, 104, 0,
	0, 0, 0, 0, 0, 98, 107, 105, 106, 142,
	0, 0, 497, 0, 0, 142, 0, 136, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 136, 0, 142,
	136, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	238, 0, 142, 0, 0, 0, 142, 0, 136, 136,
	136, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 136, 0, 136, 136,
	0, 136, 0, 136, 136, 136, 136, 0, 136, 0,
	0, 136, 0, 136, 136, 0, 0, 0, 142, 142,
	0, 0, 136, 0, 0, 136, 0, 0, 136, 136,
	136, 0, 0, 0, 0, 0, 142, 0, 136, 0,
	0, 0, 0, 136, 136, 0, 0, 142, 136, 0,
	0, 0, 0, 0, 0, 0, 66, 317, 74, 140,
	75, 0, 0, 73, 0, 0, 238, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 315, 136, 238, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	90, 91, 0, 0, 136, 77, 78, 136, 79, 0,
	80, 81, 0, 0, 0, 301, 136, 136, 0, 258,
	238, 0, 142, 0, 71, 0, 72, 312, 89, 88,
	70, 69, 0, 0, 0, 142, 0, 0, 0, 0,
	101, 0, 0, 136, 136, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 9, 0, 142, 315, 136,
	110, 111, 142, 0, 142, 0, 0, 99, 100, 101,
	0, 0, 102, 0, 103, 0, 104, 142, 0, 0,
	0, 0, 0, 98, 107, 105, 106, 0, 0, 0,
	496, 0, 0, 0, 0, 0, 136, 0, 0, 110,
	111, 0, 136, 0, 134, 0, 99, 100, 0, 0,
	136, 102, 0, 103, 166, 104, 136, 169, 166, 0,
	0, 330, 98, 107, 105, 106, 0, 136, 0, 136,
	0, 0, 0, 136, 0, 184, 185, 186, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 194, 0, 196, 197, 0, 199, 0,
	201, 202, 203, 204, 0, 206, 0, 0, 209, 0,
	211, 213, 0, 0, 0, 136, 136, 0, 0, 229,
	0, 0, 232, 0, 176, 243, 246, 249, 0, 0,
	0, 0, 0, 136, 0, 134, 0, 0, 0, 0,
	232, 262, 0, 0, 136, 267, 0, 0, 66, 139,
	74, 140, 126, 537, 0, 73, 137, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 309, 316, 232, 136, 0, 0, 0, 76,
	0, 0, 90, 91, 0, 0, 170, 77, 78, 0,
	79, 134, 80, 81, 329, 0, 0, 177, 0, 0,
	0, 0, 0, 331, 332, 0, 260, 136, 138, 136,
	89, 88, 70, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 198, 101, 0, 0,
	351, 134, 136, 0, 0, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 52, 0, 136, 316, 366, 110, 111, 136,
	0, 136, 0, 259, 99, 100, 0, 0, 0, 102,
	0, 103, 0, 104, 136, 0, 0, 0, 0, 0,
	98, 107, 105, 106, 0, 0, 0, 372, 0, 0,
	0, 0, 0, 388, 300, 0, 0, 0, 0, 166,
	0, 143, 0, 0, 0, 0, 322, 398, 0, 0,
	0, 143, 0, 134, 143, 143, 0, 0, 0, 290,
	0, 0, 0, 0, 232, 0, 410, 0, 0, 0,
	358, 0, 143, 143, 143, 0, 0, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 425, 0,
	143, 0, 143, 143, 0, 143, 0, 143, 143, 143,
	143, 0, 143, 0, 0, 143, 352, 143, 143, 0,
	0, 0, 439, 440, 0, 0, 143, 164, 0, 239,
	357, 101, 143, 143, 143, 0, 0, 0, 0, 0,
	166, 0, 143, 0, 0, 0, 0, 239, 143, 0,
	0, 475, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 0, 99, 100,
	484, 0, 0, 102, 0, 103, 0, 104, 0, 239,
	143, 239, 484, 396, 98, 107, 105, 106, 399, 401,
	403, 335, 227, 0, 0, 230, 0, 0, 143, 0,
	0, 143, 0, 0, 0, 0, 0, 256, 0, 0,
	143, 143, 0, 0, 513, 0, 516, 0, 0, 0,
	0, 0, 0, 0, 0, 424, 0, 0, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 143, 143, 521,
	434, 0, 0, 436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 0,
	0, 533, 143, 143, 0, 0, 134, 0, 538, 0,
	0, 0, 468, 0, 0, 470, 0, 472, 0, 198,
	0, 544, 0, 0, 0, 0, 0, 0, 337, 0,
	0, 0, 0, 0, 0, 0, 344, 0, 0, 347,
	143, 0, 0, 0, 0, 0, 143, 0, 0, 0,
	0, 0, 494, 0, 143, 0, 0, 0, 0, 0,
	143, 101, 0, 0, 0, 0, 0, 361, 0, 365,
	0, 239, 0, 143, 0, 0, 108, 143, 0, 0,
	0, 512, 0, 97, 143, 0, 0, 0, 0, 0,
	0, 110, 111, 0, 0, 143, 0, 101, 99, 100,
	0, 382, 383, 102, 556, 103, 0, 104, 112, 0,
	0, 0, 0, 0, 98, 107, 105, 106, 109, 143,
	143, 0, 0, 0, 0, 0, 532, 110, 111, 0,
	0, 101, 365, 0, 99, 100, 0, 143, 0, 102,
	0, 103, 0, 104, 0, 0, 0, 0, 143, 198,
	98, 107, 105, 106, 0, 0, 421, 0, 0, 555,
	0, 110, 111, 0, 0, 0, 0, 239, 99, 100,
	0, 563, 0, 102, 433, 103, 0, 104, 534, 239,
	0, 0, 0, 0, 98, 107, 105, 106, 0, 0,
	0, 445, 0, 0, 0, 449, 0, 450, 0, 0,
	0, 0, 0, 464, 0, 466, 0, 0, 110, 111,
	0, 239, 0, 143, 0, 99, 100, 0, 0, 0,
	102, 0, 103, 0, 104, 480, 143, 0, 0, 0,
	0, 98, 107, 105, 106, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 499, 500, 0, 0, 0, 143, 0,
	0, 503, 0, 143, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 509, 0, 511, 0, 0, 143, 0,
	0, 0, 0, 66, 48, 74, 49, 75, 0, 0,
	73, 0, 45, 550, 459, 549, 548, 460, 46, 47,
	0, 59, 60, 57, 0, 0, 63, 64, 524, 65,
	62, 58, 0, 0, 76, 61, 527, 90, 91, 0,
	0, 0, 77, 78, 0, 79, 0, 80, 81, 0,
	0, 0, 455, 456, 0, 539, 0, 0, 0, 382,
	383, 71, 0, 72, 0, 89, 88, 70, 69, 66,
	48, 74, 49, 75, 0, 0, 73, 0, 45, 546,
	459, 549, 548, 460, 46, 47, 0, 59, 60, 57,
	0, 0, 63, 64, 0, 65, 62, 58, 0, 0,
	76, 61, 0, 90, 91, 0, 0, 0, 77, 78,
	0, 79, 0, 80, 81, 0, 0, 0, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 72,
	0, 89, 88, 70, 69, 66, 48, 74, 49, 75,
	0, 0, 73, 0, 45, 446, 55, 381, 380, 56,
	46, 47, 0, 59, 60, 57, 0, 0, 63, 64,
	0, 65, 62, 58, 0, 0, 76, 61, 0, 90,
	91, 0, 0, 0, 77, 78, 0, 79, 0, 80,
	81, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 72, 0, 89, 88, 70,
	69, 66, 48, 74, 49, 75, 0, 0, 73, 0,
	45, 378, 55, 381, 380, 56, 46, 47, 0, 59,
	60, 57, 0, 0, 63, 64, 0, 65, 62, 58,
	0, 0, 76, 61, 0, 90, 91, 0, 0, 0,
	77, 78, 0, 79, 0, 80, 81, 0, 0, 0,
	293, 294, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 72, 0, 89, 88, 70, 69, 66, 48, 74,
	49, 75, 0, 0, 73, 0, 45, 518, 55, 0,
	0, 56, 46, 47, 0, 59, 60, 57, 387, 0,
	63, 64, 0, 65, 62, 58, 0, 0, 76, 61,
	0, 90, 91, 0, 0, 0, 77, 78, 0, 79,
	0, 80, 81, 0, 0, 0, 293, 294, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 72, 0, 89,
	88, 70, 69, 66, 48, 74, 49, 75, 0, 0,
	73, 0, 45, 419, 55, 0, 0, 56, 46, 47,
	0, 59, 60, 57, 387, 0, 63, 64, 0, 65,
	62, 58, 0, 0, 76, 61, 0, 90, 91, 0,
	0, 0, 77, 78, 0, 79, 0, 80, 81, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 72, 0, 89, 88, 70, 69, 66,
	48, 74, 49, 75, 0, 0, 73, 0, 45, 412,
	55, 0, 0, 56, 46, 47, 0, 59, 60, 57,
	387, 0, 63, 64, 0, 65, 62, 58, 0, 0,
	76, 61, 0, 90, 91, 0, 0, 0, 77, 78,
	0, 79, 0, 80, 81, 0, 0, 0, 293, 294,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 72,
	0, 89, 88, 70, 69, 66, 48, 74, 49, 75,
	0, 0, 73, 0, 45, 0, 55, 0, 0, 56,
	46, 47, 0, 59, 60, 57, 0, 0, 63, 64,
	0, 65, 62, 58, 0, 0, 76, 61, 0, 90,
	91, 0, 0, 0, 77, 78, 0, 79, 0, 80,
	81, 0, 0, 0, 6, 7, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 72, 0, 89, 88, 70,
	69, 8, 66, 48, 74, 49, 75, 0, 0, 73,
	0, 45, 552, 459, 0, 0, 460, 46, 47, 0,
	59, 60, 57, 0, 0, 63, 64, 0, 65, 62,
	58, 0, 0, 76, 61, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 66, 48,
	74, 49, 75, 0, 0, 73, 0, 45, 531, 55,
	0, 0, 56, 46, 47, 0, 59, 60, 57, 0,
	0, 63, 64, 0, 65, 62, 58, 0, 0, 76,
	61, 0, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 48, 74, 49, 75, 0,
	0, 73, 0, 45, 510, 55, 0, 0, 56, 46,
	47, 0, 59, 60, 57, 0, 0, 63, 64, 0,
	65, 62, 58, 0, 0, 76, 61, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 0, 80, 81,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 72, 0, 89, 88, 70, 69,
	66, 48, 74, 49, 75, 0, 0, 73, 0, 45,
	502, 55, 0, 0, 56, 46, 47, 0, 59, 60,
	57, 0, 0, 63, 64, 0, 65, 62, 58, 0,
	0, 76, 61, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 66, 48, 74, 49,
	75, 0, 0, 73, 0, 45, 0, 55, 0, 0,
	56, 46, 47, 0, 59, 60, 57, 0, 0, 63,
	64, 0, 65, 62, 58, 0, 0, 76, 61, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 72, 491, 89, 88,
	70, 69, 66, 48, 74, 49, 75, 0, 0, 73,
	0, 45, 482, 55, 0, 0, 56, 46, 47, 0,
	59, 60, 57, 0, 0, 63, 64, 0, 65, 62,
	58, 0, 0, 76, 61, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 66, 48,
	74, 49, 75, 0, 0, 73, 0, 45, 461, 459,
	0, 0, 460, 46, 47, 0, 59, 60, 57, 0,
	0, 63, 64, 0, 65, 62, 58, 0, 0, 76,
	61, 0, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 0, 0, 0, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 48, 74, 49, 75, 0,
	0, 73, 0, 45, 454, 459, 0, 0, 460, 46,
	47, 0, 59, 60, 57, 0, 0, 63, 64, 0,
	65, 62, 58, 0, 0, 76, 61, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 0, 80, 81,
	0, 0, 0, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 72, 0, 89, 88, 70, 69,
	66, 48, 74, 49, 75, 0, 0, 73, 0, 45,
	448, 55, 0, 0, 56, 46, 47, 0, 59, 60,
	57, 0, 0, 63, 64, 0, 65, 62, 58, 0,
	0, 76, 61, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 66, 48, 74, 49,
	75, 0, 0, 73, 0, 45, 430, 55, 0, 0,
	56, 46, 47, 0, 59, 60, 57, 0, 0, 63,
	64, 0, 65, 62, 58, 0, 0, 76, 61, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 72, 0, 89, 88,
	70, 69, 66, 48, 74, 49, 75, 0, 0, 73,
	0, 45, 422, 55, 0, 0, 56, 46, 47, 0,
	59, 60, 57, 0, 0, 63, 64, 0, 65, 62,
	58, 0, 0, 76, 61, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 66, 48,
	74, 49, 75, 0, 0, 73, 0, 45, 360, 55,
	0, 0, 56, 46, 47, 0, 59, 60, 57, 0,
	0, 63, 64, 0, 65, 62, 58, 0, 0, 76,
	61, 0, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 48, 74, 49, 75, 0,
	0, 73, 0, 45, 348, 55, 0, 0, 56, 46,
	47, 0, 59, 60, 57, 0, 0, 63, 64, 0,
	65, 62, 58, 0, 0, 76, 61, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 0, 80, 81,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 72, 0, 89, 88, 70, 69,
	66, 48, 74, 49, 75, 0, 0, 73, 0, 45,
	345, 55, 0, 0, 56, 46, 47, 0, 59, 60,
	57, 0, 0, 63, 64, 0, 65, 62, 58, 0,
	0, 76, 61, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 66, 48, 74, 49,
	75, 0, 0, 73, 0, 45, 0, 459, 0, 0,
	460, 46, 47, 0, 59, 60, 57, 0, 0, 63,
	64, 0, 65, 62, 58, 0, 0, 76, 61, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 72, 0, 89, 88,
	70, 69, 66, 48, 74, 49, 75, 0, 0, 73,
	0, 45, 0, 55, 0, 0, 56, 46, 47, 0,
	59, 60, 57, 0, 0, 63, 64, 0, 65, 62,
	58, 0, 0, 76, 61, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 66, 48,
	74, 49, 75, 321, 0, 73, 0, 45, 0, 55,
	0, 0, 56, 46, 47, 0, 59, 60, 57, 0,
	0, 63, 64, 0, 65, 62, 58, 0, 0, 76,
	61, 0, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 0, 0, 0, 0, 320, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 48, 74, 49, 75, 0,
	0, 73, 0, 45, 0, 55, 0, 0, 56, 46,
	47, 0, 59, 60, 57, 0, 0, 63, 64, 0,
	65, 62, 58, 0, 0, 76, 61, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 0, 80, 81,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 72, 0, 89, 88, 70, 69,
	66, 48, 74, 49, 75, 0, 0, 73, 0, 45,
	0, 55, 0, 0, 56, 46, 47, 0, 59, 60,
	57, 0, 0, 63, 64, 0, 65, 62, 58, 0,
	0, 76, 61, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 66, 235, 74, 236,
	75, 0, 0, 73, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 301, 66, 235, 74, 236,
	75, 515, 0, 73, 71, 0, 72, 0, 89, 88,
	70, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 301, 66, 235, 74, 236,
	75, 493, 0, 73, 71, 0, 72, 0, 89, 88,
	70, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 301, 66, 139, 74, 140,
	75, 483, 0, 73, 71, 0, 72, 0, 89, 88,
	70, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 426, 0, 0, 71, 0, 72, 0, 89, 88,
	70, 69, 66, 139, 74, 140, 126, 0, 0, 73,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 66, 139,
	74, 140, 126, 405, 0, 73, 137, 0, 0, 0,
	260, 0, 138, 0, 89, 88, 70, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 90, 91, 0, 0, 130, 77, 78, 0,
	79, 0, 80, 81, 66, 139, 74, 140, 328, 0,
	0, 73, 137, 0, 0, 0, 260, 0, 138, 0,
	89, 88, 70, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 90, 91,
	0, 0, 327, 77, 78, 0, 79, 0, 80, 81,
	66, 317, 74, 140, 75, 0, 0, 73, 0, 0,
	0, 0, 71, 0, 138, 0, 89, 88, 70, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 301,
	66, 235, 74, 236, 75, 0, 0, 73, 71, 0,
	72, 312, 89, 88, 70, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 301,
	66, 139, 74, 140, 75, 311, 0, 73, 71, 0,
	72, 0, 89, 88, 70, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 66, 139, 74, 140,
	75, 0, 0, 73, 137, 0, 0, 0, 66, 235,
	74, 236, 75, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 76,
	80, 81, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 71, 0, 138, 0, 89, 88,
	70, 69, 0, 234, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 139, 74, 140, 126, 0,
	0, 73, 137, 0, 0, 0, 66, 139, 74, 140,
	75, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 76, 80, 81,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 260, 0, 138, 0, 89, 88, 70, 69,
	0, 0, 0, 0, 71, 0, 72, 0, 89, 88,
	70, 69, 66, 520, 74, 140, 75, 0, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 90, 91, 404, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 110, 111,
	0, 0, 0, 0, 0, 99, 100, 0, 0, 0,
	102, 0, 103, 0, 104, 0, 0, 0, 0, 0,
	0, 98, 107, 105, 106,
}
var RubyPact = []int{

	-29, 2290, -1000, -1000, -1000, 22, -1000, -1000, -1000, 1607,
	-1000, -1000, -1000, -1000, 196, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 150, -1000, 67, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 372, 353, 305, 696, 90,
	43, 166, 85, 246, 237, 3545, 3545, -1000, 4201, 3545,
	3545, 4201, 4201, 225, 201, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 252, -1000, 27, 3545, 3545, 4201,
	4201, 4201, -1000, -1000, -1000, -1000, -1000, -1000, 26, 367,
	-1000, -1000, -1000, -1000, -1000, 3545, 3545, 4201, 396, 4201,
	4201, -1000, 4201, 3545, 4201, 4201, 4201, 4201, 3545, 4201,
	-1000, -1000, 4201, 3545, 4201, 4201, 3545, 3545, 3545, 395,
	192, 210, 159, 4201, 233, -1000, 4123, 27, 35, 4201,
	4201, 4201, 37, 322, 1677, -1000, 49, 63, -1000, 4189,
	132, 40, -1000, -1000, 4123, 4201, -1000, 3545, 3545, 4201,
	3545, 3545, 30, 3545, 3545, 23, 3545, 3545, 3545, 21,
	394, 392, 195, 227, 3347, 261, 1677, 221, 173, 1677,
	89, 261, 3545, 3545, 3545, 3545, 3995, 3945, 4123, 3413,
	-1000, -1000, 195, 195, 1677, 1677, 1677, -1000, -1000, 366,
	-1000, -1000, 195, 195, 1677, 3899, 1677, 1677, 4045, 1677,
	195, 1677, 1677, 1677, 1677, 195, 1045, 4045, 4045, 1677,
	195, 1677, 58, 1417, 195, 195, 195, 27, -1000, 391,
	316, 79, -1000, 156, 390, 386, -1000, 3215, 305, 1677,
	3149, 360, 1677, -1000, 4201, 3853, 169, 1, 127, 97,
	-1000, -1000, -1000, 474, -40, 52, 634, -1000, -1000, 295,
	-1000, -1000, -1000, -1000, 382, 4111, 3083, -1000, 381, 931,
	4201, 358, 433, -42, 44, 195, 195, 1263, 195, 195,
	-1000, -1000, -1000, 380, 195, 195, -1000, -1000, -1000, 379,
	195, 195, 195, -1000, -1000, -1000, 376, 309, 38, -18,
	2026, -1000, -1000, -1000, -1000, 195, 277, 4201, -1000, -1000,
	89, -1000, 250, 4201, 195, 195, 195, 195, 307, 1677,
	-1000, 4201, -1000, 285, 280, 49, 4304, 3807, 356, 195,
	-1000, -1000, 57, -1000, -1000, 35, 27, 3545, 4123, 1677,
	4201, 1677, 1677, -1000, 4111, 93, -1000, 2224, 210, 79,
	339, 4201, -1000, -1000, 2158, -1000, -1000, 3017, -1000, 27,
	-1000, 1677, 3741, 182, -1000, -1000, -1000, 53, 1677, -1000,
	-1000, 2951, 109, -1000, -1000, 3347, 24, -1000, -1000, 91,
	-1000, -1000, 87, -1000, -1000, -1000, 4201, 4201, -1000, 345,
	3545, -1000, 1960, 2885, -1000, -1000, -1000, 330, 1677, 2819,
	2753, 247, -1000, -1000, 4201, 261, -34, -1000, 1677, -4,
	-1000, -15, -1000, -17, 3545, 4201, -1000, -1000, 195, 248,
	1677, 3545, -1000, 278, -1000, -1000, -1000, -1000, 1677, -1000,
	272, 2687, -1000, -1000, 3691, 1677, 374, 3545, 371, 333,
	-1000, -1000, 329, 2621, -19, 83, 3641, -1000, 3545, 1006,
	758, -1000, 3545, -1000, 195, 3347, -1000, 308, -1000, 2555,
	3347, 286, 310, -1000, -1000, -1000, -1000, 195, -1000, 3545,
	3545, -1000, -1000, -1000, 2489, 261, 3347, -1000, 3591, -1000,
	4045, -1000, 129, -1000, 195, 1677, -1000, 195, -1000, -1000,
	2092, -1000, -1000, 4267, 1677, -1000, -1000, 195, -32, -1000,
	-1000, -1000, -1000, 4201, 3479, 195, 240, -1000, 195, 3347,
	3347, -1000, -1000, 3347, 300, 305, -1000, 168, 152, 2423,
	-1000, 3347, 71, 1677, -1000, 4201, 1724, 54, -1000, 269,
	1183, 1677, 4201, 195, 3347, -1000, -1000, 3347, -1000, -1000,
	-1000, -1000, 71, 1677, 3545, 4201, -1000, -1000, 738, 3347,
	1894, 1828, 2357, 255, 1643, -1000, -1000, 297, 3545, -1000,
	-1000, 292, -1000, -1000, -1000, 71, -1000, -1000, 3545, -1000,
	195, 3281, -1000, 71, 195, 3281, 3281, 3281,
}
var RubyPgo = []int{

	0, 0, 472, 471, 17, 68, 470, 469, 466, 1292,
	464, 8, 33, 463, 462, 11, 459, 457, 1035, 456,
	521, 778, 455, 453, 451, 450, 449, 447, 446, 445,
	444, 442, 7, 123, 440, 438, 5, 10, 434, 433,
	432, 19, 431, 430, 3, 426, 425, 424, 423, 420,
	419, 417, 416, 415, 414, 413, 1359, 411, 1, 14,
	23, 6, 410, 9, 409, 21, 408, 15, 407, 4,
	406, 16, 18, 12, 13, 404, 364, 351, 1164,
}
var RubyR1 = []int{

	0, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 77, 77, 78, 78, 56, 56, 56, 56, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 29, 29, 29, 29, 29,
	29, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 41, 14, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 22, 59, 59, 59, 59, 69,
	69, 67, 67, 67, 67, 67, 67, 67, 73, 73,
	73, 73, 73, 71, 71, 71, 23, 23, 23, 23,
	23, 23, 63, 63, 74, 74, 74, 32, 32, 32,
	32, 30, 30, 31, 34, 36, 36, 36, 15, 15,
	15, 15, 15, 15, 15, 16, 16, 72, 72, 35,
	35, 35, 35, 35, 35, 35, 9, 9, 33, 33,
	20, 20, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 2, 6,
	7, 76, 76, 76, 76, 76, 76, 76, 3, 3,
	3, 3, 64, 64, 70, 70, 70, 5, 5, 5,
	5, 60, 68, 68, 68, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 61, 61, 61, 61,
	57, 57, 57, 8, 17, 17, 11, 11, 11, 11,
	75, 75, 66, 66, 58, 58, 24, 24, 25, 26,
	26, 28, 28, 28, 27, 27, 27, 12, 42, 42,
	65, 65, 65, 65, 65, 43, 43, 43, 43, 43,
	44, 44, 44, 44, 40, 39, 10, 38, 38, 38,
	38, 37, 37, 4,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 4, 5, 1, 4, 4, 2, 3,
	3, 4, 4, 5, 3, 4, 5, 2, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	6, 7, 6, 6, 4, 3, 7, 1, 5, 1,
	3, 0, 1, 1, 2, 4, 4, 5, 1, 1,
	4, 2, 5, 1, 3, 3, 5, 6, 7, 8,
	5, 6, 1, 3, 0, 1, 3, 1, 2, 3,
	2, 4, 6, 5, 4, 1, 2, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 9, 6, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 4, 3, 3, 3, 4,
	3, 3, 3, 4, 3, 3, 3, 4, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 1, 1,
	5, 0, 1, 1, 2, 4, 4, 5, 3, 5,
	5, 5, 3, 7, 3, 7, 8, 3, 4, 5,
	5, 3, 0, 1, 3, 4, 5, 3, 3, 3,
	3, 3, 5, 6, 5, 3, 4, 3, 3, 2,
	0, 2, 2, 3, 4, 6, 2, 3, 5, 4,
	1, 3, 0, 2, 1, 2, 2, 1, 1, 2,
	1, 1, 3, 3, 1, 3, 3, 5, 5, 5,
	0, 2, 2, 2, 2, 5, 6, 5, 6, 5,
	4, 3, 3, 2, 4, 4, 2, 5, 7, 4,
	6, 4, 5, 3,
}
var RubyChk = []int{

	-1000, -62, 54, 55, 71, -1, 54, 55, 71, -18,
	-23, -30, -34, -31, -15, -16, -35, -13, -17, -24,
	-42, -38, -26, -27, -28, -41, -4, -25, -12, -19,
	-7, -3, -36, -21, -22, -8, -10, -46, -47, -48,
	-49, -14, -40, -39, -29, 14, 20, 21, 6, 8,
	-33, -20, -9, -45, -72, 16, 19, 25, 33, 23,
	24, 37, 32, 28, 29, 31, 5, -2, -6, 70,
	69, 63, 65, 12, 7, 9, 36, 44, 45, 47,
	49, 50, -50, -51, -52, -53, -54, -55, 68, 67,
	39, 40, 55, 54, 71, 16, 19, 26, 57, 41,
	42, 4, 46, 48, 50, 59, 60, 58, 19, 61,
	34, 35, 51, 19, 41, 63, 52, 16, 19, 57,
	6, 4, -36, 4, 8, -36, 9, -59, -73, 63,
	43, 52, 11, -71, -18, -5, -21, 13, 65, 6,
	8, -33, -20, -9, 9, 63, 12, 43, 52, 63,
	43, 52, 11, 43, 52, 11, 43, 52, 43, 11,
	43, 11, -1, -1, -56, -69, -18, -1, -1, -18,
	-78, -69, 16, 19, 16, 19, -78, -78, 9, -57,
	-5, 65, -1, -1, -18, -18, -18, 6, 8, 68,
	6, 8, -1, -1, -18, 6, -18, -18, -78, -18,
	-1, -18, -18, -18, -18, -1, -18, -78, -78, -18,
	-1, -18, -71, -18, -1, -1, -1, 6, -63, 57,
	-74, 9, -32, 6, 50, 60, -63, -56, 41, -18,
	-56, -67, -18, -15, 60, 6, 8, -33, -20, -9,
	-5, 11, -5, -18, -4, -71, -18, -41, -12, -18,
	-12, 6, -33, -20, 50, 11, -56, -60, 58, -78,
	63, -67, -18, -4, -71, -1, -1, -18, -1, -1,
	6, -33, -20, 50, -1, -1, 6, -33, -20, 50,
	-1, -1, -1, 6, -33, -20, 50, -72, 6, 6,
	-56, 54, 55, 54, 55, -1, -66, 11, 54, 54,
	-78, 54, -37, 38, -1, -1, -1, -1, -76, -18,
	-15, 60, 66, -64, -70, -21, -18, 6, -67, -1,
	55, 10, -78, 6, 8, -73, -59, 43, 9, -18,
	56, -18, -18, 64, 11, 64, -5, -56, 6, 11,
	-74, 43, 6, 6, -56, 15, -36, -56, 15, 10,
	11, -18, -78, 64, 64, 64, 6, -78, -18, -5,
	15, -56, -68, 6, -60, -56, -18, 10, 11, 64,
	64, 64, 64, 6, 6, 6, 63, 63, 15, -61,
	18, 17, -56, -56, 15, 17, -11, 26, -18, -65,
	-65, -37, 15, 17, 38, -69, -78, 11, -18, -78,
	11, -78, 11, -78, 4, 56, 10, -5, -1, -67,
	-18, 43, 15, -58, -11, -63, -32, 10, -18, 15,
	-58, -56, 15, -5, -78, -18, 60, 43, 11, 60,
	15, 58, 11, -56, -78, 64, -78, 43, 43, -18,
	-18, 15, 18, 17, -1, -56, 15, -61, 15, -56,
	-56, -75, 4, -36, 15, 54, 55, -1, -43, 16,
	19, 15, 15, 17, -56, -69, -56, 64, -78, 66,
	-78, 66, -78, 66, -1, -18, 10, -1, 15, -11,
	-56, 15, 15, 60, -18, -15, 6, -1, 6, 6,
	6, 66, 66, 60, -78, -1, 64, 64, -1, -56,
	-56, 15, 15, -56, 4, 11, 6, -1, -1, -56,
	15, -56, -78, -18, -15, 60, -18, 6, 15, -58,
	6, -18, 63, -1, -56, 6, -36, -56, 54, 54,
	55, 15, -78, -18, 4, 56, 15, 10, -18, -56,
	-65, -65, -65, -1, -18, 64, 15, -44, 18, 17,
	15, -44, 15, -77, 11, -78, 11, 15, 18, 17,
	-1, -65, 15, -78, -1, -65, -65, -65,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 0, 0, 0, 20, 21,
	22, 23, 24, 0, 0, 0, 0, 15, 257, 0,
	0, 13, 260, 264, 261, 258, 19, 25, 26, 27,
	28, 13, 13, 147, 75, 240, 0, 0, 0, 0,
	0, 0, 45, 46, 47, 48, 49, 50, 0, 0,
	198, 199, 5, 6, 7, 0, 0, 0, 0, 0,
	0, 13, 0, 0, 0, 0, 0, 0, 0, 0,
	13, 13, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 134, 15, 0, 145, 15, -2, 78, 87, 13,
	0, 0, 0, 107, 118, 119, 33, 15, 13, 20,
	21, 22, 23, 24, 111, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 15, 0, 252, 256, 109, 0, 0, 13,
	0, 259, 0, 0, 0, 0, 201, 0, 111, 0,
	286, 13, 188, 189, 190, 191, 72, 168, 169, 0,
	166, 167, 227, 235, 71, 80, 88, 90, 0, 192,
	193, 194, 195, 196, 197, 229, 0, 0, 0, 293,
	231, 89, 0, 123, 165, 228, 230, 84, 15, 0,
	132, 134, 135, 137, 0, 0, 15, 0, 0, 15,
	0, 0, 112, 113, 0, 20, 21, 22, 23, 24,
	79, 13, 121, 123, 0, 0, 148, 149, 150, 159,
	160, 172, 173, 174, 0, 13, 0, 15, 222, 15,
	13, 0, 123, 0, 0, 151, 161, 0, 152, 162,
	176, 177, 178, 0, 153, 163, 180, 181, 182, 0,
	154, 164, 155, 184, 185, 186, 0, 156, 0, 0,
	0, 15, 15, 16, 17, 18, 0, 0, 270, 270,
	0, 14, 0, 0, 265, 266, 262, 263, 13, 202,
	203, 0, 208, 13, 13, -2, 0, 20, 0, 241,
	242, 243, 15, 170, 171, 81, 82, 0, -2, 104,
	0, 284, 285, 98, 0, 99, 85, 0, 134, 0,
	0, 0, 138, 140, 0, 141, 15, 0, 144, 73,
	13, 114, 0, 91, 94, 96, 175, 0, 124, 125,
	217, 0, 0, 223, 15, 13, 123, 77, 13, 92,
	95, 97, 93, 179, 183, 187, 0, 0, 225, 0,
	0, 15, 0, 0, 244, 15, 253, 15, 110, 0,
	0, 0, 289, 15, 0, 15, 0, 13, 204, 0,
	13, 0, 13, 0, 13, 0, 76, 83, 86, 0,
	267, 0, 126, 0, 254, 15, 136, 133, 139, 130,
	0, 0, 143, 74, 0, 120, 0, 0, 0, 0,
	218, 221, 0, 0, 0, 91, 0, 13, 0, 0,
	0, 226, 0, 15, 15, 239, 232, 0, 234, 0,
	246, 15, 0, 250, 268, 271, 272, 273, 274, 0,
	0, 269, 287, 15, 0, 15, 13, 200, 0, 209,
	0, 210, 0, 211, 212, 214, 105, 103, 127, 255,
	0, 131, 142, 0, 115, 116, 122, 100, 0, 108,
	224, 219, 220, 0, 0, 102, 0, 158, 15, 237,
	238, 233, 245, 247, 0, 0, 15, 15, 0, 0,
	290, 13, 291, 205, 206, 0, 0, 0, 128, 0,
	20, 117, 0, 101, 236, 15, 251, 249, 270, 15,
	15, 288, 292, 207, 13, 0, 129, 106, 0, 248,
	0, 0, 0, 11, 13, 157, 275, 0, 0, 270,
	277, 0, 279, 213, 12, 215, 13, 276, 0, 270,
	270, 283, 278, 216, 270, 281, 282, 280,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:214
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:216
		{
		}
	case 3:
		//line parser.y:218
		{
		}
	case 4:
		//line parser.y:220
		{
		}
	case 5:
		//line parser.y:222
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:224
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:226
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:232
		{
		}
	case 11:
		//line parser.y:234
		{
		}
	case 12:
		//line parser.y:235
		{
		}
	case 13:
		//line parser.y:237
		{
		}
	case 14:
		//line parser.y:238
		{
		}
	case 15:
		//line parser.y:241
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:243
		{
		}
	case 17:
		//line parser.y:245
		{
		}
	case 18:
		//line parser.y:247
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		//line parser.y:259
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 72:
		//line parser.y:262
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 73:
		//line parser.y:265
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 74:
		//line parser.y:272
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 75:
		//line parser.y:279
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 76:
		//line parser.y:283
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 77:
		//line parser.y:290
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 78:
		//line parser.y:297
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 79:
		//line parser.y:304
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 80:
		//line parser.y:311
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 81:
		//line parser.y:318
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 82:
		//line parser.y:326
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 83:
		//line parser.y:334
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 84:
		//line parser.y:342
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 85:
		//line parser.y:350
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 86:
		//line parser.y:358
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 87:
		//line parser.y:369
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 88:
		//line parser.y:376
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 89:
		//line parser.y:384
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 90:
		//line parser.y:392
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 91:
		//line parser.y:402
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 92:
		//line parser.y:410
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 93:
		//line parser.y:418
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 94:
		//line parser.y:426
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 95:
		//line parser.y:434
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 96:
		//line parser.y:442
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 97:
		//line parser.y:450
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 98:
		//line parser.y:458
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 99:
		//line parser.y:466
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:476
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 101:
		//line parser.y:484
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 102:
		//line parser.y:495
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 103:
		//line parser.y:503
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 104:
		//line parser.y:513
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 105:
		//line parser.y:523
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 106:
		//line parser.y:525
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 107:
		//line parser.y:527
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 108:
		//line parser.y:529
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 109:
		//line parser.y:532
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 110:
		//line parser.y:534
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 111:
		//line parser.y:536
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 112:
		//line parser.y:538
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:540
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:542
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 115:
		//line parser.y:549
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:551
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:553
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 118:
		//line parser.y:562
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:564
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:566
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:568
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:570
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 123:
		//line parser.y:573
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:575
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:577
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:581
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 127:
		//line parser.y:589
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 128:
		//line parser.y:598
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:607
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:617
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:625
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 132:
		//line parser.y:636
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 133:
		//line parser.y:638
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 134:
		//line parser.y:640
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 135:
		//line parser.y:642
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:644
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:647
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 138:
		//line parser.y:649
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 139:
		//line parser.y:651
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 140:
		//line parser.y:653
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 141:
		//line parser.y:657
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name: RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 142:
		//line parser.y:664
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 143:
		//line parser.y:674
		{
			if RubyS[Rubypt-3].operator != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + RubyS[Rubypt-3].operator + ")")
			}

			RubyVAL.genericValue = ast.EigenClass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 144:
		//line parser.y:686
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 145:
		//line parser.y:695
		{
			RubyVAL.genericValue = ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
		}
	case 146:
		//line parser.y:702
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(string)}, "")
			pieces := strings.Split(fullName, "::")

			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.Join(pieces[:len(pieces)-1], "::"),
				IsGlobalNamespace: false,
			}
		}
	case 147:
		//line parser.y:714
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(string), "::")
			namespace := strings.Join(pieces[:len(pieces)-1], "::")
			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.TrimPrefix(namespace, "::"),
				IsGlobalNamespace: true,
			}
		}
	case 148:
		//line parser.y:725
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 149:
		//line parser.y:732
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 150:
		//line parser.y:736
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 151:
		//line parser.y:740
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 152:
		//line parser.y:747
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 153:
		//line parser.y:754
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 154:
		//line parser.y:761
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 155:
		//line parser.y:769
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 156:
		//line parser.y:776
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 157:
		//line parser.y:784
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 158:
		//line parser.y:799
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 159:
		//line parser.y:805
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 160:
		//line parser.y:812
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 161:
		//line parser.y:816
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:823
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 163:
		//line parser.y:830
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 164:
		//line parser.y:837
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 165:
		//line parser.y:844
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 166:
		//line parser.y:847
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 167:
		//line parser.y:849
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 168:
		//line parser.y:852
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:854
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:857
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 171:
		//line parser.y:859
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 172:
		//line parser.y:862
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 173:
		//line parser.y:864
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 174:
		//line parser.y:866
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 175:
		//line parser.y:868
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 176:
		//line parser.y:871
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:873
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 178:
		//line parser.y:875
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 179:
		//line parser.y:877
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 180:
		//line parser.y:880
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:882
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 182:
		//line parser.y:884
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 183:
		//line parser.y:886
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 184:
		//line parser.y:889
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 185:
		//line parser.y:891
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 186:
		//line parser.y:893
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 187:
		//line parser.y:895
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 188:
		//line parser.y:898
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:899
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:900
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 191:
		//line parser.y:901
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 192:
		//line parser.y:904
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 193:
		//line parser.y:913
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 194:
		//line parser.y:922
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 195:
		//line parser.y:931
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:940
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 197:
		//line parser.y:949
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 198:
		//line parser.y:957
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 199:
		//line parser.y:958
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 200:
		//line parser.y:960
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 201:
		//line parser.y:962
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 202:
		//line parser.y:964
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 203:
		//line parser.y:966
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 204:
		//line parser.y:968
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 205:
		//line parser.y:975
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 206:
		//line parser.y:977
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:979
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 208:
		//line parser.y:987
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 209:
		//line parser.y:989
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 210:
		//line parser.y:997
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 211:
		//line parser.y:1005
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 212:
		//line parser.y:1008
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 213:
		//line parser.y:1015
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 214:
		//line parser.y:1023
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 215:
		//line parser.y:1030
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 216:
		//line parser.y:1037
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 217:
		//line parser.y:1045
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 218:
		//line parser.y:1047
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 219:
		//line parser.y:1054
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 220:
		//line parser.y:1058
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 221:
		//line parser.y:1061
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 222:
		//line parser.y:1063
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 223:
		//line parser.y:1065
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1067
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1070
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 226:
		//line parser.y:1077
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 227:
		//line parser.y:1085
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 228:
		//line parser.y:1092
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 229:
		//line parser.y:1099
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 230:
		//line parser.y:1106
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 231:
		//line parser.y:1113
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 232:
		//line parser.y:1120
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 233:
		//line parser.y:1127
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 234:
		//line parser.y:1135
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 235:
		//line parser.y:1142
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 236:
		//line parser.y:1151
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 237:
		//line parser.y:1158
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 238:
		//line parser.y:1165
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 239:
		//line parser.y:1172
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 240:
		//line parser.y:1179
		{
		}
	case 241:
		//line parser.y:1180
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 242:
		//line parser.y:1181
		{
		}
	case 243:
		//line parser.y:1184
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 244:
		//line parser.y:1187
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 245:
		//line parser.y:1194
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 246:
		//line parser.y:1203
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 247:
		//line parser.y:1205
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 248:
		//line parser.y:1218
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 249:
		//line parser.y:1237
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 250:
		//line parser.y:1251
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 251:
		//line parser.y:1253
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 252:
		//line parser.y:1256
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 253:
		//line parser.y:1258
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1261
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 255:
		//line parser.y:1263
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 256:
		//line parser.y:1266
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 257:
		//line parser.y:1273
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 258:
		//line parser.y:1275
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 259:
		//line parser.y:1278
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 260:
		//line parser.y:1286
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 261:
		//line parser.y:1290
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 262:
		//line parser.y:1292
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 263:
		//line parser.y:1294
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 264:
		//line parser.y:1298
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 265:
		//line parser.y:1300
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 266:
		//line parser.y:1302
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 267:
		//line parser.y:1306
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 268:
		//line parser.y:1315
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 269:
		//line parser.y:1317
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 270:
		//line parser.y:1320
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 271:
		//line parser.y:1322
		{
		}
	case 272:
		//line parser.y:1324
		{
		}
	case 273:
		//line parser.y:1326
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 274:
		//line parser.y:1328
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 275:
		//line parser.y:1331
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 276:
		//line parser.y:1338
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 277:
		//line parser.y:1346
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 278:
		//line parser.y:1353
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 279:
		//line parser.y:1361
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 280:
		//line parser.y:1369
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 281:
		//line parser.y:1376
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 282:
		//line parser.y:1383
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 283:
		//line parser.y:1390
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 284:
		//line parser.y:1398
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 285:
		//line parser.y:1401
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 286:
		//line parser.y:1403
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 287:
		//line parser.y:1406
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 288:
		//line parser.y:1408
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 289:
		//line parser.y:1410
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 290:
		//line parser.y:1412
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 291:
		//line parser.y:1415
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 292:
		//line parser.y:1417
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 293:
		//line parser.y:1419
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

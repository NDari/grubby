//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	astString       ast.String
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const LPAREN = 57355
const RPAREN = 57356
const COMMA = 57357
const STRING = 57358
const NamespacedModule = 57359
const ProcArg = 57360
const DO = 57361
const DEF = 57362
const END = 57363
const IF = 57364
const ELSE = 57365
const ELSIF = 57366
const UNLESS = 57367
const CLASS = 57368
const MODULE = 57369
const FOR = 57370
const WHILE = 57371
const UNTIL = 57372
const BEGIN = 57373
const RESCUE = 57374
const ENSURE = 57375
const BREAK = 57376
const NEXT = 57377
const REDO = 57378
const RETRY = 57379
const RETURN = 57380
const YIELD = 57381
const AND = 57382
const OR = 57383
const LAMBDA = 57384
const CASE = 57385
const WHEN = 57386
const ALIAS = 57387
const SELF = 57388
const NIL = 57389
const DEFINED = 57390
const LESSTHAN = 57391
const GREATERTHAN = 57392
const EQUALTO = 57393
const BANG = 57394
const COMPLEMENT = 57395
const BINARY_PLUS = 57396
const UNARY_PLUS = 57397
const BINARY_MINUS = 57398
const UNARY_MINUS = 57399
const STAR = 57400
const RANGE = 57401
const EXCLUSIVE_RANGE = 57402
const OR_EQUALS = 57403
const AND_EQUALS = 57404
const WHITESPACE = 57405
const NEWLINE = 57406
const SEMICOLON = 57407
const COLON = 57408
const DOT = 57409
const PIPE = 57410
const SLASH = 57411
const AMPERSAND = 57412
const QUESTIONMARK = 57413
const CARET = 57414
const LBRACKET = 57415
const RBRACKET = 57416
const LBRACE = 57417
const RBRACE = 57418
const ATSIGN = 57419
const FILE_CONST_REF = 57420
const LINE_CONST_REF = 57421
const EOF = 57422

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"DEFINED",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"EXCLUSIVE_RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1950

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 130,
	67, 22,
	-2, 151,
	-1, 142,
	20, 266,
	22, 266,
	25, 266,
	26, 266,
	27, 266,
	29, 266,
	30, 266,
	31, 266,
	34, 266,
	35, 266,
	37, 266,
	38, 266,
	39, 266,
	43, 266,
	45, 266,
	65, 266,
	-2, 13,
	-1, 215,
	20, 266,
	22, 266,
	25, 266,
	26, 266,
	27, 266,
	29, 266,
	30, 266,
	31, 266,
	34, 266,
	35, 266,
	37, 266,
	38, 266,
	39, 266,
	43, 266,
	45, 266,
	65, 266,
	-2, 13,
	-1, 366,
	4, 22,
	5, 22,
	40, 22,
	41, 22,
	49, 22,
	50, 22,
	54, 22,
	56, 22,
	67, 22,
	68, 22,
	69, 22,
	70, 22,
	-2, 126,
	-1, 378,
	20, 266,
	22, 266,
	25, 266,
	26, 266,
	27, 266,
	29, 266,
	30, 266,
	31, 266,
	34, 266,
	35, 266,
	37, 266,
	38, 266,
	39, 266,
	43, 266,
	45, 266,
	65, 266,
	-2, 13,
	-1, 417,
	4, 35,
	5, 35,
	40, 35,
	41, 35,
	50, 35,
	54, 35,
	56, 35,
	64, 13,
	67, 35,
	68, 35,
	69, 35,
	70, 35,
	76, 13,
	-2, 15,
	-1, 603,
	15, 133,
	-2, 13,
}

const RubyNprod = 333
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4631

var RubyAct = []int{

	344, 157, 5, 646, 472, 469, 144, 156, 470, 191,
	434, 261, 56, 351, 264, 55, 14, 145, 262, 416,
	143, 151, 332, 226, 2, 3, 227, 445, 323, 25,
	610, 314, 542, 21, 350, 133, 428, 70, 130, 69,
	4, 134, 28, 135, 290, 580, 605, 95, 101, 350,
	425, 102, 350, 350, 350, 103, 423, 407, 188, 189,
	386, 562, 198, 199, 560, 537, 536, 155, 152, 387,
	350, 278, 26, 335, 202, 152, 604, 96, 97, 326,
	534, 204, 317, 220, 221, 167, 432, 165, 218, 123,
	99, 98, 94, 228, 386, 293, 155, 214, 94, 177,
	94, 94, 229, 230, 231, 386, 100, 203, 94, 73,
	72, 238, 172, 124, 94, 94, 243, 431, 297, 541,
	176, 176, 250, 251, 219, 168, 256, 257, 258, 259,
	171, 219, 269, 495, 171, 169, 170, 386, 268, 129,
	594, 622, 382, 386, 386, 270, 253, 166, 350, 164,
	276, 490, 277, 427, 504, 592, 643, 503, 180, 489,
	167, 167, 165, 165, 424, 468, 52, 393, 279, 306,
	307, 308, 296, 311, 312, 313, 155, 283, 320, 321,
	322, 285, 327, 328, 329, 331, 494, 624, 304, 245,
	284, 287, 289, 309, 177, 350, 422, 254, 318, 336,
	330, 168, 405, 385, 178, 179, 350, 353, 354, 355,
	356, 155, 350, 352, 136, 363, 176, 161, 368, 281,
	361, 101, 166, 166, 102, 593, 181, 196, 103, 360,
	196, 161, 122, 350, 491, 101, 272, 350, 102, 305,
	374, 30, 103, 121, 310, 127, 161, 181, 128, 319,
	642, 196, 196, 196, 375, 565, 74, 182, 183, 101,
	196, 175, 102, 618, 619, 641, 103, 388, 554, 627,
	490, 196, 123, 196, 196, 350, 196, 617, 196, 196,
	196, 196, 391, 196, 125, 126, 196, 196, 625, 131,
	196, 196, 155, 403, 443, 471, 124, 172, 185, 601,
	363, 340, 341, 108, 132, 350, 196, 173, 174, 529,
	187, 530, 596, 196, 196, 196, 196, 291, 350, 171,
	155, 421, 101, 279, 265, 102, 161, 551, 545, 103,
	263, 196, 450, 196, 184, 267, 474, 390, 196, 117,
	118, 208, 315, 196, 209, 265, 186, 324, 106, 107,
	442, 206, 333, 109, 207, 110, 267, 111, 119, 120,
	265, 161, 451, 447, 348, 211, 105, 114, 112, 113,
	491, 267, 484, 501, 281, 266, 446, 461, 346, 161,
	196, 167, 460, 155, 155, 458, 101, 578, 101, 102,
	300, 102, 448, 103, 449, 103, 266, 579, 278, 462,
	196, 456, 453, 196, 479, 473, 488, 480, 477, 478,
	187, 392, 487, 196, 196, 450, 394, 492, 439, 390,
	440, 486, 659, 475, 656, 655, 294, 357, 347, 443,
	441, 654, 210, 656, 655, 573, 510, 509, 508, 140,
	78, 507, 161, 509, 508, 559, 524, 524, 513, 558,
	463, 519, 108, 631, 430, 466, 140, 78, 429, 372,
	532, 196, 373, 426, 414, 196, 196, 139, 196, 544,
	161, 408, 397, 140, 78, 547, 546, 396, 395, 394,
	338, 155, 543, 337, 260, 547, 552, 233, 117, 118,
	556, 557, 358, 518, 364, 413, 345, 106, 107, 1,
	217, 92, 109, 91, 110, 567, 111, 119, 120, 570,
	90, 89, 88, 196, 87, 105, 114, 112, 113, 196,
	41, 40, 406, 39, 38, 525, 20, 583, 584, 43,
	44, 16, 12, 161, 161, 13, 11, 45, 196, 24,
	23, 22, 27, 591, 196, 19, 10, 35, 196, 196,
	18, 15, 590, 196, 71, 597, 599, 488, 598, 600,
	196, 602, 42, 603, 108, 17, 46, 607, 37, 36,
	31, 161, 486, 29, 32, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 53, 0, 623, 0, 0, 196, 196,
	117, 118, 0, 547, 626, 547, 628, 0, 0, 106,
	107, 0, 0, 0, 109, 0, 110, 196, 111, 0,
	0, 0, 0, 0, 196, 0, 0, 105, 114, 112,
	113, 161, 0, 0, 644, 0, 0, 0, 524, 524,
	524, 137, 650, 0, 162, 637, 638, 639, 657, 0,
	0, 0, 0, 0, 197, 0, 661, 197, 162, 524,
	0, 0, 0, 524, 524, 524, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 658, 0, 197, 197,
	197, 0, 0, 0, 662, 663, 581, 197, 0, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	197, 197, 161, 197, 0, 197, 197, 197, 197, 0,
	197, 0, 0, 197, 197, 0, 0, 197, 197, 0,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	108, 196, 0, 197, 0, 0, 0, 0, 0, 0,
	197, 197, 197, 197, 292, 611, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 197, 0,
	197, 0, 0, 0, 0, 197, 117, 118, 0, 316,
	197, 196, 0, 0, 325, 106, 107, 0, 0, 334,
	109, 0, 110, 0, 111, 0, 0, 0, 162, 196,
	0, 0, 0, 105, 114, 112, 113, 0, 0, 0,
	569, 0, 0, 0, 0, 0, 162, 197, 70, 159,
	69, 79, 160, 78, 163, 142, 0, 150, 95, 0,
	164, 152, 0, 0, 0, 0, 0, 197, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 197, 0, 0, 81, 0, 0, 0, 96, 97,
	93, 0, 0, 147, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 148, 149, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 146, 0, 153, 0, 94,
	73, 72, 0, 0, 0, 0, 0, 34, 197, 0,
	0, 0, 197, 197, 0, 197, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 159, 69,
	79, 160, 78, 163, 142, 0, 0, 95, 0, 164,
	152, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	197, 0, 0, 0, 0, 0, 197, 0, 158, 0,
	0, 158, 158, 81, 0, 0, 0, 96, 97, 93,
	162, 162, 0, 82, 83, 197, 84, 158, 85, 86,
	0, 197, 158, 158, 158, 197, 197, 457, 0, 0,
	197, 158, 0, 0, 301, 0, 153, 197, 94, 73,
	72, 0, 158, 0, 158, 158, 0, 158, 162, 158,
	158, 158, 158, 0, 158, 0, 0, 158, 158, 0,
	0, 158, 158, 197, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 197, 197, 158, 0, 0,
	0, 0, 0, 0, 158, 158, 158, 158, 0, 0,
	0, 115, 0, 0, 197, 0, 0, 158, 104, 0,
	0, 197, 158, 0, 158, 0, 117, 118, 162, 158,
	0, 0, 0, 0, 158, 106, 107, 0, 0, 0,
	109, 0, 110, 0, 111, 119, 120, 0, 0, 0,
	0, 0, 158, 105, 114, 112, 113, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 158, 0, 0, 70, 366, 69, 79, 195, 78,
	135, 80, 0, 582, 95, 0, 0, 0, 0, 0,
	0, 158, 0, 0, 158, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 158, 158, 0, 0, 0, 0,
	81, 0, 0, 0, 96, 97, 93, 108, 0, 162,
	82, 83, 0, 84, 0, 85, 86, 0, 197, 0,
	0, 0, 350, 158, 0, 0, 297, 0, 0, 0,
	0, 76, 612, 77, 362, 94, 73, 72, 0, 0,
	0, 9, 158, 117, 118, 108, 417, 158, 0, 158,
	0, 158, 106, 107, 0, 0, 0, 109, 197, 110,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 114, 112, 113, 0, 0, 197, 568, 0, 0,
	0, 117, 118, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 154, 0, 158, 109, 0, 110, 0, 111,
	158, 0, 192, 0, 0, 200, 205, 0, 105, 114,
	112, 113, 116, 0, 158, 158, 0, 0, 0, 417,
	0, 216, 0, 0, 0, 158, 222, 223, 224, 158,
	158, 212, 0, 0, 158, 225, 0, 0, 0, 0,
	0, 158, 0, 0, 0, 0, 232, 0, 234, 235,
	0, 237, 158, 239, 240, 241, 242, 0, 244, 0,
	0, 248, 249, 0, 0, 252, 255, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 158,
	158, 273, 0, 0, 0, 0, 0, 0, 280, 282,
	286, 288, 0, 0, 0, 201, 0, 0, 158, 0,
	0, 154, 0, 0, 0, 158, 302, 0, 255, 213,
	0, 0, 158, 255, 117, 118, 0, 0, 255, 0,
	0, 0, 0, 106, 107, 0, 0, 0, 109, 0,
	110, 0, 111, 119, 120, 0, 154, 0, 0, 0,
	236, 105, 114, 112, 113, 0, 0, 0, 0, 246,
	247, 0, 0, 0, 359, 365, 0, 0, 70, 159,
	69, 79, 160, 78, 163, 80, 0, 0, 95, 0,
	164, 0, 0, 0, 275, 379, 0, 0, 380, 0,
	0, 0, 0, 158, 0, 298, 0, 0, 383, 384,
	0, 0, 0, 0, 81, 0, 0, 303, 96, 97,
	93, 0, 0, 158, 82, 83, 0, 84, 0, 85,
	86, 0, 158, 0, 0, 0, 350, 216, 0, 0,
	0, 0, 0, 0, 0, 76, 108, 77, 0, 94,
	73, 72, 349, 0, 0, 0, 410, 0, 0, 0,
	365, 418, 0, 420, 0, 216, 0, 367, 0, 0,
	0, 371, 158, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 117, 118, 0, 0, 0, 0, 0, 0,
	158, 106, 107, 0, 0, 108, 109, 0, 110, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 444, 105,
	114, 112, 113, 116, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 154, 216,
	404, 117, 118, 459, 0, 0, 0, 653, 0, 255,
	106, 107, 0, 465, 467, 109, 409, 110, 410, 111,
	119, 120, 419, 0, 0, 476, 0, 381, 105, 114,
	112, 113, 117, 118, 0, 0, 485, 0, 0, 0,
	0, 106, 107, 0, 339, 0, 109, 0, 110, 0,
	111, 500, 0, 0, 0, 0, 0, 0, 0, 105,
	114, 112, 113, 505, 506, 0, 0, 0, 0, 70,
	194, 69, 79, 195, 78, 135, 80, 0, 0, 95,
	452, 0, 192, 0, 0, 454, 455, 0, 0, 539,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	464, 0, 0, 0, 190, 81, 0, 0, 0, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 483, 0, 350, 0, 0,
	0, 297, 0, 0, 0, 0, 76, 496, 77, 498,
	94, 73, 72, 502, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 33, 0, 0, 0, 0, 632,
	0, 0, 0, 0, 0, 0, 0, 589, 0, 0,
	0, 0, 0, 0, 0, 535, 0, 0, 538, 0,
	540, 0, 0, 271, 117, 118, 274, 485, 0, 0,
	0, 0, 0, 106, 107, 0, 606, 295, 109, 0,
	110, 0, 111, 138, 141, 0, 555, 0, 0, 0,
	0, 105, 114, 112, 113, 193, 0, 0, 193, 0,
	0, 563, 0, 0, 0, 566, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 630, 0, 0, 193,
	193, 193, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 640, 588, 0, 0, 0, 193,
	0, 193, 193, 0, 193, 595, 193, 193, 193, 193,
	0, 193, 0, 0, 193, 193, 0, 0, 193, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 564, 193, 0, 0, 0, 0, 0,
	0, 193, 193, 193, 193, 0, 389, 0, 0, 621,
	0, 0, 0, 0, 0, 398, 0, 0, 401, 193,
	0, 193, 0, 0, 0, 629, 193, 0, 117, 118,
	0, 193, 0, 0, 0, 0, 0, 106, 107, 0,
	0, 412, 109, 415, 110, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 114, 112, 113, 108,
	299, 0, 652, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 660, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 437, 438, 0, 193, 0,
	0, 193, 0, 0, 0, 117, 118, 0, 0, 0,
	0, 193, 193, 0, 106, 107, 0, 0, 0, 109,
	0, 110, 0, 111, 0, 0, 415, 0, 0, 0,
	0, 0, 105, 114, 112, 113, 0, 400, 0, 0,
	0, 70, 159, 69, 79, 160, 78, 163, 142, 0,
	0, 95, 0, 164, 152, 481, 0, 0, 0, 193,
	0, 0, 0, 193, 193, 0, 193, 0, 0, 0,
	0, 497, 499, 0, 0, 0, 0, 81, 0, 0,
	0, 96, 97, 93, 0, 0, 147, 82, 83, 0,
	84, 511, 85, 86, 0, 515, 516, 0, 517, 0,
	0, 0, 0, 108, 531, 0, 533, 0, 301, 0,
	153, 193, 94, 73, 72, 0, 0, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 548, 0, 0, 0,
	0, 0, 549, 550, 0, 0, 193, 0, 0, 117,
	118, 0, 193, 0, 0, 0, 193, 193, 106, 107,
	0, 193, 0, 109, 0, 110, 0, 111, 193, 0,
	0, 0, 0, 0, 571, 572, 105, 114, 112, 113,
	0, 0, 0, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 585, 0, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 520, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 608, 0, 0, 0, 0,
	609, 0, 0, 0, 0, 614, 615, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 634, 635, 636, 0, 0,
	0, 0, 0, 437, 438, 0, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 649, 526, 648, 647, 527, 48, 49, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 193,
	0, 0, 0, 0, 522, 523, 0, 0, 0, 0,
	0, 0, 0, 76, 613, 77, 0, 94, 73, 72,
	0, 0, 0, 0, 0, 0, 0, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 193,
	0, 47, 645, 526, 648, 647, 527, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 193, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 522, 523, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 512, 57, 436, 435,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 342,
	343, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	433, 57, 436, 435, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 342, 343, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 0, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 443, 471, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 342, 343, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 574, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	575, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 342, 343, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 0, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 6, 7, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 8, 70, 50, 69, 79, 51, 78, 54, 80,
	0, 0, 95, 0, 0, 0, 47, 651, 526, 0,
	0, 527, 48, 49, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	522, 523, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 73, 72, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 633, 57, 0, 0, 58, 48, 49, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 342, 343, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 50, 69, 79, 51, 78, 54, 80, 0, 0,
	95, 0, 0, 0, 47, 620, 57, 0, 0, 58,
	48, 49, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 50, 69, 79, 51, 78,
	54, 80, 0, 0, 95, 0, 0, 0, 47, 586,
	57, 0, 0, 58, 48, 49, 0, 61, 62, 59,
	0, 0, 65, 66, 0, 67, 64, 60, 0, 0,
	81, 63, 0, 68, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 342, 343, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 70, 50,
	69, 79, 51, 78, 54, 80, 0, 0, 95, 0,
	0, 0, 47, 576, 57, 0, 0, 58, 48, 49,
	0, 61, 62, 59, 0, 0, 65, 66, 0, 67,
	64, 60, 0, 0, 81, 63, 0, 68, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	73, 72, 70, 50, 69, 79, 51, 78, 54, 80,
	0, 0, 95, 0, 0, 0, 47, 0, 57, 0,
	0, 58, 48, 49, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 561, 94, 73, 72, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 553, 57, 0, 0, 58, 48, 49, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 342, 343, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 50, 69, 79, 51, 78, 54, 80, 0, 0,
	95, 0, 0, 0, 47, 528, 526, 0, 0, 527,
	48, 49, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 522, 523,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 50, 69, 79, 51, 78,
	54, 80, 0, 0, 95, 0, 0, 0, 47, 521,
	526, 0, 0, 527, 48, 49, 0, 61, 62, 59,
	0, 0, 65, 66, 0, 67, 64, 60, 0, 0,
	81, 63, 0, 68, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 522, 523, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 70, 50,
	69, 79, 51, 78, 54, 80, 0, 0, 95, 0,
	0, 0, 47, 514, 57, 0, 0, 58, 48, 49,
	0, 61, 62, 59, 0, 0, 65, 66, 0, 67,
	64, 60, 0, 0, 81, 63, 0, 68, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	73, 72, 70, 50, 69, 79, 51, 78, 54, 80,
	0, 0, 95, 0, 0, 0, 47, 493, 57, 0,
	0, 58, 48, 49, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	342, 343, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 73, 72, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 482, 57, 0, 0, 58, 48, 49, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 342, 343, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 50, 69, 79, 51, 78, 54, 80, 0, 0,
	95, 0, 0, 0, 47, 411, 57, 0, 0, 58,
	48, 49, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 342, 343,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 50, 69, 79, 51, 78,
	54, 80, 0, 0, 95, 0, 0, 0, 47, 402,
	57, 0, 0, 58, 48, 49, 0, 61, 62, 59,
	0, 0, 65, 66, 0, 67, 64, 60, 0, 0,
	81, 63, 0, 68, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 342, 343, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 70, 50,
	69, 79, 51, 78, 54, 80, 0, 0, 95, 0,
	0, 0, 47, 399, 57, 0, 0, 58, 48, 49,
	0, 61, 62, 59, 0, 0, 65, 66, 0, 67,
	64, 60, 0, 0, 81, 63, 0, 68, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 342, 343, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	73, 72, 70, 50, 69, 79, 51, 78, 54, 80,
	0, 0, 95, 0, 0, 0, 47, 0, 526, 0,
	0, 527, 48, 49, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	522, 523, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 73, 72, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 0, 57, 0, 0, 58, 48, 49, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 342, 343, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 50, 69, 79, 51, 78, 54, 80, 370, 0,
	95, 0, 0, 0, 47, 0, 57, 0, 0, 58,
	48, 49, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 50, 69, 79, 51, 78,
	54, 80, 0, 0, 95, 0, 0, 0, 47, 0,
	57, 0, 0, 58, 48, 49, 0, 61, 62, 59,
	0, 0, 65, 66, 0, 67, 64, 60, 0, 0,
	81, 63, 0, 68, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 70, 50,
	69, 79, 51, 78, 54, 80, 0, 0, 95, 0,
	0, 0, 47, 0, 57, 0, 0, 58, 48, 49,
	0, 61, 62, 59, 0, 0, 65, 66, 0, 67,
	64, 60, 0, 0, 81, 63, 0, 68, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 70, 194, 69, 79, 195, 78, 135, 378, 0,
	0, 95, 0, 0, 152, 76, 0, 77, 0, 94,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 96, 97, 93, 0, 0, 376, 82, 83, 0,
	84, 0, 85, 86, 70, 366, 69, 79, 195, 78,
	135, 80, 0, 0, 95, 0, 0, 0, 377, 0,
	153, 0, 94, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 362, 94, 73, 72, 70, 159,
	69, 79, 160, 78, 163, 142, 0, 0, 95, 0,
	164, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 70, 194, 69, 79, 195, 78, 135, 80, 0,
	0, 95, 0, 0, 0, 301, 0, 153, 0, 94,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 350,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 194, 69, 79, 195,
	78, 135, 80, 0, 0, 95, 0, 0, 0, 70,
	159, 69, 79, 160, 78, 163, 215, 0, 0, 95,
	0, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 63, 0, 0, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 81, 85, 86, 0, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 76, 0, 77, 0, 94, 73, 72, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 194, 69, 79, 195, 78, 135,
	80, 0, 0, 95, 0, 0, 0, 70, 159, 69,
	79, 160, 78, 163, 80, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 81, 85, 86, 0, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	76, 0, 77, 0, 94, 73, 72, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72,
}
var RubyPact = []int{

	-40, 2661, -1000, -1000, -1000, 26, -1000, -1000, -1000, 1016,
	-1000, -1000, -1000, -1000, 218, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 181, 223, -1000, 72, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 31, 463, 429,
	802, 74, 246, 143, 196, 283, 295, 4142, 4142, -1000,
	4537, 4142, 4142, 4537, 4551, 329, 319, -1000, 424, -1000,
	-1000, 349, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4463,
	-1000, 49, 4142, 4142, 4537, 4537, 4537, -1000, -1000, -1000,
	-1000, -1000, -1000, 4537, 16, -1000, -1000, -1000, -1000, -1000,
	-1000, 4142, 4142, 4142, 4537, 480, 4537, 4537, -1000, 4537,
	4142, 4537, 4537, 4537, 4537, 4142, 4537, -1000, -1000, 4537,
	4537, 4142, 4142, 4537, 4537, 4142, 4142, 4142, 4142, 477,
	317, 71, 65, 317, -1000, -1000, -1000, -1000, 187, 4537,
	370, -1000, -1000, 49, -1000, 56, 4537, 4449, 4537, 4537,
	37, 411, 50, -1000, 1905, -1000, -1000, 375, 40, 1975,
	150, 61, 48, 175, 4537, -1000, 4537, -1000, 4142, 4142,
	4142, 4537, 4142, 4142, 4142, 24, 4537, 4142, 4142, 4142,
	21, 4142, 4142, 4142, 4142, 15, 476, 473, 366, 237,
	3920, 363, 2039, -1000, 4322, 149, 57, 47, 364, 300,
	2039, 169, 363, -1000, -1000, 1181, 4142, 4142, 4142, 4142,
	419, -1000, 1392, 4248, 383, -1000, 1905, 3994, -1000, -1000,
	366, 366, 2039, 2039, 2039, 2039, -1000, -1000, 452, 366,
	366, 366, 2039, 4195, 2039, 2039, 4375, 2039, 366, 2039,
	2039, 2039, 2039, 366, 1511, 76, 4375, 4375, 2039, 2039,
	366, 366, 2039, 129, -5, 1314, 366, 366, 366, 366,
	49, -1000, 404, 353, -1000, 116, 472, 471, 470, 465,
	-1000, 3772, 429, 2039, 3698, 1392, -1000, -1000, -1000, 128,
	448, -17, 1462, -1000, -1000, -1000, 1181, -1000, 1181, -1000,
	-1000, -1000, -1000, 464, 4537, 3624, -1000, 457, 1098, 4537,
	-1000, 4537, 2039, 1392, 122, -18, 366, 366, 366, 90,
	-24, 366, 366, 366, -1000, -1000, -1000, 456, 79, -38,
	366, 366, 366, -1000, -1000, -1000, 451, 366, 366, 366,
	283, 366, -1000, -1000, -1000, 447, 395, 44, 13, 2439,
	-1000, -1000, -1000, -1000, 366, 397, 4537, -1000, -1000, 169,
	-1000, 371, 4537, 366, 366, 366, 366, -1000, 387, 2039,
	-1000, -1000, -1000, 375, 386, 1905, 911, 1392, 366, -1000,
	-1000, 1613, -1000, -1000, -1000, 49, 4142, 4537, -1000, 2039,
	2039, 4537, 4537, 2039, 2039, 114, 4537, -1000, -1000, 2513,
	338, 322, 409, 4537, -1000, -1000, 317, 317, 2513, -1000,
	-1000, 3550, -1000, 357, 1392, 108, 219, -1000, -1000, 131,
	2039, -1000, 3476, 118, -1000, 3920, -1000, 40, 2039, 4375,
	299, 383, 106, -1000, 103, -1000, -1000, -1000, -1000, -1000,
	-1000, 4537, 4537, -1000, 420, 4142, -1000, 2365, 3402, -1000,
	-1000, -1000, -1000, 446, 2039, 3328, 3254, 288, -1000, -1000,
	4537, 363, 6, -1000, -10, -11, -1000, 4537, 383, 2039,
	-1000, 366, 45, -42, 1392, 2039, -1000, 1314, 4142, 307,
	262, -1000, -1000, -1000, -1000, -1000, 2039, -1000, -1000, 306,
	262, 3180, -1000, 254, -1000, 1905, -1000, -1000, 375, 4142,
	4142, 442, -1000, -1000, -1000, 438, -12, 3106, -15, 3920,
	1838, 100, 241, -1000, 4142, 1143, 726, -1000, 4142, -1000,
	366, 3920, -1000, 414, -1000, 2587, 3032, 3920, 382, 38,
	-1000, -1000, -1000, -1000, 366, -1000, 4142, 4142, -1000, -1000,
	-1000, 2958, 363, 3920, -1000, 1392, -1000, -1000, 148, 2039,
	211, 89, -1000, 357, 366, -1000, 291, -1000, 3920, 2513,
	2513, -1000, 278, -1000, 49, 1392, 366, 366, 3, -1000,
	-1000, -1000, -1000, -30, 4537, -1000, 4068, 366, 355, -1000,
	366, 3920, 3920, -1000, -1000, -1000, -1000, 3920, 23, 429,
	-1000, -1000, -1000, 213, 199, 2884, -1000, 3920, 84, 2039,
	-1000, -1000, 75, -1000, 4142, 173, -1000, 267, 262, 248,
	262, -1000, -1000, -1000, 4537, -1000, 1694, 366, 3920, 2810,
	-1000, -1000, -1000, -1000, 3920, 3920, 3920, -1000, -1000, -1000,
	-1000, 84, 4537, 366, -1000, -1000, 244, -1000, 229, 142,
	560, -1000, -1000, -1000, 3920, 3920, 3920, 2291, 2210, 2736,
	1542, -1000, -1000, -1000, -1000, -1000, 410, 4142, -1000, -1000,
	401, -1000, 84, -1000, -1000, 4142, -1000, 366, 3846, -1000,
	84, 366, 3846, 3846, 3846,
}
var RubyPgo = []int{

	0, 575, 0, 256, 574, 72, 6, 573, 570, 569,
	568, 4, 566, 42, 565, 7, 562, 16, 554, 551,
	550, 1181, 241, 593, 887, 547, 546, 545, 542, 541,
	540, 539, 537, 536, 535, 14, 166, 532, 531, 1704,
	13, 33, 530, 529, 29, 526, 525, 3, 15, 524,
	523, 521, 520, 514, 512, 511, 510, 503, 501, 1594,
	500, 8, 20, 19, 10, 499, 11, 1, 27, 5,
	496, 17, 495, 9, 494, 21, 12, 18, 493, 492,
	453, 1271,
}
var RubyR1 = []int{

	0, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 80, 80, 81, 81, 59, 59, 59, 59, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 32, 32,
	32, 32, 32, 32, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 18, 18, 44, 16, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
	62, 62, 62, 62, 73, 73, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 15, 75, 75, 69, 69,
	26, 26, 26, 26, 26, 26, 26, 26, 66, 66,
	66, 77, 77, 77, 35, 35, 35, 35, 33, 33,
	34, 37, 39, 39, 39, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 19, 19, 19, 76, 76, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 36, 36, 23, 23, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 8, 3, 1, 79, 79, 79, 79,
	79, 79, 79, 4, 4, 4, 67, 67, 74, 74,
	74, 6, 6, 6, 6, 6, 6, 63, 72, 72,
	72, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 64, 64, 64, 64, 60, 60, 60, 9,
	20, 20, 20, 20, 11, 11, 11, 11, 11, 11,
	11, 11, 78, 78, 70, 70, 61, 61, 27, 27,
	28, 29, 29, 29, 29, 31, 31, 31, 30, 30,
	30, 13, 13, 45, 45, 45, 68, 68, 68, 68,
	68, 46, 46, 46, 46, 46, 47, 47, 47, 47,
	43, 42, 10, 41, 41, 41, 41, 40, 40, 5,
	5, 7, 12,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 6,
	7, 1, 2, 6, 6, 2, 3, 2, 3, 4,
	5, 4, 3, 4, 5, 2, 3, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 6, 6, 6, 6, 7, 6, 6, 8, 4,
	5, 8, 1, 4, 1, 3, 0, 1, 1, 1,
	1, 4, 4, 4, 4, 2, 1, 3, 0, 2,
	6, 7, 8, 8, 9, 9, 6, 7, 1, 3,
	3, 0, 1, 3, 1, 2, 3, 2, 4, 6,
	5, 4, 1, 2, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 9, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 3, 3, 3, 3,
	4, 3, 3, 3, 4, 3, 3, 3, 4, 3,
	3, 3, 4, 2, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 5, 1, 1, 0, 1, 1, 1,
	4, 4, 4, 3, 5, 5, 3, 7, 3, 7,
	8, 3, 4, 5, 5, 5, 6, 3, 0, 1,
	3, 4, 5, 3, 3, 3, 3, 3, 5, 6,
	5, 3, 4, 3, 3, 2, 0, 2, 2, 3,
	4, 6, 8, 6, 2, 3, 5, 5, 5, 4,
	4, 4, 1, 3, 0, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 1, 1, 3, 3, 1, 3,
	3, 5, 5, 5, 5, 3, 0, 2, 2, 2,
	2, 5, 6, 5, 6, 5, 4, 3, 3, 2,
	4, 4, 2, 5, 7, 4, 6, 4, 5, 3,
	3, 3, 2,
}
var RubyChk = []int{

	-1000, -65, 64, 65, 80, -2, 64, 65, 80, -21,
	-26, -33, -37, -34, -17, -19, -38, -14, -20, -27,
	-45, -41, -29, -30, -31, -44, -5, -28, -13, -7,
	-22, -8, -4, -39, -24, -25, -9, -10, -49, -50,
	-51, -52, -16, -43, -42, -32, -12, 20, 26, 27,
	7, 10, -36, -23, 12, -48, -76, 22, 25, 31,
	39, 29, 30, 43, 38, 34, 35, 37, 45, 8,
	6, -18, 79, 78, -3, -1, 73, 75, 11, 9,
	13, 42, 52, 53, 55, 57, 58, -53, -54, -55,
	-56, -57, -58, 48, 77, 16, 46, 47, 65, 64,
	80, 22, 25, 29, 32, 67, 49, 50, 4, 54,
	56, 58, 69, 70, 68, 25, 71, 40, 41, 59,
	60, 25, 51, 49, 73, 61, 62, 22, 25, 67,
	7, -22, -3, 4, 10, 12, -36, -23, -39, 4,
	10, -39, 13, -62, -6, -71, 73, 51, 61, 62,
	15, -75, 19, 75, -21, -17, -15, -67, -24, 7,
	10, -36, -23, 12, 18, 13, 73, 11, 51, 61,
	62, 73, 51, 61, 62, 15, 73, 51, 61, 62,
	15, 51, 61, 62, 51, 15, 51, 15, -2, -2,
	-59, -73, -21, -39, 7, 10, -36, -23, -2, -2,
	-21, -81, -73, -13, -17, -21, 22, 25, 22, 25,
	8, 16, -81, -81, -71, 13, -21, -60, -6, 75,
	-2, -2, -21, -21, -21, -21, 7, 10, 77, -2,
	-2, -2, -21, 7, -21, -21, -81, -21, -2, -21,
	-21, -21, -21, -2, -21, -5, -81, -81, -21, -21,
	-2, -2, -21, -75, -5, -21, -2, -2, -2, -2,
	7, -66, -77, 13, -35, 7, 58, 18, 67, 67,
	-66, -59, 49, -21, -59, -81, -6, -6, 15, -75,
	-21, -5, -21, -44, -13, -41, -21, -13, -21, -13,
	7, -36, -23, 58, 15, -59, -63, 68, -81, 5,
	15, 73, -21, -81, -75, -5, -2, -2, -2, -75,
	-5, -2, -2, -2, 7, -36, -23, 58, -75, -5,
	-2, -2, -2, 7, -36, -23, 58, -2, -2, -2,
	-48, -2, 7, -36, -23, 58, -76, 7, 7, -59,
	64, 65, 64, 65, -2, -70, 15, 64, 64, -81,
	64, -40, 44, -2, -2, -2, -2, 8, -79, -21,
	-17, -15, 76, -67, -74, -21, 7, -81, -2, 65,
	14, -81, 7, 10, -6, -62, 51, 73, 13, -21,
	-21, 66, 66, -21, -21, 74, 15, 74, -6, -59,
	15, -77, 58, 51, 7, 7, 7, 7, -59, 21,
	-39, -59, 21, -71, -81, 74, 74, 74, 7, -81,
	-21, 21, -59, -72, 7, -59, -63, -24, -21, -81,
	-21, -71, 74, 74, 74, 74, 7, 74, 74, 7,
	7, 73, 73, 21, -64, 24, 23, -59, -59, 21,
	23, 33, -11, 32, -21, -68, -68, -40, 21, 23,
	44, -73, -81, 15, -81, -81, 15, 66, -71, -21,
	-6, -2, -75, -5, -81, -21, -5, -21, 51, -69,
	-61, 33, -11, -35, 14, 14, -21, -66, -66, -69,
	-61, -59, 21, -81, 15, -21, -17, -15, -67, 51,
	51, 15, -15, 21, 68, 15, -81, -59, -81, -59,
	-21, 74, -81, 51, 51, -21, -21, 21, 24, 23,
	-2, -59, 21, -64, 21, -59, -59, -59, -78, 5,
	-39, 21, 64, 65, -2, -46, 22, 25, 21, 21,
	23, -59, -73, -59, 74, -81, 76, 76, -81, -21,
	-81, 74, 74, -71, -2, 21, -69, -11, -59, -59,
	-59, 21, -69, 21, 14, -81, -2, -2, 7, 7,
	76, 76, 76, -81, 5, 14, -81, -2, 74, 74,
	-2, -59, -59, 21, 21, 33, 21, -59, 5, 15,
	7, -36, -23, -2, -2, -59, 21, -59, -81, -21,
	-17, -15, 7, 14, 51, -81, 21, -69, -61, -69,
	-61, 21, -6, -15, 73, 76, -21, -2, -59, -59,
	7, -36, -23, -39, -59, -59, -59, 64, 64, 65,
	21, -81, 66, -2, 14, 21, -69, 21, -69, -81,
	-21, -80, 15, 21, -59, -59, -59, -68, -68, -68,
	-21, 21, 21, 14, 74, 21, -47, 24, 23, 21,
	-47, 21, -81, 15, 21, 24, 23, -2, -68, 21,
	-81, -2, -68, -68, -68,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 0, 0, 0,
	22, 23, 25, 26, 24, 0, 0, 0, 0, 15,
	289, 0, 0, 13, 294, 298, 295, 290, 0, 19,
	20, 21, 27, 28, 29, 30, 13, 13, 164, 81,
	266, 0, 0, 0, 0, 0, 0, 48, 49, 50,
	51, 52, 53, 0, 0, 75, 224, 225, 5, 6,
	7, 0, 0, 0, 0, 0, 0, 0, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 13, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, 151, 23, 24, 25, 26, 15, 0,
	162, 15, -2, 85, 87, 95, 13, 0, 0, 0,
	0, 122, 15, 13, 127, 128, 129, 130, 35, 22,
	23, 25, 26, 24, 0, 13, 0, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
	284, 288, 124, 34, 22, 23, 25, 26, 0, 0,
	13, 0, 291, 292, 293, 124, 0, 0, 0, 0,
	0, 76, 226, 0, 82, -2, 127, 0, 322, 13,
	213, 214, 215, 216, 78, 332, 193, 194, 0, 253,
	261, 305, 77, 88, 97, 99, 0, 217, 218, 219,
	220, 221, 222, 255, 0, 0, 0, 0, 329, 330,
	257, 173, 98, 0, 0, 136, 185, 192, 254, 256,
	92, 15, 148, 151, 152, 154, 0, 0, 0, 0,
	15, 0, 0, 15, 0, 126, 86, 96, 13, 0,
	136, 0, 165, 166, 167, 168, 179, 180, 186, 187,
	197, 198, 199, 0, 13, 0, 15, 248, 15, 0,
	13, 13, 135, 126, 0, 0, 169, 181, 188, 0,
	0, 170, 182, 189, 201, 202, 203, 0, 0, 0,
	171, 183, 190, 205, 206, 207, 0, 172, 184, 191,
	174, 175, 209, 210, 211, 0, 176, 0, 0, 0,
	15, 15, 16, 17, 18, 0, 0, 306, 306, 0,
	14, 0, 0, 299, 300, 296, 297, 331, 13, 227,
	228, 229, 233, 13, 13, 0, -2, 126, 267, 268,
	269, 15, 195, 196, 89, 91, 0, 13, -2, 136,
	119, 0, 0, 320, 321, 109, 0, 110, 93, 138,
	0, 0, 0, 0, 155, 157, 151, 151, 138, 158,
	15, 0, 161, 13, 0, 100, 101, 102, 200, 0,
	137, 241, 0, 0, 249, 13, 15, -2, 236, 0,
	136, 13, 103, 104, 105, 106, 204, 107, 108, 208,
	212, 0, 0, 251, 0, 0, 15, 0, 0, 270,
	15, 15, 285, 15, 125, 0, 0, 0, 325, 15,
	0, 15, 0, 13, 0, 0, 13, 0, 13, 0,
	90, 94, 0, 0, 126, 301, 302, 0, 0, 0,
	138, 15, 286, 153, 149, 150, 156, 15, 15, 0,
	138, 0, 160, 0, 13, 131, 132, 133, 134, 0,
	0, 0, 123, 242, 247, 0, 0, 0, 0, 13,
	0, 101, 0, 13, 0, 0, 0, 252, 0, 15,
	15, 265, 258, 0, 260, 0, 0, 274, 15, 0,
	282, 303, 307, 308, 309, 310, 0, 0, 304, 323,
	15, 0, 15, 13, 223, 0, 234, 235, 0, 238,
	0, 111, 112, 13, 117, 140, 0, 287, 139, 138,
	138, 146, 0, 159, 79, 0, 113, 114, 0, 250,
	243, 244, 245, 0, 0, 84, 0, 116, 0, 178,
	15, 263, 264, 259, 271, 15, 273, 275, 0, 0,
	15, 15, 15, 15, 0, 0, 326, 13, 327, 230,
	231, 232, 0, 83, 0, 0, 141, 0, 138, 0,
	138, 147, 80, -2, 0, 246, 11, 115, 262, 0,
	15, 15, 15, 283, 279, 280, 281, 306, 15, 15,
	324, 328, 0, 118, 120, 142, 0, 143, 0, 0,
	0, 237, 12, 272, 276, 277, 278, 0, 0, 0,
	13, 144, 145, 121, 177, 311, 0, 0, 306, 313,
	0, 315, 239, 13, 312, 0, 306, 306, 319, 314,
	240, 306, 317, 318, 316,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:230
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:232
		{
		}
	case 3:
		//line parser.y:234
		{
		}
	case 4:
		//line parser.y:236
		{
		}
	case 5:
		//line parser.y:238
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:240
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:242
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:248
		{
		}
	case 11:
		//line parser.y:250
		{
		}
	case 12:
		//line parser.y:251
		{
		}
	case 13:
		//line parser.y:253
		{
		}
	case 14:
		//line parser.y:254
		{
		}
	case 15:
		//line parser.y:257
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:259
		{
		}
	case 17:
		//line parser.y:261
		{
		}
	case 18:
		//line parser.y:263
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 75:
		//line parser.y:274
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 76:
		//line parser.y:276
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 77:
		//line parser.y:284
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 78:
		//line parser.y:287
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 79:
		//line parser.y:290
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:299
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:309
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:315
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 83:
		//line parser.y:323
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:332
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:341
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:350
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:360
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:370
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:379
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:390
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:401
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:411
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:421
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:432
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:445
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 96:
		//line parser.y:453
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 97:
		//line parser.y:462
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:471
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 99:
		//line parser.y:480
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 100:
		//line parser.y:491
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 101:
		//line parser.y:500
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 102:
		//line parser.y:509
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 103:
		//line parser.y:518
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 104:
		//line parser.y:527
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 105:
		//line parser.y:536
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 106:
		//line parser.y:545
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 107:
		//line parser.y:554
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 108:
		//line parser.y:563
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 109:
		//line parser.y:572
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 110:
		//line parser.y:581
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 111:
		//line parser.y:590
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 112:
		//line parser.y:603
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 113:
		//line parser.y:619
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 114:
		//line parser.y:628
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:637
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:646
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 117:
		//line parser.y:655
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 118:
		//line parser.y:664
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 119:
		//line parser.y:679
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 120:
		//line parser.y:691
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 121:
		//line parser.y:693
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 122:
		//line parser.y:695
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 123:
		//line parser.y:697
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:700
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:702
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:704
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 127:
		//line parser.y:706
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:708
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:710
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:712
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 131:
		//line parser.y:719
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 132:
		//line parser.y:721
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:723
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 134:
		//line parser.y:725
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 135:
		//line parser.y:735
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 136:
		//line parser.y:746
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:748
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:752
		{
			RubyVAL.genericSlice = nil
		}
	case 139:
		//line parser.y:754
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 140:
		//line parser.y:757
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 141:
		//line parser.y:768
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 142:
		//line parser.y:780
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 143:
		//line parser.y:792
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 144:
		//line parser.y:804
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 145:
		//line parser.y:817
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:830
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 147:
		//line parser.y:841
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 148:
		//line parser.y:855
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 149:
		//line parser.y:857
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 150:
		//line parser.y:859
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 151:
		//line parser.y:861
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 152:
		//line parser.y:863
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 153:
		//line parser.y:865
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 154:
		//line parser.y:868
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 155:
		//line parser.y:870
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 156:
		//line parser.y:872
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 157:
		//line parser.y:874
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 158:
		//line parser.y:878
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 159:
		//line parser.y:888
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 160:
		//line parser.y:900
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 161:
		//line parser.y:913
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 162:
		//line parser.y:924
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 163:
		//line parser.y:933
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 164:
		//line parser.y:952
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 165:
		//line parser.y:970
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:979
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:985
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:991
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 169:
		//line parser.y:993
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 170:
		//line parser.y:1002
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1011
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1020
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 173:
		//line parser.y:1022
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 174:
		//line parser.y:1025
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1034
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1043
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1053
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 178:
		//line parser.y:1068
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 179:
		//line parser.y:1074
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1083
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 181:
		//line parser.y:1089
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1098
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 183:
		//line parser.y:1107
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 184:
		//line parser.y:1116
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 185:
		//line parser.y:1118
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1127
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1136
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 188:
		//line parser.y:1142
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 189:
		//line parser.y:1151
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 190:
		//line parser.y:1160
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 191:
		//line parser.y:1169
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 192:
		//line parser.y:1171
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 193:
		//line parser.y:1178
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 194:
		//line parser.y:1184
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 195:
		//line parser.y:1191
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 196:
		//line parser.y:1197
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 197:
		//line parser.y:1204
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1206
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1208
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1210
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1213
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1215
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1217
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1219
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1222
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1224
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 207:
		//line parser.y:1226
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 208:
		//line parser.y:1228
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 209:
		//line parser.y:1231
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 210:
		//line parser.y:1233
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 211:
		//line parser.y:1235
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 212:
		//line parser.y:1237
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 213:
		//line parser.y:1241
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 214:
		//line parser.y:1243
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 215:
		//line parser.y:1245
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 216:
		//line parser.y:1247
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 217:
		//line parser.y:1250
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 218:
		//line parser.y:1261
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 219:
		//line parser.y:1272
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 220:
		//line parser.y:1283
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 221:
		//line parser.y:1294
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 222:
		//line parser.y:1305
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 223:
		//line parser.y:1316
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 224:
		//line parser.y:1318
		{
		}
	case 225:
		//line parser.y:1319
		{
		}
	case 226:
		//line parser.y:1321
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 227:
		//line parser.y:1323
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 228:
		//line parser.y:1325
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 229:
		//line parser.y:1327
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 230:
		//line parser.y:1329
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 231:
		//line parser.y:1331
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 232:
		//line parser.y:1333
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 233:
		//line parser.y:1336
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 234:
		//line parser.y:1338
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 235:
		//line parser.y:1342
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 236:
		//line parser.y:1351
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 237:
		//line parser.y:1353
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 238:
		//line parser.y:1356
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 239:
		//line parser.y:1363
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 240:
		//line parser.y:1370
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 241:
		//line parser.y:1378
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 242:
		//line parser.y:1383
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 243:
		//line parser.y:1388
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 244:
		//line parser.y:1393
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 245:
		//line parser.y:1398
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 246:
		//line parser.y:1403
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 247:
		//line parser.y:1412
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 248:
		//line parser.y:1414
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 249:
		//line parser.y:1416
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 250:
		//line parser.y:1418
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 251:
		//line parser.y:1421
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1430
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1440
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1449
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1458
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 256:
		//line parser.y:1467
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 257:
		//line parser.y:1476
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 258:
		//line parser.y:1485
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 259:
		//line parser.y:1494
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 260:
		//line parser.y:1504
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 261:
		//line parser.y:1513
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 262:
		//line parser.y:1524
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 263:
		//line parser.y:1533
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 264:
		//line parser.y:1541
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 265:
		//line parser.y:1549
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 266:
		//line parser.y:1557
		{
		}
	case 267:
		//line parser.y:1558
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 268:
		//line parser.y:1559
		{
		}
	case 269:
		//line parser.y:1562
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 270:
		//line parser.y:1565
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 271:
		//line parser.y:1574
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 272:
		//line parser.y:1584
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 273:
		//line parser.y:1594
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 274:
		//line parser.y:1604
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 275:
		//line parser.y:1606
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 276:
		//line parser.y:1620
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 277:
		//line parser.y:1636
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 278:
		//line parser.y:1652
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 279:
		//line parser.y:1668
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 280:
		//line parser.y:1678
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 281:
		//line parser.y:1688
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 282:
		//line parser.y:1700
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 283:
		//line parser.y:1702
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 284:
		//line parser.y:1705
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 285:
		//line parser.y:1707
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 286:
		//line parser.y:1710
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 287:
		//line parser.y:1712
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 288:
		//line parser.y:1715
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 289:
		//line parser.y:1722
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 290:
		//line parser.y:1724
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 291:
		//line parser.y:1727
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 292:
		//line parser.y:1735
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 293:
		//line parser.y:1737
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 294:
		//line parser.y:1739
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 295:
		//line parser.y:1743
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 296:
		//line parser.y:1745
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 297:
		//line parser.y:1747
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 298:
		//line parser.y:1751
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 299:
		//line parser.y:1753
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 300:
		//line parser.y:1755
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 301:
		//line parser.y:1759
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 302:
		//line parser.y:1769
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
			}
		}
	case 303:
		//line parser.y:1779
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 304:
		//line parser.y:1785
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 305:
		//line parser.y:1792
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 306:
		//line parser.y:1799
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 307:
		//line parser.y:1801
		{
		}
	case 308:
		//line parser.y:1803
		{
		}
	case 309:
		//line parser.y:1805
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 310:
		//line parser.y:1807
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 311:
		//line parser.y:1810
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 312:
		//line parser.y:1818
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 313:
		//line parser.y:1827
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 314:
		//line parser.y:1835
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 315:
		//line parser.y:1844
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 316:
		//line parser.y:1853
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 317:
		//line parser.y:1861
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 318:
		//line parser.y:1869
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 319:
		//line parser.y:1877
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 320:
		//line parser.y:1886
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 321:
		//line parser.y:1889
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 322:
		//line parser.y:1892
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 323:
		//line parser.y:1899
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 324:
		//line parser.y:1905
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 325:
		//line parser.y:1911
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 326:
		//line parser.y:1917
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 327:
		//line parser.y:1924
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 328:
		//line parser.y:1926
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 329:
		//line parser.y:1929
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 330:
		//line parser.y:1931
		{
			RubyVAL.genericValue = ast.Range{
				Start:            RubyS[Rubypt-2].genericValue,
				End:              RubyS[Rubypt-0].genericValue,
				Line:             RubyS[Rubypt-2].genericValue.LineNumber(),
				ExcludeLastValue: true,
			}
		}
	case 331:
		//line parser.y:1941
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 332:
		//line parser.y:1948
		{
			RubyVAL.genericValue = ast.Defined{Node: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

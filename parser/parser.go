//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	astString       ast.String
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CONSTANT = 57351
const NAMESPACED_CAPITAL_REF = 57352
const GLOBAL_VARIABLE = 57353
const LPAREN = 57354
const RPAREN = 57355
const COMMA = 57356
const STRING = 57357
const NamespacedModule = 57358
const ProcArg = 57359
const DO = 57360
const DEF = 57361
const END = 57362
const IF = 57363
const ELSE = 57364
const ELSIF = 57365
const UNLESS = 57366
const CLASS = 57367
const MODULE = 57368
const FOR = 57369
const WHILE = 57370
const UNTIL = 57371
const BEGIN = 57372
const RESCUE = 57373
const ENSURE = 57374
const BREAK = 57375
const NEXT = 57376
const REDO = 57377
const RETRY = 57378
const RETURN = 57379
const YIELD = 57380
const AND = 57381
const OR = 57382
const LAMBDA = 57383
const CASE = 57384
const WHEN = 57385
const ALIAS = 57386
const SELF = 57387
const NIL = 57388
const LESSTHAN = 57389
const GREATERTHAN = 57390
const EQUALTO = 57391
const BANG = 57392
const COMPLEMENT = 57393
const BINARY_PLUS = 57394
const UNARY_PLUS = 57395
const BINARY_MINUS = 57396
const UNARY_MINUS = 57397
const STAR = 57398
const RANGE = 57399
const OR_EQUALS = 57400
const AND_EQUALS = 57401
const WHITESPACE = 57402
const NEWLINE = 57403
const SEMICOLON = 57404
const COLON = 57405
const DOT = 57406
const PIPE = 57407
const SLASH = 57408
const AMPERSAND = 57409
const QUESTIONMARK = 57410
const CARET = 57411
const LBRACKET = 57412
const RBRACKET = 57413
const LBRACE = 57414
const RBRACE = 57415
const ATSIGN = 57416
const FILE_CONST_REF = 57417
const LINE_CONST_REF = 57418
const EOF = 57419

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1920

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 134,
	19, 258,
	21, 258,
	24, 258,
	25, 258,
	26, 258,
	28, 258,
	29, 258,
	30, 258,
	33, 258,
	34, 258,
	36, 258,
	37, 258,
	38, 258,
	42, 258,
	44, 258,
	62, 258,
	-2, 13,
	-1, 205,
	19, 258,
	21, 258,
	24, 258,
	25, 258,
	26, 258,
	28, 258,
	29, 258,
	30, 258,
	33, 258,
	34, 258,
	36, 258,
	37, 258,
	38, 258,
	42, 258,
	44, 258,
	62, 258,
	-2, 13,
	-1, 348,
	4, 22,
	39, 22,
	40, 22,
	47, 22,
	48, 22,
	52, 22,
	54, 22,
	64, 22,
	65, 22,
	66, 22,
	67, 22,
	-2, 120,
	-1, 360,
	19, 258,
	21, 258,
	24, 258,
	25, 258,
	26, 258,
	28, 258,
	29, 258,
	30, 258,
	33, 258,
	34, 258,
	36, 258,
	37, 258,
	38, 258,
	42, 258,
	44, 258,
	62, 258,
	-2, 13,
	-1, 398,
	4, 35,
	39, 35,
	40, 35,
	48, 35,
	52, 35,
	54, 35,
	61, 13,
	64, 35,
	65, 35,
	66, 35,
	67, 35,
	73, 13,
	-2, 15,
	-1, 576,
	14, 126,
	-2, 13,
}

const RubyNprod = 321
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4411

var RubyAct = []int{

	326, 445, 5, 136, 618, 448, 14, 148, 137, 446,
	181, 411, 247, 251, 333, 249, 135, 55, 397, 26,
	54, 2, 3, 99, 402, 387, 100, 577, 143, 332,
	101, 158, 332, 156, 332, 332, 202, 4, 25, 28,
	332, 578, 314, 21, 535, 106, 533, 511, 215, 332,
	582, 216, 509, 120, 367, 409, 147, 178, 179, 507,
	552, 189, 190, 97, 96, 305, 408, 298, 162, 283,
	159, 255, 126, 595, 193, 332, 121, 276, 422, 98,
	115, 116, 210, 211, 208, 147, 106, 204, 104, 105,
	144, 157, 317, 107, 367, 108, 627, 109, 117, 192,
	218, 219, 220, 194, 469, 103, 112, 110, 111, 227,
	92, 403, 474, 203, 232, 308, 217, 301, 92, 237,
	238, 115, 116, 242, 243, 244, 245, 279, 92, 104,
	105, 258, 565, 92, 107, 92, 108, 567, 109, 262,
	464, 263, 256, 225, 209, 92, 103, 112, 110, 111,
	240, 388, 234, 235, 615, 468, 597, 147, 266, 566,
	291, 292, 293, 282, 295, 296, 297, 267, 302, 303,
	304, 261, 309, 310, 311, 313, 367, 289, 269, 270,
	273, 275, 284, 271, 163, 264, 290, 332, 158, 144,
	156, 147, 118, 287, 318, 312, 465, 335, 336, 337,
	338, 537, 332, 175, 332, 162, 528, 332, 350, 342,
	343, 69, 150, 68, 78, 151, 77, 154, 134, 477,
	142, 93, 476, 155, 144, 155, 356, 159, 331, 444,
	158, 464, 156, 366, 252, 334, 160, 161, 174, 357,
	250, 614, 349, 209, 166, 254, 353, 80, 157, 332,
	369, 94, 95, 332, 332, 139, 81, 82, 170, 83,
	177, 84, 85, 106, 140, 141, 373, 375, 147, 332,
	384, 124, 171, 167, 125, 119, 138, 613, 145, 163,
	92, 72, 71, 201, 253, 73, 420, 447, 164, 165,
	157, 600, 248, 167, 147, 176, 400, 120, 115, 116,
	162, 385, 168, 169, 598, 266, 104, 105, 122, 123,
	574, 107, 171, 108, 267, 109, 117, 390, 569, 525,
	121, 172, 173, 103, 112, 110, 111, 158, 99, 252,
	401, 100, 128, 419, 99, 101, 99, 100, 252, 100,
	254, 101, 519, 101, 250, 428, 424, 99, 198, 254,
	100, 199, 465, 550, 101, 147, 147, 196, 437, 440,
	197, 439, 252, 551, 129, 460, 127, 106, 590, 591,
	451, 372, 328, 254, 322, 323, 589, 429, 264, 253,
	434, 455, 431, 433, 449, 432, 450, 330, 253, 456,
	430, 454, 462, 463, 339, 177, 372, 442, 466, 376,
	280, 99, 115, 116, 100, 94, 452, 200, 101, 423,
	104, 105, 374, 483, 532, 107, 502, 108, 503, 109,
	117, 459, 354, 497, 497, 355, 486, 103, 112, 110,
	111, 132, 77, 470, 386, 472, 513, 475, 505, 427,
	425, 329, 426, 625, 106, 518, 624, 531, 520, 147,
	99, 517, 521, 100, 492, 340, 491, 101, 526, 132,
	77, 407, 521, 427, 416, 530, 417, 508, 406, 510,
	99, 512, 225, 100, 515, 420, 418, 101, 539, 115,
	116, 633, 542, 630, 629, 131, 405, 104, 105, 395,
	132, 77, 107, 389, 108, 378, 109, 529, 377, 376,
	555, 556, 371, 346, 103, 112, 110, 111, 320, 106,
	536, 616, 319, 538, 246, 562, 563, 628, 222, 630,
	629, 545, 394, 482, 481, 570, 572, 480, 327, 482,
	481, 345, 575, 571, 573, 1, 462, 576, 207, 579,
	51, 91, 90, 560, 115, 116, 89, 88, 87, 86,
	41, 40, 104, 105, 568, 39, 38, 107, 498, 108,
	20, 109, 43, 44, 16, 12, 13, 11, 596, 103,
	112, 110, 111, 599, 45, 601, 541, 521, 24, 521,
	23, 22, 27, 19, 10, 35, 30, 18, 15, 70,
	152, 42, 17, 37, 36, 611, 593, 31, 29, 32,
	187, 74, 0, 187, 187, 0, 0, 0, 0, 497,
	497, 497, 0, 602, 622, 0, 0, 0, 0, 152,
	631, 0, 0, 0, 187, 187, 187, 0, 0, 0,
	635, 225, 0, 497, 0, 0, 0, 497, 497, 497,
	0, 0, 0, 187, 0, 187, 187, 0, 187, 626,
	187, 187, 187, 187, 0, 187, 0, 0, 187, 0,
	0, 187, 187, 0, 634, 0, 0, 0, 608, 609,
	610, 0, 187, 0, 0, 0, 52, 0, 0, 187,
	187, 187, 187, 277, 0, 106, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 187, 0, 187, 632,
	0, 0, 0, 187, 0, 0, 0, 299, 0, 636,
	637, 306, 0, 0, 638, 0, 315, 0, 0, 0,
	115, 116, 0, 0, 0, 152, 153, 0, 104, 105,
	0, 0, 0, 107, 0, 108, 188, 109, 0, 188,
	188, 0, 0, 152, 187, 103, 112, 110, 111, 0,
	0, 0, 540, 0, 0, 153, 0, 0, 0, 0,
	188, 188, 188, 187, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 187, 0, 0, 188,
	0, 188, 188, 0, 188, 0, 188, 188, 188, 188,
	0, 188, 0, 0, 188, 0, 0, 188, 188, 0,
	0, 0, 152, 0, 0, 106, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 188, 188, 188, 188, 278,
	0, 187, 0, 0, 0, 187, 187, 153, 152, 0,
	0, 0, 188, 0, 188, 0, 0, 0, 0, 188,
	115, 116, 0, 300, 0, 0, 0, 307, 104, 105,
	0, 0, 316, 107, 0, 108, 0, 109, 0, 0,
	0, 153, 0, 0, 0, 103, 112, 110, 111, 187,
	0, 0, 516, 0, 0, 187, 0, 0, 0, 153,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	152, 0, 0, 0, 187, 0, 0, 0, 0, 188,
	187, 0, 188, 0, 187, 0, 0, 0, 187, 0,
	0, 188, 188, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	69, 150, 68, 78, 151, 77, 154, 134, 153, 0,
	93, 0, 155, 144, 0, 0, 0, 0, 0, 187,
	187, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 188, 188, 0, 153, 0, 80, 0, 187, 0,
	94, 95, 0, 0, 0, 81, 82, 187, 83, 0,
	84, 85, 0, 152, 0, 0, 0, 0, 436, 0,
	0, 0, 0, 0, 0, 285, 0, 145, 0, 92,
	72, 71, 0, 0, 0, 188, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 153, 153, 0, 0, 0,
	188, 0, 0, 553, 0, 0, 188, 0, 0, 0,
	188, 0, 0, 0, 188, 0, 0, 0, 0, 152,
	0, 187, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 0, 0, 0, 0, 149, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	149, 149, 0, 0, 0, 188, 188, 0, 0, 0,
	0, 583, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 149, 149, 149, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 187, 153,
	149, 0, 149, 149, 0, 149, 0, 149, 149, 149,
	149, 0, 149, 0, 0, 149, 187, 0, 149, 149,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 149,
	0, 0, 0, 9, 0, 0, 149, 149, 149, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 554,
	0, 0, 0, 149, 0, 149, 0, 0, 0, 0,
	149, 0, 115, 116, 0, 153, 0, 188, 0, 0,
	104, 105, 0, 0, 0, 107, 0, 108, 0, 109,
	0, 0, 149, 146, 0, 0, 153, 103, 112, 110,
	111, 0, 0, 182, 404, 0, 191, 195, 0, 0,
	149, 149, 0, 0, 0, 0, 0, 584, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 212, 213, 214,
	149, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 149, 188, 0, 221, 0, 223, 224,
	0, 226, 0, 228, 229, 230, 231, 0, 233, 0,
	0, 236, 188, 0, 239, 241, 0, 0, 0, 149,
	0, 0, 106, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 265, 268, 272, 274, 0, 0, 149, 0,
	0, 0, 398, 149, 146, 149, 0, 0, 0, 286,
	0, 288, 0, 0, 0, 0, 294, 115, 116, 0,
	0, 0, 0, 0, 0, 104, 105, 0, 0, 0,
	107, 0, 108, 0, 109, 0, 0, 0, 146, 0,
	0, 0, 103, 112, 110, 111, 149, 0, 0, 368,
	0, 0, 149, 0, 0, 0, 341, 347, 0, 0,
	0, 0, 0, 0, 321, 0, 149, 149, 0, 0,
	0, 398, 0, 0, 0, 0, 361, 149, 0, 362,
	0, 149, 0, 0, 0, 149, 0, 0, 364, 365,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 69, 150, 68,
	78, 151, 77, 154, 134, 206, 0, 93, 0, 155,
	144, 0, 0, 180, 0, 0, 149, 149, 0, 0,
	0, 0, 0, 0, 391, 0, 0, 0, 347, 399,
	0, 206, 0, 80, 0, 149, 0, 94, 95, 0,
	0, 139, 81, 82, 149, 83, 0, 84, 85, 0,
	149, 0, 0, 0, 0, 0, 0, 33, 0, 0,
	0, 0, 285, 0, 145, 0, 92, 72, 71, 0,
	0, 0, 421, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 260, 0,
	0, 0, 146, 206, 0, 0, 106, 438, 0, 281,
	0, 0, 0, 441, 0, 130, 133, 443, 0, 0,
	0, 391, 0, 0, 0, 0, 149, 183, 149, 453,
	183, 183, 0, 0, 0, 0, 0, 0, 0, 461,
	0, 115, 116, 0, 0, 0, 0, 149, 0, 104,
	105, 183, 183, 183, 107, 0, 108, 0, 109, 0,
	0, 0, 478, 479, 0, 363, 103, 112, 110, 111,
	183, 0, 183, 183, 0, 183, 0, 183, 183, 183,
	183, 182, 183, 0, 0, 183, 0, 0, 183, 183,
	514, 106, 0, 0, 0, 149, 206, 0, 0, 183,
	0, 0, 0, 0, 0, 0, 183, 183, 183, 183,
	0, 113, 370, 149, 0, 0, 0, 0, 102, 0,
	0, 379, 0, 183, 382, 183, 115, 116, 0, 0,
	183, 0, 0, 0, 104, 105, 0, 0, 0, 107,
	0, 108, 0, 109, 117, 0, 0, 393, 0, 396,
	0, 103, 112, 110, 111, 114, 0, 0, 0, 0,
	0, 0, 561, 0, 564, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 69, 348, 68, 78, 185, 77,
	186, 79, 0, 461, 93, 0, 0, 414, 415, 0,
	183, 0, 0, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 183, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 94, 95, 0, 0, 396, 81,
	82, 0, 83, 0, 84, 85, 381, 0, 0, 0,
	332, 603, 0, 0, 283, 0, 0, 0, 0, 75,
	0, 76, 344, 92, 72, 71, 457, 0, 183, 612,
	0, 0, 183, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 471, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 484, 0,
	0, 0, 488, 489, 0, 490, 0, 0, 0, 106,
	0, 504, 0, 506, 0, 0, 183, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 0, 523, 0, 102, 0, 0, 524,
	0, 183, 0, 106, 115, 116, 0, 183, 0, 0,
	0, 183, 104, 105, 0, 183, 0, 107, 0, 108,
	0, 109, 0, 183, 0, 0, 0, 543, 544, 103,
	112, 110, 111, 114, 0, 0, 549, 0, 115, 116,
	0, 0, 0, 0, 0, 0, 104, 105, 557, 0,
	559, 107, 0, 108, 0, 109, 183, 183, 594, 0,
	0, 0, 0, 103, 112, 110, 111, 114, 493, 0,
	0, 0, 0, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 580, 0, 0,
	0, 0, 581, 115, 116, 0, 0, 586, 587, 588,
	0, 104, 105, 0, 0, 0, 107, 0, 108, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 103, 112,
	110, 111, 0, 0, 0, 0, 0, 605, 606, 607,
	0, 0, 0, 0, 0, 414, 415, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 49, 68, 78, 50,
	77, 53, 79, 0, 0, 93, 0, 0, 183, 46,
	621, 499, 620, 619, 500, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 585,
	0, 495, 496, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 53, 79, 183, 0, 93, 0, 0,
	0, 46, 617, 499, 620, 619, 500, 47, 48, 0,
	60, 61, 58, 183, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 495, 496, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 53, 79, 0, 0, 93,
	0, 0, 0, 46, 485, 56, 413, 412, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 324, 325, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 53, 79, 0,
	0, 93, 0, 0, 0, 46, 410, 56, 413, 412,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 324, 325, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 53,
	79, 0, 0, 93, 0, 0, 0, 46, 0, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 420,
	447, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 324,
	325, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 53, 79, 0, 0, 93, 0, 0, 0, 46,
	546, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 547, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 324, 325, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 53, 79, 0, 0, 93, 0, 0,
	0, 46, 0, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 6, 7, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 92, 72, 71, 8,
	69, 49, 68, 78, 50, 77, 53, 79, 0, 0,
	93, 0, 0, 0, 46, 623, 499, 0, 0, 500,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 495, 496, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 92,
	72, 71, 69, 49, 68, 78, 50, 77, 53, 79,
	0, 0, 93, 0, 0, 0, 46, 604, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 324, 325,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 92, 72, 71, 69, 49, 68, 78, 50, 77,
	53, 79, 0, 0, 93, 0, 0, 0, 46, 592,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	324, 325, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 92, 72, 71, 69, 49, 68, 78,
	50, 77, 53, 79, 0, 0, 93, 0, 0, 0,
	46, 558, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 324, 325, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 92, 72, 71, 69, 49,
	68, 78, 50, 77, 53, 79, 0, 0, 93, 0,
	0, 0, 46, 548, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 324, 325, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 92, 72, 71,
	69, 49, 68, 78, 50, 77, 53, 79, 0, 0,
	93, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 324, 325, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 534, 92,
	72, 71, 69, 49, 68, 78, 50, 77, 53, 79,
	0, 0, 93, 0, 0, 0, 46, 527, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 324, 325,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 92, 72, 71, 69, 49, 68, 78, 50, 77,
	53, 79, 0, 0, 93, 0, 0, 0, 46, 501,
	499, 0, 0, 500, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	495, 496, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 92, 72, 71, 69, 49, 68, 78,
	50, 77, 53, 79, 0, 0, 93, 0, 0, 0,
	46, 494, 499, 0, 0, 500, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 92, 72, 71, 69, 49,
	68, 78, 50, 77, 53, 79, 0, 0, 93, 0,
	0, 0, 46, 487, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 324, 325, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 92, 72, 71,
	69, 49, 68, 78, 50, 77, 53, 79, 0, 0,
	93, 0, 0, 0, 46, 467, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 324, 325, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 92,
	72, 71, 69, 49, 68, 78, 50, 77, 53, 79,
	0, 0, 93, 0, 0, 0, 46, 458, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 324, 325,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 92, 72, 71, 69, 49, 68, 78, 50, 77,
	53, 79, 0, 0, 93, 0, 0, 0, 46, 392,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	324, 325, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 92, 72, 71, 69, 49, 68, 78,
	50, 77, 53, 79, 0, 0, 93, 0, 0, 0,
	46, 383, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 324, 325, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 92, 72, 71, 69, 49,
	68, 78, 50, 77, 53, 79, 0, 0, 93, 0,
	0, 0, 46, 380, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 324, 325, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 92, 72, 71,
	69, 49, 68, 78, 50, 77, 53, 79, 0, 0,
	93, 0, 0, 0, 46, 0, 499, 0, 0, 500,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 495, 496, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 92,
	72, 71, 69, 49, 68, 78, 50, 77, 53, 79,
	0, 0, 93, 0, 0, 0, 46, 0, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 324, 325,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 92, 72, 71, 69, 49, 68, 78, 50, 77,
	53, 79, 352, 0, 93, 0, 0, 0, 46, 0,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 92, 72, 71, 69, 49, 68, 78,
	50, 77, 53, 79, 0, 0, 93, 0, 0, 0,
	46, 0, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 92, 72, 71, 69, 49,
	68, 78, 50, 77, 53, 79, 0, 0, 93, 0,
	0, 0, 46, 0, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	69, 150, 68, 78, 151, 77, 154, 79, 0, 0,
	93, 0, 155, 75, 0, 76, 0, 92, 72, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	94, 95, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 92,
	72, 71, 69, 184, 68, 78, 185, 77, 186, 79,
	0, 0, 93, 0, 0, 69, 184, 68, 78, 185,
	77, 186, 360, 0, 0, 93, 0, 0, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 94, 95, 0, 0, 0, 81, 82, 0,
	83, 80, 84, 85, 0, 94, 95, 0, 332, 358,
	81, 82, 283, 83, 0, 84, 85, 75, 0, 76,
	0, 92, 72, 71, 0, 0, 0, 0, 0, 0,
	359, 0, 145, 0, 92, 72, 71, 69, 348, 68,
	78, 185, 77, 186, 79, 0, 0, 93, 0, 0,
	69, 150, 68, 78, 151, 77, 154, 134, 0, 0,
	93, 0, 155, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 80, 84, 85, 0,
	94, 95, 0, 332, 0, 81, 82, 0, 83, 0,
	84, 85, 75, 0, 76, 344, 92, 72, 71, 0,
	0, 0, 0, 0, 0, 285, 0, 145, 0, 92,
	72, 71, 69, 184, 68, 78, 185, 77, 186, 79,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 94, 95, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 92, 72, 71, 69, 184, 68, 78, 185, 77,
	186, 79, 0, 0, 93, 0, 0, 69, 150, 68,
	78, 151, 77, 154, 205, 0, 0, 93, 0, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 62, 0, 0, 94, 95, 0, 0, 0, 81,
	82, 0, 83, 80, 84, 85, 0, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 75,
	0, 76, 0, 92, 72, 71, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 92, 72, 71, 69,
	184, 68, 78, 185, 77, 186, 79, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 106, 0, 0, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 115, 116, 0, 0, 0, 0, 0, 0, 104,
	105, 0, 0, 0, 107, 0, 108, 0, 109, 0,
	0, 0, 115, 116, 0, 0, 103, 112, 110, 111,
	104, 105, 0, 0, 0, 107, 0, 108, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 103, 112, 110,
	111,
}
var RubyPact = []int{

	-40, 2392, -1000, -1000, -1000, 2, -1000, -1000, -1000, 1587,
	-1000, -1000, -1000, -1000, 168, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 226, 250, -1000, 8, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 360, 481, 422, 206,
	178, 230, 244, 263, 189, 246, 3833, 3833, -1000, 4284,
	3833, 3833, 4284, 4284, 336, 327, -1000, 400, -1000, -1000,
	268, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4212, -1000,
	72, 3833, 3833, 4284, 4284, 4284, -1000, -1000, -1000, -1000,
	-1000, -1000, 42, -1000, -1000, -1000, -1000, -1000, -1000, 3833,
	3833, 3833, 4284, 512, 4284, 4284, -1000, 4284, 3833, 4284,
	4284, 4284, 4284, 3833, 4284, -1000, -1000, 4284, 3833, 3833,
	4284, 4284, 3833, 3833, 3833, 3833, 508, 228, 7, 332,
	84, 4284, 317, -1000, -1000, 72, -1000, 171, 4284, 4199,
	4284, 4284, 71, 386, 4, -1000, 4322, -1000, -1000, 6,
	1402, 21, 135, 224, 223, 4284, -1000, 4284, -1000, 3833,
	3833, 3833, 4284, 3833, 3833, 3833, 61, 3833, 3833, 3833,
	59, 3833, 3833, 3833, 3833, 36, 506, 502, 449, 313,
	3617, 358, 4322, -1000, 4055, 220, -1000, -2, -1000, 380,
	326, 4322, 192, 358, -1000, 1819, 3833, 3833, 3833, 3833,
	387, -1000, 3885, 4042, 364, -1000, 4322, 3689, -1000, -1000,
	449, 449, 4322, 4322, 4322, -1000, -1000, 416, 449, 449,
	449, 4322, 3970, 4322, 4322, 4127, 4322, 449, 4322, 4322,
	4322, 4322, 449, 1502, 4127, 4127, 4322, 449, 449, 4322,
	162, 1278, 449, 449, 449, 449, 72, -1000, 496, 382,
	356, -1000, 218, 493, 492, 489, -1000, 3473, 422, 4322,
	3401, 3885, -1000, -1000, -1000, 363, -46, 80, 1785, -1000,
	-1000, -1000, 1819, -1000, 1819, -1000, -1000, -1000, -1000, 487,
	4284, 3329, -1000, 483, 1669, 4284, 4322, 3885, 259, -47,
	40, 449, 449, 449, 1143, 449, 449, 449, -1000, -1000,
	-1000, 480, 449, 449, 449, -1000, -1000, -1000, 462, 449,
	449, 449, 189, 449, -1000, -1000, -1000, 455, 381, -4,
	-15, 2176, -1000, -1000, -1000, -1000, 449, 444, 4284, -1000,
	-1000, 192, -1000, 420, 4284, 449, 449, 449, 449, -1000,
	376, 4322, -1000, -1000, -1000, 371, 366, 4343, 925, 3885,
	449, -1000, -1000, 3957, -1000, -1000, -1000, 72, 3833, 4284,
	-1000, 4322, 4322, 4284, 4322, 4322, -1000, 4284, 180, -1000,
	2248, 332, 323, 357, 393, 4284, -1000, -1000, 332, 2248,
	-1000, -1000, 3257, -1000, 351, 3885, 182, -1000, -1000, -1000,
	208, 4322, -1000, 3185, 90, -1000, 3617, -1000, 6, 41,
	364, 173, -1000, -1000, 170, -1000, -1000, -1000, 4284, 4284,
	-1000, 507, 3833, -1000, 2104, 3113, -1000, -1000, -1000, -1000,
	450, 4322, 3041, 2969, 396, -1000, -1000, 4284, 358, -12,
	-1000, -21, -1000, -26, -1000, 3833, 4284, 364, 4322, -1000,
	449, 801, 3885, 4322, 3833, 322, 255, -1000, -1000, -1000,
	-1000, -1000, -1000, 4322, -1000, 299, 255, 2897, -1000, 193,
	-1000, 4322, -1000, -1000, 3833, 441, -1000, -1000, -1000, 408,
	-27, 2825, -29, 3617, 91, 188, -1000, 3833, 681, 505,
	-1000, 3833, -1000, 449, 3617, -1000, 501, -1000, 2320, 2753,
	3617, 349, 54, -1000, -1000, -1000, -1000, 449, -1000, 3833,
	3833, -1000, -1000, -1000, 2681, 358, 3617, -1000, 3885, -1000,
	4127, -1000, 126, 449, 4322, 146, 88, 351, 449, -1000,
	298, -1000, 3617, 2248, 2248, -1000, 290, -1000, 72, 3885,
	449, -43, -1000, -1000, -1000, -1000, -32, -1000, 3761, 449,
	338, -1000, 449, 3617, 3617, -1000, -1000, -1000, -1000, 3617,
	44, 422, -1000, -1000, -1000, 315, 307, 2609, -1000, 3617,
	14, 4322, -1000, -1000, 1874, 10, -1000, 3833, 143, -1000,
	284, 255, 271, 255, -1000, -1000, -1000, 4284, -1000, 449,
	3617, 2537, -1000, -1000, -1000, -1000, 3617, 3617, 3617, -1000,
	-1000, -1000, -1000, 14, 3833, 4284, 449, -1000, -1000, 257,
	-1000, 221, 141, 440, -1000, 3617, 3617, 3617, 2032, 1960,
	2465, 429, 82, -1000, -1000, -1000, -1000, -1000, 497, 3833,
	-1000, -1000, 461, -1000, -1000, -1000, 14, -1000, -1000, 3833,
	-1000, 449, 3545, -1000, 14, 449, 3545, 3545, 3545,
}
var RubyPgo = []int{

	0, 601, 0, 285, 599, 19, 3, 598, 597, 594,
	593, 5, 39, 592, 7, 591, 6, 589, 588, 587,
	1153, 586, 676, 1017, 585, 584, 583, 582, 581, 580,
	578, 574, 567, 566, 13, 540, 565, 564, 1467, 14,
	43, 563, 562, 38, 560, 558, 4, 20, 556, 555,
	551, 550, 549, 548, 547, 546, 542, 541, 1364, 538,
	9, 16, 18, 11, 535, 12, 531, 78, 1, 528,
	8, 522, 10, 503, 28, 17, 15, 456, 455, 446,
	36,
}
var RubyR1 = []int{

	0, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 79, 79, 80, 80, 58, 58, 58, 58, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 31, 31, 31,
	31, 31, 31, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 17, 17, 43, 15, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 24, 61, 61, 61, 61, 72, 72,
	70, 70, 70, 70, 70, 70, 70, 14, 74, 74,
	68, 68, 25, 25, 25, 25, 25, 25, 25, 25,
	65, 65, 65, 76, 76, 76, 34, 34, 34, 34,
	32, 32, 33, 36, 38, 38, 38, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 18, 18, 18, 75,
	75, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 35, 35, 22, 22, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 8, 3, 1, 78, 78,
	78, 78, 78, 78, 78, 4, 4, 4, 66, 66,
	73, 73, 73, 6, 6, 6, 6, 6, 6, 62,
	71, 71, 71, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 63, 63, 63, 63, 59, 59,
	59, 9, 19, 19, 19, 19, 11, 11, 11, 11,
	11, 11, 11, 11, 77, 77, 69, 69, 60, 60,
	26, 26, 27, 28, 28, 28, 30, 30, 30, 29,
	29, 29, 12, 44, 44, 44, 67, 67, 67, 67,
	67, 45, 45, 45, 45, 45, 46, 46, 46, 46,
	42, 41, 10, 40, 40, 40, 40, 39, 39, 5,
	7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 6, 7,
	1, 2, 6, 6, 2, 3, 2, 3, 4, 5,
	4, 3, 4, 5, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 6, 7,
	6, 6, 8, 4, 5, 8, 1, 4, 1, 3,
	0, 1, 1, 1, 4, 4, 4, 2, 1, 3,
	0, 2, 6, 7, 8, 8, 9, 9, 6, 7,
	1, 3, 3, 0, 1, 3, 1, 2, 3, 2,
	4, 6, 5, 4, 1, 2, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 9,
	6, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 3, 3,
	3, 3, 4, 3, 3, 3, 4, 3, 3, 3,
	4, 3, 3, 3, 4, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 5, 1, 1, 0, 1,
	1, 1, 4, 4, 4, 3, 5, 5, 3, 7,
	3, 7, 8, 3, 4, 5, 5, 5, 6, 3,
	0, 1, 3, 4, 5, 3, 3, 3, 3, 3,
	5, 6, 5, 3, 4, 3, 3, 2, 0, 2,
	2, 3, 4, 6, 8, 6, 2, 3, 5, 5,
	5, 4, 4, 4, 1, 3, 0, 2, 1, 2,
	2, 1, 1, 2, 2, 1, 1, 3, 3, 1,
	3, 3, 5, 5, 5, 3, 0, 2, 2, 2,
	2, 5, 6, 5, 6, 5, 4, 3, 3, 2,
	4, 4, 2, 5, 7, 4, 6, 4, 5, 3,
	3,
}
var RubyChk = []int{

	-1000, -64, 61, 62, 77, -2, 61, 62, 77, -20,
	-25, -32, -36, -33, -16, -18, -37, -13, -19, -26,
	-44, -40, -28, -29, -30, -43, -5, -27, -12, -7,
	-21, -8, -4, -38, -23, -24, -9, -10, -48, -49,
	-50, -51, -15, -42, -41, -31, 19, 25, 26, 6,
	9, -35, -22, 11, -47, -75, 21, 24, 30, 38,
	28, 29, 42, 37, 33, 34, 36, 44, 7, 5,
	-17, 76, 75, -3, -1, 70, 72, 10, 8, 12,
	41, 50, 51, 53, 55, 56, -52, -53, -54, -55,
	-56, -57, 74, 15, 45, 46, 62, 61, 77, 21,
	24, 28, 31, 64, 47, 48, 4, 52, 54, 56,
	66, 67, 65, 24, 68, 39, 40, 57, 24, 49,
	47, 70, 58, 59, 21, 24, 64, 6, -3, 4,
	-38, 4, 9, -38, 12, -61, -6, -70, 70, 49,
	58, 59, 14, -74, 18, 72, -20, -16, -14, -23,
	6, 9, -35, -22, 11, 17, 12, 70, 10, 49,
	58, 59, 70, 49, 58, 59, 14, 49, 58, 59,
	14, 49, 58, 59, 49, 14, 49, 14, -2, -2,
	-58, -72, -20, -38, 6, 9, 11, -35, -22, -2,
	-2, -20, -80, -72, -12, -20, 21, 24, 21, 24,
	7, 15, -80, -80, -70, 12, -20, -59, -6, 72,
	-2, -2, -20, -20, -20, 6, 9, 74, -2, -2,
	-2, -20, 6, -20, -20, -80, -20, -2, -20, -20,
	-20, -20, -2, -20, -80, -80, -20, -2, -2, -20,
	-74, -20, -2, -2, -2, -2, 6, -65, 64, -76,
	12, -34, 6, 56, 17, 64, -65, -58, 47, -20,
	-58, -80, -6, -6, 14, -20, -5, -74, -20, -43,
	-12, -40, -20, -12, -20, -12, 6, -35, -22, 56,
	14, -58, -62, 65, -80, 70, -20, -80, -20, -5,
	-74, -2, -2, -2, -20, -2, -2, -2, 6, -35,
	-22, 56, -2, -2, -2, 6, -35, -22, 56, -2,
	-2, -2, -47, -2, 6, -35, -22, 56, -75, 6,
	6, -58, 61, 62, 61, 62, -2, -69, 14, 61,
	61, -80, 61, -39, 43, -2, -2, -2, -2, 7,
	-78, -20, -16, -14, 73, -66, -73, -20, 6, -80,
	-2, 62, 13, -80, 6, 9, -6, -61, 49, 70,
	12, -20, -20, 63, -20, -20, 71, 14, 71, -6,
	-58, 6, 14, -76, 56, 49, 6, 6, 6, -58,
	20, -38, -58, 20, -70, -80, 71, 71, 71, 6,
	-80, -20, 20, -58, -71, 6, -58, -62, -23, -20,
	-70, 71, 71, 71, 71, 6, 6, 6, 70, 70,
	20, -63, 23, 22, -58, -58, 20, 22, 32, -11,
	31, -20, -67, -67, -39, 20, 22, 43, -72, -80,
	14, -80, 14, -80, 14, 4, 63, -70, -20, -6,
	-2, -20, -80, -20, 49, -68, -60, 32, -11, -65,
	-34, 13, 13, -20, -65, -68, -60, -58, 20, -80,
	14, -20, -16, -14, 49, 14, -14, 20, 65, 14,
	-80, -58, -80, -58, 71, -80, 49, 49, -20, -20,
	20, 23, 22, -2, -58, 20, -63, 20, -58, -58,
	-58, -77, 4, -38, 20, 61, 62, -2, -45, 21,
	24, 20, 20, 22, -58, -72, -58, 71, -80, 73,
	-80, 73, -80, -2, -20, -80, 71, -70, -2, 20,
	-68, -11, -58, -58, -58, 20, -68, 20, 13, -80,
	-2, 6, 6, 73, 73, 73, -80, 13, -80, -2,
	71, 71, -2, -58, -58, 20, 20, 32, 20, -58,
	4, 14, 6, -35, -22, -2, -2, -58, 20, -58,
	-80, -20, -16, -14, -20, 6, 13, 49, -80, 20,
	-68, -60, -68, -60, 20, -6, -14, 70, 73, -2,
	-58, -58, 6, -35, -22, -38, -58, -58, -58, 61,
	61, 62, 20, -80, 4, 63, -2, 13, 20, -68,
	20, -68, -80, -20, 20, -58, -58, -58, -67, -67,
	-67, -2, -20, 20, 20, 13, 71, 20, -46, 23,
	22, 20, -46, 20, -79, 14, -80, 14, 20, 23,
	22, -2, -67, 20, -80, -2, -67, -67, -67,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 0, 0, 0, 22,
	23, 25, 26, 24, 0, 0, 0, 0, 15, 281,
	0, 0, 13, 285, 289, 286, 282, 0, 19, 20,
	21, 27, 28, 29, 30, 13, 13, 156, 80, 258,
	0, 0, 0, 0, 0, 0, 47, 48, 49, 50,
	51, 52, 0, 74, 216, 217, 5, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 13, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 0, 143,
	15, 0, 154, 15, -2, 84, 86, 94, 13, 0,
	0, 0, 0, 116, 15, 13, 121, 122, 123, 35,
	22, 23, 25, 26, 24, 0, 13, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
	276, 280, 118, 34, 22, 23, 24, 25, 26, 0,
	0, 13, 0, 283, 284, 118, 0, 0, 0, 0,
	0, 75, 218, 0, 81, -2, 121, 0, 312, 13,
	205, 206, 207, 208, 77, 185, 186, 0, 245, 253,
	295, 76, 87, 96, 98, 0, 209, 210, 211, 212,
	213, 214, 247, 0, 0, 0, 319, 249, 165, 97,
	0, 128, 177, 184, 246, 248, 91, 15, 0, 140,
	143, 144, 146, 0, 0, 0, 15, 0, 0, 15,
	0, 120, 85, 95, 13, 128, 0, 0, 157, 158,
	159, 160, 171, 172, 178, 179, 189, 190, 191, 0,
	13, 0, 15, 240, 15, 13, 127, 120, 128, 0,
	0, 161, 173, 180, 0, 162, 174, 181, 193, 194,
	195, 0, 163, 175, 182, 197, 198, 199, 0, 164,
	176, 183, 166, 167, 201, 202, 203, 0, 168, 0,
	0, 0, 15, 15, 16, 17, 18, 0, 0, 296,
	296, 0, 14, 0, 0, 290, 291, 287, 288, 320,
	13, 219, 220, 221, 225, 13, 13, 0, -2, 120,
	259, 260, 261, 15, 187, 188, 88, 90, 0, 13,
	-2, 128, 113, 0, 310, 311, 106, 0, 107, 92,
	130, 143, 0, 0, 0, 0, 147, 149, 143, 130,
	150, 15, 0, 153, 13, 0, 99, 102, 104, 192,
	0, 129, 233, 0, 0, 241, 13, 15, -2, 128,
	13, 100, 103, 105, 101, 196, 200, 204, 0, 0,
	243, 0, 0, 15, 0, 0, 262, 15, 15, 277,
	15, 119, 0, 0, 0, 315, 15, 0, 15, 0,
	13, 0, 13, 0, 13, 13, 0, 13, 0, 89,
	93, 0, 120, 292, 0, 0, 130, 15, 278, 15,
	145, 141, 142, 148, 15, 0, 130, 0, 152, 0,
	13, 124, 125, 126, 0, 0, 117, 234, 239, 0,
	0, 0, 0, 13, 99, 0, 13, 0, 0, 0,
	244, 0, 15, 15, 257, 250, 0, 252, 0, 0,
	266, 15, 0, 274, 293, 297, 298, 299, 300, 0,
	0, 294, 313, 15, 0, 15, 13, 215, 0, 226,
	0, 227, 0, 228, 230, 0, 0, 13, 111, 132,
	0, 279, 131, 130, 130, 138, 0, 151, 78, 0,
	108, 0, 242, 235, 236, 237, 0, 83, 0, 110,
	0, 170, 15, 255, 256, 251, 263, 15, 265, 267,
	0, 0, 15, 15, 15, 15, 0, 0, 316, 13,
	317, 222, 223, 224, 0, 0, 82, 0, 0, 133,
	0, 130, 0, 130, 139, 79, -2, 0, 238, 109,
	254, 0, 15, 15, 15, 275, 271, 272, 273, 296,
	15, 15, 314, 318, 13, 0, 112, 114, 134, 0,
	135, 0, 0, 0, 264, 268, 269, 270, 0, 0,
	0, 11, 13, 136, 137, 115, 169, 301, 0, 0,
	296, 303, 0, 305, 229, 12, 231, 13, 302, 0,
	296, 296, 309, 304, 232, 296, 307, 308, 306,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:225
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:227
		{
		}
	case 3:
		//line parser.y:229
		{
		}
	case 4:
		//line parser.y:231
		{
		}
	case 5:
		//line parser.y:233
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:235
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:237
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:243
		{
		}
	case 11:
		//line parser.y:245
		{
		}
	case 12:
		//line parser.y:246
		{
		}
	case 13:
		//line parser.y:248
		{
		}
	case 14:
		//line parser.y:249
		{
		}
	case 15:
		//line parser.y:252
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:254
		{
		}
	case 17:
		//line parser.y:256
		{
		}
	case 18:
		//line parser.y:258
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		//line parser.y:269
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 75:
		//line parser.y:271
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 76:
		//line parser.y:279
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:282
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 78:
		//line parser.y:285
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:294
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:304
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:310
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 82:
		//line parser.y:318
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:327
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:336
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:345
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:355
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:365
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:374
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:385
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:396
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:406
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:416
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:427
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:440
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:449
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:459
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:469
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:479
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:491
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:501
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:511
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:521
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:531
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:541
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:551
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:561
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:571
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:583
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 109:
		//line parser.y:593
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 110:
		//line parser.y:603
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 111:
		//line parser.y:613
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 112:
		//line parser.y:623
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 113:
		//line parser.y:638
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 114:
		//line parser.y:650
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 115:
		//line parser.y:652
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 116:
		//line parser.y:654
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 117:
		//line parser.y:656
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:659
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:661
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:663
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 121:
		//line parser.y:665
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:667
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:669
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:671
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:673
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:675
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:678
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 128:
		//line parser.y:688
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:690
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:693
		{
			RubyVAL.genericSlice = nil
		}
	case 131:
		//line parser.y:695
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 132:
		//line parser.y:698
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 133:
		//line parser.y:709
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 134:
		//line parser.y:721
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 135:
		//line parser.y:733
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 136:
		//line parser.y:745
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 137:
		//line parser.y:758
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 138:
		//line parser.y:771
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 139:
		//line parser.y:782
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 140:
		//line parser.y:796
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 141:
		//line parser.y:798
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 142:
		//line parser.y:800
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 143:
		//line parser.y:802
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 144:
		//line parser.y:804
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 145:
		//line parser.y:806
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 146:
		//line parser.y:809
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 147:
		//line parser.y:811
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 148:
		//line parser.y:813
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 149:
		//line parser.y:815
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 150:
		//line parser.y:819
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 151:
		//line parser.y:829
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 152:
		//line parser.y:841
		{
			name := RubyS[Rubypt-3].genericValue.(ast.BareReference).Name
			if name != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + name + ")")
			}

			class := ast.Eigenclass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 153:
		//line parser.y:856
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 154:
		//line parser.y:867
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 155:
		//line parser.y:876
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 156:
		//line parser.y:895
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 157:
		//line parser.y:913
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 158:
		//line parser.y:922
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 159:
		//line parser.y:928
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 160:
		//line parser.y:934
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 161:
		//line parser.y:936
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 162:
		//line parser.y:945
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 163:
		//line parser.y:954
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 164:
		//line parser.y:963
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 165:
		//line parser.y:965
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 166:
		//line parser.y:968
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:977
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:986
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 169:
		//line parser.y:996
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 170:
		//line parser.y:1011
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 171:
		//line parser.y:1017
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1026
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1032
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1041
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1050
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1059
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 177:
		//line parser.y:1061
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 178:
		//line parser.y:1070
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 179:
		//line parser.y:1079
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1085
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 181:
		//line parser.y:1094
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1103
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 183:
		//line parser.y:1112
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 184:
		//line parser.y:1114
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 185:
		//line parser.y:1121
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 186:
		//line parser.y:1127
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 187:
		//line parser.y:1134
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 188:
		//line parser.y:1140
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 189:
		//line parser.y:1147
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 190:
		//line parser.y:1149
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 191:
		//line parser.y:1151
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 192:
		//line parser.y:1153
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 193:
		//line parser.y:1156
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 194:
		//line parser.y:1158
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 195:
		//line parser.y:1160
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 196:
		//line parser.y:1162
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1165
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1167
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1169
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1171
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1174
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1176
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1178
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1180
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1184
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 206:
		//line parser.y:1186
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 207:
		//line parser.y:1188
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 208:
		//line parser.y:1190
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 209:
		//line parser.y:1193
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 210:
		//line parser.y:1204
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 211:
		//line parser.y:1215
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 212:
		//line parser.y:1226
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 213:
		//line parser.y:1237
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 214:
		//line parser.y:1248
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 215:
		//line parser.y:1259
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 216:
		//line parser.y:1261
		{
		}
	case 217:
		//line parser.y:1262
		{
		}
	case 218:
		//line parser.y:1264
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 219:
		//line parser.y:1266
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 220:
		//line parser.y:1268
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 221:
		//line parser.y:1270
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 222:
		//line parser.y:1272
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 223:
		//line parser.y:1274
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1276
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1279
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 226:
		//line parser.y:1281
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 227:
		//line parser.y:1289
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 228:
		//line parser.y:1298
		{
			name := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 229:
		//line parser.y:1306
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 230:
		//line parser.y:1315
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 231:
		//line parser.y:1322
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 232:
		//line parser.y:1329
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 233:
		//line parser.y:1337
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 234:
		//line parser.y:1342
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 235:
		//line parser.y:1347
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 236:
		//line parser.y:1352
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 237:
		//line parser.y:1357
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 238:
		//line parser.y:1362
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 239:
		//line parser.y:1371
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 240:
		//line parser.y:1373
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 241:
		//line parser.y:1375
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 242:
		//line parser.y:1377
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 243:
		//line parser.y:1380
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 244:
		//line parser.y:1389
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 245:
		//line parser.y:1399
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 246:
		//line parser.y:1408
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 247:
		//line parser.y:1417
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1426
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1435
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1444
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 251:
		//line parser.y:1453
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1463
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1472
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1483
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 255:
		//line parser.y:1492
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 256:
		//line parser.y:1500
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 257:
		//line parser.y:1508
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 258:
		//line parser.y:1516
		{
		}
	case 259:
		//line parser.y:1517
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 260:
		//line parser.y:1518
		{
		}
	case 261:
		//line parser.y:1521
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 262:
		//line parser.y:1524
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 263:
		//line parser.y:1533
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 264:
		//line parser.y:1543
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 265:
		//line parser.y:1553
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 266:
		//line parser.y:1563
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 267:
		//line parser.y:1565
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 268:
		//line parser.y:1579
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 269:
		//line parser.y:1600
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 270:
		//line parser.y:1621
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 271:
		//line parser.y:1642
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 272:
		//line parser.y:1657
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 273:
		//line parser.y:1672
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 274:
		//line parser.y:1689
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 275:
		//line parser.y:1691
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 276:
		//line parser.y:1694
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 277:
		//line parser.y:1696
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 278:
		//line parser.y:1699
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 279:
		//line parser.y:1701
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 280:
		//line parser.y:1704
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 281:
		//line parser.y:1711
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 282:
		//line parser.y:1713
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 283:
		//line parser.y:1716
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 284:
		//line parser.y:1724
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 285:
		//line parser.y:1726
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 286:
		//line parser.y:1730
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 287:
		//line parser.y:1732
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 288:
		//line parser.y:1734
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 289:
		//line parser.y:1738
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 290:
		//line parser.y:1740
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 291:
		//line parser.y:1742
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 292:
		//line parser.y:1746
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 293:
		//line parser.y:1757
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 294:
		//line parser.y:1763
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 295:
		//line parser.y:1770
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 296:
		//line parser.y:1777
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 297:
		//line parser.y:1779
		{
		}
	case 298:
		//line parser.y:1781
		{
		}
	case 299:
		//line parser.y:1783
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 300:
		//line parser.y:1785
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 301:
		//line parser.y:1788
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 302:
		//line parser.y:1796
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 303:
		//line parser.y:1805
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 304:
		//line parser.y:1813
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 305:
		//line parser.y:1822
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 306:
		//line parser.y:1831
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 307:
		//line parser.y:1839
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 308:
		//line parser.y:1847
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 309:
		//line parser.y:1855
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 310:
		//line parser.y:1864
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 311:
		//line parser.y:1867
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 312:
		//line parser.y:1870
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 313:
		//line parser.y:1877
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 314:
		//line parser.y:1883
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 315:
		//line parser.y:1889
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 316:
		//line parser.y:1895
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 317:
		//line parser.y:1902
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 318:
		//line parser.y:1904
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 319:
		//line parser.y:1907
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 320:
		//line parser.y:1914
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	}
	goto Rubystack /* stack new state and value */
}

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	hashPair        ast.HashKeyValuePair
	astString       ast.String

	methodParam      ast.MethodParam
	methodParamSlice []ast.MethodParam
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const IVAR_OR_CLASS_VARIABLE = 57355
const LPAREN = 57356
const RPAREN = 57357
const COMMA = 57358
const STRING = 57359
const NamespacedModule = 57360
const ProcArg = 57361
const DO = 57362
const DEF = 57363
const END = 57364
const IF = 57365
const ELSE = 57366
const ELSIF = 57367
const UNLESS = 57368
const CLASS = 57369
const MODULE = 57370
const FOR = 57371
const WHILE = 57372
const UNTIL = 57373
const BEGIN = 57374
const RESCUE = 57375
const ENSURE = 57376
const BREAK = 57377
const NEXT = 57378
const REDO = 57379
const RETRY = 57380
const RETURN = 57381
const YIELD = 57382
const AND = 57383
const OR = 57384
const LAMBDA = 57385
const CASE = 57386
const WHEN = 57387
const ALIAS = 57388
const SELF = 57389
const NIL = 57390
const DEFINED = 57391
const LESSTHAN = 57392
const GREATERTHAN = 57393
const EQUALTO = 57394
const BANG = 57395
const COMPLEMENT = 57396
const BINARY_PLUS = 57397
const UNARY_PLUS = 57398
const BINARY_MINUS = 57399
const UNARY_MINUS = 57400
const STAR = 57401
const RANGE = 57402
const EXCLUSIVE_RANGE = 57403
const OR_EQUALS = 57404
const AND_EQUALS = 57405
const WHITESPACE = 57406
const NEWLINE = 57407
const SEMICOLON = 57408
const COLON = 57409
const DOT = 57410
const PIPE = 57411
const SLASH = 57412
const AMPERSAND = 57413
const QUESTIONMARK = 57414
const CARET = 57415
const LBRACKET = 57416
const RBRACKET = 57417
const LBRACE = 57418
const RBRACE = 57419
const FILE_CONST_REF = 57420
const LINE_CONST_REF = 57421
const EOF = 57422

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"IVAR_OR_CLASS_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"DEFINED",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"EXCLUSIVE_RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1913

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 130,
	68, 20,
	-2, 157,
	-1, 141,
	21, 261,
	23, 261,
	26, 261,
	27, 261,
	28, 261,
	30, 261,
	31, 261,
	32, 261,
	35, 261,
	36, 261,
	38, 261,
	39, 261,
	40, 261,
	44, 261,
	46, 261,
	66, 261,
	-2, 11,
	-1, 152,
	21, 13,
	23, 13,
	26, 13,
	27, 13,
	28, 13,
	30, 13,
	31, 13,
	32, 13,
	35, 13,
	36, 13,
	38, 13,
	39, 13,
	40, 13,
	44, 13,
	46, 13,
	66, 13,
	-2, 11,
	-1, 210,
	21, 261,
	23, 261,
	26, 261,
	27, 261,
	28, 261,
	30, 261,
	31, 261,
	32, 261,
	35, 261,
	36, 261,
	38, 261,
	39, 261,
	40, 261,
	44, 261,
	46, 261,
	66, 261,
	-2, 11,
	-1, 214,
	21, 13,
	23, 13,
	26, 13,
	27, 13,
	28, 13,
	30, 13,
	31, 13,
	32, 13,
	35, 13,
	36, 13,
	38, 13,
	39, 13,
	40, 13,
	44, 13,
	46, 13,
	66, 13,
	77, 13,
	-2, 11,
	-1, 355,
	16, 126,
	-2, 20,
	-1, 366,
	21, 261,
	23, 261,
	26, 261,
	27, 261,
	28, 261,
	30, 261,
	31, 261,
	32, 261,
	35, 261,
	36, 261,
	38, 261,
	39, 261,
	40, 261,
	44, 261,
	46, 261,
	66, 261,
	-2, 11,
	-1, 406,
	65, 11,
	77, 11,
	-2, 13,
	-1, 449,
	65, 11,
	77, 11,
	-2, 13,
	-1, 566,
	65, 11,
	77, 11,
	-2, 14,
	-1, 608,
	16, 135,
	-2, 11,
	-1, 612,
	65, 11,
	77, 11,
	-2, 14,
}

const RubyNprod = 327
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4692

var RubyAct = []int{

	334, 465, 5, 653, 462, 143, 187, 155, 165, 144,
	156, 423, 257, 295, 260, 150, 379, 258, 341, 463,
	28, 142, 340, 55, 2, 3, 25, 54, 168, 541,
	14, 166, 340, 99, 651, 21, 100, 340, 340, 4,
	102, 101, 151, 340, 637, 207, 417, 340, 340, 610,
	564, 415, 274, 340, 434, 536, 151, 184, 185, 534,
	494, 193, 194, 532, 400, 127, 373, 377, 128, 169,
	197, 157, 373, 375, 373, 97, 96, 176, 609, 170,
	171, 154, 215, 216, 198, 26, 213, 421, 209, 173,
	98, 167, 123, 373, 199, 123, 176, 373, 214, 157,
	221, 222, 223, 224, 125, 126, 420, 373, 196, 154,
	231, 172, 214, 172, 168, 236, 124, 166, 121, 124,
	340, 243, 208, 247, 292, 540, 252, 253, 254, 255,
	296, 416, 173, 414, 292, 172, 158, 244, 122, 292,
	249, 382, 174, 175, 265, 626, 266, 264, 272, 369,
	273, 129, 398, 229, 172, 169, 376, 340, 595, 649,
	121, 275, 239, 240, 158, 291, 372, 280, 283, 285,
	304, 305, 306, 279, 309, 310, 311, 167, 315, 316,
	317, 157, 281, 302, 323, 597, 168, 271, 307, 166,
	324, 154, 99, 628, 491, 100, 319, 596, 293, 102,
	101, 238, 343, 344, 345, 346, 326, 246, 318, 340,
	250, 157, 301, 358, 486, 351, 340, 568, 559, 353,
	133, 154, 69, 130, 68, 502, 134, 120, 135, 136,
	342, 277, 362, 93, 622, 623, 325, 99, 350, 261,
	100, 339, 501, 340, 102, 101, 158, 340, 363, 167,
	340, 263, 107, 303, 261, 268, 357, 487, 308, 177,
	361, 259, 380, 94, 95, 183, 263, 340, 340, 178,
	179, 485, 460, 261, 459, 457, 158, 383, 378, 330,
	331, 396, 385, 177, 648, 263, 432, 464, 206, 116,
	117, 262, 157, 486, 72, 71, 647, 30, 105, 106,
	646, 182, 154, 108, 353, 109, 262, 110, 118, 119,
	405, 413, 181, 73, 633, 275, 104, 113, 111, 112,
	397, 99, 157, 499, 100, 384, 631, 312, 102, 101,
	286, 99, 154, 313, 100, 402, 287, 431, 102, 101,
	407, 157, 409, 629, 411, 131, 168, 99, 180, 440,
	100, 154, 487, 203, 102, 101, 204, 158, 436, 606,
	527, 132, 528, 621, 599, 451, 556, 448, 437, 450,
	438, 549, 666, 338, 663, 662, 157, 201, 157, 314,
	202, 452, 288, 439, 380, 277, 154, 158, 154, 337,
	478, 439, 336, 435, 441, 461, 473, 466, 581, 443,
	445, 470, 471, 472, 298, 481, 158, 274, 484, 582,
	488, 474, 454, 386, 455, 456, 467, 382, 482, 458,
	498, 468, 428, 497, 429, 508, 446, 661, 480, 663,
	662, 444, 442, 432, 430, 522, 522, 99, 511, 183,
	100, 158, 477, 158, 102, 101, 530, 576, 373, 507,
	506, 453, 492, 505, 181, 507, 506, 382, 546, 500,
	547, 548, 289, 107, 542, 551, 390, 616, 550, 389,
	563, 583, 419, 617, 138, 157, 551, 584, 418, 557,
	139, 77, 347, 483, 205, 154, 561, 562, 533, 401,
	535, 517, 537, 348, 539, 492, 139, 77, 139, 77,
	116, 117, 388, 570, 387, 386, 328, 573, 327, 105,
	106, 256, 226, 516, 108, 354, 109, 335, 110, 118,
	119, 1, 212, 91, 560, 585, 586, 104, 113, 111,
	112, 90, 89, 88, 399, 87, 86, 41, 40, 565,
	158, 593, 544, 39, 498, 38, 523, 569, 20, 107,
	43, 44, 16, 12, 13, 11, 45, 24, 600, 602,
	604, 23, 22, 27, 592, 607, 19, 10, 608, 35,
	613, 484, 18, 601, 603, 605, 15, 590, 70, 42,
	17, 482, 46, 37, 36, 31, 116, 117, 598, 34,
	29, 480, 32, 74, 0, 105, 106, 0, 627, 0,
	108, 0, 109, 551, 110, 551, 630, 551, 632, 0,
	634, 0, 611, 104, 113, 111, 112, 0, 0, 0,
	650, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 625, 0, 0, 0, 0,
	159, 0, 0, 522, 522, 522, 483, 657, 0, 159,
	0, 0, 159, 159, 635, 664, 0, 0, 638, 0,
	0, 0, 0, 668, 0, 0, 522, 0, 159, 0,
	522, 522, 522, 159, 159, 159, 642, 643, 644, 107,
	0, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 659, 0, 159, 0, 159, 159, 0, 159, 0,
	159, 159, 159, 159, 0, 159, 667, 0, 159, 159,
	665, 159, 0, 159, 159, 0, 116, 117, 669, 670,
	0, 107, 0, 671, 0, 105, 106, 0, 159, 0,
	108, 0, 109, 0, 110, 159, 159, 159, 159, 0,
	0, 0, 0, 104, 113, 111, 112, 115, 0, 0,
	159, 0, 0, 0, 159, 0, 0, 159, 116, 117,
	0, 0, 159, 0, 0, 0, 0, 105, 106, 0,
	159, 0, 108, 0, 109, 0, 110, 118, 119, 0,
	159, 0, 0, 0, 0, 104, 113, 111, 112, 0,
	0, 0, 374, 0, 0, 0, 0, 159, 159, 0,
	0, 69, 160, 68, 78, 161, 77, 163, 162, 141,
	0, 149, 93, 0, 164, 151, 159, 0, 0, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	159, 0, 0, 0, 0, 0, 0, 0, 80, 107,
	297, 0, 94, 95, 92, 0, 159, 146, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 147, 148, 0,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 145,
	0, 152, 0, 72, 71, 0, 116, 117, 0, 0,
	0, 0, 0, 159, 0, 105, 106, 159, 0, 159,
	108, 159, 109, 0, 110, 118, 119, 0, 0, 0,
	0, 0, 0, 104, 113, 111, 112, 115, 0, 0,
	159, 69, 160, 68, 78, 161, 77, 163, 162, 141,
	0, 0, 93, 0, 164, 151, 159, 0, 0, 0,
	0, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 159, 0, 159, 80, 9,
	0, 159, 94, 95, 92, 159, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 447, 0, 0, 159, 0, 0, 0, 299,
	0, 152, 0, 72, 71, 0, 0, 159, 0, 0,
	0, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	153, 159, 0, 0, 0, 0, 0, 0, 0, 188,
	159, 159, 195, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 159,
	0, 0, 0, 217, 218, 219, 0, 159, 107, 0,
	0, 0, 220, 0, 159, 159, 159, 0, 159, 0,
	0, 0, 0, 225, 0, 227, 228, 0, 230, 0,
	232, 233, 234, 235, 0, 237, 0, 0, 241, 242,
	0, 245, 0, 248, 251, 116, 117, 0, 0, 0,
	0, 107, 0, 0, 105, 106, 0, 0, 269, 108,
	0, 109, 0, 110, 0, 276, 278, 282, 284, 0,
	0, 0, 104, 113, 111, 112, 0, 0, 0, 572,
	153, 0, 0, 0, 300, 0, 0, 251, 116, 117,
	0, 0, 251, 159, 0, 159, 0, 105, 106, 0,
	322, 0, 108, 0, 109, 0, 110, 0, 0, 0,
	153, 0, 0, 0, 0, 104, 113, 111, 112, 0,
	159, 0, 571, 0, 0, 0, 0, 349, 356, 0,
	69, 160, 68, 78, 161, 77, 163, 162, 141, 0,
	149, 93, 0, 164, 151, 0, 322, 0, 0, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 370,
	371, 0, 0, 0, 0, 0, 0, 80, 0, 159,
	0, 94, 95, 92, 0, 0, 322, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 159, 33, 107, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 299, 0,
	152, 0, 72, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 406, 0, 0, 0, 410, 0, 412,
	0, 211, 0, 0, 0, 116, 117, 0, 0, 0,
	0, 294, 0, 0, 105, 106, 137, 140, 0, 108,
	153, 109, 0, 110, 118, 119, 0, 189, 0, 0,
	189, 368, 104, 113, 111, 112, 433, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 189, 189, 0, 153, 0, 211, 0, 0,
	189, 449, 0, 0, 0, 251, 0, 0, 0, 0,
	186, 189, 0, 189, 189, 0, 189, 0, 189, 189,
	189, 189, 0, 189, 0, 469, 189, 189, 0, 189,
	0, 189, 189, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 489, 0, 0, 0, 189, 0, 0, 0,
	0, 356, 0, 189, 189, 189, 189, 0, 0, 0,
	503, 504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 189, 0, 0, 0, 188,
	189, 0, 0, 0, 0, 0, 0, 538, 189, 267,
	0, 0, 270, 0, 211, 543, 545, 0, 489, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 69,
	160, 68, 78, 161, 77, 163, 162, 141, 0, 0,
	93, 0, 164, 151, 189, 0, 329, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 189, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	94, 95, 92, 0, 189, 146, 81, 82, 0, 83,
	0, 84, 85, 591, 0, 356, 393, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 0, 152,
	0, 72, 71, 0, 0, 0, 0, 0, 0, 0,
	479, 189, 0, 0, 0, 189, 0, 189, 0, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 0,
	0, 394, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 404, 189, 0, 114, 408, 0, 636,
	189, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 116, 117, 0, 0, 0, 645, 0, 0, 189,
	105, 106, 0, 189, 0, 108, 0, 109, 0, 110,
	118, 119, 426, 427, 0, 0, 0, 0, 104, 113,
	111, 112, 115, 189, 0, 0, 0, 0, 0, 0,
	0, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	189, 0, 93, 0, 0, 0, 47, 0, 56, 189,
	0, 57, 48, 49, 0, 60, 61, 58, 189, 189,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	518, 67, 94, 95, 92, 475, 0, 189, 81, 82,
	0, 83, 0, 84, 85, 189, 0, 0, 493, 0,
	340, 496, 0, 189, 189, 0, 189, 0, 0, 75,
	0, 76, 0, 72, 71, 0, 0, 509, 0, 0,
	0, 513, 514, 0, 515, 0, 0, 0, 0, 0,
	529, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 69, 160, 68, 78, 161, 77,
	163, 162, 79, 0, 0, 93, 552, 164, 0, 0,
	0, 0, 553, 554, 555, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 189, 0, 94, 95, 92, 0, 567,
	0, 81, 82, 0, 83, 107, 84, 85, 0, 574,
	575, 103, 0, 340, 0, 0, 0, 0, 580, 116,
	117, 0, 75, 0, 76, 0, 72, 71, 105, 106,
	587, 0, 589, 108, 0, 109, 0, 110, 0, 0,
	618, 0, 116, 117, 0, 107, 104, 113, 111, 112,
	115, 105, 106, 0, 0, 0, 108, 660, 109, 0,
	110, 118, 119, 0, 0, 0, 0, 189, 0, 104,
	113, 111, 112, 0, 0, 614, 0, 0, 0, 0,
	615, 0, 116, 117, 189, 619, 620, 329, 0, 0,
	0, 105, 106, 0, 0, 0, 108, 0, 109, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	113, 111, 112, 0, 0, 0, 0, 0, 640, 641,
	0, 0, 0, 0, 426, 427, 69, 50, 68, 78,
	51, 77, 53, 52, 79, 0, 0, 93, 0, 0,
	0, 47, 656, 524, 655, 654, 525, 48, 49, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 92,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 0, 520, 521, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 72, 71,
	69, 50, 68, 78, 51, 77, 53, 52, 79, 0,
	0, 93, 0, 0, 0, 47, 652, 524, 655, 654,
	525, 48, 49, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 92, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 0, 520,
	521, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 72, 71, 69, 50, 68, 78, 51, 77,
	53, 52, 79, 0, 0, 93, 0, 0, 0, 47,
	510, 56, 425, 424, 57, 48, 49, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 92, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 0, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 72, 71, 69, 50,
	68, 78, 51, 77, 53, 52, 79, 0, 0, 93,
	0, 0, 0, 47, 422, 56, 425, 424, 57, 48,
	49, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 92, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 0, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	72, 71, 69, 50, 68, 78, 51, 77, 53, 52,
	79, 0, 0, 93, 0, 0, 0, 47, 0, 56,
	0, 0, 57, 48, 49, 0, 60, 61, 58, 432,
	464, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 92, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	0, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 72, 71, 69, 50, 68, 78,
	51, 77, 53, 52, 79, 0, 0, 93, 0, 0,
	0, 47, 577, 56, 0, 0, 57, 48, 49, 0,
	60, 61, 58, 0, 578, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 92,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 0, 332, 333, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 72, 71,
	69, 50, 68, 78, 51, 77, 53, 52, 79, 0,
	0, 93, 0, 0, 0, 47, 0, 56, 0, 0,
	57, 48, 49, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 92, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 0, 6,
	7, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 72, 71, 8, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 658, 524, 0, 0, 525, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 520, 521, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 639, 56, 0, 0, 57,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 332, 333,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 624,
	56, 0, 0, 57, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 332, 333, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 588, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 332, 333, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 579, 56, 0,
	0, 57, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 558, 56, 0, 0, 57, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 526, 524, 0, 0, 525,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 520, 521,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 519,
	524, 0, 0, 525, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 520, 521, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 512, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 332, 333, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 0, 56, 0,
	0, 57, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 495, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 490, 56, 0, 0, 57, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 476, 56, 0, 0, 57,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 332, 333,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 403,
	56, 0, 0, 57, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 332, 333, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 395, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 332, 333, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 392, 56, 0,
	0, 57, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 0, 524, 0, 0, 525, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 520, 521, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 0, 56, 0, 0, 57,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 332, 333,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 0,
	56, 0, 0, 57, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 612, 333, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 0, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 566, 333, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	360, 0, 93, 0, 0, 0, 47, 0, 56, 0,
	0, 57, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	0, 359, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 0, 56, 0, 0, 57, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 69,
	190, 68, 78, 191, 77, 135, 192, 79, 0, 0,
	93, 0, 0, 75, 0, 76, 0, 72, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 340, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	594, 72, 71, 69, 190, 68, 78, 191, 77, 135,
	192, 79, 0, 0, 93, 0, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 340, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 355, 68,
	78, 191, 77, 135, 192, 79, 0, 0, 93, 0,
	0, 69, 190, 68, 78, 191, 77, 135, 192, 366,
	0, 0, 93, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 80, 84,
	85, 0, 94, 95, 92, 0, 340, 364, 81, 82,
	0, 83, 0, 84, 85, 75, 0, 76, 352, 72,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 152, 0, 72, 71, 69, 160, 68, 78, 161,
	77, 163, 162, 141, 0, 0, 93, 0, 164, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 69,
	190, 68, 78, 191, 77, 135, 192, 79, 0, 0,
	93, 0, 0, 299, 0, 152, 0, 72, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 340, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 190, 68, 78, 191, 77, 135,
	192, 366, 0, 0, 93, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 69, 190, 68,
	78, 191, 77, 135, 192, 79, 0, 0, 93, 0,
	0, 75, 0, 152, 0, 72, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 62, 0, 0, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 69, 160, 68, 78, 161, 77, 163, 162, 210,
	0, 0, 93, 0, 164, 75, 0, 76, 0, 72,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 69, 190, 68, 78, 191,
	77, 135, 192, 79, 0, 0, 93, 0, 0, 75,
	0, 76, 0, 72, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 69,
	320, 68, 78, 191, 77, 135, 321, 79, 0, 0,
	93, 0, 0, 75, 0, 76, 0, 72, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 69, 160, 68, 78, 161, 77, 163,
	162, 79, 0, 0, 93, 0, 0, 75, 0, 76,
	0, 72, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 297, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 107, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	0, 75, 0, 76, 0, 72, 71, 105, 106, 0,
	0, 0, 108, 0, 109, 0, 110, 0, 0, 0,
	0, 116, 117, 0, 0, 104, 113, 111, 112, 0,
	105, 106, 0, 0, 0, 108, 0, 109, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 113,
	111, 112,
}
var RubyPact = []int{

	-41, 2324, -1000, -1000, -1000, 10, -1000, -1000, -1000, 1530,
	-1000, -1000, -1000, -1000, 201, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 86, 42, -1000, 83, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 216, 470, 488,
	795, 17, 80, 207, 296, 249, 3879, 3879, -1000, 4459,
	3879, 3879, 4459, 4567, 354, 330, -1000, 476, -1000, -1000,
	271, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4405, -1000,
	22, 3879, 3879, 4459, 4459, 4459, -1000, -1000, -1000, -1000,
	-1000, -1000, 4459, -1000, -1000, -1000, -1000, -1000, -1000, 3879,
	3879, 3879, 3879, 4459, 505, 4459, 4459, -1000, 4459, 3879,
	4459, 4459, 4459, 4459, 3879, 4459, -1000, -1000, 4459, 4459,
	3879, 4459, 3879, 4459, 4459, 3879, 3879, 3879, 3879, 504,
	247, 79, 76, 247, -1000, -1000, -1000, 205, 4459, 335,
	-1000, -1000, 22, -1000, 36, 4459, 4351, 4459, 4459, 323,
	446, 70, 65, 835, -1000, -1000, 388, -1000, -1000, 45,
	1423, 103, 37, 231, 4459, -1000, -1000, 4459, -1000, 3879,
	3879, 3879, 4459, 3879, 3879, 3879, 320, 3879, 3879, 3879,
	4513, 177, 501, 499, 414, 214, 3583, 376, 4620, 44,
	4169, 175, 39, 324, 308, 4620, 185, 376, -1000, -1000,
	675, 3879, 3879, 3879, 3879, 474, -1000, 1708, 4081, 391,
	-1000, 835, 3805, -1000, 65, 414, 414, 4620, 4620, 4620,
	4620, 414, 414, 414, 414, 4620, 4095, 4620, 4620, 4223,
	4620, 414, 4620, 4620, 4620, 4620, 414, 1214, 82, 4223,
	4223, 4620, 4620, 414, 91, 717, -2, 414, 4620, 81,
	-8, 1761, 414, 414, 414, 414, 4297, -1000, 441, 266,
	-1000, 230, 498, 497, 495, 462, -1000, 3435, 488, 4620,
	3361, 1708, -1000, -1000, -1000, 77, 459, -11, 1738, -1000,
	-1000, -1000, 675, -1000, 675, -1000, -1000, -1000, 482, -1000,
	3287, -1000, 232, 4081, 3583, -1000, -1000, 4459, -1000, 4459,
	4620, 1708, 58, -24, 414, 414, 414, 56, -29, 414,
	414, 414, -1000, -1000, 471, 414, 414, 414, 438, 432,
	1154, 61, 4620, -1000, -1000, 465, 423, 32, 13, 2102,
	-1000, -1000, -1000, -1000, 414, 400, 4459, -1000, -1000, 185,
	-1000, 346, 4459, 414, 414, 414, 414, -1000, 416, 4620,
	-1000, -1000, -1000, 415, 410, 905, 4597, 1708, 414, -1000,
	-1000, 4223, -1000, 22, 3879, 4459, -1000, 4620, -1000, -1000,
	4620, 4620, 223, -1000, 222, -1000, 220, -1000, 22, -1000,
	-1000, 2176, 232, 401, 406, 4459, -1000, -1000, 247, 247,
	247, 2176, -1000, -1000, 3213, -1000, 374, 1708, 219, 241,
	-1000, -1000, 4007, -1000, 3139, 125, 4597, -17, 3065, 55,
	4620, 4223, 248, 391, 190, -1000, 173, -1000, -1000, -1000,
	4459, 4459, -1000, 431, 3879, -1000, 2028, 2991, -1000, -1000,
	-1000, -1000, 486, 4620, 2917, 2843, 338, -1000, -1000, 4459,
	376, -12, -1000, -18, -1000, -22, -1000, 4459, 391, 4620,
	-1000, 414, 50, -46, 1708, 4223, 4223, 3879, 4223, 3879,
	3879, -1000, 349, 253, -1000, -1000, -1000, -1000, -1000, 4620,
	-1000, -1000, -1000, 344, 253, 2769, -1000, 203, -1000, 835,
	-1000, -1000, -1000, -1000, 388, 3879, 3879, 463, -1000, 4620,
	-1000, -1000, -27, 3583, -1000, -1000, 3731, -1000, -1000, 162,
	202, -1000, 3879, 1077, 1034, -1000, 3879, -1000, 414, 3583,
	-1000, 425, -1000, 2250, 2695, 3583, 393, 464, -1000, -1000,
	-1000, -1000, 414, -1000, 3879, 3879, -1000, -1000, -1000, 2621,
	376, 3583, -1000, 1708, -1000, 3933, -1000, 151, 4620, 182,
	133, -1000, 374, 4620, -1000, 1761, 414, 414, 414, -1000,
	342, -1000, 3583, 2176, 2176, 2176, -1000, 337, -1000, 22,
	1708, 414, 414, 4, -1000, -28, -1000, 3657, -1000, 1605,
	414, 336, -1000, 414, 3583, 3583, -1000, -1000, -1000, -1000,
	3583, 460, 488, -1000, -1000, 298, 169, 2547, -1000, 3583,
	92, 4620, -1000, -1000, -1000, 78, -1000, 3879, 178, -1000,
	321, 253, 304, 253, 292, 253, -1000, -1000, -1000, 4459,
	-1000, -33, -1000, 414, 3583, 2473, -1000, -1000, -1000, 3583,
	3583, -1000, -1000, -1000, -1000, 92, 4459, 414, -1000, -1000,
	278, -1000, 274, -1000, 262, 144, 545, -1000, -43, -1000,
	3583, 3583, 1954, 1880, 2399, 1801, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 405, 3879, -1000, -1000, 350, -1000, 92,
	-1000, -1000, 3879, -1000, 414, 3509, -1000, 92, 414, 3509,
	3509, 3509,
}
var RubyPgo = []int{

	0, 593, 0, 313, 592, 85, 5, 590, 585, 584,
	583, 1, 582, 20, 580, 7, 579, 30, 578, 576,
	572, 949, 297, 16, 589, 569, 567, 566, 563, 562,
	561, 557, 556, 555, 554, 553, 552, 1217, 18, 35,
	551, 550, 26, 548, 546, 3, 27, 545, 543, 538,
	537, 536, 535, 533, 532, 531, 523, 1261, 522, 19,
	21, 11, 521, 54, 4, 517, 9, 6, 515, 15,
	23, 513, 493, 14, 13, 12, 17, 8, 10, 45,
}
var RubyR1 = []int{

	0, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 79, 79, 57, 57, 57, 57, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 32, 32, 32, 32, 32,
	32, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 18, 18, 42, 16, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
	60, 60, 60, 60, 67, 67, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 15,
	69, 69, 64, 64, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 75, 75, 75, 76, 76, 76,
	73, 73, 73, 73, 33, 33, 34, 35, 37, 37,
	37, 17, 17, 17, 17, 17, 17, 17, 17, 19,
	19, 19, 70, 70, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 8, 3, 1, 72, 72,
	72, 72, 72, 72, 72, 4, 4, 4, 4, 77,
	78, 78, 68, 68, 68, 6, 6, 6, 6, 6,
	6, 6, 6, 23, 23, 74, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 61, 61, 61,
	61, 58, 58, 58, 9, 20, 20, 20, 20, 11,
	11, 11, 11, 11, 11, 71, 71, 65, 65, 59,
	59, 27, 27, 28, 29, 29, 29, 29, 31, 31,
	31, 30, 30, 30, 13, 13, 43, 43, 43, 43,
	63, 63, 63, 63, 63, 44, 44, 44, 44, 44,
	45, 45, 45, 45, 41, 40, 10, 39, 39, 39,
	39, 38, 38, 5, 5, 7, 12,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 2, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 6, 7, 1, 2,
	6, 6, 2, 3, 2, 3, 4, 5, 4, 5,
	4, 5, 2, 3, 3, 3, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 6,
	6, 6, 6, 6, 6, 7, 6, 6, 8, 4,
	5, 8, 1, 4, 1, 3, 0, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 4, 2,
	1, 4, 0, 2, 6, 7, 8, 8, 8, 9,
	9, 9, 6, 7, 1, 3, 3, 0, 1, 3,
	1, 2, 3, 2, 4, 6, 5, 4, 1, 2,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 9, 6, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 3, 4, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 5, 1, 1, 0, 1,
	1, 1, 4, 4, 4, 3, 5, 6, 5, 3,
	1, 4, 3, 7, 8, 3, 4, 4, 4, 7,
	8, 5, 6, 0, 1, 3, 4, 5, 3, 3,
	3, 3, 3, 5, 6, 5, 3, 4, 3, 3,
	2, 0, 2, 2, 3, 4, 6, 8, 6, 2,
	3, 5, 5, 4, 4, 1, 3, 0, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 1, 1, 3,
	3, 1, 3, 3, 6, 6, 5, 5, 3, 3,
	0, 2, 2, 2, 2, 5, 6, 5, 6, 5,
	4, 3, 3, 2, 4, 4, 2, 5, 7, 4,
	6, 4, 5, 3, 3, 3, 2,
}
var RubyChk = []int{

	-1000, -62, 65, 66, 80, -2, 65, 66, 80, -21,
	-26, -33, -35, -34, -17, -19, -36, -14, -20, -27,
	-43, -39, -29, -30, -31, -42, -5, -28, -13, -7,
	-22, -8, -4, -37, -24, -25, -9, -10, -47, -48,
	-49, -50, -16, -41, -40, -32, -12, 21, 27, 28,
	7, 10, 13, 12, -46, -70, 23, 26, 32, 40,
	30, 31, 44, 39, 35, 36, 38, 46, 8, 6,
	-18, 79, 78, -3, -1, 74, 76, 11, 9, 14,
	43, 53, 54, 56, 58, 59, -51, -52, -53, -54,
	-55, -56, 49, 17, 47, 48, 66, 65, 80, 23,
	26, 31, 30, 33, 68, 50, 51, 4, 55, 57,
	59, 70, 71, 69, 26, 72, 41, 42, 60, 61,
	26, 74, 52, 50, 74, 62, 63, 23, 26, 68,
	7, -22, -3, 4, 10, 12, 13, -37, 4, 10,
	-37, 14, -60, -6, -66, 74, 52, 62, 63, 16,
	-69, 20, 76, -21, -17, -15, -78, -13, -5, -24,
	7, 10, 13, 12, 19, -77, 14, 74, 11, 52,
	62, 63, 74, 52, 62, 63, 16, 52, 62, 63,
	52, 16, 52, 16, -2, -2, -57, -67, -21, -37,
	7, 10, 13, -2, -2, -21, -79, -67, -13, -17,
	-21, 23, 26, 23, 26, 8, 17, -79, -79, -66,
	14, -21, -58, -6, 76, -2, -2, -21, -21, -21,
	-21, -2, -2, -2, -2, -21, 7, -21, -21, -79,
	-21, -2, -21, -21, -21, -21, -2, -21, -5, -79,
	-79, -21, -21, -2, -69, -21, -5, -2, -21, -69,
	-5, -21, -2, -2, -2, -2, 7, -75, -76, 14,
	-73, 7, 59, 19, 68, 68, -75, -57, 50, -21,
	-57, -79, -6, -6, 16, -69, -21, -5, -21, -42,
	-13, -39, -21, -13, -21, -13, 7, 13, 59, 16,
	-57, -74, 69, -79, -57, -74, 65, 5, 16, 74,
	-21, -79, -69, -5, -2, -2, -2, -69, -5, -2,
	-2, -2, 7, 13, 59, -2, -2, -2, -46, -69,
	7, 13, -21, 7, 13, 59, -70, 7, 7, -57,
	65, 66, 65, 66, -2, -65, 16, 65, 65, -79,
	65, -38, 45, -2, -2, -2, -2, 8, -72, -21,
	-17, -15, 77, -78, -68, 7, -21, -79, -2, 66,
	15, -79, -6, -60, 52, 74, 14, -21, 67, 67,
	-21, -21, 75, 16, 75, 75, 75, 75, -60, -23,
	-6, -57, 16, -76, 59, 52, 7, 7, 7, 7,
	4, -57, 22, -37, -57, 22, -66, -79, 75, 75,
	75, 7, -79, 22, -57, -76, -21, -79, -57, -79,
	-21, -79, -21, -66, 75, 75, 75, 75, 7, 7,
	74, 74, 22, -61, 25, 24, -57, -57, 22, 24,
	34, -11, 33, -21, -63, -63, -38, 22, 24, 45,
	-67, -79, 16, -79, 16, -79, 16, 67, -66, -21,
	-6, -2, -69, -5, -79, -79, -79, 52, -79, 52,
	52, -23, -64, -59, 34, -11, -73, 15, 15, -21,
	-75, -75, -75, -64, -59, -57, 22, -79, 16, -21,
	-17, -15, -13, -5, -78, 52, 52, 16, -15, -21,
	22, 69, -79, -57, 77, 77, -57, -74, -77, 75,
	-79, 52, 52, -21, -21, 22, 25, 24, -2, -57,
	22, -61, 22, -57, -57, -57, -71, 5, -37, 22,
	65, 66, -2, -44, 23, 26, 22, 22, 24, -57,
	-67, -57, 75, -79, 77, -79, 77, -79, -21, -79,
	75, 75, -66, -21, -5, -21, -2, -2, -2, 22,
	-64, -11, -57, -57, -57, -57, 22, -64, 22, 15,
	-79, -2, -2, 7, 77, -79, 65, -57, 15, -79,
	-2, 75, 75, -2, -57, -57, 22, 22, 34, 22,
	-57, 5, 16, 7, 13, -2, -2, -57, 22, -57,
	-79, -21, -17, -15, 77, 7, 15, 52, -79, 22,
	-64, -59, -64, -59, -64, -59, 22, -6, -15, 74,
	77, -79, 65, -2, -57, -57, 7, 13, -37, -57,
	-57, 65, 65, 66, 22, -79, 67, -2, 15, 22,
	-64, 22, -64, 22, -64, -79, -21, 77, -79, 22,
	-57, -57, -63, -63, -63, -21, 22, 22, 22, 15,
	75, 77, 22, -45, 25, 24, 22, -45, 22, -79,
	16, 22, 25, 24, -2, -63, 22, -79, -2, -63,
	-63, -63,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 0, 0, 0,
	20, 21, 23, 22, 0, 0, 0, 0, 13, 282,
	0, 0, 11, 287, 291, 288, 283, 0, 17, 18,
	19, 24, 25, 26, 27, 11, 11, 170, 78, 261,
	0, 0, 0, 0, 0, 0, 45, 46, 47, 48,
	49, 50, 0, 72, 216, 217, 5, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 0, 11, 0, 0,
	0, 0, 0, 0, 0, 0, 11, 11, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, 157, 21, 22, 23, 13, 0, 168,
	13, -2, 82, 84, 92, 11, 0, 0, 0, 0,
	122, 13, -2, 127, 128, 129, 130, 131, 132, 32,
	20, 21, 23, 22, 0, 230, 11, 0, 169, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 0, 277, 281, 124, 31,
	20, 21, 23, 0, 0, 11, 0, 284, 285, 286,
	124, 0, 0, 0, 0, 0, 73, 218, 0, 79,
	-2, 127, 0, 316, -2, 205, 206, 207, 208, 75,
	326, 248, 256, 298, 299, 74, 85, 94, 96, 0,
	209, 210, 211, 212, 213, 214, 250, 0, 0, 0,
	0, 323, 324, 252, 0, 140, 0, 178, 95, 0,
	0, 140, 189, 195, 249, 251, 243, 13, 154, 157,
	158, 160, 0, 0, 0, 0, 13, 0, 0, 13,
	0, 126, 83, 93, 11, 0, 140, 0, 171, 172,
	173, 174, 184, 185, 190, 191, 196, 197, 0, 11,
	0, 13, 157, 0, 11, 13, 11, 0, 11, 11,
	139, 126, 0, 0, 175, 186, 192, 0, 0, 176,
	187, 193, 199, 200, 0, 177, 188, 194, 179, 180,
	20, 23, 140, 202, 203, 0, 181, 0, 0, 0,
	13, 13, 14, 15, 16, 0, 0, 300, 300, 0,
	12, 0, 0, 292, 293, 289, 290, 325, 11, 219,
	220, 221, 225, 11, 11, -2, 0, 126, 262, 263,
	264, 0, 86, 88, 0, 11, -2, 119, 11, 11,
	314, 315, 100, 11, 101, 102, 107, 108, 243, 90,
	244, 142, 0, 0, 0, 0, 161, 163, 157, 157,
	157, 142, 164, 13, 0, 167, 11, 0, 97, 98,
	99, 198, 0, 235, 0, 0, -2, 0, 0, 13,
	229, 0, 140, 11, 103, 104, 105, 106, 201, 204,
	0, 0, 246, 0, 0, 13, 0, 0, 265, 13,
	13, 278, 13, 125, 0, 0, 0, 319, 13, 0,
	13, 0, 11, 0, 11, 0, 11, 0, 11, -2,
	87, 91, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 89, 0, 142, 13, 279, 159, 155, 156, 162,
	13, 13, 13, 0, 142, 0, 166, 0, 11, 133,
	134, 135, 136, 137, 138, 0, 0, 0, 123, 141,
	236, 245, 0, 11, 237, 238, 0, 13, 231, 98,
	0, 11, 0, 0, 0, 247, 0, 13, 13, 260,
	253, 0, 255, 0, 0, 269, 13, 0, 275, 296,
	301, 302, 303, 304, 0, 0, 297, 317, 13, 0,
	13, 11, 215, 0, 226, 0, 228, 0, 232, 0,
	109, 110, 11, 294, 295, 0, 113, 114, 117, 144,
	0, 280, 143, 142, 142, 142, 152, 0, 165, 76,
	0, 111, 112, 0, 241, 0, -2, 0, 81, 0,
	116, 0, 183, 13, 258, 259, 254, 266, 13, 268,
	270, 0, 0, 13, 13, 13, 0, 0, 320, 11,
	321, 222, 223, 224, 227, 0, 80, 0, 0, 145,
	0, 142, 0, 142, 0, 142, 153, 77, -2, 0,
	242, 0, -2, 115, 257, 0, 13, 13, 276, 273,
	274, 300, 13, 13, 318, 322, 0, 118, 120, 146,
	0, 147, 0, 148, 0, 0, 0, 239, 0, 267,
	271, 272, 0, 0, 0, 11, 149, 150, 151, 121,
	182, 240, 305, 0, 0, 300, 307, 0, 309, 233,
	11, 306, 0, 300, 300, 313, 308, 234, 300, 311,
	312, 310,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:237
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:239
		{
		}
	case 3:
		//line parser.y:241
		{
		}
	case 4:
		//line parser.y:243
		{
		}
	case 5:
		//line parser.y:245
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:247
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:249
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:255
		{
		}
	case 11:
		//line parser.y:257
		{
		}
	case 12:
		//line parser.y:258
		{
		}
	case 13:
		//line parser.y:261
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 14:
		//line parser.y:263
		{
		}
	case 15:
		//line parser.y:265
		{
		}
	case 16:
		//line parser.y:267
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 17:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 18:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		//line parser.y:278
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 73:
		//line parser.y:280
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 74:
		//line parser.y:288
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 75:
		//line parser.y:291
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 76:
		//line parser.y:294
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 77:
		//line parser.y:303
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:313
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:319
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 80:
		//line parser.y:327
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:336
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:345
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:354
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:364
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:374
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 86:
		//line parser.y:382
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:393
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:404
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:414
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-4].genericValue.LineNumber(),
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 90:
		//line parser.y:424
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-3].genericValue.LineNumber(),
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 91:
		//line parser.y:434
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:447
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 93:
		//line parser.y:455
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 94:
		//line parser.y:464
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 95:
		//line parser.y:473
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 96:
		//line parser.y:482
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:493
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 98:
		//line parser.y:502
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 99:
		//line parser.y:511
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:520
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 101:
		//line parser.y:529
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 102:
		//line parser.y:538
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 103:
		//line parser.y:547
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 104:
		//line parser.y:556
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 105:
		//line parser.y:565
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 106:
		//line parser.y:574
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 107:
		//line parser.y:583
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 108:
		//line parser.y:592
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 109:
		//line parser.y:601
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 110:
		//line parser.y:614
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 111:
		//line parser.y:630
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 112:
		//line parser.y:639
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 113:
		//line parser.y:648
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 114:
		//line parser.y:657
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:666
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:675
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 117:
		//line parser.y:684
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 118:
		//line parser.y:693
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 119:
		//line parser.y:708
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 120:
		//line parser.y:720
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 121:
		//line parser.y:722
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 122:
		//line parser.y:724
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 123:
		//line parser.y:726
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:729
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:731
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:734
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 127:
		//line parser.y:736
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:738
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:740
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:742
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 131:
		//line parser.y:749
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 132:
		//line parser.y:751
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:753
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 134:
		//line parser.y:755
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:757
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:759
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:761
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:763
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 139:
		//line parser.y:772
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 140:
		//line parser.y:783
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 141:
		//line parser.y:785
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 142:
		//line parser.y:789
		{
			RubyVAL.genericSlice = nil
		}
	case 143:
		//line parser.y:791
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 144:
		//line parser.y:794
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 145:
		//line parser.y:805
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:817
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 147:
		//line parser.y:829
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 148:
		//line parser.y:841
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 149:
		//line parser.y:853
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 150:
		//line parser.y:866
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 151:
		//line parser.y:879
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 152:
		//line parser.y:892
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 153:
		//line parser.y:903
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 154:
		//line parser.y:917
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-0].methodParamSlice
		}
	case 155:
		//line parser.y:919
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 156:
		//line parser.y:921
		{
			RubyVAL.methodParamSlice = []ast.MethodParam{{Name: "", IsSplat: true}}
		}
	case 157:
		//line parser.y:923
		{
		}
	case 158:
		//line parser.y:925
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 159:
		//line parser.y:927
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 160:
		//line parser.y:930
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 161:
		//line parser.y:932
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsSplat: true}
		}
	case 162:
		//line parser.y:934
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name, DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 163:
		//line parser.y:936
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsProc: true}
		}
	case 164:
		//line parser.y:940
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 165:
		//line parser.y:950
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 166:
		//line parser.y:962
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 167:
		//line parser.y:975
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 168:
		//line parser.y:986
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 169:
		//line parser.y:995
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 170:
		//line parser.y:1014
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 171:
		//line parser.y:1032
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1041
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1047
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1053
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 175:
		//line parser.y:1055
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1064
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 177:
		//line parser.y:1066
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 178:
		//line parser.y:1068
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 179:
		//line parser.y:1071
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1080
		{
			var rhs ast.Node = RubyS[Rubypt-0].genericSlice
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				rhs = RubyS[Rubypt-0].genericSlice[0]
			}
			RubyVAL.genericValue = ast.Assignment{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				LHS:  RubyS[Rubypt-2].genericValue,
				RHS:  rhs,
			}
		}
	case 181:
		//line parser.y:1092
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1102
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 183:
		//line parser.y:1117
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 184:
		//line parser.y:1123
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 185:
		//line parser.y:1132
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1138
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1147
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 188:
		//line parser.y:1149
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:1151
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 190:
		//line parser.y:1160
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 191:
		//line parser.y:1169
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 192:
		//line parser.y:1175
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 193:
		//line parser.y:1184
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 194:
		//line parser.y:1186
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 195:
		//line parser.y:1188
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 196:
		//line parser.y:1196
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1198
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 198:
		//line parser.y:1200
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1203
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1205
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 201:
		//line parser.y:1207
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1210
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1212
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1214
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1218
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 206:
		//line parser.y:1220
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 207:
		//line parser.y:1222
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 208:
		//line parser.y:1224
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 209:
		//line parser.y:1227
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 210:
		//line parser.y:1238
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 211:
		//line parser.y:1249
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 212:
		//line parser.y:1260
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 213:
		//line parser.y:1271
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 214:
		//line parser.y:1282
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 215:
		//line parser.y:1293
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 216:
		//line parser.y:1295
		{
		}
	case 217:
		//line parser.y:1296
		{
		}
	case 218:
		//line parser.y:1298
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 219:
		//line parser.y:1300
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 220:
		//line parser.y:1302
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 221:
		//line parser.y:1304
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 222:
		//line parser.y:1306
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 223:
		//line parser.y:1308
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1310
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1313
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 226:
		//line parser.y:1315
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 227:
		//line parser.y:1317
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Pairs: RubyS[Rubypt-3].hashPairSlice}
		}
	case 228:
		//line parser.y:1319
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 229:
		//line parser.y:1328
		{
			RubyVAL.hashPair = ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue}
		}
	case 230:
		//line parser.y:1331
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 231:
		//line parser.y:1333
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 232:
		//line parser.y:1336
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 233:
		//line parser.y:1343
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 234:
		//line parser.y:1350
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 235:
		//line parser.y:1358
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
		}
	case 236:
		//line parser.y:1362
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 237:
		//line parser.y:1366
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
		}
	case 238:
		//line parser.y:1370
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 239:
		//line parser.y:1374
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Body: RubyS[Rubypt-3].genericSlice}
		}
	case 240:
		//line parser.y:1378
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Args: RubyS[Rubypt-4].methodParamSlice, Body: RubyS[Rubypt-3].genericSlice}
		}
	case 241:
		//line parser.y:1382
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 242:
		//line parser.y:1386
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
		}
	case 243:
		//line parser.y:1394
		{
		}
	case 244:
		//line parser.y:1394
		{
			RubyVAL.genericBlock = RubyS[Rubypt-0].genericBlock
		}
	case 245:
		//line parser.y:1398
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 246:
		//line parser.y:1402
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 247:
		//line parser.y:1411
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1421
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1430
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1439
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 251:
		//line parser.y:1448
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1457
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1466
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1475
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1485
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 256:
		//line parser.y:1494
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 257:
		//line parser.y:1505
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 258:
		//line parser.y:1514
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 259:
		//line parser.y:1522
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 260:
		//line parser.y:1530
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 261:
		//line parser.y:1538
		{
		}
	case 262:
		//line parser.y:1539
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 263:
		//line parser.y:1540
		{
		}
	case 264:
		//line parser.y:1543
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 265:
		//line parser.y:1546
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 266:
		//line parser.y:1555
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 267:
		//line parser.y:1565
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 268:
		//line parser.y:1575
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 269:
		//line parser.y:1585
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 270:
		//line parser.y:1587
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 271:
		//line parser.y:1601
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 272:
		//line parser.y:1617
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 273:
		//line parser.y:1633
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 274:
		//line parser.y:1643
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 275:
		//line parser.y:1655
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 276:
		//line parser.y:1657
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 277:
		//line parser.y:1660
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 278:
		//line parser.y:1662
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 279:
		//line parser.y:1665
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 280:
		//line parser.y:1667
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 281:
		//line parser.y:1670
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 282:
		//line parser.y:1677
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 283:
		//line parser.y:1679
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 284:
		//line parser.y:1682
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 285:
		//line parser.y:1690
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 286:
		//line parser.y:1692
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 287:
		//line parser.y:1694
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 288:
		//line parser.y:1698
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 289:
		//line parser.y:1700
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 290:
		//line parser.y:1702
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 291:
		//line parser.y:1706
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 292:
		//line parser.y:1708
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 293:
		//line parser.y:1710
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 294:
		//line parser.y:1714
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-5].genericValue,
				True:      RubyS[Rubypt-3].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 295:
		//line parser.y:1724
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-5].genericValue,
				True:      RubyS[Rubypt-3].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
				Line:      RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 296:
		//line parser.y:1734
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 297:
		//line parser.y:1740
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 298:
		//line parser.y:1747
		{
			RubyVAL.genericValue = ast.Loop{
				Line:      RubyS[Rubypt-2].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 299:
		//line parser.y:1755
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 300:
		//line parser.y:1762
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 301:
		//line parser.y:1764
		{
		}
	case 302:
		//line parser.y:1766
		{
		}
	case 303:
		//line parser.y:1768
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 304:
		//line parser.y:1770
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 305:
		//line parser.y:1773
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 306:
		//line parser.y:1781
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 307:
		//line parser.y:1790
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 308:
		//line parser.y:1798
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 309:
		//line parser.y:1807
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 310:
		//line parser.y:1816
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 311:
		//line parser.y:1824
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 312:
		//line parser.y:1832
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 313:
		//line parser.y:1840
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 314:
		//line parser.y:1849
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 315:
		//line parser.y:1852
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 316:
		//line parser.y:1855
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 317:
		//line parser.y:1862
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 318:
		//line parser.y:1868
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 319:
		//line parser.y:1874
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 320:
		//line parser.y:1880
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 321:
		//line parser.y:1887
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 322:
		//line parser.y:1889
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 323:
		//line parser.y:1892
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 324:
		//line parser.y:1894
		{
			RubyVAL.genericValue = ast.Range{
				Start:            RubyS[Rubypt-2].genericValue,
				End:              RubyS[Rubypt-0].genericValue,
				Line:             RubyS[Rubypt-2].genericValue.LineNumber(),
				ExcludeLastValue: true,
			}
		}
	case 325:
		//line parser.y:1904
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 326:
		//line parser.y:1911
		{
			RubyVAL.genericValue = ast.Defined{Node: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

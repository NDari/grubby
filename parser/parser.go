//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	astString       ast.String
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CONSTANT = 57351
const NAMESPACED_CAPITAL_REF = 57352
const LPAREN = 57353
const RPAREN = 57354
const COMMA = 57355
const STRING = 57356
const NamespacedModule = 57357
const ProcArg = 57358
const DO = 57359
const DEF = 57360
const END = 57361
const IF = 57362
const ELSE = 57363
const ELSIF = 57364
const UNLESS = 57365
const CLASS = 57366
const MODULE = 57367
const FOR = 57368
const WHILE = 57369
const UNTIL = 57370
const BEGIN = 57371
const RESCUE = 57372
const ENSURE = 57373
const BREAK = 57374
const NEXT = 57375
const REDO = 57376
const RETRY = 57377
const RETURN = 57378
const YIELD = 57379
const AND = 57380
const OR = 57381
const LAMBDA = 57382
const CASE = 57383
const WHEN = 57384
const ALIAS = 57385
const SELF = 57386
const NIL = 57387
const LESSTHAN = 57388
const GREATERTHAN = 57389
const EQUALTO = 57390
const BANG = 57391
const COMPLEMENT = 57392
const BINARY_PLUS = 57393
const UNARY_PLUS = 57394
const BINARY_MINUS = 57395
const UNARY_MINUS = 57396
const STAR = 57397
const RANGE = 57398
const OR_EQUALS = 57399
const AND_EQUALS = 57400
const WHITESPACE = 57401
const NEWLINE = 57402
const SEMICOLON = 57403
const COLON = 57404
const DOT = 57405
const PIPE = 57406
const SLASH = 57407
const AMPERSAND = 57408
const QUESTIONMARK = 57409
const CARET = 57410
const LBRACKET = 57411
const RBRACKET = 57412
const LBRACE = 57413
const RBRACE = 57414
const DOLLARSIGN = 57415
const ATSIGN = 57416
const FILE_CONST_REF = 57417
const LINE_CONST_REF = 57418
const EOF = 57419

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1933

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 135,
	18, 259,
	20, 259,
	23, 259,
	24, 259,
	25, 259,
	27, 259,
	28, 259,
	29, 259,
	32, 259,
	33, 259,
	35, 259,
	36, 259,
	37, 259,
	41, 259,
	43, 259,
	61, 259,
	-2, 13,
	-1, 206,
	18, 259,
	20, 259,
	23, 259,
	24, 259,
	25, 259,
	27, 259,
	28, 259,
	29, 259,
	32, 259,
	33, 259,
	35, 259,
	36, 259,
	37, 259,
	41, 259,
	43, 259,
	61, 259,
	-2, 13,
	-1, 351,
	4, 22,
	38, 22,
	39, 22,
	46, 22,
	47, 22,
	51, 22,
	53, 22,
	63, 22,
	64, 22,
	65, 22,
	66, 22,
	-2, 119,
	-1, 362,
	18, 259,
	20, 259,
	23, 259,
	24, 259,
	25, 259,
	27, 259,
	28, 259,
	29, 259,
	32, 259,
	33, 259,
	35, 259,
	36, 259,
	37, 259,
	41, 259,
	43, 259,
	61, 259,
	-2, 13,
	-1, 400,
	4, 35,
	38, 35,
	39, 35,
	47, 35,
	51, 35,
	53, 35,
	60, 13,
	63, 35,
	64, 35,
	65, 35,
	66, 35,
	72, 13,
	-2, 15,
	-1, 575,
	13, 125,
	-2, 13,
}

const RubyNprod = 322
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4437

var RubyAct = []int{

	329, 138, 5, 616, 449, 413, 182, 446, 336, 137,
	149, 447, 136, 252, 250, 254, 14, 55, 399, 144,
	26, 54, 335, 335, 100, 107, 317, 101, 2, 3,
	308, 102, 216, 508, 577, 217, 203, 581, 552, 25,
	21, 335, 335, 28, 301, 4, 267, 404, 279, 389,
	145, 335, 369, 535, 533, 159, 157, 179, 180, 116,
	117, 190, 191, 512, 98, 97, 148, 105, 106, 145,
	194, 369, 108, 369, 109, 320, 110, 424, 576, 311,
	205, 99, 211, 212, 104, 113, 111, 112, 411, 470,
	209, 614, 410, 304, 92, 148, 335, 282, 92, 193,
	218, 221, 222, 223, 210, 92, 92, 195, 510, 405,
	230, 121, 92, 204, 158, 235, 92, 164, 159, 157,
	240, 241, 163, 210, 245, 246, 247, 248, 390, 258,
	368, 286, 337, 127, 122, 594, 465, 335, 163, 478,
	469, 477, 243, 445, 228, 259, 265, 377, 266, 172,
	335, 168, 120, 237, 238, 613, 160, 595, 566, 270,
	269, 294, 295, 296, 285, 298, 299, 300, 148, 305,
	306, 307, 264, 312, 313, 314, 316, 158, 293, 292,
	272, 274, 537, 287, 273, 276, 278, 69, 351, 68,
	78, 186, 77, 79, 290, 321, 94, 315, 338, 339,
	340, 341, 148, 335, 167, 335, 335, 261, 565, 353,
	422, 448, 119, 612, 346, 51, 528, 159, 199, 156,
	345, 200, 80, 159, 157, 73, 95, 96, 611, 334,
	335, 81, 82, 466, 83, 359, 84, 85, 360, 164,
	255, 197, 335, 352, 198, 253, 286, 356, 165, 166,
	257, 75, 176, 76, 347, 93, 92, 72, 71, 371,
	163, 160, 335, 335, 335, 153, 386, 375, 465, 598,
	161, 162, 129, 100, 596, 187, 101, 178, 187, 187,
	102, 148, 158, 100, 573, 568, 101, 175, 100, 256,
	102, 101, 402, 172, 153, 102, 130, 251, 128, 187,
	187, 187, 173, 174, 387, 525, 519, 148, 270, 269,
	452, 374, 177, 588, 125, 255, 503, 126, 504, 187,
	392, 187, 187, 333, 187, 257, 187, 187, 187, 187,
	427, 187, 428, 202, 187, 421, 95, 187, 187, 429,
	121, 550, 100, 426, 430, 101, 466, 461, 187, 102,
	551, 123, 124, 429, 439, 187, 187, 187, 187, 280,
	331, 267, 442, 122, 256, 378, 436, 153, 148, 148,
	441, 453, 187, 171, 187, 631, 434, 628, 627, 187,
	431, 255, 332, 302, 432, 433, 435, 309, 450, 456,
	451, 257, 318, 457, 178, 455, 374, 283, 464, 443,
	342, 153, 100, 467, 463, 101, 201, 100, 168, 102,
	101, 425, 133, 77, 102, 484, 622, 169, 170, 153,
	187, 357, 487, 460, 358, 498, 498, 532, 493, 626,
	376, 628, 627, 133, 77, 471, 506, 473, 514, 476,
	531, 187, 589, 590, 187, 517, 518, 325, 326, 409,
	408, 255, 521, 187, 187, 520, 253, 343, 132, 407,
	148, 257, 521, 133, 77, 526, 530, 397, 391, 509,
	418, 511, 419, 513, 228, 219, 516, 623, 220, 539,
	153, 422, 420, 542, 100, 380, 545, 101, 483, 482,
	481, 102, 483, 482, 379, 378, 373, 323, 529, 187,
	256, 555, 556, 187, 187, 322, 153, 249, 225, 492,
	349, 536, 396, 330, 538, 348, 1, 208, 91, 90,
	563, 89, 88, 87, 86, 41, 562, 40, 39, 38,
	499, 569, 571, 20, 43, 570, 572, 44, 574, 578,
	575, 16, 12, 13, 560, 11, 463, 187, 45, 24,
	23, 22, 27, 187, 567, 107, 19, 10, 35, 30,
	18, 15, 70, 42, 17, 37, 36, 153, 153, 31,
	29, 32, 187, 74, 0, 521, 0, 521, 597, 52,
	599, 187, 0, 0, 0, 187, 0, 0, 0, 116,
	117, 0, 0, 187, 609, 0, 592, 105, 106, 0,
	0, 0, 108, 153, 109, 0, 110, 498, 498, 498,
	0, 620, 600, 0, 104, 113, 111, 112, 629, 0,
	0, 541, 0, 0, 0, 0, 187, 187, 633, 154,
	228, 498, 0, 0, 0, 498, 498, 498, 0, 188,
	0, 0, 188, 188, 0, 187, 0, 624, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 154, 153,
	0, 0, 632, 188, 188, 188, 606, 607, 608, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 188, 188, 0, 188, 0,
	188, 188, 188, 188, 0, 188, 630, 0, 188, 107,
	0, 188, 188, 0, 0, 0, 634, 635, 625, 553,
	0, 636, 188, 0, 0, 0, 0, 0, 0, 188,
	188, 188, 188, 281, 0, 153, 0, 187, 107, 0,
	0, 154, 0, 116, 117, 0, 188, 0, 188, 0,
	0, 105, 106, 188, 0, 153, 108, 303, 109, 0,
	110, 310, 0, 0, 0, 0, 319, 0, 104, 113,
	111, 112, 116, 117, 107, 154, 582, 0, 0, 0,
	105, 106, 0, 0, 0, 108, 0, 109, 0, 110,
	118, 0, 0, 154, 188, 0, 107, 104, 113, 111,
	112, 0, 187, 0, 475, 0, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 188, 105, 106, 188, 0,
	187, 108, 0, 109, 0, 110, 118, 188, 188, 0,
	116, 117, 0, 104, 113, 111, 112, 0, 105, 106,
	403, 0, 0, 108, 0, 109, 0, 110, 118, 0,
	0, 0, 0, 0, 154, 104, 113, 111, 112, 0,
	0, 0, 388, 0, 0, 0, 69, 49, 68, 78,
	50, 77, 79, 188, 0, 94, 0, 188, 188, 46,
	154, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 95, 96, 0, 0, 0,
	81, 82, 0, 83, 107, 84, 85, 0, 34, 0,
	0, 188, 0, 0, 0, 0, 0, 188, 0, 0,
	75, 0, 76, 0, 93, 92, 72, 71, 0, 0,
	0, 154, 154, 0, 0, 0, 188, 0, 116, 117,
	0, 0, 0, 0, 0, 188, 105, 106, 0, 188,
	0, 108, 0, 109, 0, 110, 0, 188, 150, 0,
	0, 0, 0, 104, 113, 111, 112, 154, 150, 0,
	540, 150, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	188, 188, 150, 150, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 150, 0, 150, 150, 0, 150, 188, 150,
	150, 150, 150, 154, 150, 0, 0, 150, 0, 0,
	150, 150, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 150, 150,
	150, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 0, 0, 0, 0, 150, 0, 150, 0, 0,
	116, 117, 150, 554, 0, 0, 0, 0, 105, 106,
	0, 0, 0, 108, 0, 109, 0, 110, 0, 154,
	0, 188, 0, 0, 150, 104, 113, 111, 112, 0,
	0, 0, 406, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 150, 150, 69, 151, 68, 78, 152, 77,
	135, 0, 143, 94, 0, 156, 145, 0, 0, 0,
	583, 0, 0, 0, 150, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 150, 0, 80,
	0, 0, 0, 95, 96, 0, 188, 140, 81, 82,
	0, 83, 0, 84, 85, 0, 141, 142, 0, 0,
	0, 0, 0, 150, 188, 0, 0, 0, 139, 0,
	146, 0, 93, 92, 72, 71, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 400, 150, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 9, 0, 69, 151, 68, 78, 152, 77, 135,
	0, 0, 94, 0, 156, 145, 0, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	150, 150, 95, 96, 0, 400, 0, 81, 82, 0,
	83, 147, 84, 85, 150, 0, 0, 0, 150, 0,
	438, 183, 0, 0, 192, 196, 150, 288, 0, 146,
	0, 93, 92, 72, 71, 0, 150, 0, 0, 0,
	207, 0, 0, 0, 0, 213, 214, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	150, 0, 0, 0, 0, 224, 0, 226, 227, 0,
	229, 0, 231, 232, 233, 234, 0, 236, 150, 0,
	239, 0, 0, 242, 244, 0, 0, 150, 0, 0,
	0, 0, 150, 0, 262, 0, 0, 0, 0, 0,
	0, 268, 271, 275, 277, 69, 151, 68, 78, 152,
	77, 135, 0, 147, 94, 0, 156, 145, 289, 0,
	291, 0, 0, 0, 0, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 95, 96, 0, 147, 140, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 150, 0,
	150, 0, 0, 0, 0, 344, 350, 0, 0, 288,
	0, 146, 0, 93, 92, 72, 71, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 0, 0,
	364, 0, 69, 49, 68, 78, 50, 77, 79, 366,
	367, 94, 0, 0, 0, 46, 619, 500, 618, 617,
	501, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 150, 207, 80, 62, 0,
	67, 95, 96, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 150, 0, 393, 0, 496, 497, 350,
	401, 0, 207, 0, 0, 0, 75, 0, 76, 0,
	93, 92, 72, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 69, 185, 68, 78,
	186, 77, 362, 0, 0, 94, 0, 0, 145, 0,
	0, 0, 0, 423, 0, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 147, 207, 95, 96, 0, 440, 361,
	81, 82, 0, 83, 155, 84, 85, 444, 0, 0,
	0, 393, 0, 0, 189, 0, 0, 189, 189, 454,
	75, 0, 146, 0, 93, 92, 72, 71, 0, 462,
	0, 0, 0, 155, 0, 0, 0, 0, 189, 189,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 479, 480, 0, 0, 0, 0, 189, 0,
	189, 189, 0, 189, 0, 189, 189, 189, 189, 0,
	189, 183, 0, 189, 0, 0, 189, 189, 0, 0,
	515, 0, 0, 0, 0, 207, 0, 189, 0, 0,
	0, 0, 0, 0, 189, 189, 189, 189, 0, 69,
	151, 68, 78, 152, 77, 79, 155, 0, 94, 0,
	156, 189, 0, 189, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 95, 96,
	155, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 561, 0, 564, 335, 107, 0, 0, 155, 189,
	0, 0, 33, 75, 0, 76, 0, 93, 92, 72,
	71, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 324, 189, 0, 0, 0, 0, 0, 116,
	117, 0, 189, 189, 0, 0, 0, 105, 106, 0,
	0, 0, 108, 0, 109, 0, 110, 0, 0, 0,
	131, 134, 0, 0, 104, 113, 111, 112, 601, 155,
	0, 370, 184, 0, 0, 184, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 610, 0, 189, 0,
	0, 181, 189, 189, 0, 155, 184, 184, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 184, 184,
	0, 184, 0, 184, 184, 184, 184, 0, 184, 0,
	0, 184, 0, 0, 184, 184, 189, 0, 0, 0,
	0, 0, 189, 0, 0, 184, 107, 0, 0, 0,
	0, 0, 184, 184, 184, 184, 155, 155, 0, 0,
	0, 189, 0, 0, 260, 114, 0, 263, 0, 184,
	189, 184, 103, 0, 189, 0, 184, 0, 284, 0,
	116, 117, 189, 0, 0, 0, 0, 0, 105, 106,
	0, 0, 155, 108, 0, 109, 0, 110, 118, 0,
	0, 0, 0, 0, 0, 104, 113, 111, 112, 115,
	0, 0, 0, 0, 0, 189, 189, 184, 69, 185,
	68, 78, 186, 77, 79, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 0, 184, 0,
	0, 184, 0, 189, 0, 0, 0, 0, 155, 0,
	184, 184, 0, 80, 0, 0, 0, 95, 96, 0,
	0, 0, 81, 82, 107, 83, 0, 84, 85, 0,
	0, 0, 0, 335, 383, 0, 0, 286, 0, 0,
	0, 0, 75, 372, 76, 0, 93, 92, 72, 71,
	103, 0, 381, 0, 107, 384, 184, 0, 116, 117,
	184, 184, 0, 0, 0, 0, 105, 106, 0, 0,
	0, 108, 0, 109, 155, 110, 189, 0, 395, 0,
	398, 0, 0, 104, 113, 111, 112, 115, 116, 117,
	0, 0, 0, 0, 155, 0, 105, 106, 0, 0,
	0, 108, 0, 109, 184, 110, 0, 0, 0, 0,
	184, 0, 0, 104, 113, 111, 112, 115, 416, 417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	69, 351, 68, 78, 186, 77, 79, 0, 184, 94,
	0, 189, 184, 0, 0, 0, 0, 0, 0, 398,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 95,
	96, 0, 0, 0, 81, 82, 458, 83, 0, 84,
	85, 0, 0, 184, 184, 335, 0, 0, 0, 0,
	0, 0, 472, 474, 75, 494, 76, 347, 93, 92,
	72, 71, 184, 0, 0, 0, 0, 0, 485, 0,
	0, 184, 489, 490, 0, 491, 0, 0, 0, 0,
	0, 505, 0, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 522, 0, 523, 0, 0, 0, 0, 524, 0,
	0, 69, 49, 68, 78, 50, 77, 79, 0, 0,
	94, 0, 0, 0, 46, 615, 500, 618, 617, 501,
	47, 48, 0, 60, 61, 58, 543, 544, 64, 65,
	0, 66, 63, 59, 184, 549, 80, 62, 0, 67,
	95, 96, 0, 0, 0, 81, 82, 557, 83, 559,
	84, 85, 0, 0, 0, 0, 496, 497, 0, 593,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 93,
	92, 72, 71, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 0, 0, 0, 0,
	580, 0, 0, 116, 117, 585, 586, 587, 0, 184,
	0, 105, 106, 0, 0, 0, 108, 0, 109, 0,
	110, 0, 0, 0, 0, 0, 0, 184, 104, 113,
	111, 112, 0, 0, 603, 604, 605, 0, 0, 0,
	0, 0, 416, 417, 69, 49, 68, 78, 50, 77,
	79, 0, 0, 94, 0, 0, 0, 46, 486, 56,
	415, 414, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 95, 96, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 93, 92, 72, 71, 69, 49, 68, 78,
	50, 77, 79, 0, 0, 94, 0, 0, 0, 46,
	412, 56, 415, 414, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 95, 96, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 93, 92, 72, 71, 69, 49,
	68, 78, 50, 77, 79, 0, 0, 94, 0, 0,
	0, 46, 0, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 422, 448, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 95, 96, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 93, 92, 72, 71,
	69, 49, 68, 78, 50, 77, 79, 0, 0, 94,
	0, 0, 0, 46, 546, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 547, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 95,
	96, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 327, 328, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 93, 92,
	72, 71, 69, 49, 68, 78, 50, 77, 79, 0,
	0, 94, 0, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 95, 96, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	93, 92, 72, 71, 8, 69, 49, 68, 78, 50,
	77, 79, 0, 0, 94, 0, 0, 0, 46, 621,
	500, 0, 0, 501, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 95, 96, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	496, 497, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 93, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 79, 0, 0, 94, 0, 0, 0,
	46, 602, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 95, 96, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 93, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 79, 0, 0, 94, 0,
	0, 0, 46, 591, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 95, 96,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 93, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 79, 0, 0,
	94, 0, 0, 0, 46, 558, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	95, 96, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 93,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 79,
	0, 0, 94, 0, 0, 0, 46, 548, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 95, 96, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 93, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 79, 0, 0, 94, 0, 0, 0, 46, 0,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 95, 96, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 534, 93, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 79, 0, 0, 94, 0, 0, 0,
	46, 527, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 95, 96, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 93, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 79, 0, 0, 94, 0,
	0, 0, 46, 502, 500, 0, 0, 501, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 95, 96,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 496, 497, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 93, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 79, 0, 0,
	94, 0, 0, 0, 46, 495, 500, 0, 0, 501,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	95, 96, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 496, 497, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 93,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 79,
	0, 0, 94, 0, 0, 0, 46, 488, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 95, 96, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 93, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 79, 0, 0, 94, 0, 0, 0, 46, 468,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 95, 96, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 93, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 79, 0, 0, 94, 0, 0, 0,
	46, 459, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 95, 96, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 93, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 79, 0, 0, 94, 0,
	0, 0, 46, 394, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 95, 96,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 93, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 79, 0, 0,
	94, 0, 0, 0, 46, 385, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	95, 96, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 93,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 79,
	0, 0, 94, 0, 0, 0, 46, 382, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 95, 96, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 93, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 79, 0, 0, 94, 0, 0, 0, 46, 0,
	500, 0, 0, 501, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 95, 96, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	496, 497, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 93, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 79, 0, 0, 94, 0, 0, 0,
	46, 0, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 95, 96, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 93, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 79, 355, 0, 94, 0,
	0, 0, 46, 0, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 95, 96,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 0, 354, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 93, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 79, 0, 0,
	94, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	95, 96, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 93,
	92, 72, 71, 69, 151, 68, 78, 152, 77, 135,
	0, 0, 94, 0, 156, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 95, 96, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 69, 185, 68, 78, 186, 77,
	79, 0, 0, 94, 0, 0, 0, 288, 0, 146,
	0, 93, 92, 72, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 95, 96, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 335,
	69, 185, 68, 78, 186, 77, 79, 0, 75, 94,
	76, 0, 93, 92, 72, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 62, 0, 0, 95,
	96, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 69, 151, 68, 78, 152, 77, 206, 0, 0,
	94, 0, 156, 0, 75, 0, 76, 0, 93, 92,
	72, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	95, 96, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 69, 185, 68, 78, 186, 77, 79, 0,
	0, 94, 0, 0, 0, 75, 0, 76, 0, 93,
	92, 72, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	107, 95, 96, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 75, 0, 76, 0,
	93, 92, 72, 71, 116, 117, 0, 0, 0, 0,
	0, 0, 105, 106, 437, 0, 0, 108, 0, 109,
	0, 110, 0, 0, 0, 116, 117, 0, 365, 104,
	113, 111, 112, 105, 106, 0, 0, 0, 108, 0,
	109, 0, 110, 0, 0, 0, 0, 0, 116, 117,
	104, 113, 111, 112, 0, 0, 105, 106, 0, 0,
	0, 108, 0, 109, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 104, 113, 111, 112,
}
var RubyPact = []int{

	-32, 2637, -1000, -1000, -1000, 4, -1000, -1000, -1000, 1872,
	-1000, -1000, -1000, -1000, 189, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 104, 294, -1000, 70, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 292, 454, 403, 1109,
	213, 191, 360, 245, 239, 264, 851, 851, -1000, 4287,
	851, 851, 4287, 4287, 221, 198, -1000, 399, -1000, -1000,
	319, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4236, -1000,
	52, 851, 851, 4287, 4287, 4287, -1000, -1000, -1000, -1000,
	-1000, -1000, 26, 469, -1000, -1000, -1000, -1000, -1000, -1000,
	851, 851, 851, 4287, 502, 4287, 4287, -1000, 4287, 851,
	4287, 4287, 4287, 4287, 851, 4287, -1000, -1000, 4287, 851,
	851, 4287, 4287, 851, 851, 851, 851, 501, 234, 66,
	445, 161, 4287, 207, -1000, -1000, 52, -1000, 33, 4287,
	4185, 4287, 4287, 42, 384, 67, -1000, 4347, -1000, -1000,
	65, 1360, 108, 69, 103, 101, 4287, -1000, 4287, -1000,
	851, 851, 851, 4287, 851, 851, 851, 38, 851, 851,
	851, 24, 851, 851, 851, 851, 20, 499, 491, 268,
	387, 3862, 347, 4347, -1000, 4078, 45, 53, -1000, -1000,
	322, 263, 4347, 90, 347, -1000, 2020, 851, 851, 851,
	851, 393, -1000, 1674, 2095, 348, -1000, 4347, 3934, -1000,
	-1000, 268, 268, 4347, 4347, 4347, -1000, -1000, 415, -1000,
	-1000, 268, 268, 268, 4347, 1531, 4347, 4347, 4129, 4347,
	268, 4347, 4347, 4347, 4347, 268, 4326, 4129, 4129, 4347,
	268, 268, 4347, 60, 1731, 268, 268, 268, 268, 52,
	-1000, 490, 383, 375, -1000, 99, 489, 488, 479, -1000,
	3718, 403, 4347, 3646, 1674, -1000, -1000, -1000, 782, -21,
	58, 1990, -1000, -1000, -1000, 2020, -1000, 2020, -1000, -1000,
	-1000, -1000, 462, 4287, 3574, -1000, 461, 182, 4287, 4347,
	1674, 760, -23, 39, 268, 268, 268, 1032, 268, 268,
	268, -1000, -1000, -1000, 453, 268, 268, 268, -1000, -1000,
	-1000, 444, 268, 268, 268, 239, 268, -1000, -1000, -1000,
	443, 381, 23, 19, 2421, -1000, -1000, -1000, -1000, 268,
	451, 4287, -1000, -1000, 90, -1000, 311, 4287, 268, 268,
	268, 268, -1000, 371, 4347, -1000, -1000, -1000, 363, 353,
	4370, 1218, 1674, 268, -1000, -1000, 1943, -1000, -1000, -1000,
	52, 851, -1000, 4347, 4347, 4287, 4347, 4347, -1000, 4287,
	95, -1000, 2493, 445, 309, 298, 359, 4287, -1000, -1000,
	445, 2493, -1000, -1000, 3502, -1000, 334, 1674, 220, -1000,
	-1000, -1000, 203, 4347, -1000, 3430, 76, -1000, 3862, -1000,
	65, 724, 348, 93, -1000, -1000, 91, -1000, -1000, -1000,
	4287, 4287, -1000, 471, 851, -1000, 2349, 3358, -1000, -1000,
	-1000, -1000, 424, 4347, 3286, 3214, 297, -1000, -1000, 4287,
	347, -37, -1000, 36, -1000, -9, -1000, 851, 4287, 348,
	4347, -1000, 268, 1674, 4347, 851, 287, 180, -1000, -1000,
	-1000, -1000, -1000, -1000, 4347, -1000, 286, 180, 3142, -1000,
	204, -1000, 4347, -1000, -1000, 851, 434, -1000, -1000, -1000,
	421, -18, 3070, -19, 3862, 88, 170, -1000, 851, 900,
	551, -1000, 851, -1000, 268, 3862, -1000, 467, -1000, 2565,
	2998, 3862, 337, 32, -1000, -1000, -1000, -1000, 268, -1000,
	851, 851, -1000, -1000, -1000, 2926, 347, 3862, -1000, 1674,
	-1000, 4129, -1000, 202, 268, 4347, 146, 334, 268, -1000,
	266, -1000, 3862, 2493, 2493, -1000, 265, -1000, 52, 1674,
	268, 9, -1000, -1000, -1000, -1000, -38, -1000, 4006, 268,
	333, -1000, 268, 3862, 3862, -1000, -1000, -1000, -1000, 3862,
	31, 403, -1000, -1000, -1000, 253, 382, 2854, -1000, 3862,
	77, 4347, -1000, -1000, 2275, 73, -1000, 145, -1000, 255,
	180, 250, 180, -1000, -1000, -1000, 4287, -1000, 268, 3862,
	2782, -1000, -1000, -1000, -1000, 3862, 3862, 3862, -1000, -1000,
	-1000, -1000, 77, 851, 4287, -1000, -1000, 209, -1000, 194,
	143, 21, -1000, 3862, 3862, 3862, 2216, 1447, 2710, 464,
	695, -1000, -1000, -1000, -1000, -1000, 410, 851, -1000, -1000,
	356, -1000, -1000, -1000, 77, -1000, -1000, 851, -1000, 268,
	3790, -1000, 77, 268, 3790, 3790, 3790,
}
var RubyPgo = []int{

	0, 573, 0, 225, 571, 20, 9, 570, 569, 566,
	1534, 565, 4, 43, 564, 10, 563, 16, 562, 561,
	560, 1221, 559, 579, 908, 558, 557, 556, 552, 551,
	550, 549, 548, 545, 543, 15, 215, 542, 541, 1742,
	8, 40, 537, 534, 39, 533, 530, 3, 21, 529,
	528, 527, 525, 524, 523, 522, 521, 519, 518, 1762,
	517, 11, 12, 18, 5, 516, 14, 515, 77, 7,
	513, 1, 512, 6, 510, 19, 17, 13, 509, 457,
	416, 36,
}
var RubyR1 = []int{

	0, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 80, 80, 81, 81, 59, 59, 59, 59, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 32, 32, 32,
	32, 32, 32, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 18, 18, 44, 16, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 25, 62, 62, 62, 62, 73, 73, 71,
	71, 71, 71, 71, 71, 71, 15, 75, 75, 69,
	69, 26, 26, 26, 26, 26, 26, 26, 26, 66,
	66, 66, 77, 77, 77, 35, 35, 35, 35, 33,
	33, 34, 37, 39, 39, 39, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 19, 19, 19, 76, 76,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 10, 10, 36, 36, 23, 23,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 8, 3, 1, 79,
	79, 79, 79, 79, 79, 79, 4, 4, 4, 67,
	67, 74, 74, 74, 6, 6, 6, 6, 6, 6,
	63, 72, 72, 72, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 64, 64, 64, 64, 60,
	60, 60, 9, 20, 20, 20, 20, 12, 12, 12,
	12, 12, 12, 12, 12, 78, 78, 70, 70, 61,
	61, 27, 27, 28, 29, 29, 29, 31, 31, 31,
	30, 30, 30, 13, 45, 45, 45, 68, 68, 68,
	68, 68, 46, 46, 46, 46, 46, 47, 47, 47,
	47, 43, 42, 11, 41, 41, 41, 41, 40, 40,
	5, 7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 6, 7,
	1, 2, 6, 6, 2, 3, 2, 3, 4, 5,
	4, 3, 4, 5, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 6, 7,
	6, 6, 4, 5, 8, 1, 4, 1, 3, 0,
	1, 1, 1, 4, 4, 4, 2, 1, 3, 0,
	2, 6, 7, 8, 8, 9, 9, 6, 7, 1,
	3, 3, 0, 1, 3, 1, 2, 3, 2, 4,
	6, 5, 4, 1, 2, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 9, 6,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 4, 3, 3, 3, 4, 3, 3,
	3, 4, 3, 3, 3, 4, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 5, 1, 1, 0,
	1, 1, 1, 4, 4, 4, 3, 5, 5, 3,
	7, 3, 7, 8, 3, 4, 5, 5, 5, 6,
	3, 0, 1, 3, 4, 5, 3, 3, 3, 3,
	3, 5, 6, 5, 3, 4, 3, 3, 2, 0,
	2, 2, 3, 4, 6, 8, 6, 2, 3, 5,
	5, 5, 4, 4, 4, 1, 3, 0, 2, 1,
	2, 2, 1, 1, 2, 2, 1, 1, 3, 3,
	1, 3, 3, 5, 5, 5, 3, 0, 2, 2,
	2, 2, 5, 6, 5, 6, 5, 4, 3, 3,
	2, 4, 4, 2, 5, 7, 4, 6, 4, 5,
	3, 3,
}
var RubyChk = []int{

	-1000, -65, 60, 61, 77, -2, 60, 61, 77, -21,
	-26, -33, -37, -34, -17, -19, -38, -14, -20, -27,
	-45, -41, -29, -30, -31, -44, -5, -28, -13, -7,
	-22, -8, -4, -39, -24, -25, -9, -11, -49, -50,
	-51, -52, -16, -43, -42, -32, 18, 24, 25, 6,
	9, -36, -23, -10, -48, -76, 20, 23, 29, 37,
	27, 28, 41, 36, 32, 33, 35, 43, 7, 5,
	-18, 76, 75, -3, -1, 69, 71, 10, 8, 11,
	40, 49, 50, 52, 54, 55, -53, -54, -55, -56,
	-57, -58, 74, 73, 14, 44, 45, 61, 60, 77,
	20, 23, 27, 30, 63, 46, 47, 4, 51, 53,
	55, 65, 66, 64, 23, 67, 38, 39, 56, 23,
	48, 46, 69, 57, 58, 20, 23, 63, 6, -3,
	4, -39, 4, 9, -39, 11, -62, -6, -71, 69,
	48, 57, 58, 13, -75, 17, 71, -21, -17, -15,
	-24, 6, 9, -36, -23, -10, 16, 11, 69, 10,
	48, 57, 58, 69, 48, 57, 58, 13, 48, 57,
	58, 13, 48, 57, 58, 48, 13, 48, 13, -2,
	-2, -59, -73, -21, -39, 6, 9, -36, -23, -10,
	-2, -2, -21, -81, -73, -13, -21, 20, 23, 20,
	23, 7, 14, -81, -81, -71, 11, -21, -60, -6,
	71, -2, -2, -21, -21, -21, 6, 9, 74, 6,
	9, -2, -2, -2, -21, 6, -21, -21, -81, -21,
	-2, -21, -21, -21, -21, -2, -21, -81, -81, -21,
	-2, -2, -21, -75, -21, -2, -2, -2, -2, 6,
	-66, 63, -77, 11, -35, 6, 55, 16, 63, -66,
	-59, 46, -21, -59, -81, -6, -6, 13, -21, -5,
	-75, -21, -44, -13, -41, -21, -13, -21, -13, 6,
	-36, -23, 55, 13, -59, -63, 64, -81, 69, -21,
	-81, -21, -5, -75, -2, -2, -2, -21, -2, -2,
	-2, 6, -36, -23, 55, -2, -2, -2, 6, -36,
	-23, 55, -2, -2, -2, -48, -2, 6, -36, -23,
	55, -76, 6, 6, -59, 60, 61, 60, 61, -2,
	-70, 13, 60, 60, -81, 60, -40, 42, -2, -2,
	-2, -2, 7, -79, -21, -17, -15, 72, -67, -74,
	-21, 6, -81, -2, 61, 12, -81, 6, 9, -6,
	-62, 48, 11, -21, -21, 62, -21, -21, 70, 13,
	70, -6, -59, 6, 13, -77, 55, 48, 6, 6,
	6, -59, 19, -39, -59, 19, -71, -81, 70, 70,
	70, 6, -81, -21, 19, -59, -72, 6, -59, -63,
	-24, -21, -71, 70, 70, 70, 70, 6, 6, 6,
	69, 69, 19, -64, 22, 21, -59, -59, 19, 21,
	31, -12, 30, -21, -68, -68, -40, 19, 21, 42,
	-73, -81, 13, -81, 13, -81, 13, 4, 62, -71,
	-21, -6, -2, -81, -21, 48, -69, -61, 31, -12,
	-66, -35, 12, 12, -21, -66, -69, -61, -59, 19,
	-81, 13, -21, -17, -15, 48, 13, -15, 19, 64,
	13, -81, -59, -81, -59, 70, -81, 48, 48, -21,
	-21, 19, 22, 21, -2, -59, 19, -64, 19, -59,
	-59, -59, -78, 4, -39, 19, 60, 61, -2, -46,
	20, 23, 19, 19, 21, -59, -73, -59, 70, -81,
	72, -81, 72, -81, -2, -21, -81, -71, -2, 19,
	-69, -12, -59, -59, -59, 19, -69, 19, 12, -81,
	-2, 6, 6, 72, 72, 72, -81, 12, -81, -2,
	70, 70, -2, -59, -59, 19, 19, 31, 19, -59,
	4, 13, 6, -36, -23, -2, -2, -59, 19, -59,
	-81, -21, -17, -15, -21, 6, 12, -81, 19, -69,
	-61, -69, -61, 19, -6, -15, 69, 72, -2, -59,
	-59, 6, -36, -23, -39, -59, -59, -59, 60, 60,
	61, 19, -81, 4, 62, 12, 19, -69, 19, -69,
	-81, -21, 19, -59, -59, -59, -68, -68, -68, -2,
	-21, 19, 19, 12, 70, 19, -47, 22, 21, 19,
	-47, 19, -80, 13, -81, 13, 19, 22, 21, -2,
	-68, 19, -81, -2, -68, -68, -68,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 0, 0, 0, 22,
	23, 24, 25, 26, 0, 0, 0, 0, 15, 282,
	0, 0, 13, 286, 290, 287, 283, 0, 19, 20,
	21, 27, 28, 29, 30, 13, 13, 155, 80, 259,
	0, 0, 0, 0, 0, 0, 47, 48, 49, 50,
	51, 52, 0, 0, 74, 217, 218, 5, 6, 7,
	0, 0, 0, 0, 0, 0, 0, 13, 0, 0,
	0, 0, 0, 0, 0, 0, 13, 13, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	142, 15, 0, 153, 15, -2, 84, 86, 94, 13,
	0, 0, 0, 0, 115, 15, 13, 120, 121, 122,
	35, 22, 23, 24, 25, 26, 0, 13, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 15,
	0, 277, 281, 117, 34, 22, 23, 24, 25, 26,
	0, 0, 13, 0, 284, 285, 117, 0, 0, 0,
	0, 0, 75, 219, 0, 81, -2, 120, 0, 313,
	13, 206, 207, 208, 209, 77, 186, 187, 0, 184,
	185, 246, 254, 296, 76, 87, 96, 98, 0, 210,
	211, 212, 213, 214, 215, 248, 0, 0, 0, 320,
	250, 164, 97, 0, 127, 176, 183, 247, 249, 91,
	15, 0, 139, 142, 143, 145, 0, 0, 0, 15,
	0, 0, 15, 0, 119, 85, 95, 13, 127, 0,
	0, 156, 157, 158, 159, 170, 171, 177, 178, 190,
	191, 192, 0, 13, 0, 15, 241, 15, 13, 126,
	119, 127, 0, 0, 160, 172, 179, 0, 161, 173,
	180, 194, 195, 196, 0, 162, 174, 181, 198, 199,
	200, 0, 163, 175, 182, 165, 166, 202, 203, 204,
	0, 167, 0, 0, 0, 15, 15, 16, 17, 18,
	0, 0, 297, 297, 0, 14, 0, 0, 291, 292,
	288, 289, 321, 13, 220, 221, 222, 226, 13, 13,
	0, -2, 119, 260, 261, 262, 15, 188, 189, 88,
	90, 0, -2, 127, 112, 0, 311, 312, 106, 0,
	107, 92, 129, 142, 0, 0, 0, 0, 146, 148,
	142, 129, 149, 15, 0, 152, 13, 0, 99, 102,
	104, 193, 0, 128, 234, 0, 0, 242, 13, 15,
	-2, 127, 13, 100, 103, 105, 101, 197, 201, 205,
	0, 0, 244, 0, 0, 15, 0, 0, 263, 15,
	15, 278, 15, 118, 0, 0, 0, 316, 15, 0,
	15, 0, 13, 0, 13, 0, 13, 13, 0, 13,
	0, 89, 93, 119, 293, 0, 0, 129, 15, 279,
	15, 144, 140, 141, 147, 15, 0, 129, 0, 151,
	0, 13, 123, 124, 125, 0, 0, 116, 235, 240,
	0, 0, 0, 0, 13, 99, 0, 13, 0, 0,
	0, 245, 0, 15, 15, 258, 251, 0, 253, 0,
	0, 267, 15, 0, 275, 294, 298, 299, 300, 301,
	0, 0, 295, 314, 15, 0, 15, 13, 216, 0,
	227, 0, 228, 0, 229, 231, 0, 13, 111, 131,
	0, 280, 130, 129, 129, 137, 0, 150, 78, 0,
	108, 0, 243, 236, 237, 238, 0, 83, 0, 110,
	0, 169, 15, 256, 257, 252, 264, 15, 266, 268,
	0, 0, 15, 15, 15, 15, 0, 0, 317, 13,
	318, 223, 224, 225, 0, 0, 82, 0, 132, 0,
	129, 0, 129, 138, 79, -2, 0, 239, 109, 255,
	0, 15, 15, 15, 276, 272, 273, 274, 297, 15,
	15, 315, 319, 13, 0, 113, 133, 0, 134, 0,
	0, 0, 265, 269, 270, 271, 0, 0, 0, 11,
	13, 135, 136, 114, 168, 302, 0, 0, 297, 304,
	0, 306, 230, 12, 232, 13, 303, 0, 297, 297,
	310, 305, 233, 297, 308, 309, 307,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:225
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:227
		{
		}
	case 3:
		//line parser.y:229
		{
		}
	case 4:
		//line parser.y:231
		{
		}
	case 5:
		//line parser.y:233
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:235
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:237
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:243
		{
		}
	case 11:
		//line parser.y:245
		{
		}
	case 12:
		//line parser.y:246
		{
		}
	case 13:
		//line parser.y:248
		{
		}
	case 14:
		//line parser.y:249
		{
		}
	case 15:
		//line parser.y:252
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:254
		{
		}
	case 17:
		//line parser.y:256
		{
		}
	case 18:
		//line parser.y:258
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		//line parser.y:269
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 75:
		//line parser.y:271
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 76:
		//line parser.y:279
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:282
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 78:
		//line parser.y:285
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:294
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:304
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:310
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 82:
		//line parser.y:318
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:327
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:336
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:345
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:355
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:365
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:374
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:385
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:396
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:406
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:416
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:427
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:440
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:449
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:459
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:469
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:479
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:491
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:501
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:511
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:521
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:531
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:541
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:551
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:561
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:571
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:583
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 109:
		//line parser.y:593
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 110:
		//line parser.y:603
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 111:
		//line parser.y:613
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 112:
		//line parser.y:625
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 113:
		//line parser.y:637
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 114:
		//line parser.y:639
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 115:
		//line parser.y:641
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 116:
		//line parser.y:643
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:646
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:648
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:650
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 120:
		//line parser.y:652
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:654
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:656
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:658
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:660
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:662
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:665
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 127:
		//line parser.y:675
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:677
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:680
		{
			RubyVAL.genericSlice = nil
		}
	case 130:
		//line parser.y:682
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 131:
		//line parser.y:685
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 132:
		//line parser.y:696
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 133:
		//line parser.y:708
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 134:
		//line parser.y:720
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 135:
		//line parser.y:732
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 136:
		//line parser.y:745
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 137:
		//line parser.y:758
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 138:
		//line parser.y:769
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 139:
		//line parser.y:783
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 140:
		//line parser.y:785
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 141:
		//line parser.y:787
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 142:
		//line parser.y:789
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 143:
		//line parser.y:791
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 144:
		//line parser.y:793
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 145:
		//line parser.y:796
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 146:
		//line parser.y:798
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 147:
		//line parser.y:800
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 148:
		//line parser.y:802
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 149:
		//line parser.y:806
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 150:
		//line parser.y:816
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 151:
		//line parser.y:828
		{
			name := RubyS[Rubypt-3].genericValue.(ast.BareReference).Name
			if name != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + name + ")")
			}

			class := ast.Eigenclass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 152:
		//line parser.y:843
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 153:
		//line parser.y:854
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 154:
		//line parser.y:863
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 155:
		//line parser.y:882
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 156:
		//line parser.y:900
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 157:
		//line parser.y:909
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 158:
		//line parser.y:915
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 159:
		//line parser.y:921
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 160:
		//line parser.y:923
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 161:
		//line parser.y:932
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 162:
		//line parser.y:941
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 163:
		//line parser.y:950
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 164:
		//line parser.y:959
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 165:
		//line parser.y:962
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:971
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:980
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:990
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 169:
		//line parser.y:1005
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 170:
		//line parser.y:1011
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1020
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1026
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1035
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1044
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1053
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1062
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1071
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 178:
		//line parser.y:1080
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 179:
		//line parser.y:1086
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1095
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 181:
		//line parser.y:1104
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1113
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 183:
		//line parser.y:1122
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 184:
		//line parser.y:1129
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 185:
		//line parser.y:1131
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
		}
	case 186:
		//line parser.y:1134
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 187:
		//line parser.y:1140
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 188:
		//line parser.y:1147
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 189:
		//line parser.y:1153
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 190:
		//line parser.y:1160
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 191:
		//line parser.y:1162
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 192:
		//line parser.y:1164
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 193:
		//line parser.y:1166
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 194:
		//line parser.y:1169
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 195:
		//line parser.y:1171
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 196:
		//line parser.y:1173
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1175
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1178
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1180
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1182
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1184
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1187
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1189
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1191
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1193
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1197
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 207:
		//line parser.y:1199
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 208:
		//line parser.y:1201
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 209:
		//line parser.y:1203
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 210:
		//line parser.y:1206
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 211:
		//line parser.y:1217
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 212:
		//line parser.y:1228
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 213:
		//line parser.y:1239
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 214:
		//line parser.y:1250
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 215:
		//line parser.y:1261
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 216:
		//line parser.y:1272
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 217:
		//line parser.y:1274
		{
		}
	case 218:
		//line parser.y:1275
		{
		}
	case 219:
		//line parser.y:1277
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 220:
		//line parser.y:1279
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 221:
		//line parser.y:1281
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 222:
		//line parser.y:1283
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 223:
		//line parser.y:1285
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1287
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1289
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1292
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 227:
		//line parser.y:1294
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 228:
		//line parser.y:1302
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 229:
		//line parser.y:1311
		{
			name := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 230:
		//line parser.y:1319
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 231:
		//line parser.y:1328
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 232:
		//line parser.y:1335
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 233:
		//line parser.y:1342
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 234:
		//line parser.y:1350
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 235:
		//line parser.y:1355
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 236:
		//line parser.y:1360
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 237:
		//line parser.y:1365
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 238:
		//line parser.y:1370
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 239:
		//line parser.y:1375
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 240:
		//line parser.y:1384
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 241:
		//line parser.y:1386
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 242:
		//line parser.y:1388
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 243:
		//line parser.y:1390
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 244:
		//line parser.y:1393
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 245:
		//line parser.y:1402
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 246:
		//line parser.y:1412
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 247:
		//line parser.y:1421
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1430
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1439
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1448
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 251:
		//line parser.y:1457
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1466
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1476
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1485
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1496
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 256:
		//line parser.y:1505
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 257:
		//line parser.y:1513
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 258:
		//line parser.y:1521
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 259:
		//line parser.y:1529
		{
		}
	case 260:
		//line parser.y:1530
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 261:
		//line parser.y:1531
		{
		}
	case 262:
		//line parser.y:1534
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 263:
		//line parser.y:1537
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 264:
		//line parser.y:1546
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 265:
		//line parser.y:1556
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 266:
		//line parser.y:1566
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 267:
		//line parser.y:1576
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 268:
		//line parser.y:1578
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 269:
		//line parser.y:1592
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 270:
		//line parser.y:1613
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 271:
		//line parser.y:1634
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 272:
		//line parser.y:1655
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 273:
		//line parser.y:1670
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 274:
		//line parser.y:1685
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 275:
		//line parser.y:1702
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 276:
		//line parser.y:1704
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 277:
		//line parser.y:1707
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 278:
		//line parser.y:1709
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 279:
		//line parser.y:1712
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 280:
		//line parser.y:1714
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 281:
		//line parser.y:1717
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 282:
		//line parser.y:1724
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 283:
		//line parser.y:1726
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 284:
		//line parser.y:1729
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 285:
		//line parser.y:1737
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 286:
		//line parser.y:1739
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 287:
		//line parser.y:1743
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 288:
		//line parser.y:1745
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 289:
		//line parser.y:1747
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 290:
		//line parser.y:1751
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 291:
		//line parser.y:1753
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 292:
		//line parser.y:1755
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 293:
		//line parser.y:1759
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 294:
		//line parser.y:1770
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 295:
		//line parser.y:1776
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 296:
		//line parser.y:1783
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 297:
		//line parser.y:1790
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 298:
		//line parser.y:1792
		{
		}
	case 299:
		//line parser.y:1794
		{
		}
	case 300:
		//line parser.y:1796
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 301:
		//line parser.y:1798
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 302:
		//line parser.y:1801
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 303:
		//line parser.y:1809
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 304:
		//line parser.y:1818
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 305:
		//line parser.y:1826
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 306:
		//line parser.y:1835
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 307:
		//line parser.y:1844
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 308:
		//line parser.y:1852
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 309:
		//line parser.y:1860
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 310:
		//line parser.y:1868
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 311:
		//line parser.y:1877
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 312:
		//line parser.y:1880
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 313:
		//line parser.y:1883
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 314:
		//line parser.y:1890
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 315:
		//line parser.y:1896
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 316:
		//line parser.y:1902
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 317:
		//line parser.y:1908
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 318:
		//line parser.y:1915
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 319:
		//line parser.y:1917
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 320:
		//line parser.y:1920
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 321:
		//line parser.y:1927
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	}
	goto Rubystack /* stack new state and value */
}

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	hashPair        ast.HashKeyValuePair
	astString       ast.String

	methodParam      ast.MethodParam
	methodParamSlice []ast.MethodParam
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const LPAREN = 57355
const RPAREN = 57356
const COMMA = 57357
const STRING = 57358
const NamespacedModule = 57359
const ProcArg = 57360
const DO = 57361
const DEF = 57362
const END = 57363
const IF = 57364
const ELSE = 57365
const ELSIF = 57366
const UNLESS = 57367
const CLASS = 57368
const MODULE = 57369
const FOR = 57370
const WHILE = 57371
const UNTIL = 57372
const BEGIN = 57373
const RESCUE = 57374
const ENSURE = 57375
const BREAK = 57376
const NEXT = 57377
const REDO = 57378
const RETRY = 57379
const RETURN = 57380
const YIELD = 57381
const AND = 57382
const OR = 57383
const LAMBDA = 57384
const CASE = 57385
const WHEN = 57386
const ALIAS = 57387
const SELF = 57388
const NIL = 57389
const DEFINED = 57390
const LESSTHAN = 57391
const GREATERTHAN = 57392
const EQUALTO = 57393
const BANG = 57394
const COMPLEMENT = 57395
const BINARY_PLUS = 57396
const UNARY_PLUS = 57397
const BINARY_MINUS = 57398
const UNARY_MINUS = 57399
const STAR = 57400
const RANGE = 57401
const EXCLUSIVE_RANGE = 57402
const OR_EQUALS = 57403
const AND_EQUALS = 57404
const WHITESPACE = 57405
const NEWLINE = 57406
const SEMICOLON = 57407
const COLON = 57408
const DOT = 57409
const PIPE = 57410
const SLASH = 57411
const AMPERSAND = 57412
const QUESTIONMARK = 57413
const CARET = 57414
const LBRACKET = 57415
const RBRACKET = 57416
const LBRACE = 57417
const RBRACE = 57418
const ATSIGN = 57419
const FILE_CONST_REF = 57420
const LINE_CONST_REF = 57421
const EOF = 57422

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"DEFINED",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"EXCLUSIVE_RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:2028

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 131,
	67, 20,
	-2, 156,
	-1, 143,
	20, 272,
	22, 272,
	25, 272,
	26, 272,
	27, 272,
	29, 272,
	30, 272,
	31, 272,
	34, 272,
	35, 272,
	37, 272,
	38, 272,
	39, 272,
	43, 272,
	45, 272,
	65, 272,
	-2, 11,
	-1, 154,
	20, 13,
	22, 13,
	25, 13,
	26, 13,
	27, 13,
	29, 13,
	30, 13,
	31, 13,
	34, 13,
	35, 13,
	37, 13,
	38, 13,
	39, 13,
	43, 13,
	45, 13,
	65, 13,
	-2, 11,
	-1, 217,
	20, 272,
	22, 272,
	25, 272,
	26, 272,
	27, 272,
	29, 272,
	30, 272,
	31, 272,
	34, 272,
	35, 272,
	37, 272,
	38, 272,
	39, 272,
	43, 272,
	45, 272,
	65, 272,
	-2, 11,
	-1, 221,
	20, 13,
	22, 13,
	25, 13,
	26, 13,
	27, 13,
	29, 13,
	30, 13,
	31, 13,
	34, 13,
	35, 13,
	37, 13,
	38, 13,
	39, 13,
	43, 13,
	45, 13,
	65, 13,
	76, 13,
	-2, 11,
	-1, 377,
	15, 129,
	-2, 20,
	-1, 390,
	20, 272,
	22, 272,
	25, 272,
	26, 272,
	27, 272,
	29, 272,
	30, 272,
	31, 272,
	34, 272,
	35, 272,
	37, 272,
	38, 272,
	39, 272,
	43, 272,
	45, 272,
	65, 272,
	-2, 11,
	-1, 428,
	64, 11,
	76, 11,
	-2, 13,
	-1, 474,
	64, 11,
	76, 11,
	-2, 13,
	-1, 586,
	64, 11,
	76, 11,
	-2, 14,
	-1, 629,
	15, 136,
	-2, 11,
	-1, 633,
	64, 11,
	76, 11,
	-2, 14,
}

const RubyNprod = 339
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4989

var RubyAct = []int{

	356, 157, 5, 677, 145, 487, 166, 158, 193, 305,
	448, 459, 266, 490, 26, 269, 146, 363, 488, 267,
	152, 144, 637, 101, 56, 25, 102, 344, 55, 21,
	103, 331, 134, 283, 70, 131, 69, 153, 135, 322,
	136, 2, 3, 295, 95, 228, 564, 28, 229, 603,
	362, 630, 362, 442, 439, 362, 362, 4, 190, 191,
	555, 437, 200, 201, 675, 99, 98, 660, 631, 422,
	169, 401, 167, 204, 96, 97, 362, 362, 347, 153,
	397, 100, 334, 222, 223, 399, 220, 362, 584, 559,
	325, 397, 94, 221, 298, 397, 216, 94, 182, 557,
	397, 94, 231, 232, 233, 94, 73, 72, 397, 94,
	170, 240, 205, 94, 362, 230, 245, 446, 124, 94,
	171, 172, 252, 302, 256, 445, 517, 261, 262, 263,
	264, 247, 168, 182, 179, 221, 397, 255, 274, 563,
	259, 14, 125, 253, 180, 181, 258, 275, 179, 281,
	441, 282, 178, 273, 438, 173, 178, 174, 130, 436,
	397, 122, 286, 301, 177, 123, 52, 420, 284, 649,
	178, 314, 315, 316, 288, 319, 320, 321, 290, 173,
	328, 329, 330, 313, 335, 336, 337, 122, 318, 312,
	177, 178, 156, 327, 317, 400, 289, 292, 294, 326,
	169, 169, 167, 167, 393, 128, 206, 339, 129, 365,
	366, 367, 368, 348, 137, 338, 373, 162, 673, 396,
	380, 156, 173, 375, 362, 651, 174, 198, 302, 404,
	198, 162, 124, 616, 306, 617, 175, 176, 302, 364,
	386, 170, 362, 588, 126, 127, 162, 618, 173, 579,
	509, 198, 198, 198, 525, 270, 125, 387, 101, 362,
	198, 102, 168, 168, 524, 103, 272, 510, 362, 508,
	402, 198, 277, 198, 198, 362, 198, 189, 198, 198,
	198, 198, 514, 198, 183, 362, 198, 198, 405, 198,
	362, 198, 198, 362, 184, 185, 486, 418, 485, 362,
	645, 646, 156, 509, 483, 101, 271, 198, 102, 270,
	407, 375, 103, 188, 198, 198, 198, 198, 296, 183,
	272, 30, 427, 187, 286, 121, 101, 162, 435, 102,
	284, 672, 198, 103, 101, 198, 101, 102, 156, 102,
	198, 103, 74, 103, 323, 198, 270, 352, 353, 332,
	457, 489, 268, 341, 345, 210, 372, 272, 211, 186,
	406, 671, 550, 162, 551, 462, 670, 463, 644, 132,
	656, 456, 460, 465, 654, 453, 360, 454, 359, 461,
	208, 162, 198, 209, 652, 464, 457, 455, 464, 476,
	133, 101, 475, 627, 102, 620, 473, 271, 103, 576,
	569, 213, 198, 601, 478, 198, 492, 404, 481, 690,
	477, 687, 686, 602, 510, 198, 198, 503, 358, 498,
	491, 506, 156, 495, 496, 497, 511, 507, 685, 308,
	687, 686, 499, 596, 283, 530, 529, 471, 469, 408,
	521, 520, 528, 467, 530, 529, 493, 162, 189, 397,
	531, 187, 404, 156, 299, 141, 78, 169, 540, 140,
	545, 545, 534, 141, 78, 141, 78, 369, 384, 412,
	198, 385, 411, 553, 198, 212, 198, 583, 162, 444,
	443, 440, 156, 423, 566, 410, 567, 568, 409, 408,
	350, 349, 265, 235, 570, 370, 565, 539, 376, 357,
	1, 219, 571, 92, 91, 577, 90, 162, 89, 581,
	582, 88, 87, 571, 41, 40, 39, 38, 546, 156,
	20, 156, 43, 44, 16, 198, 590, 12, 13, 11,
	593, 198, 45, 24, 23, 22, 27, 19, 10, 35,
	18, 15, 71, 42, 162, 17, 162, 46, 606, 607,
	198, 37, 36, 31, 29, 32, 198, 75, 614, 198,
	198, 505, 0, 0, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 621,
	623, 625, 629, 0, 628, 0, 162, 0, 507, 0,
	634, 198, 622, 624, 626, 0, 0, 0, 108, 0,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 198, 0, 0, 0, 0, 0, 650,
	0, 156, 0, 0, 0, 0, 104, 0, 653, 0,
	655, 198, 657, 0, 117, 118, 571, 0, 571, 198,
	571, 53, 0, 106, 107, 0, 162, 0, 109, 0,
	110, 198, 111, 0, 0, 0, 666, 667, 668, 0,
	0, 105, 114, 112, 113, 116, 0, 545, 545, 545,
	0, 681, 0, 0, 0, 0, 0, 0, 0, 688,
	0, 0, 0, 0, 0, 0, 0, 692, 0, 138,
	545, 689, 163, 0, 545, 545, 545, 0, 613, 693,
	694, 0, 199, 0, 695, 199, 163, 604, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 163, 505, 162, 0, 198, 199, 199, 199, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 162, 199, 199,
	0, 199, 0, 199, 199, 199, 199, 0, 199, 0,
	0, 199, 199, 0, 199, 0, 199, 199, 638, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 108, 199, 0, 0, 0, 0, 0, 0, 199,
	199, 199, 199, 297, 0, 0, 0, 198, 0, 0,
	0, 0, 163, 0, 0, 0, 0, 199, 0, 0,
	199, 0, 0, 0, 0, 199, 198, 117, 118, 324,
	199, 0, 0, 0, 333, 0, 106, 107, 342, 346,
	0, 109, 0, 110, 0, 111, 119, 120, 163, 0,
	203, 0, 0, 0, 105, 114, 112, 113, 0, 0,
	0, 522, 0, 0, 215, 0, 163, 199, 0, 0,
	0, 70, 160, 69, 79, 161, 78, 164, 143, 0,
	151, 95, 0, 165, 153, 0, 0, 199, 0, 0,
	199, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	199, 199, 0, 0, 248, 249, 0, 81, 0, 0,
	0, 96, 97, 93, 0, 0, 148, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 149, 150, 0, 0,
	280, 0, 163, 0, 0, 0, 0, 0, 147, 0,
	154, 303, 94, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 199, 0, 0, 0, 199,
	0, 199, 0, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 160, 69, 79, 161, 78, 164, 143, 361,
	151, 95, 163, 165, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 379, 0, 0, 0, 383, 0,
	199, 0, 0, 0, 0, 0, 199, 81, 0, 0,
	0, 96, 97, 93, 0, 0, 0, 82, 83, 163,
	84, 163, 85, 86, 0, 199, 0, 0, 0, 0,
	0, 199, 0, 0, 199, 199, 0, 0, 309, 0,
	154, 0, 94, 73, 72, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	419, 163, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 424, 0, 0, 0,
	0, 429, 0, 431, 0, 433, 0, 199, 199, 70,
	160, 69, 79, 161, 78, 164, 143, 0, 0, 95,
	0, 165, 153, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 81, 199, 0, 0, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 466, 0, 472,
	0, 0, 468, 470, 0, 0, 309, 0, 154, 0,
	94, 73, 72, 0, 0, 0, 0, 479, 0, 34,
	0, 0, 0, 108, 484, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 502, 0, 0, 163, 0,
	199, 104, 0, 0, 0, 515, 0, 0, 0, 117,
	118, 0, 523, 0, 0, 0, 0, 0, 106, 107,
	159, 0, 163, 109, 0, 110, 0, 111, 119, 120,
	159, 0, 0, 159, 159, 0, 105, 114, 112, 113,
	116, 0, 0, 639, 556, 0, 558, 0, 560, 159,
	562, 515, 0, 0, 159, 159, 159, 0, 0, 0,
	0, 0, 108, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 159, 0, 159, 159, 0, 159,
	580, 159, 159, 159, 159, 0, 159, 0, 0, 159,
	159, 199, 159, 585, 159, 159, 0, 0, 117, 118,
	0, 589, 0, 0, 0, 0, 0, 106, 107, 0,
	159, 0, 109, 0, 110, 108, 111, 159, 159, 159,
	159, 0, 0, 0, 0, 105, 114, 112, 113, 0,
	159, 611, 674, 0, 0, 159, 0, 0, 159, 0,
	0, 0, 619, 159, 0, 0, 0, 0, 159, 0,
	0, 117, 118, 0, 0, 0, 159, 0, 0, 0,
	106, 107, 0, 632, 0, 109, 159, 110, 0, 111,
	119, 120, 0, 0, 0, 0, 0, 392, 105, 114,
	112, 113, 0, 0, 159, 159, 0, 648, 0, 0,
	0, 0, 0, 70, 196, 69, 79, 197, 78, 136,
	80, 0, 0, 95, 0, 159, 658, 0, 159, 0,
	661, 0, 0, 0, 0, 0, 0, 0, 159, 159,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 81,
	0, 9, 0, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 683, 0, 0, 0,
	159, 362, 0, 0, 0, 0, 0, 0, 117, 118,
	76, 691, 77, 615, 94, 73, 72, 106, 107, 0,
	0, 0, 109, 159, 110, 0, 111, 159, 0, 159,
	0, 159, 155, 0, 0, 105, 114, 112, 113, 116,
	0, 0, 194, 0, 0, 202, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	159, 218, 0, 0, 0, 0, 224, 225, 226, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 159, 0,
	0, 0, 0, 0, 159, 0, 234, 0, 236, 237,
	0, 239, 0, 241, 242, 243, 244, 159, 246, 159,
	0, 250, 251, 159, 254, 0, 257, 260, 0, 159,
	0, 0, 159, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 108, 0, 159, 0, 285,
	287, 291, 293, 0, 0, 0, 0, 0, 0, 159,
	0, 0, 155, 0, 159, 0, 0, 310, 0, 0,
	260, 0, 0, 159, 0, 260, 0, 0, 0, 0,
	260, 117, 118, 0, 0, 159, 159, 0, 343, 108,
	106, 107, 0, 0, 0, 109, 0, 110, 155, 111,
	119, 120, 0, 0, 159, 0, 0, 0, 105, 114,
	112, 113, 159, 0, 33, 421, 371, 378, 0, 159,
	108, 0, 0, 0, 159, 117, 118, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 0, 343, 0, 109,
	391, 110, 0, 111, 119, 120, 0, 0, 0, 0,
	394, 395, 105, 114, 112, 113, 117, 118, 0, 398,
	0, 0, 0, 139, 142, 106, 107, 0, 0, 0,
	109, 0, 110, 0, 111, 195, 0, 0, 195, 0,
	0, 0, 218, 105, 114, 112, 113, 0, 304, 0,
	592, 0, 0, 0, 0, 0, 159, 0, 159, 195,
	195, 195, 0, 0, 0, 428, 0, 0, 195, 432,
	0, 434, 0, 218, 0, 0, 0, 0, 0, 195,
	159, 195, 195, 0, 195, 0, 195, 195, 195, 195,
	0, 195, 0, 0, 195, 195, 0, 195, 0, 195,
	195, 0, 155, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	458, 0, 195, 195, 195, 195, 194, 0, 0, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	195, 218, 0, 195, 0, 474, 0, 0, 195, 159,
	0, 260, 0, 195, 480, 482, 0, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 0, 0, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 504, 0, 0, 0, 0, 512, 0, 276, 0,
	195, 279, 0, 0, 0, 378, 0, 0, 0, 0,
	0, 0, 300, 0, 0, 0, 0, 526, 527, 0,
	195, 0, 0, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 195, 0, 194, 0, 0, 0,
	0, 0, 0, 0, 561, 0, 0, 0, 0, 351,
	0, 218, 0, 0, 0, 0, 512, 0, 0, 0,
	0, 0, 415, 0, 0, 0, 0, 0, 0, 70,
	160, 69, 79, 161, 78, 164, 143, 0, 0, 95,
	0, 165, 153, 0, 0, 0, 0, 0, 195, 0,
	0, 0, 195, 0, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 96,
	97, 93, 0, 0, 148, 82, 83, 108, 84, 0,
	85, 86, 0, 0, 0, 403, 0, 0, 612, 0,
	378, 0, 0, 0, 413, 0, 309, 416, 154, 0,
	94, 73, 72, 195, 0, 0, 0, 0, 0, 195,
	0, 0, 504, 117, 118, 0, 0, 0, 0, 0,
	426, 0, 106, 107, 430, 0, 0, 109, 195, 110,
	108, 111, 0, 0, 195, 0, 0, 195, 195, 0,
	105, 114, 112, 113, 0, 0, 0, 591, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 659, 0, 0, 0, 117, 118, 0, 195,
	0, 451, 452, 0, 0, 106, 107, 0, 195, 0,
	109, 669, 110, 0, 111, 119, 120, 0, 0, 0,
	195, 195, 0, 105, 114, 112, 113, 117, 118, 0,
	0, 0, 541, 0, 0, 0, 106, 107, 0, 195,
	0, 109, 0, 110, 0, 111, 0, 195, 0, 0,
	0, 0, 0, 0, 105, 114, 112, 113, 0, 195,
	0, 0, 0, 0, 500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 0, 0,
	519, 0, 0, 0, 0, 70, 160, 69, 79, 161,
	78, 164, 80, 0, 0, 95, 0, 165, 0, 532,
	0, 0, 0, 536, 537, 0, 538, 0, 0, 0,
	0, 0, 552, 0, 554, 0, 0, 0, 0, 0,
	0, 81, 0, 516, 0, 96, 97, 93, 0, 0,
	0, 82, 83, 195, 84, 0, 85, 86, 572, 0,
	0, 0, 0, 362, 573, 574, 575, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 587,
	0, 0, 0, 0, 0, 0, 0, 640, 0, 594,
	595, 0, 0, 0, 0, 0, 0, 0, 600, 70,
	196, 69, 79, 197, 78, 136, 80, 0, 0, 95,
	608, 0, 610, 0, 0, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 81, 63, 108, 307, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 635, 0, 0, 0, 0, 636, 0, 0,
	0, 0, 641, 642, 643, 351, 76, 0, 77, 0,
	94, 73, 72, 117, 118, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 0, 0, 0, 109, 0, 110,
	0, 111, 0, 0, 0, 0, 663, 664, 665, 0,
	105, 114, 112, 113, 451, 452, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 680, 547, 679, 678, 548, 48, 49, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 543, 544, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 50, 69, 79, 51, 78, 54, 80, 0, 0,
	95, 0, 0, 0, 47, 676, 547, 679, 678, 548,
	48, 49, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 543, 544,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 50, 69, 79, 51, 78,
	54, 80, 0, 0, 95, 0, 0, 0, 47, 533,
	57, 450, 449, 58, 48, 49, 0, 61, 62, 59,
	0, 0, 65, 66, 0, 67, 64, 60, 0, 0,
	81, 63, 0, 68, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 354, 355, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 70, 50,
	69, 79, 51, 78, 54, 80, 0, 0, 95, 0,
	0, 0, 47, 447, 57, 450, 449, 58, 48, 49,
	0, 61, 62, 59, 0, 0, 65, 66, 0, 67,
	64, 60, 0, 0, 81, 63, 0, 68, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 354, 355, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	73, 72, 70, 50, 69, 79, 51, 78, 54, 80,
	0, 0, 95, 0, 0, 0, 47, 0, 57, 0,
	0, 58, 48, 49, 0, 61, 62, 59, 457, 489,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	354, 355, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 73, 72, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 597, 57, 0, 0, 58, 48, 49, 0, 61,
	62, 59, 0, 598, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 354, 355, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 50, 69, 79, 51, 78, 54, 80, 0, 0,
	95, 0, 0, 0, 47, 0, 57, 0, 0, 58,
	48, 49, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 6, 7,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 8, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	682, 547, 0, 0, 548, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 543, 544, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 662, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 647, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 354, 355, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 609, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 599, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 354,
	355, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	578, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 549, 547, 0, 0, 548, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 543, 544, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 542, 547,
	0, 0, 548, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 543, 544, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 535, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 0, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 354,
	355, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 518, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	513, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 501, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 425, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 354, 355, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 417, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 414, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 354,
	355, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	0, 547, 0, 0, 548, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 543, 544, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 0, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 0, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 633, 355, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 0, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 586, 355, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 382,
	0, 95, 0, 0, 0, 47, 0, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 0,
	381, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	0, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 0, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 70, 196, 69, 79, 197, 78, 136, 80,
	0, 0, 95, 0, 165, 0, 76, 0, 77, 0,
	94, 73, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 73, 72, 70, 377, 69, 79,
	197, 78, 136, 80, 0, 0, 95, 0, 0, 0,
	70, 196, 69, 79, 197, 78, 136, 390, 0, 0,
	95, 0, 0, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 81, 85, 86, 0,
	96, 97, 93, 0, 362, 388, 82, 83, 0, 84,
	0, 85, 86, 76, 0, 77, 374, 94, 73, 72,
	0, 0, 0, 0, 0, 0, 0, 389, 0, 154,
	0, 94, 73, 72, 70, 160, 69, 79, 161, 78,
	164, 143, 0, 0, 95, 0, 165, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 70, 196, 69,
	79, 197, 78, 136, 80, 0, 0, 95, 0, 0,
	0, 309, 0, 154, 0, 94, 73, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 160, 69, 79, 161, 78, 164, 217, 0,
	0, 95, 0, 165, 0, 70, 196, 69, 79, 197,
	78, 136, 80, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 81, 85, 86, 0, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 76, 0,
	77, 0, 94, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	340, 69, 79, 197, 78, 136, 80, 0, 0, 95,
	0, 0, 0, 70, 160, 69, 79, 161, 78, 164,
	80, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 81,
	85, 86, 108, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 684, 85, 86, 76, 0, 77, 0,
	94, 73, 72, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 0, 117, 118,
	0, 0, 0, 0, 0, 0, 0, 106, 107, 0,
	0, 0, 109, 0, 110, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 114, 112, 113,
}
var RubyPact = []int{

	-23, 2804, -1000, -1000, -1000, 1, -1000, -1000, -1000, 1169,
	-1000, -1000, -1000, -1000, 300, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 114, 183, -1000, 91, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28, 455, 445,
	855, 59, 175, 83, 233, 308, 262, 4433, 4433, -1000,
	4789, 4433, 4433, 4789, 4877, 358, 333, -1000, 467, -1000,
	-1000, 385, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4775,
	-1000, 60, 4433, 4433, 4789, 4789, 4789, -1000, -1000, -1000,
	-1000, -1000, -1000, 4789, 38, -1000, -1000, -1000, -1000, -1000,
	-1000, 4433, 4433, 4433, 4789, 486, 4789, 4789, -1000, 4789,
	4433, 4789, 4789, 4789, 4789, 4433, 4789, -1000, -1000, 4789,
	4789, 4433, 4789, 4433, 4789, 4789, 4433, 4433, 4433, 4433,
	485, 339, 86, 71, 339, -1000, -1000, -1000, -1000, 223,
	4789, 446, -1000, -1000, 60, -1000, 18, 4789, 2253, 4789,
	4789, 36, 439, 55, 170, 2293, -1000, -1000, 414, 69,
	1923, 190, 106, 97, 268, 4789, -1000, -1000, 4789, -1000,
	4433, 4433, 4433, 4789, 4433, 4433, 4433, 32, 4789, 4433,
	4433, 4433, 24, 4433, 4433, 4433, 4863, 20, 484, 483,
	369, 283, 4063, 403, 2057, 88, 4648, 189, 82, 79,
	314, 312, 2057, 195, 403, -1000, -1000, 1418, 4433, 4433,
	4433, 4433, 459, -1000, 2149, 4560, 419, -1000, 2293, 4285,
	-1000, 170, 369, 369, 2057, 2057, 2057, 2057, -1000, -1000,
	461, 369, 369, 369, 2057, 4574, 2057, 2057, 4701, 2057,
	369, 2057, 2057, 2057, 2057, 369, 1311, 138, 4701, 4701,
	2057, 2057, 369, 145, 1615, 11, 369, 2057, 121, -3,
	2026, 369, 369, 369, 369, 60, -1000, 437, 302, -1000,
	259, 482, 481, 478, 465, -1000, 3915, 445, 2057, 3841,
	2149, -1000, -1000, -1000, 93, 1571, -5, 594, -1000, -1000,
	-1000, 1418, -1000, 1418, -1000, -1000, -1000, -1000, 476, -1000,
	3767, -1000, 248, 4560, 4063, -1000, -1000, 4789, -1000, 4789,
	2057, 2149, 85, -13, 369, 369, 369, 80, -20, 369,
	369, 369, -1000, -1000, -1000, 474, 76, -21, 369, 369,
	369, -1000, -1000, -1000, 473, 369, 369, 369, 436, 434,
	965, 149, 118, 2057, -1000, -1000, -1000, 472, 433, 52,
	44, 2582, -1000, -1000, -1000, -1000, 369, 354, 4789, -1000,
	-1000, 195, -1000, 344, 4789, 369, 369, 369, 369, -1000,
	428, 2057, -1000, -1000, -1000, 423, 422, 1083, 2293, 2149,
	369, -1000, -1000, 4701, -1000, -1000, -1000, 60, 4433, 4789,
	-1000, 2057, 4789, 4789, 2057, 2057, 253, -1000, 247, -1000,
	245, -1000, -1000, 2656, 248, 392, 432, 4789, -1000, -1000,
	339, 339, 339, 2656, -1000, -1000, 3693, -1000, 402, 2149,
	218, 252, -1000, -1000, 4486, -1000, 3619, 214, 2293, 50,
	3545, 160, 2057, 4701, 777, 419, 213, -1000, 203, -1000,
	-1000, -1000, -1000, -1000, -1000, 4789, 4789, -1000, 421, 4433,
	-1000, 2508, 3471, -1000, -1000, -1000, -1000, 453, 2057, 3397,
	3323, 341, -1000, -1000, 4789, 403, -14, -1000, 23, -1000,
	13, -1000, 4789, 419, 2057, -1000, 369, 65, -28, 2149,
	2057, -1000, 2026, 4433, 4701, 4433, 4433, 379, 318, -1000,
	-1000, -1000, -1000, -1000, 2057, -1000, -1000, -1000, 378, 318,
	3249, -1000, 235, -1000, 2293, -1000, -1000, 414, 4433, 4433,
	470, -1000, 2057, -1000, -1000, 12, 4063, -1000, -1000, 4211,
	-1000, -1000, 199, 229, -1000, 4433, 1973, 1646, -1000, 4433,
	-1000, 369, 4063, -1000, 412, -1000, 2730, 3175, 4063, 398,
	42, -1000, -1000, -1000, -1000, 369, -1000, 4433, 4433, -1000,
	-1000, -1000, 3101, 403, 4063, -1000, 2149, -1000, 1387, -1000,
	226, 2057, 221, 196, -1000, 402, 369, 369, 369, -1000,
	374, -1000, 4063, 2656, 2656, 2656, -1000, 372, -1000, 60,
	2149, 369, 369, -22, -1000, -8, -1000, 4137, -1000, 4359,
	369, 399, -1000, 369, 4063, 4063, -1000, -1000, -1000, -1000,
	4063, 15, 445, -1000, -1000, -1000, 304, 236, 3027, -1000,
	4063, 178, 2057, -1000, -1000, -1000, 103, -1000, 4433, 211,
	-1000, 363, 318, 353, 318, 349, 318, -1000, -1000, -1000,
	4789, -1000, -9, -1000, 369, 4063, 2953, -1000, -1000, -1000,
	-1000, 4063, 4063, 4063, -1000, -1000, -1000, -1000, 178, 4789,
	369, -1000, -1000, 345, -1000, 340, -1000, 310, 204, 1258,
	-1000, -12, -1000, 4063, 4063, 4063, 2434, 2360, 2879, 4918,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 407, 4433, -1000,
	-1000, 388, -1000, 178, -1000, -1000, 4433, -1000, 369, 3989,
	-1000, 178, 369, 3989, 3989, 3989,
}
var RubyPgo = []int{

	0, 557, 0, 342, 555, 14, 4, 554, 553, 552,
	551, 13, 547, 47, 545, 1, 543, 141, 542, 541,
	540, 1431, 321, 641, 1169, 539, 538, 537, 536, 535,
	534, 533, 532, 529, 528, 166, 527, 524, 1644, 17,
	29, 523, 522, 25, 520, 518, 3, 28, 517, 516,
	515, 514, 512, 511, 508, 506, 504, 503, 1718, 501,
	18, 21, 10, 500, 11, 5, 499, 16, 8, 498,
	20, 24, 497, 495, 15, 9, 12, 19, 6, 7,
	776,
}
var RubyR1 = []int{

	0, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 80, 80, 58, 58, 58, 58, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 32, 32, 32, 32,
	32, 32, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 18, 18, 43, 16, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 25, 61, 61, 61, 61, 68, 68, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 15, 70,
	70, 65, 65, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 76, 76, 76, 77, 77, 77, 74,
	74, 74, 74, 33, 33, 34, 36, 38, 38, 38,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 19,
	19, 19, 71, 71, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 35, 35,
	23, 23, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 8, 3,
	1, 73, 73, 73, 73, 73, 73, 73, 4, 4,
	4, 4, 78, 79, 79, 69, 69, 69, 6, 6,
	6, 6, 6, 6, 6, 6, 75, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 62, 62,
	62, 62, 59, 59, 59, 9, 20, 20, 20, 20,
	11, 11, 11, 11, 11, 11, 11, 11, 72, 72,
	66, 66, 60, 60, 27, 27, 28, 29, 29, 29,
	29, 31, 31, 31, 30, 30, 30, 13, 13, 44,
	44, 44, 64, 64, 64, 64, 64, 45, 45, 45,
	45, 45, 46, 46, 46, 46, 42, 41, 10, 40,
	40, 40, 40, 39, 39, 5, 5, 7, 12,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 2, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 6, 7, 1,
	2, 6, 6, 2, 3, 2, 3, 4, 5, 4,
	3, 4, 5, 2, 3, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 6, 6, 6, 6, 6, 6, 7, 6,
	6, 8, 4, 5, 8, 1, 4, 1, 3, 0,
	1, 1, 1, 1, 4, 4, 4, 4, 2, 1,
	4, 0, 2, 6, 7, 8, 8, 8, 9, 9,
	9, 6, 7, 1, 3, 3, 0, 1, 3, 1,
	2, 3, 2, 4, 6, 5, 4, 1, 2, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 9, 6, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 3, 3, 3, 3, 4, 3, 3, 3, 4,
	3, 3, 3, 4, 3, 3, 3, 4, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 5, 1,
	1, 0, 1, 1, 1, 4, 4, 4, 3, 5,
	6, 5, 3, 1, 4, 3, 7, 8, 3, 4,
	4, 4, 7, 8, 5, 6, 3, 4, 5, 3,
	3, 3, 3, 3, 5, 6, 5, 3, 4, 3,
	3, 2, 0, 2, 2, 3, 4, 6, 8, 6,
	2, 3, 5, 5, 5, 4, 4, 4, 1, 3,
	0, 2, 1, 2, 2, 1, 1, 2, 2, 2,
	1, 1, 3, 3, 1, 3, 3, 5, 5, 5,
	5, 3, 0, 2, 2, 2, 2, 5, 6, 5,
	6, 5, 4, 3, 3, 2, 4, 4, 2, 5,
	7, 4, 6, 4, 5, 3, 3, 3, 2,
}
var RubyChk = []int{

	-1000, -63, 64, 65, 80, -2, 64, 65, 80, -21,
	-26, -33, -36, -34, -17, -19, -37, -14, -20, -27,
	-44, -40, -29, -30, -31, -43, -5, -28, -13, -7,
	-22, -8, -4, -38, -24, -25, -9, -10, -48, -49,
	-50, -51, -16, -42, -41, -32, -12, 20, 26, 27,
	7, 10, -35, -23, 12, -47, -71, 22, 25, 31,
	39, 29, 30, 43, 38, 34, 35, 37, 45, 8,
	6, -18, 79, 78, -3, -1, 73, 75, 11, 9,
	13, 42, 52, 53, 55, 57, 58, -52, -53, -54,
	-55, -56, -57, 48, 77, 16, 46, 47, 65, 64,
	80, 22, 25, 29, 32, 67, 49, 50, 4, 54,
	56, 58, 69, 70, 68, 25, 71, 40, 41, 59,
	60, 25, 73, 51, 49, 73, 61, 62, 22, 25,
	67, 7, -22, -3, 4, 10, 12, -35, -23, -38,
	4, 10, -38, 13, -61, -6, -67, 73, 51, 61,
	62, 15, -70, 19, 75, -21, -17, -15, -79, -24,
	7, 10, -35, -23, 12, 18, -78, 13, 73, 11,
	51, 61, 62, 73, 51, 61, 62, 15, 73, 51,
	61, 62, 15, 51, 61, 62, 51, 15, 51, 15,
	-2, -2, -58, -68, -21, -38, 7, 10, -35, -23,
	-2, -2, -21, -80, -68, -13, -17, -21, 22, 25,
	22, 25, 8, 16, -80, -80, -67, 13, -21, -59,
	-6, 75, -2, -2, -21, -21, -21, -21, 7, 10,
	77, -2, -2, -2, -21, 7, -21, -21, -80, -21,
	-2, -21, -21, -21, -21, -2, -21, -5, -80, -80,
	-21, -21, -2, -70, -21, -5, -2, -21, -70, -5,
	-21, -2, -2, -2, -2, 7, -76, -77, 13, -74,
	7, 58, 18, 67, 67, -76, -58, 49, -21, -58,
	-80, -6, -6, 15, -70, -21, -5, -21, -43, -13,
	-40, -21, -13, -21, -13, 7, -35, -23, 58, 15,
	-58, -75, 68, -80, -58, -75, 64, 5, 15, 73,
	-21, -80, -70, -5, -2, -2, -2, -70, -5, -2,
	-2, -2, 7, -35, -23, 58, -70, -5, -2, -2,
	-2, 7, -35, -23, 58, -2, -2, -2, -47, -70,
	7, -35, -23, -21, 7, -35, -23, 58, -71, 7,
	7, -58, 64, 65, 64, 65, -2, -66, 15, 64,
	64, -80, 64, -39, 44, -2, -2, -2, -2, 8,
	-73, -21, -17, -15, 76, -79, -69, 7, -21, -80,
	-2, 65, 14, -80, 7, 10, -6, -61, 51, 73,
	13, -21, 66, 66, -21, -21, 74, 15, 74, 74,
	74, 74, -6, -58, 15, -77, 58, 51, 7, 7,
	7, 7, 4, -58, 21, -38, -58, 21, -67, -80,
	74, 74, 74, 7, -80, 21, -58, -77, -21, -80,
	-58, -80, -21, -80, -21, -67, 74, 74, 74, 74,
	7, 74, 74, 7, 7, 73, 73, 21, -62, 24,
	23, -58, -58, 21, 23, 33, -11, 32, -21, -64,
	-64, -39, 21, 23, 44, -68, -80, 15, -80, 15,
	-80, 15, 66, -67, -21, -6, -2, -70, -5, -80,
	-21, -5, -21, 51, -80, 51, 51, -65, -60, 33,
	-11, -74, 14, 14, -21, -76, -76, -76, -65, -60,
	-58, 21, -80, 15, -21, -17, -15, -79, 51, 51,
	15, -15, -21, 21, 68, -80, -58, 76, 76, -58,
	-75, -78, 74, -80, 51, 51, -21, -21, 21, 24,
	23, -2, -58, 21, -62, 21, -58, -58, -58, -72,
	5, -38, 21, 64, 65, -2, -45, 22, 25, 21,
	21, 23, -58, -68, -58, 74, -80, 76, -80, 76,
	-80, -21, -80, 74, 74, -67, -2, -2, -2, 21,
	-65, -11, -58, -58, -58, -58, 21, -65, 21, 14,
	-80, -2, -2, 7, 76, -80, 64, -58, 14, -80,
	-2, 74, 74, -2, -58, -58, 21, 21, 33, 21,
	-58, 5, 15, 7, -35, -23, -2, -2, -58, 21,
	-58, -80, -21, -17, -15, 76, 7, 14, 51, -80,
	21, -65, -60, -65, -60, -65, -60, 21, -6, -15,
	73, 76, -80, 64, -2, -58, -58, 7, -35, -23,
	-38, -58, -58, -58, 64, 64, 65, 21, -80, 66,
	-2, 14, 21, -65, 21, -65, 21, -65, -80, -21,
	76, -80, 21, -58, -58, -58, -64, -64, -64, -21,
	21, 21, 21, 14, 74, 76, 21, -46, 24, 23,
	21, -46, 21, -80, 15, 21, 24, 23, -2, -64,
	21, -80, -2, -64, -64, -64,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 0, 0, 0,
	20, 21, 23, 24, 22, 0, 0, 0, 0, 13,
	295, 0, 0, 11, 300, 304, 301, 296, 0, 17,
	18, 19, 25, 26, 27, 28, 11, 11, 169, 79,
	272, 0, 0, 0, 0, 0, 0, 46, 47, 48,
	49, 50, 51, 0, 0, 73, 229, 230, 5, 6,
	7, 0, 0, 0, 0, 0, 0, 0, 11, 0,
	0, 0, 0, 0, 0, 0, 0, 11, 11, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 0, 156, 21, 22, 23, 24, 13,
	0, 167, 13, -2, 83, 85, 93, 11, 0, 0,
	0, 0, 125, 13, -2, 130, 131, 132, 133, 33,
	20, 21, 23, 24, 22, 0, 243, 11, 0, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 290, 294, 127, 32, 20, 21, 23, 24,
	0, 0, 11, 0, 297, 298, 299, 127, 0, 0,
	0, 0, 0, 74, 231, 0, 80, -2, 130, 0,
	328, -2, 218, 219, 220, 221, 76, 338, 198, 199,
	0, 259, 267, 311, 75, 86, 95, 97, 0, 222,
	223, 224, 225, 226, 227, 261, 0, 0, 0, 0,
	335, 336, 263, 0, 139, 0, 178, 96, 0, 0,
	139, 190, 197, 260, 262, 90, 13, 153, 156, 157,
	159, 0, 0, 0, 0, 13, 0, 0, 13, 0,
	129, 84, 94, 11, 0, 139, 0, 170, 171, 172,
	173, 184, 185, 191, 192, 202, 203, 204, 0, 11,
	0, 13, 156, 0, 11, 13, 11, 0, 11, 11,
	138, 129, 0, 0, 174, 186, 193, 0, 0, 175,
	187, 194, 206, 207, 208, 0, 0, 0, 176, 188,
	195, 210, 211, 212, 0, 177, 189, 196, 179, 180,
	20, 23, 24, 139, 214, 215, 216, 0, 181, 0,
	0, 0, 13, 13, 14, 15, 16, 0, 0, 312,
	312, 0, 12, 0, 0, 305, 306, 302, 303, 337,
	11, 232, 233, 234, 238, 11, 11, -2, 0, 129,
	273, 274, 275, 0, 200, 201, 87, 89, 0, 11,
	-2, 122, 0, 0, 326, 327, 101, 11, 102, 103,
	110, 111, 91, 141, 0, 0, 0, 0, 160, 162,
	156, 156, 156, 141, 163, 13, 0, 166, 11, 0,
	98, 99, 100, 205, 0, 248, 0, 0, -2, 0,
	0, 13, 242, 0, 139, 11, 104, 105, 106, 107,
	209, 108, 109, 213, 217, 0, 0, 257, 0, 0,
	13, 0, 0, 276, 13, 13, 291, 13, 128, 0,
	0, 0, 331, 13, 0, 13, 0, 11, 0, 11,
	0, 11, 0, 11, -2, 88, 92, 0, 0, 129,
	307, 308, 0, 0, 0, 0, 0, 0, 141, 13,
	292, 158, 154, 155, 161, 13, 13, 13, 0, 141,
	0, 165, 0, 11, 134, 135, 136, 137, 0, 0,
	0, 126, 140, 249, 256, 0, 11, 250, 251, 0,
	13, 244, 99, 0, 11, 0, 0, 0, 258, 0,
	13, 13, 271, 264, 0, 266, 0, 0, 280, 13,
	0, 288, 309, 313, 314, 315, 316, 0, 0, 310,
	329, 13, 0, 13, 11, 228, 0, 239, 0, 241,
	0, 245, 0, 112, 113, 11, 116, 117, 120, 143,
	0, 293, 142, 141, 141, 141, 151, 0, 164, 77,
	0, 114, 115, 0, 254, 0, -2, 0, 82, 0,
	119, 0, 183, 13, 269, 270, 265, 277, 13, 279,
	281, 0, 0, 13, 13, 13, 13, 0, 0, 332,
	11, 333, 235, 236, 237, 240, 0, 81, 0, 0,
	144, 0, 141, 0, 141, 0, 141, 152, 78, -2,
	0, 255, 0, -2, 118, 268, 0, 13, 13, 13,
	289, 285, 286, 287, 312, 13, 13, 330, 334, 0,
	121, 123, 145, 0, 146, 0, 147, 0, 0, 0,
	252, 0, 278, 282, 283, 284, 0, 0, 0, 11,
	148, 149, 150, 124, 182, 253, 317, 0, 0, 312,
	319, 0, 321, 246, 11, 318, 0, 312, 312, 325,
	320, 247, 312, 323, 324, 322,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:238
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:240
		{
		}
	case 3:
		//line parser.y:242
		{
		}
	case 4:
		//line parser.y:244
		{
		}
	case 5:
		//line parser.y:246
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:248
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:250
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:256
		{
		}
	case 11:
		//line parser.y:258
		{
		}
	case 12:
		//line parser.y:259
		{
		}
	case 13:
		//line parser.y:262
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 14:
		//line parser.y:264
		{
		}
	case 15:
		//line parser.y:266
		{
		}
	case 16:
		//line parser.y:268
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 17:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 18:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:279
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 74:
		//line parser.y:281
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 75:
		//line parser.y:289
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 76:
		//line parser.y:292
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:295
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:304
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:314
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:320
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 81:
		//line parser.y:328
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:337
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:346
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:355
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:365
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:375
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 87:
		//line parser.y:383
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:394
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:405
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:415
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:425
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:436
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:449
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 94:
		//line parser.y:457
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 95:
		//line parser.y:466
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 96:
		//line parser.y:475
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:484
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:495
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 99:
		//line parser.y:504
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:513
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 101:
		//line parser.y:522
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 102:
		//line parser.y:531
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 103:
		//line parser.y:540
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 104:
		//line parser.y:549
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 105:
		//line parser.y:558
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 106:
		//line parser.y:567
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 107:
		//line parser.y:576
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 108:
		//line parser.y:585
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 109:
		//line parser.y:594
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 110:
		//line parser.y:603
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 111:
		//line parser.y:612
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 112:
		//line parser.y:621
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 113:
		//line parser.y:634
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 114:
		//line parser.y:650
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:659
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:668
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 117:
		//line parser.y:677
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 118:
		//line parser.y:686
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 119:
		//line parser.y:695
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 120:
		//line parser.y:704
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 121:
		//line parser.y:713
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 122:
		//line parser.y:728
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 123:
		//line parser.y:740
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 124:
		//line parser.y:742
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 125:
		//line parser.y:744
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 126:
		//line parser.y:746
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:749
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:751
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:754
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 130:
		//line parser.y:756
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 131:
		//line parser.y:758
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 132:
		//line parser.y:760
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:762
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 134:
		//line parser.y:769
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:771
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:773
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:775
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 138:
		//line parser.y:784
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 139:
		//line parser.y:795
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 140:
		//line parser.y:797
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 141:
		//line parser.y:801
		{
			RubyVAL.genericSlice = nil
		}
	case 142:
		//line parser.y:803
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 143:
		//line parser.y:806
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 144:
		//line parser.y:817
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 145:
		//line parser.y:829
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:841
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 147:
		//line parser.y:853
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 148:
		//line parser.y:865
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 149:
		//line parser.y:878
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 150:
		//line parser.y:891
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 151:
		//line parser.y:904
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 152:
		//line parser.y:915
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 153:
		//line parser.y:929
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-0].methodParamSlice
		}
	case 154:
		//line parser.y:931
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 155:
		//line parser.y:933
		{
			RubyVAL.methodParamSlice = []ast.MethodParam{{Name: "", IsSplat: true}}
		}
	case 156:
		//line parser.y:935
		{
		}
	case 157:
		//line parser.y:937
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 158:
		//line parser.y:939
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 159:
		//line parser.y:942
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 160:
		//line parser.y:944
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsSplat: true}
		}
	case 161:
		//line parser.y:946
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name, DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 162:
		//line parser.y:948
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsProc: true}
		}
	case 163:
		//line parser.y:952
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 164:
		//line parser.y:962
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 165:
		//line parser.y:974
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 166:
		//line parser.y:987
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 167:
		//line parser.y:998
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 168:
		//line parser.y:1007
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 169:
		//line parser.y:1026
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 170:
		//line parser.y:1044
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1053
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1059
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1065
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 174:
		//line parser.y:1067
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1076
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1085
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1094
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 178:
		//line parser.y:1096
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 179:
		//line parser.y:1099
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1108
		{
			var rhs ast.Node = RubyS[Rubypt-0].genericSlice
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				rhs = RubyS[Rubypt-0].genericSlice[0]
			}
			RubyVAL.genericValue = ast.Assignment{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				LHS:  RubyS[Rubypt-2].genericValue,
				RHS:  rhs,
			}
		}
	case 181:
		//line parser.y:1120
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1130
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 183:
		//line parser.y:1145
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 184:
		//line parser.y:1151
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 185:
		//line parser.y:1160
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1166
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1175
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 188:
		//line parser.y:1184
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 189:
		//line parser.y:1193
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:1195
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 191:
		//line parser.y:1204
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 192:
		//line parser.y:1213
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 193:
		//line parser.y:1219
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 194:
		//line parser.y:1228
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 195:
		//line parser.y:1237
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 196:
		//line parser.y:1246
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 197:
		//line parser.y:1248
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 198:
		//line parser.y:1255
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 199:
		//line parser.y:1261
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 200:
		//line parser.y:1268
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 201:
		//line parser.y:1274
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 202:
		//line parser.y:1281
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1283
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1285
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1287
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1290
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 207:
		//line parser.y:1292
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 208:
		//line parser.y:1294
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 209:
		//line parser.y:1296
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 210:
		//line parser.y:1299
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 211:
		//line parser.y:1301
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 212:
		//line parser.y:1303
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 213:
		//line parser.y:1305
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 214:
		//line parser.y:1308
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 215:
		//line parser.y:1310
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 216:
		//line parser.y:1312
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 217:
		//line parser.y:1314
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 218:
		//line parser.y:1318
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 219:
		//line parser.y:1320
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 220:
		//line parser.y:1322
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 221:
		//line parser.y:1324
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 222:
		//line parser.y:1327
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 223:
		//line parser.y:1338
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 224:
		//line parser.y:1349
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 225:
		//line parser.y:1360
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 226:
		//line parser.y:1371
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 227:
		//line parser.y:1382
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 228:
		//line parser.y:1393
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 229:
		//line parser.y:1395
		{
		}
	case 230:
		//line parser.y:1396
		{
		}
	case 231:
		//line parser.y:1398
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 232:
		//line parser.y:1400
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 233:
		//line parser.y:1402
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 234:
		//line parser.y:1404
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 235:
		//line parser.y:1406
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 236:
		//line parser.y:1408
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 237:
		//line parser.y:1410
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 238:
		//line parser.y:1413
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 239:
		//line parser.y:1415
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 240:
		//line parser.y:1417
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Pairs: RubyS[Rubypt-3].hashPairSlice}
		}
	case 241:
		//line parser.y:1419
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 242:
		//line parser.y:1428
		{
			RubyVAL.hashPair = ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue}
		}
	case 243:
		//line parser.y:1431
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 244:
		//line parser.y:1433
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 245:
		//line parser.y:1436
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 246:
		//line parser.y:1443
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 247:
		//line parser.y:1450
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 248:
		//line parser.y:1458
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
		}
	case 249:
		//line parser.y:1462
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 250:
		//line parser.y:1466
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
		}
	case 251:
		//line parser.y:1470
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 252:
		//line parser.y:1474
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Body: RubyS[Rubypt-3].genericSlice}
		}
	case 253:
		//line parser.y:1478
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Args: RubyS[Rubypt-4].methodParamSlice, Body: RubyS[Rubypt-3].genericSlice}
		}
	case 254:
		//line parser.y:1482
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 255:
		//line parser.y:1486
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
		}
	case 256:
		//line parser.y:1495
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 257:
		//line parser.y:1499
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 258:
		//line parser.y:1508
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 259:
		//line parser.y:1518
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 260:
		//line parser.y:1527
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 261:
		//line parser.y:1536
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 262:
		//line parser.y:1545
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 263:
		//line parser.y:1554
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 264:
		//line parser.y:1563
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 265:
		//line parser.y:1572
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 266:
		//line parser.y:1582
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 267:
		//line parser.y:1591
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 268:
		//line parser.y:1602
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 269:
		//line parser.y:1611
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 270:
		//line parser.y:1619
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 271:
		//line parser.y:1627
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 272:
		//line parser.y:1635
		{
		}
	case 273:
		//line parser.y:1636
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 274:
		//line parser.y:1637
		{
		}
	case 275:
		//line parser.y:1640
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 276:
		//line parser.y:1643
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 277:
		//line parser.y:1652
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 278:
		//line parser.y:1662
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 279:
		//line parser.y:1672
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 280:
		//line parser.y:1682
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 281:
		//line parser.y:1684
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 282:
		//line parser.y:1698
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 283:
		//line parser.y:1714
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 284:
		//line parser.y:1730
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 285:
		//line parser.y:1746
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 286:
		//line parser.y:1756
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 287:
		//line parser.y:1766
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 288:
		//line parser.y:1778
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 289:
		//line parser.y:1780
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 290:
		//line parser.y:1783
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 291:
		//line parser.y:1785
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 292:
		//line parser.y:1788
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 293:
		//line parser.y:1790
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 294:
		//line parser.y:1793
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 295:
		//line parser.y:1800
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 296:
		//line parser.y:1802
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 297:
		//line parser.y:1805
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 298:
		//line parser.y:1813
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 299:
		//line parser.y:1815
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 300:
		//line parser.y:1817
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 301:
		//line parser.y:1821
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 302:
		//line parser.y:1823
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 303:
		//line parser.y:1825
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 304:
		//line parser.y:1829
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 305:
		//line parser.y:1831
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 306:
		//line parser.y:1833
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 307:
		//line parser.y:1837
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 308:
		//line parser.y:1847
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
			}
		}
	case 309:
		//line parser.y:1857
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 310:
		//line parser.y:1863
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 311:
		//line parser.y:1870
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 312:
		//line parser.y:1877
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 313:
		//line parser.y:1879
		{
		}
	case 314:
		//line parser.y:1881
		{
		}
	case 315:
		//line parser.y:1883
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 316:
		//line parser.y:1885
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 317:
		//line parser.y:1888
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 318:
		//line parser.y:1896
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 319:
		//line parser.y:1905
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 320:
		//line parser.y:1913
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 321:
		//line parser.y:1922
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 322:
		//line parser.y:1931
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 323:
		//line parser.y:1939
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 324:
		//line parser.y:1947
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 325:
		//line parser.y:1955
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 326:
		//line parser.y:1964
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 327:
		//line parser.y:1967
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 328:
		//line parser.y:1970
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 329:
		//line parser.y:1977
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 330:
		//line parser.y:1983
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 331:
		//line parser.y:1989
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 332:
		//line parser.y:1995
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 333:
		//line parser.y:2002
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 334:
		//line parser.y:2004
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 335:
		//line parser.y:2007
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 336:
		//line parser.y:2009
		{
			RubyVAL.genericValue = ast.Range{
				Start:            RubyS[Rubypt-2].genericValue,
				End:              RubyS[Rubypt-0].genericValue,
				Line:             RubyS[Rubypt-2].genericValue.LineNumber(),
				ExcludeLastValue: true,
			}
		}
	case 337:
		//line parser.y:2019
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 338:
		//line parser.y:2026
		{
			RubyVAL.genericValue = ast.Defined{Node: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	astString       ast.String
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const LPAREN = 57355
const RPAREN = 57356
const COMMA = 57357
const STRING = 57358
const NamespacedModule = 57359
const ProcArg = 57360
const DO = 57361
const DEF = 57362
const END = 57363
const IF = 57364
const ELSE = 57365
const ELSIF = 57366
const UNLESS = 57367
const CLASS = 57368
const MODULE = 57369
const FOR = 57370
const WHILE = 57371
const UNTIL = 57372
const BEGIN = 57373
const RESCUE = 57374
const ENSURE = 57375
const BREAK = 57376
const NEXT = 57377
const REDO = 57378
const RETRY = 57379
const RETURN = 57380
const YIELD = 57381
const AND = 57382
const OR = 57383
const LAMBDA = 57384
const CASE = 57385
const WHEN = 57386
const ALIAS = 57387
const SELF = 57388
const NIL = 57389
const LESSTHAN = 57390
const GREATERTHAN = 57391
const EQUALTO = 57392
const BANG = 57393
const COMPLEMENT = 57394
const BINARY_PLUS = 57395
const UNARY_PLUS = 57396
const BINARY_MINUS = 57397
const UNARY_MINUS = 57398
const STAR = 57399
const RANGE = 57400
const OR_EQUALS = 57401
const AND_EQUALS = 57402
const WHITESPACE = 57403
const NEWLINE = 57404
const SEMICOLON = 57405
const COLON = 57406
const DOT = 57407
const PIPE = 57408
const SLASH = 57409
const AMPERSAND = 57410
const QUESTIONMARK = 57411
const CARET = 57412
const LBRACKET = 57413
const RBRACKET = 57414
const LBRACE = 57415
const RBRACE = 57416
const ATSIGN = 57417
const FILE_CONST_REF = 57418
const LINE_CONST_REF = 57419
const EOF = 57420

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1930

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 127,
	65, 22,
	-2, 150,
	-1, 139,
	20, 265,
	22, 265,
	25, 265,
	26, 265,
	27, 265,
	29, 265,
	30, 265,
	31, 265,
	34, 265,
	35, 265,
	37, 265,
	38, 265,
	39, 265,
	43, 265,
	45, 265,
	63, 265,
	-2, 13,
	-1, 212,
	20, 265,
	22, 265,
	25, 265,
	26, 265,
	27, 265,
	29, 265,
	30, 265,
	31, 265,
	34, 265,
	35, 265,
	37, 265,
	38, 265,
	39, 265,
	43, 265,
	45, 265,
	63, 265,
	-2, 13,
	-1, 360,
	4, 22,
	5, 22,
	40, 22,
	41, 22,
	48, 22,
	49, 22,
	53, 22,
	55, 22,
	65, 22,
	66, 22,
	67, 22,
	68, 22,
	-2, 125,
	-1, 372,
	20, 265,
	22, 265,
	25, 265,
	26, 265,
	27, 265,
	29, 265,
	30, 265,
	31, 265,
	34, 265,
	35, 265,
	37, 265,
	38, 265,
	39, 265,
	43, 265,
	45, 265,
	63, 265,
	-2, 13,
	-1, 410,
	4, 35,
	5, 35,
	40, 35,
	41, 35,
	49, 35,
	53, 35,
	55, 35,
	62, 13,
	65, 35,
	66, 35,
	67, 35,
	68, 35,
	74, 13,
	-2, 15,
	-1, 594,
	15, 132,
	-2, 13,
}

const RubyNprod = 329
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4504

var RubyAct = []int{

	338, 153, 5, 637, 460, 141, 142, 154, 188, 258,
	427, 461, 345, 256, 140, 409, 28, 379, 463, 255,
	54, 2, 3, 326, 55, 148, 601, 222, 317, 26,
	223, 308, 344, 25, 344, 571, 99, 4, 21, 100,
	284, 344, 438, 101, 596, 344, 553, 344, 344, 533,
	149, 613, 421, 551, 379, 525, 379, 185, 186, 528,
	527, 195, 196, 130, 418, 69, 127, 68, 164, 131,
	162, 132, 199, 329, 532, 93, 97, 96, 320, 416,
	200, 311, 217, 218, 124, 211, 215, 125, 379, 400,
	287, 92, 98, 595, 92, 224, 92, 177, 379, 92,
	225, 226, 227, 92, 216, 94, 95, 165, 92, 234,
	120, 420, 380, 417, 239, 120, 166, 167, 174, 244,
	245, 122, 123, 250, 251, 252, 253, 272, 163, 379,
	291, 149, 174, 121, 92, 72, 71, 51, 121, 173,
	425, 175, 176, 169, 486, 415, 270, 247, 271, 424,
	264, 248, 164, 173, 162, 398, 173, 164, 168, 162,
	263, 278, 281, 283, 168, 290, 300, 301, 302, 273,
	305, 306, 307, 275, 262, 314, 315, 316, 277, 321,
	322, 323, 325, 279, 133, 216, 378, 158, 126, 298,
	634, 165, 161, 299, 303, 485, 583, 193, 304, 312,
	193, 158, 324, 313, 347, 348, 349, 350, 330, 615,
	344, 355, 163, 584, 556, 362, 158, 163, 357, 172,
	585, 193, 193, 193, 545, 99, 266, 99, 100, 481,
	100, 495, 101, 494, 101, 368, 344, 480, 344, 118,
	193, 459, 193, 193, 369, 193, 386, 193, 193, 193,
	193, 344, 193, 482, 169, 193, 178, 344, 193, 193,
	381, 344, 344, 170, 171, 609, 610, 334, 335, 346,
	178, 384, 344, 182, 193, 168, 396, 184, 259, 179,
	180, 193, 193, 193, 193, 285, 119, 344, 481, 261,
	106, 555, 208, 520, 158, 521, 633, 30, 73, 193,
	357, 193, 99, 632, 414, 100, 193, 259, 181, 101,
	309, 193, 183, 257, 205, 318, 443, 206, 261, 618,
	327, 273, 436, 462, 616, 275, 115, 116, 260, 158,
	592, 587, 482, 99, 104, 105, 100, 542, 259, 107,
	101, 108, 608, 109, 128, 129, 536, 158, 193, 261,
	569, 103, 112, 110, 111, 444, 440, 260, 435, 441,
	570, 442, 99, 203, 475, 100, 204, 193, 451, 101,
	193, 454, 340, 342, 99, 453, 294, 100, 164, 193,
	193, 101, 443, 106, 650, 439, 647, 646, 385, 645,
	272, 647, 646, 464, 465, 383, 470, 455, 449, 478,
	351, 456, 341, 471, 483, 479, 432, 158, 433, 468,
	469, 564, 446, 500, 499, 387, 184, 436, 434, 115,
	116, 498, 466, 500, 499, 383, 193, 104, 105, 501,
	193, 193, 107, 193, 108, 158, 109, 117, 288, 515,
	515, 504, 207, 510, 103, 112, 110, 111, 137, 77,
	136, 492, 523, 137, 77, 366, 137, 77, 367, 550,
	535, 549, 423, 209, 534, 422, 537, 419, 407, 401,
	390, 389, 388, 387, 332, 331, 543, 254, 193, 229,
	538, 547, 548, 622, 193, 352, 509, 358, 406, 339,
	538, 1, 214, 91, 90, 89, 558, 88, 158, 158,
	561, 87, 86, 193, 41, 40, 39, 38, 516, 193,
	20, 43, 44, 193, 16, 12, 13, 193, 574, 575,
	11, 45, 24, 23, 193, 22, 198, 27, 582, 19,
	10, 35, 18, 15, 70, 158, 42, 17, 106, 37,
	210, 36, 31, 29, 32, 588, 590, 74, 594, 0,
	193, 593, 589, 591, 479, 0, 0, 52, 598, 0,
	0, 0, 193, 193, 0, 0, 0, 0, 0, 0,
	232, 0, 0, 0, 115, 116, 0, 0, 0, 241,
	242, 193, 104, 105, 0, 0, 614, 107, 193, 108,
	0, 109, 117, 0, 617, 158, 619, 0, 0, 103,
	112, 110, 111, 269, 134, 0, 399, 159, 538, 0,
	538, 0, 0, 0, 292, 0, 0, 194, 0, 0,
	194, 159, 0, 0, 0, 0, 297, 0, 0, 515,
	515, 515, 0, 641, 0, 0, 159, 0, 0, 648,
	0, 194, 194, 194, 0, 0, 0, 652, 572, 0,
	515, 628, 629, 630, 515, 515, 515, 0, 0, 0,
	194, 343, 194, 194, 158, 194, 0, 194, 194, 194,
	194, 0, 194, 0, 0, 194, 361, 0, 194, 194,
	365, 0, 649, 0, 158, 0, 0, 0, 0, 0,
	653, 654, 0, 193, 194, 655, 0, 0, 0, 0,
	0, 194, 194, 194, 194, 286, 0, 602, 0, 0,
	106, 0, 0, 0, 159, 0, 0, 0, 0, 194,
	0, 194, 0, 0, 0, 0, 194, 0, 0, 0,
	310, 194, 0, 193, 0, 319, 397, 0, 0, 0,
	328, 0, 0, 0, 106, 0, 115, 116, 0, 159,
	0, 193, 402, 0, 104, 105, 0, 0, 412, 107,
	0, 108, 0, 109, 14, 0, 0, 159, 194, 0,
	0, 103, 112, 110, 111, 0, 0, 0, 635, 0,
	115, 116, 0, 0, 0, 0, 0, 194, 104, 105,
	194, 0, 0, 107, 0, 108, 0, 109, 0, 194,
	194, 0, 0, 0, 0, 103, 112, 110, 111, 0,
	0, 0, 560, 0, 152, 0, 445, 0, 0, 0,
	0, 447, 448, 0, 0, 0, 0, 159, 201, 0,
	0, 0, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 194, 0, 0, 0,
	194, 194, 0, 194, 0, 159, 0, 0, 0, 0,
	474, 69, 156, 68, 78, 157, 77, 160, 79, 0,
	0, 93, 487, 161, 489, 0, 0, 0, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 194, 0,
	0, 94, 95, 0, 194, 0, 81, 82, 0, 83,
	526, 84, 85, 529, 0, 531, 0, 344, 159, 159,
	0, 152, 0, 194, 0, 0, 75, 0, 76, 194,
	92, 72, 71, 194, 0, 0, 0, 194, 0, 546,
	0, 0, 0, 0, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 159, 152, 0, 557, 69,
	156, 68, 78, 157, 77, 160, 139, 0, 147, 93,
	194, 161, 149, 0, 354, 34, 0, 0, 0, 0,
	0, 0, 194, 194, 0, 0, 0, 0, 579, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 586, 94,
	95, 194, 0, 144, 81, 82, 0, 83, 194, 84,
	85, 0, 145, 146, 0, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 155, 150, 0, 92, 72,
	71, 0, 0, 0, 152, 155, 0, 0, 155, 155,
	0, 0, 612, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 620, 155,
	155, 155, 152, 0, 0, 0, 0, 0, 573, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	155, 155, 0, 155, 159, 155, 155, 155, 155, 0,
	155, 9, 0, 155, 0, 643, 155, 155, 0, 0,
	0, 0, 0, 0, 159, 0, 0, 0, 651, 0,
	0, 0, 155, 194, 0, 0, 0, 0, 0, 155,
	155, 155, 155, 0, 0, 152, 152, 603, 0, 106,
	0, 0, 155, 0, 0, 0, 0, 155, 0, 155,
	644, 151, 0, 0, 155, 0, 0, 0, 0, 155,
	0, 189, 0, 194, 197, 202, 0, 0, 0, 0,
	0, 0, 477, 0, 0, 115, 116, 155, 0, 0,
	213, 194, 0, 104, 105, 219, 220, 221, 107, 0,
	108, 0, 109, 0, 0, 155, 155, 0, 0, 0,
	103, 112, 110, 111, 228, 0, 230, 231, 0, 233,
	0, 235, 236, 237, 238, 155, 240, 0, 155, 243,
	0, 0, 246, 249, 0, 0, 0, 155, 155, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 274, 276, 280, 282, 0,
	0, 0, 0, 0, 106, 155, 0, 0, 151, 0,
	0, 0, 0, 296, 0, 249, 0, 0, 0, 0,
	249, 0, 0, 0, 155, 249, 0, 0, 410, 155,
	0, 155, 0, 155, 0, 0, 0, 0, 0, 0,
	115, 116, 0, 151, 0, 0, 0, 0, 104, 105,
	0, 581, 0, 107, 0, 108, 0, 109, 0, 0,
	0, 353, 359, 0, 0, 103, 112, 110, 111, 0,
	0, 477, 559, 0, 0, 0, 155, 0, 0, 0,
	0, 373, 155, 0, 374, 0, 0, 0, 0, 0,
	106, 0, 0, 376, 377, 0, 155, 155, 0, 0,
	333, 410, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 155, 0, 0, 0, 155, 0, 0, 102, 0,
	106, 213, 155, 0, 0, 0, 115, 116, 0, 0,
	0, 0, 0, 155, 104, 105, 0, 0, 0, 107,
	403, 108, 0, 109, 359, 411, 0, 413, 155, 213,
	0, 103, 112, 110, 111, 114, 115, 116, 0, 187,
	155, 155, 0, 0, 104, 105, 0, 0, 0, 107,
	0, 108, 0, 109, 0, 0, 0, 0, 0, 155,
	0, 103, 112, 110, 111, 114, 155, 0, 0, 0,
	0, 0, 437, 155, 0, 33, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 213, 0, 0, 0, 452, 0, 0,
	0, 0, 0, 249, 0, 0, 0, 458, 0, 0,
	0, 403, 0, 0, 0, 0, 265, 0, 467, 268,
	0, 0, 0, 135, 138, 0, 0, 0, 0, 476,
	289, 0, 0, 0, 0, 190, 0, 0, 190, 0,
	0, 0, 155, 0, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 496, 497, 0, 190,
	190, 190, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 189, 0, 0, 190, 0,
	190, 190, 530, 190, 0, 190, 190, 190, 190, 213,
	190, 0, 0, 190, 0, 0, 190, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 155, 190, 0, 0, 0, 0, 623, 0, 190,
	190, 190, 190, 0, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 0, 0, 382, 190, 0, 190,
	0, 0, 115, 116, 190, 391, 0, 0, 394, 190,
	104, 105, 0, 0, 0, 107, 0, 108, 580, 109,
	0, 0, 0, 0, 0, 0, 0, 103, 112, 110,
	111, 405, 0, 408, 0, 0, 0, 0, 476, 0,
	0, 0, 0, 0, 0, 0, 190, 597, 0, 69,
	156, 68, 78, 157, 77, 160, 139, 0, 0, 93,
	0, 161, 149, 0, 0, 190, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 430, 431, 190, 190, 0,
	0, 0, 0, 0, 0, 80, 0, 621, 0, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 393, 0, 106, 631, 408, 450, 0, 0,
	0, 0, 0, 0, 295, 0, 150, 0, 92, 72,
	71, 0, 0, 0, 190, 113, 0, 0, 190, 190,
	0, 190, 102, 0, 472, 0, 0, 0, 0, 0,
	115, 116, 0, 0, 0, 0, 0, 0, 104, 105,
	488, 490, 0, 107, 0, 108, 0, 109, 117, 0,
	0, 0, 0, 0, 0, 103, 112, 110, 111, 114,
	502, 0, 0, 0, 506, 507, 190, 508, 0, 0,
	0, 0, 190, 522, 0, 524, 0, 69, 360, 68,
	78, 192, 77, 132, 79, 0, 0, 93, 0, 0,
	0, 190, 0, 539, 0, 0, 0, 190, 0, 540,
	541, 190, 0, 0, 0, 190, 0, 0, 0, 0,
	0, 0, 190, 80, 0, 0, 0, 94, 95, 106,
	293, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 562, 563, 344, 0, 0, 0, 291, 190, 0,
	568, 0, 75, 0, 76, 356, 92, 72, 71, 0,
	190, 190, 576, 0, 578, 115, 116, 0, 0, 0,
	0, 0, 511, 104, 105, 0, 0, 0, 107, 190,
	108, 0, 109, 0, 106, 0, 190, 0, 0, 0,
	103, 112, 110, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 599, 0, 0, 0, 0, 600, 0, 0,
	0, 0, 605, 606, 607, 0, 0, 0, 0, 0,
	115, 116, 0, 0, 0, 0, 0, 0, 104, 105,
	0, 0, 0, 107, 0, 108, 0, 109, 117, 0,
	0, 0, 625, 626, 627, 103, 112, 110, 111, 0,
	430, 431, 0, 69, 49, 68, 78, 50, 77, 53,
	79, 0, 0, 93, 0, 0, 0, 46, 640, 517,
	639, 638, 518, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 190, 67, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 604, 0, 0, 513,
	514, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 92, 72, 71, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 69, 49, 68, 78,
	50, 77, 53, 79, 0, 0, 93, 0, 0, 190,
	46, 636, 517, 639, 638, 518, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 513, 514, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 92, 72, 71, 69, 49,
	68, 78, 50, 77, 53, 79, 0, 0, 93, 0,
	0, 0, 46, 503, 56, 429, 428, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 336, 337, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 92, 72, 71,
	69, 49, 68, 78, 50, 77, 53, 79, 0, 0,
	93, 0, 0, 0, 46, 426, 56, 429, 428, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 336, 337, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 92,
	72, 71, 69, 49, 68, 78, 50, 77, 53, 79,
	0, 0, 93, 0, 0, 0, 46, 0, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 436, 462,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 336, 337,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 92, 72, 71, 69, 49, 68, 78, 50, 77,
	53, 79, 0, 0, 93, 0, 0, 0, 46, 565,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 566, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 92, 72, 71, 69, 49, 68, 78,
	50, 77, 53, 79, 0, 0, 93, 0, 0, 0,
	46, 0, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 6, 7, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 92, 72, 71, 8, 69,
	49, 68, 78, 50, 77, 53, 79, 0, 0, 93,
	0, 0, 0, 46, 642, 517, 0, 0, 518, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 513, 514, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 53, 79, 0,
	0, 93, 0, 0, 0, 46, 624, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 336, 337, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 53,
	79, 0, 0, 93, 0, 0, 0, 46, 611, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 336,
	337, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 53, 79, 0, 0, 93, 0, 0, 0, 46,
	577, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 336, 337, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 53, 79, 0, 0, 93, 0, 0,
	0, 46, 567, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 336, 337, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 53, 79, 0, 0, 93,
	0, 0, 0, 46, 0, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 336, 337, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 552, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 53, 79, 0,
	0, 93, 0, 0, 0, 46, 544, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 336, 337, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 53,
	79, 0, 0, 93, 0, 0, 0, 46, 519, 517,
	0, 0, 518, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 513,
	514, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 53, 79, 0, 0, 93, 0, 0, 0, 46,
	512, 517, 0, 0, 518, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 513, 514, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 53, 79, 0, 0, 93, 0, 0,
	0, 46, 505, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 336, 337, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 53, 79, 0, 0, 93,
	0, 0, 0, 46, 484, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 336, 337, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 53, 79, 0,
	0, 93, 0, 0, 0, 46, 473, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 336, 337, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 53,
	79, 0, 0, 93, 0, 0, 0, 46, 404, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 336,
	337, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 53, 79, 0, 0, 93, 0, 0, 0, 46,
	395, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 336, 337, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 53, 79, 0, 0, 93, 0, 0,
	0, 46, 392, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 336, 337, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 53, 79, 0, 0, 93,
	0, 0, 0, 46, 0, 517, 0, 0, 518, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 513, 514, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 53, 79, 0,
	0, 93, 0, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 336, 337, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 53,
	79, 364, 0, 93, 0, 0, 0, 46, 0, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	363, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 53, 79, 0, 0, 93, 0, 0, 0, 46,
	0, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 53, 79, 0, 0, 93, 0, 0,
	0, 46, 0, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 92, 72, 71, 69,
	156, 68, 78, 157, 77, 160, 139, 0, 0, 93,
	0, 161, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 94,
	95, 0, 0, 144, 81, 82, 0, 83, 0, 84,
	85, 69, 191, 68, 78, 192, 77, 132, 79, 0,
	0, 93, 0, 0, 295, 0, 150, 0, 92, 72,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 344, 0, 0,
	0, 291, 0, 0, 0, 0, 75, 0, 76, 0,
	92, 72, 71, 69, 191, 68, 78, 192, 77, 132,
	372, 0, 0, 93, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 94, 95, 0, 0, 370, 81, 82,
	0, 83, 0, 84, 85, 69, 360, 68, 78, 192,
	77, 132, 79, 0, 0, 93, 0, 0, 371, 0,
	150, 0, 92, 72, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 94, 95, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 356, 92, 72, 71, 69, 156, 68,
	78, 157, 77, 160, 139, 0, 0, 93, 0, 161,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 94, 95, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 69,
	191, 68, 78, 192, 77, 132, 79, 0, 0, 93,
	0, 0, 295, 0, 150, 0, 92, 72, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 69, 191, 68, 78, 192, 77, 132, 79, 0,
	0, 93, 0, 0, 69, 156, 68, 78, 157, 77,
	160, 212, 0, 0, 93, 0, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 62, 0,
	0, 94, 95, 0, 0, 0, 81, 82, 0, 83,
	80, 84, 85, 0, 94, 95, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 75, 0, 76, 0,
	92, 72, 71, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 92, 72, 71, 69, 191, 68, 78,
	192, 77, 132, 79, 0, 0, 93, 0, 0, 69,
	156, 68, 78, 157, 77, 160, 79, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 94, 95, 0, 0,
	0, 81, 82, 0, 83, 80, 84, 85, 106, 94,
	95, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 75, 0, 76, 0, 92, 72, 71, 0, 106,
	0, 0, 0, 0, 75, 0, 76, 0, 92, 72,
	71, 0, 0, 0, 115, 116, 0, 0, 0, 0,
	0, 0, 104, 105, 0, 0, 0, 107, 0, 108,
	0, 109, 0, 0, 0, 115, 116, 0, 375, 103,
	112, 110, 111, 104, 105, 0, 0, 0, 107, 0,
	108, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	103, 112, 110, 111,
}
var RubyPact = []int{

	-41, 2390, -1000, -1000, -1000, 14, -1000, -1000, -1000, 1700,
	-1000, -1000, -1000, -1000, 214, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 236, 62, -1000, 123, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 59, 446, 443, 953,
	57, 204, 82, 220, 258, 262, 3831, 3831, -1000, 4360,
	3831, 3831, 4360, 4373, 341, 292, -1000, 434, -1000, -1000,
	276, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4288, -1000,
	31, 3831, 3831, 4360, 4360, 4360, -1000, -1000, -1000, -1000,
	-1000, -1000, 20, -1000, -1000, -1000, -1000, -1000, -1000, 3831,
	3831, 3831, 4360, 472, 4360, 4360, -1000, 4360, 3831, 4360,
	4360, 4360, 4360, 3831, 4360, -1000, -1000, 4360, 3831, 3831,
	4360, 4360, 3831, 3831, 3831, 3831, 470, 300, 109, 95,
	300, -1000, -1000, -1000, -1000, 178, 4360, 367, -1000, -1000,
	31, -1000, 112, 4360, 4275, 4360, 4360, 33, 423, 64,
	-1000, 1825, -1000, -1000, 361, 67, 3903, 141, 93, 68,
	206, 4360, -1000, 4360, -1000, 3831, 3831, 3831, 4360, 3831,
	3831, 3831, 24, 4360, 3831, 3831, 3831, 21, 3831, 3831,
	3831, 3831, 16, 468, 467, 352, 205, 3615, 357, 4435,
	-1000, 4151, 146, 87, 85, 340, 311, 4435, 225, 357,
	-1000, -1000, 1356, 3831, 3831, 3831, 3831, 392, -1000, 855,
	4079, 375, -1000, 1825, 3687, -1000, -1000, 352, 352, 4435,
	4435, 4435, -1000, -1000, 448, 352, 352, 352, 4435, 4027,
	4435, 4435, 4203, 4435, 352, 4435, 4435, 4435, 4435, 352,
	4414, 4203, 4203, 4435, 352, 352, 4435, 114, 40, 1880,
	352, 352, 352, 352, 31, -1000, 410, 331, -1000, 196,
	466, 465, 464, 463, -1000, 3471, 443, 4435, 3399, 855,
	-1000, -1000, -1000, 83, 534, 17, 1326, -1000, -1000, -1000,
	1356, -1000, 1356, -1000, -1000, -1000, -1000, 462, 4360, 3327,
	-1000, 461, 1781, 4360, -1000, 4360, 4435, 855, 73, 7,
	352, 352, 352, 41, -8, 352, 352, 352, -1000, -1000,
	-1000, 460, 39, -20, 352, 352, 352, -1000, -1000, -1000,
	458, 352, 352, 352, 258, 352, -1000, -1000, -1000, 455,
	401, 78, 69, 2174, -1000, -1000, -1000, -1000, 352, 385,
	4360, -1000, -1000, 225, -1000, 338, 4360, 352, 352, 352,
	352, -1000, 397, 4435, -1000, -1000, -1000, 361, 383, 1825,
	1643, 855, 352, -1000, -1000, 3955, -1000, -1000, -1000, 31,
	3831, 4360, -1000, 4435, 4435, 4360, 4435, 4435, 191, 4360,
	-1000, -1000, 2246, 271, 380, 408, 4360, -1000, -1000, 300,
	300, 2246, -1000, -1000, 3255, -1000, 349, 855, 187, 238,
	-1000, -1000, 174, 4435, -1000, 3183, 129, -1000, 3615, -1000,
	67, 4435, 4203, 379, 375, 183, -1000, 181, -1000, -1000,
	-1000, -1000, -1000, -1000, 4360, 4360, -1000, 400, 3831, -1000,
	2102, 3111, -1000, -1000, -1000, -1000, 438, 4435, 3039, 2967,
	272, -1000, -1000, 4360, 357, -17, -1000, -14, -15, -1000,
	4360, 375, 4435, -1000, 352, 2, -23, 855, 4435, 3831,
	325, 290, -1000, -1000, -1000, -1000, -1000, 4435, -1000, -1000,
	316, 290, 2895, -1000, 210, -1000, 1825, -1000, -1000, 361,
	3831, 3831, 454, -1000, -1000, -1000, 452, -21, 2823, -28,
	3615, 286, 179, 200, -1000, 3831, 1240, 740, -1000, 3831,
	-1000, 352, 3615, -1000, 390, -1000, 2318, 2751, 3615, 345,
	28, -1000, -1000, -1000, -1000, 352, -1000, 3831, 3831, -1000,
	-1000, -1000, 2679, 357, 3615, -1000, 855, -1000, -1000, 189,
	4435, 199, 170, -1000, 349, 352, -1000, 310, -1000, 3615,
	2246, 2246, -1000, 309, -1000, 31, 855, 352, 352, 22,
	-1000, -1000, -1000, -1000, -30, 4360, -1000, 3759, 352, 317,
	-1000, 352, 3615, 3615, -1000, -1000, -1000, -1000, 3615, 19,
	443, -1000, -1000, -1000, 280, 203, 2607, -1000, 3615, 148,
	4435, -1000, -1000, -13, -1000, 3831, 195, -1000, 303, 290,
	298, 290, -1000, -1000, -1000, 4360, -1000, 1562, 352, 3615,
	2535, -1000, -1000, -1000, -1000, 3615, 3615, 3615, -1000, -1000,
	-1000, -1000, 148, 4360, 352, -1000, -1000, 282, -1000, 275,
	176, 706, -1000, -1000, -1000, 3615, 3615, 3615, 2030, 1947,
	2463, 1125, -1000, -1000, -1000, -1000, -1000, 368, 3831, -1000,
	-1000, 363, -1000, 148, -1000, -1000, 3831, -1000, 352, 3543,
	-1000, 148, 352, 3543, 3543, 3543,
}
var RubyPgo = []int{

	0, 547, 0, 298, 544, 29, 5, 543, 542, 541,
	539, 18, 16, 537, 1, 536, 764, 534, 533, 532,
	1091, 297, 557, 975, 531, 530, 529, 527, 525, 523,
	522, 521, 520, 516, 9, 137, 515, 514, 1435, 12,
	38, 512, 511, 33, 510, 508, 3, 20, 507, 506,
	505, 504, 502, 501, 497, 495, 494, 493, 1340, 492,
	11, 14, 15, 10, 491, 19, 7, 42, 4, 489,
	6, 488, 8, 487, 25, 24, 13, 486, 485, 483,
	463,
}
var RubyR1 = []int{

	0, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 79, 79, 80, 80, 58, 58, 58, 58, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 31, 31, 31,
	31, 31, 31, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 17, 17, 43, 15, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 24, 61,
	61, 61, 61, 72, 72, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 14, 74, 74, 68, 68, 25,
	25, 25, 25, 25, 25, 25, 25, 65, 65, 65,
	76, 76, 76, 34, 34, 34, 34, 32, 32, 33,
	36, 38, 38, 38, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 18, 18, 18, 75, 75, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 35, 35, 22, 22, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 8, 3, 1, 78, 78, 78, 78, 78,
	78, 78, 4, 4, 4, 66, 66, 73, 73, 73,
	6, 6, 6, 6, 6, 6, 62, 71, 71, 71,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 63, 63, 63, 63, 59, 59, 59, 9, 19,
	19, 19, 19, 11, 11, 11, 11, 11, 11, 11,
	11, 77, 77, 69, 69, 60, 60, 26, 26, 27,
	28, 28, 28, 28, 30, 30, 30, 29, 29, 29,
	12, 44, 44, 44, 67, 67, 67, 67, 67, 45,
	45, 45, 45, 45, 46, 46, 46, 46, 42, 41,
	10, 40, 40, 40, 40, 39, 39, 5, 7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 6, 7,
	1, 2, 6, 6, 2, 3, 2, 3, 4, 5,
	4, 3, 4, 5, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	6, 6, 6, 6, 7, 6, 6, 8, 4, 5,
	8, 1, 4, 1, 3, 0, 1, 1, 1, 1,
	4, 4, 4, 4, 2, 1, 3, 0, 2, 6,
	7, 8, 8, 9, 9, 6, 7, 1, 3, 3,
	0, 1, 3, 1, 2, 3, 2, 4, 6, 5,
	4, 1, 2, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 9, 6, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 3, 3, 3, 3, 4,
	3, 3, 3, 4, 3, 3, 3, 4, 3, 3,
	3, 4, 2, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 5, 1, 1, 0, 1, 1, 1, 4,
	4, 4, 3, 5, 5, 3, 7, 3, 7, 8,
	3, 4, 5, 5, 5, 6, 3, 0, 1, 3,
	4, 5, 3, 3, 3, 3, 3, 5, 6, 5,
	3, 4, 3, 3, 2, 0, 2, 2, 3, 4,
	6, 8, 6, 2, 3, 5, 5, 5, 4, 4,
	4, 1, 3, 0, 2, 1, 2, 2, 1, 1,
	2, 2, 2, 1, 1, 3, 3, 1, 3, 3,
	5, 5, 5, 3, 0, 2, 2, 2, 2, 5,
	6, 5, 6, 5, 4, 3, 3, 2, 4, 4,
	2, 5, 7, 4, 6, 4, 5, 3, 3,
}
var RubyChk = []int{

	-1000, -64, 62, 63, 78, -2, 62, 63, 78, -20,
	-25, -32, -36, -33, -16, -18, -37, -13, -19, -26,
	-44, -40, -28, -29, -30, -43, -5, -27, -12, -7,
	-21, -8, -4, -38, -23, -24, -9, -10, -48, -49,
	-50, -51, -15, -42, -41, -31, 20, 26, 27, 7,
	10, -35, -22, 12, -47, -75, 22, 25, 31, 39,
	29, 30, 43, 38, 34, 35, 37, 45, 8, 6,
	-17, 77, 76, -3, -1, 71, 73, 11, 9, 13,
	42, 51, 52, 54, 56, 57, -52, -53, -54, -55,
	-56, -57, 75, 16, 46, 47, 63, 62, 78, 22,
	25, 29, 32, 65, 48, 49, 4, 53, 55, 57,
	67, 68, 66, 25, 69, 40, 41, 58, 25, 50,
	48, 71, 59, 60, 22, 25, 65, 7, -21, -3,
	4, 10, 12, -35, -22, -38, 4, 10, -38, 13,
	-61, -6, -70, 71, 50, 59, 60, 15, -74, 19,
	73, -20, -16, -14, -66, -23, 7, 10, -35, -22,
	12, 18, 13, 71, 11, 50, 59, 60, 71, 50,
	59, 60, 15, 71, 50, 59, 60, 15, 50, 59,
	60, 50, 15, 50, 15, -2, -2, -58, -72, -20,
	-38, 7, 10, -35, -22, -2, -2, -20, -80, -72,
	-12, -16, -20, 22, 25, 22, 25, 8, 16, -80,
	-80, -70, 13, -20, -59, -6, 73, -2, -2, -20,
	-20, -20, 7, 10, 75, -2, -2, -2, -20, 7,
	-20, -20, -80, -20, -2, -20, -20, -20, -20, -2,
	-20, -80, -80, -20, -2, -2, -20, -74, -5, -20,
	-2, -2, -2, -2, 7, -65, -76, 13, -34, 7,
	57, 18, 65, 65, -65, -58, 48, -20, -58, -80,
	-6, -6, 15, -74, -20, -5, -20, -43, -12, -40,
	-20, -12, -20, -12, 7, -35, -22, 57, 15, -58,
	-62, 66, -80, 5, 15, 71, -20, -80, -74, -5,
	-2, -2, -2, -74, -5, -2, -2, -2, 7, -35,
	-22, 57, -74, -5, -2, -2, -2, 7, -35, -22,
	57, -2, -2, -2, -47, -2, 7, -35, -22, 57,
	-75, 7, 7, -58, 62, 63, 62, 63, -2, -69,
	15, 62, 62, -80, 62, -39, 44, -2, -2, -2,
	-2, 8, -78, -20, -16, -14, 74, -66, -73, -20,
	7, -80, -2, 63, 14, -80, 7, 10, -6, -61,
	50, 71, 13, -20, -20, 64, -20, -20, 72, 15,
	72, -6, -58, 15, -76, 57, 50, 7, 7, 7,
	7, -58, 21, -38, -58, 21, -70, -80, 72, 72,
	72, 7, -80, -20, 21, -58, -71, 7, -58, -62,
	-23, -20, -80, -20, -70, 72, 72, 72, 72, 7,
	72, 72, 7, 7, 71, 71, 21, -63, 24, 23,
	-58, -58, 21, 23, 33, -11, 32, -20, -67, -67,
	-39, 21, 23, 44, -72, -80, 15, -80, -80, 15,
	64, -70, -20, -6, -2, -74, -5, -80, -20, 50,
	-68, -60, 33, -11, -34, 14, 14, -20, -65, -65,
	-68, -60, -58, 21, -80, 15, -20, -16, -14, -66,
	50, 50, 15, -14, 21, 66, 15, -80, -58, -80,
	-58, -20, 72, -80, 50, 50, -20, -20, 21, 24,
	23, -2, -58, 21, -63, 21, -58, -58, -58, -77,
	5, -38, 21, 62, 63, -2, -45, 22, 25, 21,
	21, 23, -58, -72, -58, 72, -80, 74, 74, -80,
	-20, -80, 72, 72, -70, -2, 21, -68, -11, -58,
	-58, -58, 21, -68, 21, 14, -80, -2, -2, 7,
	7, 74, 74, 74, -80, 5, 14, -80, -2, 72,
	72, -2, -58, -58, 21, 21, 33, 21, -58, 5,
	15, 7, -35, -22, -2, -2, -58, 21, -58, -80,
	-20, -16, -14, 7, 14, 50, -80, 21, -68, -60,
	-68, -60, 21, -6, -14, 71, 74, -20, -2, -58,
	-58, 7, -35, -22, -38, -58, -58, -58, 62, 62,
	63, 21, -80, 64, -2, 14, 21, -68, 21, -68,
	-80, -20, -79, 15, 21, -58, -58, -58, -67, -67,
	-67, -20, 21, 21, 14, 72, 21, -46, 24, 23,
	21, -46, 21, -80, 15, 21, 24, 23, -2, -67,
	21, -80, -2, -67, -67, -67,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 0, 0, 0, 22,
	23, 25, 26, 24, 0, 0, 0, 0, 15, 288,
	0, 0, 13, 293, 297, 294, 289, 0, 19, 20,
	21, 27, 28, 29, 30, 13, 13, 163, 80, 265,
	0, 0, 0, 0, 0, 0, 47, 48, 49, 50,
	51, 52, 0, 74, 223, 224, 5, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 13, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	150, 23, 24, 25, 26, 15, 0, 161, 15, -2,
	84, 86, 94, 13, 0, 0, 0, 0, 121, 15,
	13, 126, 127, 128, 129, 35, 22, 23, 25, 26,
	24, 0, 13, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 15, 0, 283, 287, 123,
	34, 22, 23, 25, 26, 0, 0, 13, 0, 290,
	291, 292, 123, 0, 0, 0, 0, 0, 75, 225,
	0, 81, -2, 126, 0, 320, 13, 212, 213, 214,
	215, 77, 192, 193, 0, 252, 260, 303, 76, 87,
	96, 98, 0, 216, 217, 218, 219, 220, 221, 254,
	0, 0, 0, 327, 256, 172, 97, 0, 0, 135,
	184, 191, 253, 255, 91, 15, 147, 150, 151, 153,
	0, 0, 0, 0, 15, 0, 0, 15, 0, 125,
	85, 95, 13, 0, 135, 0, 164, 165, 166, 167,
	178, 179, 185, 186, 196, 197, 198, 0, 13, 0,
	15, 247, 15, 0, 13, 13, 134, 125, 0, 0,
	168, 180, 187, 0, 0, 169, 181, 188, 200, 201,
	202, 0, 0, 0, 170, 182, 189, 204, 205, 206,
	0, 171, 183, 190, 173, 174, 208, 209, 210, 0,
	175, 0, 0, 0, 15, 15, 16, 17, 18, 0,
	0, 304, 304, 0, 14, 0, 0, 298, 299, 295,
	296, 328, 13, 226, 227, 228, 232, 13, 13, 0,
	-2, 125, 266, 267, 268, 15, 194, 195, 88, 90,
	0, 13, -2, 135, 118, 0, 318, 319, 108, 0,
	109, 92, 137, 0, 0, 0, 0, 154, 156, 150,
	150, 137, 157, 15, 0, 160, 13, 0, 99, 100,
	101, 199, 0, 136, 240, 0, 0, 248, 13, 15,
	-2, 235, 0, 135, 13, 102, 103, 104, 105, 203,
	106, 107, 207, 211, 0, 0, 250, 0, 0, 15,
	0, 0, 269, 15, 15, 284, 15, 124, 0, 0,
	0, 323, 15, 0, 15, 0, 13, 0, 0, 13,
	0, 13, 0, 89, 93, 0, 0, 125, 300, 0,
	0, 137, 15, 285, 152, 148, 149, 155, 15, 15,
	0, 137, 0, 159, 0, 13, 130, 131, 132, 133,
	0, 0, 0, 122, 241, 246, 0, 0, 0, 0,
	13, 0, 100, 0, 13, 0, 0, 0, 251, 0,
	15, 15, 264, 257, 0, 259, 0, 0, 273, 15,
	0, 281, 301, 305, 306, 307, 308, 0, 0, 302,
	321, 15, 0, 15, 13, 222, 0, 233, 234, 0,
	237, 0, 110, 111, 13, 116, 139, 0, 286, 138,
	137, 137, 145, 0, 158, 78, 0, 112, 113, 0,
	249, 242, 243, 244, 0, 0, 83, 0, 115, 0,
	177, 15, 262, 263, 258, 270, 15, 272, 274, 0,
	0, 15, 15, 15, 15, 0, 0, 324, 13, 325,
	229, 230, 231, 0, 82, 0, 0, 140, 0, 137,
	0, 137, 146, 79, -2, 0, 245, 11, 114, 261,
	0, 15, 15, 15, 282, 278, 279, 280, 304, 15,
	15, 322, 326, 0, 117, 119, 141, 0, 142, 0,
	0, 0, 236, 12, 271, 275, 276, 277, 0, 0,
	0, 13, 143, 144, 120, 176, 309, 0, 0, 304,
	311, 0, 313, 238, 13, 310, 0, 304, 304, 317,
	312, 239, 304, 315, 316, 314,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:227
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:229
		{
		}
	case 3:
		//line parser.y:231
		{
		}
	case 4:
		//line parser.y:233
		{
		}
	case 5:
		//line parser.y:235
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:237
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:239
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:245
		{
		}
	case 11:
		//line parser.y:247
		{
		}
	case 12:
		//line parser.y:248
		{
		}
	case 13:
		//line parser.y:250
		{
		}
	case 14:
		//line parser.y:251
		{
		}
	case 15:
		//line parser.y:254
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:256
		{
		}
	case 17:
		//line parser.y:258
		{
		}
	case 18:
		//line parser.y:260
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		//line parser.y:271
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 75:
		//line parser.y:273
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 76:
		//line parser.y:281
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:284
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 78:
		//line parser.y:287
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:296
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:306
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:312
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 82:
		//line parser.y:320
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:329
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:338
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:347
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:357
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:367
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:376
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:387
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:398
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:408
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:418
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:429
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:442
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 95:
		//line parser.y:450
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 96:
		//line parser.y:459
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:468
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:477
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 99:
		//line parser.y:488
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 100:
		//line parser.y:497
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 101:
		//line parser.y:506
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 102:
		//line parser.y:515
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 103:
		//line parser.y:524
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 104:
		//line parser.y:533
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 105:
		//line parser.y:542
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 106:
		//line parser.y:551
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 107:
		//line parser.y:560
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 108:
		//line parser.y:569
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 109:
		//line parser.y:578
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 110:
		//line parser.y:587
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 111:
		//line parser.y:600
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 112:
		//line parser.y:616
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 113:
		//line parser.y:625
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 114:
		//line parser.y:634
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:643
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:652
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 117:
		//line parser.y:661
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 118:
		//line parser.y:676
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 119:
		//line parser.y:688
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 120:
		//line parser.y:690
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 121:
		//line parser.y:692
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 122:
		//line parser.y:694
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:697
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:699
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:701
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 126:
		//line parser.y:703
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:705
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:707
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:709
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 130:
		//line parser.y:716
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 131:
		//line parser.y:718
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 132:
		//line parser.y:720
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:722
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 134:
		//line parser.y:732
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 135:
		//line parser.y:743
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:745
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:749
		{
			RubyVAL.genericSlice = nil
		}
	case 138:
		//line parser.y:751
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 139:
		//line parser.y:754
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 140:
		//line parser.y:765
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 141:
		//line parser.y:777
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 142:
		//line parser.y:789
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 143:
		//line parser.y:801
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 144:
		//line parser.y:814
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 145:
		//line parser.y:827
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:838
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 147:
		//line parser.y:852
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 148:
		//line parser.y:854
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 149:
		//line parser.y:856
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 150:
		//line parser.y:858
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 151:
		//line parser.y:860
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 152:
		//line parser.y:862
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 153:
		//line parser.y:865
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 154:
		//line parser.y:867
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 155:
		//line parser.y:869
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 156:
		//line parser.y:871
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 157:
		//line parser.y:875
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 158:
		//line parser.y:885
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 159:
		//line parser.y:897
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 160:
		//line parser.y:910
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 161:
		//line parser.y:921
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 162:
		//line parser.y:930
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 163:
		//line parser.y:949
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 164:
		//line parser.y:967
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 165:
		//line parser.y:976
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:982
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:988
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 168:
		//line parser.y:990
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 169:
		//line parser.y:999
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 170:
		//line parser.y:1008
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1017
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 172:
		//line parser.y:1019
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 173:
		//line parser.y:1022
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1031
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1040
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1050
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 177:
		//line parser.y:1065
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 178:
		//line parser.y:1071
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 179:
		//line parser.y:1080
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1086
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 181:
		//line parser.y:1095
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1104
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 183:
		//line parser.y:1113
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 184:
		//line parser.y:1115
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 185:
		//line parser.y:1124
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1133
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1139
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 188:
		//line parser.y:1148
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 189:
		//line parser.y:1157
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 190:
		//line parser.y:1166
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 191:
		//line parser.y:1168
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 192:
		//line parser.y:1175
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 193:
		//line parser.y:1181
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 194:
		//line parser.y:1188
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 195:
		//line parser.y:1194
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 196:
		//line parser.y:1201
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1203
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1205
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1207
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1210
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1212
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1214
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1216
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1219
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1221
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1223
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 207:
		//line parser.y:1225
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 208:
		//line parser.y:1228
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 209:
		//line parser.y:1230
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 210:
		//line parser.y:1232
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 211:
		//line parser.y:1234
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 212:
		//line parser.y:1238
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 213:
		//line parser.y:1240
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 214:
		//line parser.y:1242
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 215:
		//line parser.y:1244
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 216:
		//line parser.y:1247
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 217:
		//line parser.y:1258
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 218:
		//line parser.y:1269
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 219:
		//line parser.y:1280
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 220:
		//line parser.y:1291
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 221:
		//line parser.y:1302
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 222:
		//line parser.y:1313
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 223:
		//line parser.y:1315
		{
		}
	case 224:
		//line parser.y:1316
		{
		}
	case 225:
		//line parser.y:1318
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 226:
		//line parser.y:1320
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 227:
		//line parser.y:1322
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 228:
		//line parser.y:1324
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 229:
		//line parser.y:1326
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 230:
		//line parser.y:1328
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 231:
		//line parser.y:1330
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 232:
		//line parser.y:1333
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 233:
		//line parser.y:1335
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 234:
		//line parser.y:1339
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 235:
		//line parser.y:1348
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 236:
		//line parser.y:1350
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 237:
		//line parser.y:1353
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 238:
		//line parser.y:1360
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 239:
		//line parser.y:1367
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 240:
		//line parser.y:1375
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 241:
		//line parser.y:1380
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 242:
		//line parser.y:1385
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 243:
		//line parser.y:1390
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 244:
		//line parser.y:1395
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 245:
		//line parser.y:1400
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 246:
		//line parser.y:1409
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 247:
		//line parser.y:1411
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 248:
		//line parser.y:1413
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 249:
		//line parser.y:1415
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 250:
		//line parser.y:1418
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 251:
		//line parser.y:1427
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1437
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1446
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1455
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1464
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 256:
		//line parser.y:1473
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 257:
		//line parser.y:1482
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 258:
		//line parser.y:1491
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 259:
		//line parser.y:1501
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 260:
		//line parser.y:1510
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 261:
		//line parser.y:1521
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 262:
		//line parser.y:1530
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 263:
		//line parser.y:1538
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 264:
		//line parser.y:1546
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 265:
		//line parser.y:1554
		{
		}
	case 266:
		//line parser.y:1555
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 267:
		//line parser.y:1556
		{
		}
	case 268:
		//line parser.y:1559
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 269:
		//line parser.y:1562
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 270:
		//line parser.y:1571
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 271:
		//line parser.y:1581
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 272:
		//line parser.y:1591
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 273:
		//line parser.y:1601
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 274:
		//line parser.y:1603
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 275:
		//line parser.y:1617
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 276:
		//line parser.y:1633
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 277:
		//line parser.y:1649
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 278:
		//line parser.y:1665
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 279:
		//line parser.y:1675
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 280:
		//line parser.y:1685
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 281:
		//line parser.y:1697
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 282:
		//line parser.y:1699
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 283:
		//line parser.y:1702
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 284:
		//line parser.y:1704
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 285:
		//line parser.y:1707
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 286:
		//line parser.y:1709
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 287:
		//line parser.y:1712
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 288:
		//line parser.y:1719
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 289:
		//line parser.y:1721
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 290:
		//line parser.y:1724
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 291:
		//line parser.y:1732
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 292:
		//line parser.y:1734
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 293:
		//line parser.y:1736
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 294:
		//line parser.y:1740
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 295:
		//line parser.y:1742
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 296:
		//line parser.y:1744
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 297:
		//line parser.y:1748
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 298:
		//line parser.y:1750
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 299:
		//line parser.y:1752
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 300:
		//line parser.y:1756
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 301:
		//line parser.y:1767
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 302:
		//line parser.y:1773
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 303:
		//line parser.y:1780
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 304:
		//line parser.y:1787
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 305:
		//line parser.y:1789
		{
		}
	case 306:
		//line parser.y:1791
		{
		}
	case 307:
		//line parser.y:1793
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 308:
		//line parser.y:1795
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 309:
		//line parser.y:1798
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 310:
		//line parser.y:1806
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 311:
		//line parser.y:1815
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 312:
		//line parser.y:1823
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 313:
		//line parser.y:1832
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 314:
		//line parser.y:1841
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 315:
		//line parser.y:1849
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 316:
		//line parser.y:1857
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 317:
		//line parser.y:1865
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 318:
		//line parser.y:1874
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 319:
		//line parser.y:1877
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 320:
		//line parser.y:1880
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 321:
		//line parser.y:1887
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 322:
		//line parser.y:1893
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 323:
		//line parser.y:1899
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 324:
		//line parser.y:1905
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 325:
		//line parser.y:1912
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 326:
		//line parser.y:1914
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 327:
		//line parser.y:1917
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 328:
		//line parser.y:1924
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	}
	goto Rubystack /* stack new state and value */
}

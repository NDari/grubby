//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	astString       ast.String
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CONSTANT = 57351
const NAMESPACED_CAPITAL_REF = 57352
const LPAREN = 57353
const RPAREN = 57354
const COMMA = 57355
const STRING = 57356
const NamespacedModule = 57357
const ProcArg = 57358
const DO = 57359
const DEF = 57360
const END = 57361
const IF = 57362
const ELSE = 57363
const ELSIF = 57364
const UNLESS = 57365
const CLASS = 57366
const MODULE = 57367
const FOR = 57368
const WHILE = 57369
const UNTIL = 57370
const BEGIN = 57371
const RESCUE = 57372
const ENSURE = 57373
const BREAK = 57374
const NEXT = 57375
const REDO = 57376
const RETRY = 57377
const RETURN = 57378
const YIELD = 57379
const AND = 57380
const OR = 57381
const LAMBDA = 57382
const CASE = 57383
const WHEN = 57384
const ALIAS = 57385
const SELF = 57386
const NIL = 57387
const LESSTHAN = 57388
const GREATERTHAN = 57389
const EQUALTO = 57390
const BANG = 57391
const COMPLEMENT = 57392
const BINARY_PLUS = 57393
const UNARY_PLUS = 57394
const BINARY_MINUS = 57395
const UNARY_MINUS = 57396
const STAR = 57397
const RANGE = 57398
const OR_EQUALS = 57399
const AND_EQUALS = 57400
const WHITESPACE = 57401
const NEWLINE = 57402
const SEMICOLON = 57403
const COLON = 57404
const DOT = 57405
const PIPE = 57406
const SLASH = 57407
const AMPERSAND = 57408
const QUESTIONMARK = 57409
const CARET = 57410
const LBRACKET = 57411
const RBRACKET = 57412
const LBRACE = 57413
const RBRACE = 57414
const DOLLARSIGN = 57415
const ATSIGN = 57416
const FILE_CONST_REF = 57417
const LINE_CONST_REF = 57418
const EOF = 57419

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1946

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 135,
	18, 260,
	20, 260,
	23, 260,
	24, 260,
	25, 260,
	27, 260,
	28, 260,
	29, 260,
	32, 260,
	33, 260,
	35, 260,
	36, 260,
	37, 260,
	41, 260,
	43, 260,
	61, 260,
	-2, 13,
	-1, 206,
	18, 260,
	20, 260,
	23, 260,
	24, 260,
	25, 260,
	27, 260,
	28, 260,
	29, 260,
	32, 260,
	33, 260,
	35, 260,
	36, 260,
	37, 260,
	41, 260,
	43, 260,
	61, 260,
	-2, 13,
	-1, 351,
	4, 22,
	38, 22,
	39, 22,
	46, 22,
	47, 22,
	51, 22,
	53, 22,
	63, 22,
	64, 22,
	65, 22,
	66, 22,
	-2, 120,
	-1, 363,
	18, 260,
	20, 260,
	23, 260,
	24, 260,
	25, 260,
	27, 260,
	28, 260,
	29, 260,
	32, 260,
	33, 260,
	35, 260,
	36, 260,
	37, 260,
	41, 260,
	43, 260,
	61, 260,
	-2, 13,
	-1, 401,
	4, 35,
	38, 35,
	39, 35,
	47, 35,
	51, 35,
	53, 35,
	60, 13,
	63, 35,
	64, 35,
	65, 35,
	66, 35,
	72, 13,
	-2, 15,
	-1, 579,
	13, 126,
	-2, 13,
}

const RubyNprod = 323
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4720

var RubyAct = []int{

	329, 448, 5, 182, 451, 449, 137, 621, 149, 336,
	138, 254, 414, 252, 136, 55, 250, 370, 144, 26,
	54, 335, 400, 25, 425, 2, 3, 317, 100, 308,
	301, 101, 279, 581, 145, 102, 203, 585, 21, 335,
	14, 216, 4, 28, 217, 335, 555, 335, 335, 370,
	405, 538, 335, 159, 157, 510, 390, 179, 180, 536,
	514, 190, 191, 580, 512, 370, 412, 194, 98, 97,
	159, 157, 159, 157, 406, 164, 320, 472, 311, 304,
	267, 282, 211, 212, 145, 99, 286, 209, 210, 205,
	148, 160, 258, 121, 411, 92, 163, 92, 92, 193,
	92, 221, 222, 223, 167, 92, 391, 195, 160, 218,
	230, 163, 158, 204, 92, 235, 122, 161, 162, 148,
	240, 241, 369, 598, 245, 246, 247, 248, 471, 158,
	570, 158, 255, 127, 618, 335, 568, 253, 210, 164,
	600, 243, 257, 265, 228, 266, 467, 259, 165, 166,
	480, 156, 468, 237, 238, 569, 540, 531, 270, 269,
	163, 294, 295, 296, 272, 298, 299, 300, 285, 305,
	306, 307, 264, 312, 313, 314, 316, 293, 292, 274,
	479, 256, 335, 287, 273, 276, 278, 467, 335, 251,
	335, 73, 148, 321, 290, 335, 315, 337, 338, 339,
	340, 341, 176, 335, 335, 335, 255, 178, 125, 353,
	100, 126, 346, 101, 447, 335, 257, 102, 378, 69,
	151, 68, 78, 152, 77, 135, 148, 143, 94, 334,
	156, 145, 359, 172, 121, 168, 119, 175, 129, 120,
	360, 261, 177, 352, 345, 123, 124, 356, 617, 171,
	593, 594, 423, 450, 80, 256, 372, 122, 95, 96,
	616, 603, 140, 81, 82, 601, 83, 376, 84, 85,
	100, 141, 142, 101, 130, 387, 128, 102, 199, 100,
	577, 200, 101, 139, 168, 146, 102, 93, 92, 72,
	71, 107, 100, 169, 170, 101, 572, 528, 522, 102,
	505, 403, 506, 202, 388, 148, 100, 270, 269, 101,
	325, 326, 172, 102, 95, 468, 428, 255, 429, 592,
	393, 173, 174, 430, 159, 116, 117, 257, 553, 454,
	375, 148, 333, 105, 106, 422, 463, 554, 108, 430,
	109, 431, 110, 118, 427, 636, 332, 633, 632, 535,
	104, 113, 111, 112, 331, 267, 197, 477, 426, 198,
	437, 107, 443, 440, 255, 100, 377, 442, 101, 253,
	630, 419, 102, 420, 257, 631, 435, 633, 632, 433,
	432, 178, 423, 421, 458, 434, 436, 453, 459, 375,
	283, 452, 148, 148, 342, 116, 117, 466, 457, 379,
	445, 495, 469, 105, 106, 455, 133, 77, 108, 201,
	109, 627, 110, 256, 357, 534, 486, 358, 628, 410,
	104, 113, 111, 112, 462, 100, 500, 500, 101, 465,
	489, 409, 102, 408, 508, 398, 473, 392, 475, 516,
	478, 548, 343, 485, 484, 133, 77, 483, 521, 485,
	484, 523, 132, 381, 524, 380, 520, 133, 77, 219,
	379, 529, 220, 374, 524, 323, 322, 249, 533, 225,
	511, 494, 513, 349, 515, 228, 397, 518, 330, 348,
	1, 542, 208, 91, 90, 545, 148, 89, 107, 88,
	87, 86, 41, 40, 39, 38, 501, 20, 43, 44,
	532, 16, 12, 558, 559, 13, 11, 45, 24, 23,
	22, 27, 19, 539, 10, 35, 541, 30, 18, 15,
	566, 70, 116, 117, 42, 17, 37, 36, 573, 575,
	105, 106, 574, 576, 31, 108, 29, 109, 578, 110,
	118, 579, 582, 32, 74, 0, 563, 104, 113, 111,
	112, 0, 565, 0, 404, 0, 0, 571, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 599, 0, 465, 0, 0, 602, 0, 604, 524,
	0, 524, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 500, 500, 500, 153, 605, 611, 612, 613,
	625, 0, 0, 634, 0, 187, 0, 0, 187, 187,
	0, 0, 0, 638, 228, 0, 500, 0, 0, 0,
	500, 500, 500, 0, 153, 0, 0, 0, 635, 187,
	187, 187, 629, 0, 0, 0, 0, 0, 639, 640,
	0, 0, 0, 641, 0, 0, 0, 637, 0, 187,
	0, 187, 187, 0, 187, 0, 187, 187, 187, 187,
	0, 187, 0, 0, 187, 0, 0, 187, 187, 0,
	0, 69, 151, 68, 78, 152, 77, 135, 187, 0,
	94, 0, 156, 145, 0, 187, 187, 187, 187, 280,
	0, 0, 0, 0, 0, 0, 0, 153, 0, 0,
	0, 0, 187, 0, 187, 0, 80, 0, 0, 187,
	95, 96, 0, 302, 0, 81, 82, 309, 83, 0,
	84, 85, 318, 0, 0, 0, 0, 0, 439, 0,
	0, 153, 0, 0, 0, 288, 0, 146, 0, 93,
	92, 72, 71, 0, 0, 0, 0, 0, 0, 153,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 187, 0, 69, 49, 68, 78,
	50, 77, 79, 187, 187, 94, 0, 0, 0, 46,
	624, 502, 623, 622, 503, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	153, 80, 62, 0, 67, 95, 96, 0, 0, 107,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 187,
	0, 498, 499, 187, 187, 0, 153, 0, 0, 0,
	75, 0, 76, 0, 93, 92, 72, 71, 0, 0,
	0, 0, 0, 116, 117, 0, 0, 0, 0, 52,
	0, 105, 106, 0, 0, 0, 108, 0, 109, 0,
	110, 118, 0, 0, 0, 0, 0, 187, 104, 113,
	111, 112, 0, 187, 0, 389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 153, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 187, 154,
	0, 0, 187, 0, 0, 0, 187, 0, 0, 188,
	0, 0, 188, 188, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 0, 0, 154, 0,
	0, 0, 0, 188, 188, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 187, 0,
	0, 0, 0, 188, 0, 188, 188, 0, 188, 0,
	188, 188, 188, 188, 0, 188, 187, 0, 188, 0,
	0, 188, 188, 0, 0, 187, 0, 0, 0, 0,
	0, 153, 188, 0, 0, 0, 0, 0, 0, 188,
	188, 188, 188, 281, 69, 185, 68, 78, 186, 77,
	79, 154, 0, 94, 0, 0, 188, 0, 188, 0,
	0, 0, 0, 188, 0, 0, 0, 303, 0, 0,
	0, 310, 0, 0, 0, 0, 319, 0, 0, 80,
	62, 556, 0, 95, 96, 154, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 153, 0, 187,
	0, 107, 0, 154, 188, 0, 0, 0, 75, 0,
	76, 0, 93, 92, 72, 71, 0, 0, 153, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 116, 117, 188, 188, 586,
	0, 0, 0, 105, 106, 0, 0, 0, 108, 0,
	109, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	104, 113, 111, 112, 154, 0, 187, 619, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 49, 68, 78,
	50, 77, 79, 188, 187, 94, 0, 188, 188, 46,
	154, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 34, 67, 95, 96, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 188, 0, 0,
	75, 0, 76, 0, 93, 92, 72, 71, 0, 0,
	0, 154, 154, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 188, 150, 0, 0, 188, 0, 0, 0,
	188, 0, 0, 150, 0, 0, 150, 150, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 150, 0, 0, 0, 0, 150, 150, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 188, 0, 0, 0, 0, 150, 0, 150,
	150, 0, 150, 0, 150, 150, 150, 150, 0, 150,
	188, 0, 150, 0, 0, 150, 150, 0, 0, 188,
	0, 0, 0, 0, 0, 154, 150, 0, 0, 0,
	0, 0, 0, 150, 150, 150, 150, 69, 351, 68,
	78, 186, 77, 79, 0, 150, 94, 0, 0, 0,
	150, 0, 150, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 557, 95, 96, 0, 150,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 154, 335, 188, 0, 0, 286, 150, 150, 0,
	0, 75, 0, 76, 347, 93, 92, 72, 71, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 150, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 151, 68, 78, 152, 77, 135, 0, 150, 94,
	188, 156, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 188, 0,
	0, 401, 150, 0, 150, 80, 0, 0, 0, 95,
	96, 0, 107, 140, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 0, 9, 0, 0,
	0, 0, 0, 0, 288, 0, 146, 0, 93, 92,
	72, 71, 0, 0, 0, 150, 116, 117, 0, 0,
	0, 150, 0, 0, 105, 106, 0, 0, 0, 108,
	0, 109, 0, 110, 0, 150, 150, 0, 0, 0,
	401, 104, 113, 111, 112, 0, 150, 147, 544, 0,
	150, 0, 0, 0, 150, 0, 0, 183, 0, 0,
	192, 196, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 207, 0, 0, 0,
	0, 213, 214, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 150, 0, 0, 0,
	0, 224, 0, 226, 227, 0, 229, 0, 231, 232,
	233, 234, 0, 236, 150, 0, 239, 0, 0, 242,
	244, 0, 0, 150, 0, 0, 0, 0, 0, 150,
	262, 0, 0, 0, 0, 0, 0, 268, 271, 275,
	277, 69, 151, 68, 78, 152, 77, 79, 0, 147,
	94, 0, 156, 0, 289, 0, 291, 0, 0, 0,
	0, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	95, 96, 0, 147, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 150, 335, 150, 0, 0,
	0, 344, 350, 0, 0, 75, 0, 76, 0, 93,
	92, 72, 71, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 364, 0, 0, 365, 0, 69, 185,
	68, 78, 186, 77, 79, 367, 368, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 80, 150, 0, 107, 95, 96, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 394, 150, 335, 0, 350, 402, 286, 207, 0,
	0, 0, 75, 0, 76, 0, 93, 92, 72, 71,
	116, 117, 0, 0, 0, 0, 0, 0, 105, 106,
	0, 53, 0, 108, 0, 109, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 104, 113, 111, 112, 424,
	0, 0, 543, 0, 0, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	207, 0, 0, 0, 441, 0, 0, 0, 0, 0,
	444, 155, 0, 0, 446, 0, 0, 0, 394, 0,
	0, 189, 0, 0, 189, 189, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 464, 0, 0, 0,
	155, 0, 0, 0, 0, 189, 189, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 481,
	482, 0, 0, 0, 0, 189, 0, 189, 189, 0,
	189, 0, 189, 189, 189, 189, 0, 189, 183, 0,
	189, 0, 0, 189, 189, 0, 0, 517, 0, 0,
	0, 0, 0, 207, 189, 0, 0, 0, 0, 0,
	33, 189, 189, 189, 189, 0, 69, 151, 68, 78,
	152, 77, 206, 155, 0, 94, 0, 156, 189, 0,
	189, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 95, 96, 155, 131, 134,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 564,
	184, 567, 0, 184, 184, 155, 189, 0, 0, 0,
	75, 0, 76, 0, 93, 92, 72, 71, 0, 0,
	464, 0, 0, 0, 184, 184, 184, 189, 0, 0,
	189, 0, 0, 181, 0, 0, 0, 0, 0, 189,
	189, 0, 0, 0, 184, 0, 184, 184, 0, 184,
	0, 184, 184, 184, 184, 0, 184, 0, 0, 184,
	0, 0, 184, 184, 0, 0, 155, 0, 606, 0,
	0, 0, 0, 184, 0, 0, 107, 0, 0, 0,
	184, 184, 184, 184, 0, 189, 615, 0, 0, 189,
	189, 0, 155, 0, 0, 0, 0, 184, 0, 184,
	0, 0, 0, 0, 184, 0, 260, 0, 0, 263,
	116, 117, 0, 0, 0, 0, 0, 0, 105, 106,
	284, 0, 0, 108, 0, 109, 0, 110, 0, 0,
	0, 0, 0, 189, 0, 104, 113, 111, 112, 189,
	0, 0, 519, 0, 0, 184, 0, 0, 0, 107,
	0, 0, 0, 155, 155, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 189, 0, 184, 0, 189, 184,
	0, 0, 189, 0, 0, 0, 0, 0, 184, 184,
	189, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	155, 105, 106, 0, 0, 0, 108, 0, 109, 0,
	110, 0, 384, 0, 0, 0, 0, 0, 104, 113,
	111, 112, 0, 189, 189, 407, 0, 0, 0, 0,
	0, 0, 107, 0, 184, 373, 0, 0, 184, 184,
	0, 0, 189, 0, 382, 0, 0, 385, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 0, 0,
	396, 0, 399, 0, 105, 106, 0, 0, 0, 108,
	0, 109, 184, 110, 0, 0, 0, 0, 184, 0,
	0, 104, 113, 111, 112, 0, 107, 0, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	417, 418, 0, 184, 0, 114, 0, 184, 0, 0,
	0, 184, 103, 155, 0, 189, 0, 0, 0, 184,
	116, 117, 0, 0, 0, 0, 0, 0, 105, 106,
	0, 399, 0, 108, 155, 109, 0, 110, 118, 0,
	0, 0, 0, 0, 0, 104, 113, 111, 112, 115,
	0, 0, 184, 184, 0, 0, 0, 0, 0, 460,
	0, 0, 0, 0, 496, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 474, 476, 0, 0, 0,
	184, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 487, 0, 0, 0, 491, 492, 0, 493, 0,
	189, 0, 0, 0, 507, 0, 509, 0, 69, 185,
	68, 78, 186, 77, 363, 0, 0, 94, 0, 0,
	145, 0, 0, 0, 0, 525, 0, 526, 0, 0,
	0, 0, 527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 95, 96, 0,
	0, 361, 81, 82, 184, 83, 107, 84, 85, 0,
	546, 547, 0, 0, 0, 0, 0, 0, 0, 552,
	0, 0, 362, 0, 146, 0, 93, 92, 72, 71,
	0, 560, 103, 562, 0, 0, 0, 0, 0, 0,
	116, 117, 0, 107, 0, 588, 0, 0, 105, 106,
	0, 0, 0, 108, 0, 109, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 104, 113, 111, 112, 115,
	583, 184, 0, 0, 0, 584, 0, 116, 117, 0,
	589, 590, 591, 0, 0, 105, 106, 0, 0, 184,
	108, 0, 109, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 104, 113, 111, 112, 115, 0, 0, 0,
	608, 609, 610, 0, 0, 0, 0, 0, 417, 418,
	69, 49, 68, 78, 50, 77, 79, 0, 0, 94,
	0, 0, 0, 46, 620, 502, 623, 622, 503, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 95,
	96, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 498, 499, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 93, 92,
	72, 71, 69, 49, 68, 78, 50, 77, 79, 0,
	0, 94, 0, 0, 0, 46, 488, 56, 416, 415,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 95, 96, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 327, 328, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	93, 92, 72, 71, 69, 49, 68, 78, 50, 77,
	79, 0, 0, 94, 0, 0, 0, 46, 413, 56,
	416, 415, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 95, 96, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 327,
	328, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 93, 92, 72, 71, 69, 49, 68, 78,
	50, 77, 79, 0, 0, 94, 0, 0, 0, 46,
	0, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 423, 450, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 95, 96, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 327, 328, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 93, 92, 72, 71, 69, 49,
	68, 78, 50, 77, 79, 0, 0, 94, 0, 0,
	0, 46, 549, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 550, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 95, 96, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 327, 328, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 93, 92, 72, 71,
	69, 49, 68, 78, 50, 77, 79, 0, 0, 94,
	0, 0, 0, 46, 0, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 95,
	96, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 6, 7, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 93, 92,
	72, 71, 8, 69, 49, 68, 78, 50, 77, 79,
	0, 0, 94, 0, 0, 0, 46, 626, 502, 0,
	0, 503, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 95, 96, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 498, 499,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 93, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 79, 0, 0, 94, 0, 0, 0, 46, 607,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 95, 96, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 93, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 79, 0, 0, 94, 0, 0, 0,
	46, 595, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 95, 96, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 93, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 79, 0, 0, 94, 0,
	0, 0, 46, 561, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 95, 96,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 93, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 79, 0, 0,
	94, 0, 0, 0, 46, 551, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	95, 96, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 93,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 79,
	0, 0, 94, 0, 0, 0, 46, 0, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 95, 96, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	537, 93, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 79, 0, 0, 94, 0, 0, 0, 46, 530,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 95, 96, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 93, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 79, 0, 0, 94, 0, 0, 0,
	46, 504, 502, 0, 0, 503, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 95, 96, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 498, 499, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 93, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 79, 0, 0, 94, 0,
	0, 0, 46, 497, 502, 0, 0, 503, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 95, 96,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 498, 499, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 93, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 79, 0, 0,
	94, 0, 0, 0, 46, 490, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	95, 96, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 93,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 79,
	0, 0, 94, 0, 0, 0, 46, 470, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 95, 96, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 327, 328,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 93, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 79, 0, 0, 94, 0, 0, 0, 46, 461,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 95, 96, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 93, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 79, 0, 0, 94, 0, 0, 0,
	46, 395, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 95, 96, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 93, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 79, 0, 0, 94, 0,
	0, 0, 46, 386, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 95, 96,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 327, 328, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 93, 92, 72,
	71, 69, 49, 68, 78, 50, 77, 79, 0, 0,
	94, 0, 0, 0, 46, 383, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	95, 96, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 93,
	92, 72, 71, 69, 49, 68, 78, 50, 77, 79,
	0, 0, 94, 0, 0, 0, 46, 0, 502, 0,
	0, 503, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 95, 96, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 498, 499,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 93, 92, 72, 71, 69, 49, 68, 78, 50,
	77, 79, 0, 0, 94, 0, 0, 0, 46, 0,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 95, 96, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 93, 92, 72, 71, 69, 49, 68,
	78, 50, 77, 79, 355, 0, 94, 0, 0, 0,
	46, 0, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 95, 96, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 0, 354, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 93, 92, 72, 71, 69,
	49, 68, 78, 50, 77, 79, 0, 0, 94, 0,
	0, 0, 46, 0, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 95, 96,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 335, 69, 351, 68, 78, 186,
	77, 79, 0, 75, 94, 76, 0, 93, 92, 72,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 95, 96, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 347, 93, 92, 72, 71, 69, 151, 68,
	78, 152, 77, 135, 0, 0, 94, 0, 156, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 95, 96, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 69, 185,
	68, 78, 186, 77, 79, 0, 0, 94, 0, 0,
	0, 288, 0, 146, 0, 93, 92, 72, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 95, 96, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 335, 69, 185, 68, 78, 186, 77,
	79, 0, 75, 94, 76, 0, 93, 92, 72, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 107, 95, 96, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 0, 75, 0,
	76, 0, 93, 92, 72, 71, 116, 117, 0, 0,
	0, 0, 0, 0, 105, 106, 107, 0, 0, 108,
	0, 109, 0, 110, 0, 0, 0, 116, 117, 0,
	366, 104, 113, 111, 112, 105, 106, 438, 0, 0,
	108, 0, 109, 0, 110, 0, 0, 0, 0, 0,
	116, 117, 104, 113, 111, 112, 0, 0, 105, 106,
	0, 0, 0, 108, 0, 109, 0, 110, 0, 0,
	0, 116, 117, 0, 0, 104, 113, 111, 112, 105,
	106, 0, 0, 0, 108, 0, 109, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 104, 113, 111, 112,
}
var RubyPact = []int{

	-35, 2945, -1000, -1000, -1000, 8, -1000, -1000, -1000, 2302,
	-1000, -1000, -1000, -1000, 213, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 191, 188, -1000, 70, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 270, 448, 436, 214,
	60, 91, 236, 264, 189, 194, 1151, 1151, -1000, 4549,
	1151, 1151, 4549, 4549, 336, 258, -1000, 402, -1000, -1000,
	289, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1961, -1000,
	17, 1151, 1151, 4549, 4549, 4549, -1000, -1000, -1000, -1000,
	-1000, -1000, 35, 453, -1000, -1000, -1000, -1000, -1000, -1000,
	1151, 1151, 1151, 4549, 463, 4549, 4549, -1000, 4549, 1151,
	4549, 4549, 4549, 4549, 1151, 4549, -1000, -1000, 4549, 1151,
	1151, 4549, 4549, 1151, 1151, 1151, 1151, 461, 126, 29,
	358, 195, 4549, 314, -1000, -1000, 17, -1000, 67, 4549,
	1019, 4549, 4549, 26, 377, 22, -1000, 4632, -1000, -1000,
	47, 1445, 43, 27, 187, 185, 4549, -1000, 4549, -1000,
	1151, 1151, 1151, 4549, 1151, 1151, 1151, 24, 1151, 1151,
	1151, 23, 1151, 1151, 1151, 1151, 21, 460, 459, 345,
	250, 4170, 341, 4632, -1000, 4442, 62, 42, -1000, -1000,
	286, 272, 4632, 155, 341, -1000, 2509, 1151, 1151, 1151,
	1151, 387, -1000, 1646, 4370, 342, -1000, 4632, 4242, -1000,
	-1000, 345, 345, 4632, 4632, 4632, -1000, -1000, 408, -1000,
	-1000, 345, 345, 345, 4632, 2423, 4632, 4632, 4493, 4632,
	345, 4632, 4632, 4632, 4632, 345, 4588, 4493, 4493, 4632,
	345, 345, 4632, 52, 2238, 345, 345, 345, 345, 17,
	-1000, 457, 376, 311, -1000, 170, 454, 449, 447, -1000,
	4026, 436, 4632, 3954, 1646, -1000, -1000, -1000, 835, -14,
	36, 2472, -1000, -1000, -1000, 2509, -1000, 2509, -1000, -1000,
	-1000, -1000, 431, 4549, 3882, -1000, 429, 1332, 4549, 4632,
	1646, 484, -20, 4, 345, 345, 345, 2165, 345, 345,
	345, -1000, -1000, -1000, 427, 345, 345, 345, -1000, -1000,
	-1000, 425, 345, 345, 345, 189, 345, -1000, -1000, -1000,
	413, 368, 25, -3, 2729, -1000, -1000, -1000, -1000, 345,
	352, 4549, -1000, -1000, 155, -1000, 297, 4549, 345, 345,
	345, 345, -1000, 366, 4632, -1000, -1000, -1000, 363, 347,
	4653, 686, 1646, 345, -1000, -1000, 1733, -1000, -1000, -1000,
	17, 1151, 4549, -1000, 4632, 4632, 4549, 4632, 4632, -1000,
	4549, 166, -1000, 2801, 358, 200, 317, 393, 4549, -1000,
	-1000, 358, 2801, -1000, -1000, 3810, -1000, 323, 1646, 139,
	-1000, -1000, -1000, 135, 4632, -1000, 3738, 64, -1000, 4170,
	-1000, 47, 287, 342, 132, -1000, -1000, 102, -1000, -1000,
	-1000, 4549, 4549, -1000, 428, 1151, -1000, 2657, 3666, -1000,
	-1000, -1000, -1000, 397, 4632, 3594, 3522, 281, -1000, -1000,
	4549, 341, -15, -1000, -8, -1000, -12, -1000, 1151, 4549,
	342, 4632, -1000, 345, 2092, 1646, 4632, 1151, 279, 222,
	-1000, -1000, -1000, -1000, -1000, -1000, 4632, -1000, 278, 222,
	3450, -1000, 145, -1000, 4632, -1000, -1000, 1151, 409, -1000,
	-1000, -1000, 343, -13, 3378, -21, 4170, 98, 144, -1000,
	1151, 1772, 1488, -1000, 1151, -1000, 345, 4170, -1000, 422,
	-1000, 2873, 3306, 4170, 324, 40, -1000, -1000, -1000, -1000,
	345, -1000, 1151, 1151, -1000, -1000, -1000, 3234, 341, 4170,
	-1000, 1646, -1000, 4493, -1000, 130, 345, 4632, 143, 82,
	323, 345, -1000, 277, -1000, 4170, 2801, 2801, -1000, 261,
	-1000, 17, 1646, 345, -6, -1000, -1000, -1000, -1000, -39,
	-1000, 4314, 345, 302, -1000, 345, 4170, 4170, -1000, -1000,
	-1000, -1000, 4170, 31, 436, -1000, -1000, -1000, 259, 190,
	3162, -1000, 4170, 75, 4632, -1000, -1000, 4609, 61, -1000,
	1151, 128, -1000, 246, 222, 242, 222, -1000, -1000, -1000,
	4549, -1000, 345, 4170, 3090, -1000, -1000, -1000, -1000, 4170,
	4170, 4170, -1000, -1000, -1000, -1000, 75, 1151, 4549, 345,
	-1000, -1000, 241, -1000, 229, 122, 1077, -1000, 4170, 4170,
	4170, 2585, 791, 3018, 405, 357, -1000, -1000, -1000, -1000,
	-1000, 356, 1151, -1000, -1000, 326, -1000, -1000, -1000, 75,
	-1000, -1000, 1151, -1000, 345, 4098, -1000, 75, 345, 4098,
	4098, 4098,
}
var RubyPgo = []int{

	0, 544, 0, 191, 543, 19, 6, 536, 534, 527,
	1821, 526, 4, 43, 525, 8, 524, 40, 521, 519,
	518, 1507, 517, 879, 1193, 515, 514, 512, 511, 510,
	509, 508, 507, 506, 505, 11, 565, 502, 501, 1960,
	9, 38, 499, 498, 23, 497, 496, 7, 20, 495,
	494, 493, 492, 491, 490, 489, 487, 484, 483, 1994,
	482, 5, 14, 22, 12, 480, 16, 479, 24, 1,
	478, 10, 476, 3, 473, 18, 15, 13, 471, 442,
	411, 36,
}
var RubyR1 = []int{

	0, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 80, 80, 81, 81, 59, 59, 59, 59, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 32, 32, 32,
	32, 32, 32, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 18, 18, 44, 16, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 25, 62, 62, 62, 62, 73, 73,
	71, 71, 71, 71, 71, 71, 71, 15, 75, 75,
	69, 69, 26, 26, 26, 26, 26, 26, 26, 26,
	66, 66, 66, 77, 77, 77, 35, 35, 35, 35,
	33, 33, 34, 37, 39, 39, 39, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 19, 19, 19, 76,
	76, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 10, 10, 36, 36, 23,
	23, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 8, 3, 1,
	79, 79, 79, 79, 79, 79, 79, 4, 4, 4,
	67, 67, 74, 74, 74, 6, 6, 6, 6, 6,
	6, 63, 72, 72, 72, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 64, 64, 64, 64,
	60, 60, 60, 9, 20, 20, 20, 20, 12, 12,
	12, 12, 12, 12, 12, 12, 78, 78, 70, 70,
	61, 61, 27, 27, 28, 29, 29, 29, 31, 31,
	31, 30, 30, 30, 13, 45, 45, 45, 68, 68,
	68, 68, 68, 46, 46, 46, 46, 46, 47, 47,
	47, 47, 43, 42, 11, 41, 41, 41, 41, 40,
	40, 5, 7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 6, 7,
	1, 2, 6, 6, 2, 3, 2, 3, 4, 5,
	4, 3, 4, 5, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 6, 7,
	6, 6, 8, 4, 5, 8, 1, 4, 1, 3,
	0, 1, 1, 1, 4, 4, 4, 2, 1, 3,
	0, 2, 6, 7, 8, 8, 9, 9, 6, 7,
	1, 3, 3, 0, 1, 3, 1, 2, 3, 2,
	4, 6, 5, 4, 1, 2, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 9,
	6, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 4, 3, 3, 3, 4, 3,
	3, 3, 4, 3, 3, 3, 4, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 5, 1, 1,
	0, 1, 1, 1, 4, 4, 4, 3, 5, 5,
	3, 7, 3, 7, 8, 3, 4, 5, 5, 5,
	6, 3, 0, 1, 3, 4, 5, 3, 3, 3,
	3, 3, 5, 6, 5, 3, 4, 3, 3, 2,
	0, 2, 2, 3, 4, 6, 8, 6, 2, 3,
	5, 5, 5, 4, 4, 4, 1, 3, 0, 2,
	1, 2, 2, 1, 1, 2, 2, 1, 1, 3,
	3, 1, 3, 3, 5, 5, 5, 3, 0, 2,
	2, 2, 2, 5, 6, 5, 6, 5, 4, 3,
	3, 2, 4, 4, 2, 5, 7, 4, 6, 4,
	5, 3, 3,
}
var RubyChk = []int{

	-1000, -65, 60, 61, 77, -2, 60, 61, 77, -21,
	-26, -33, -37, -34, -17, -19, -38, -14, -20, -27,
	-45, -41, -29, -30, -31, -44, -5, -28, -13, -7,
	-22, -8, -4, -39, -24, -25, -9, -11, -49, -50,
	-51, -52, -16, -43, -42, -32, 18, 24, 25, 6,
	9, -36, -23, -10, -48, -76, 20, 23, 29, 37,
	27, 28, 41, 36, 32, 33, 35, 43, 7, 5,
	-18, 76, 75, -3, -1, 69, 71, 10, 8, 11,
	40, 49, 50, 52, 54, 55, -53, -54, -55, -56,
	-57, -58, 74, 73, 14, 44, 45, 61, 60, 77,
	20, 23, 27, 30, 63, 46, 47, 4, 51, 53,
	55, 65, 66, 64, 23, 67, 38, 39, 56, 23,
	48, 46, 69, 57, 58, 20, 23, 63, 6, -3,
	4, -39, 4, 9, -39, 11, -62, -6, -71, 69,
	48, 57, 58, 13, -75, 17, 71, -21, -17, -15,
	-24, 6, 9, -36, -23, -10, 16, 11, 69, 10,
	48, 57, 58, 69, 48, 57, 58, 13, 48, 57,
	58, 13, 48, 57, 58, 48, 13, 48, 13, -2,
	-2, -59, -73, -21, -39, 6, 9, -36, -23, -10,
	-2, -2, -21, -81, -73, -13, -21, 20, 23, 20,
	23, 7, 14, -81, -81, -71, 11, -21, -60, -6,
	71, -2, -2, -21, -21, -21, 6, 9, 74, 6,
	9, -2, -2, -2, -21, 6, -21, -21, -81, -21,
	-2, -21, -21, -21, -21, -2, -21, -81, -81, -21,
	-2, -2, -21, -75, -21, -2, -2, -2, -2, 6,
	-66, 63, -77, 11, -35, 6, 55, 16, 63, -66,
	-59, 46, -21, -59, -81, -6, -6, 13, -21, -5,
	-75, -21, -44, -13, -41, -21, -13, -21, -13, 6,
	-36, -23, 55, 13, -59, -63, 64, -81, 69, -21,
	-81, -21, -5, -75, -2, -2, -2, -21, -2, -2,
	-2, 6, -36, -23, 55, -2, -2, -2, 6, -36,
	-23, 55, -2, -2, -2, -48, -2, 6, -36, -23,
	55, -76, 6, 6, -59, 60, 61, 60, 61, -2,
	-70, 13, 60, 60, -81, 60, -40, 42, -2, -2,
	-2, -2, 7, -79, -21, -17, -15, 72, -67, -74,
	-21, 6, -81, -2, 61, 12, -81, 6, 9, -6,
	-62, 48, 69, 11, -21, -21, 62, -21, -21, 70,
	13, 70, -6, -59, 6, 13, -77, 55, 48, 6,
	6, 6, -59, 19, -39, -59, 19, -71, -81, 70,
	70, 70, 6, -81, -21, 19, -59, -72, 6, -59,
	-63, -24, -21, -71, 70, 70, 70, 70, 6, 6,
	6, 69, 69, 19, -64, 22, 21, -59, -59, 19,
	21, 31, -12, 30, -21, -68, -68, -40, 19, 21,
	42, -73, -81, 13, -81, 13, -81, 13, 4, 62,
	-71, -21, -6, -2, -21, -81, -21, 48, -69, -61,
	31, -12, -66, -35, 12, 12, -21, -66, -69, -61,
	-59, 19, -81, 13, -21, -17, -15, 48, 13, -15,
	19, 64, 13, -81, -59, -81, -59, 70, -81, 48,
	48, -21, -21, 19, 22, 21, -2, -59, 19, -64,
	19, -59, -59, -59, -78, 4, -39, 19, 60, 61,
	-2, -46, 20, 23, 19, 19, 21, -59, -73, -59,
	70, -81, 72, -81, 72, -81, -2, -21, -81, 70,
	-71, -2, 19, -69, -12, -59, -59, -59, 19, -69,
	19, 12, -81, -2, 6, 6, 72, 72, 72, -81,
	12, -81, -2, 70, 70, -2, -59, -59, 19, 19,
	31, 19, -59, 4, 13, 6, -36, -23, -2, -2,
	-59, 19, -59, -81, -21, -17, -15, -21, 6, 12,
	48, -81, 19, -69, -61, -69, -61, 19, -6, -15,
	69, 72, -2, -59, -59, 6, -36, -23, -39, -59,
	-59, -59, 60, 60, 61, 19, -81, 4, 62, -2,
	12, 19, -69, 19, -69, -81, -21, 19, -59, -59,
	-59, -68, -68, -68, -2, -21, 19, 19, 12, 70,
	19, -47, 22, 21, 19, -47, 19, -80, 13, -81,
	13, 19, 22, 21, -2, -68, 19, -81, -2, -68,
	-68, -68,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 0, 0, 0, 22,
	23, 24, 25, 26, 0, 0, 0, 0, 15, 283,
	0, 0, 13, 287, 291, 288, 284, 0, 19, 20,
	21, 27, 28, 29, 30, 13, 13, 156, 80, 260,
	0, 0, 0, 0, 0, 0, 47, 48, 49, 50,
	51, 52, 0, 0, 74, 218, 219, 5, 6, 7,
	0, 0, 0, 0, 0, 0, 0, 13, 0, 0,
	0, 0, 0, 0, 0, 0, 13, 13, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 0,
	143, 15, 0, 154, 15, -2, 84, 86, 94, 13,
	0, 0, 0, 0, 116, 15, 13, 121, 122, 123,
	35, 22, 23, 24, 25, 26, 0, 13, 0, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 15,
	0, 278, 282, 118, 34, 22, 23, 24, 25, 26,
	0, 0, 13, 0, 285, 286, 118, 0, 0, 0,
	0, 0, 75, 220, 0, 81, -2, 121, 0, 314,
	13, 207, 208, 209, 210, 77, 187, 188, 0, 185,
	186, 247, 255, 297, 76, 87, 96, 98, 0, 211,
	212, 213, 214, 215, 216, 249, 0, 0, 0, 321,
	251, 165, 97, 0, 128, 177, 184, 248, 250, 91,
	15, 0, 140, 143, 144, 146, 0, 0, 0, 15,
	0, 0, 15, 0, 120, 85, 95, 13, 128, 0,
	0, 157, 158, 159, 160, 171, 172, 178, 179, 191,
	192, 193, 0, 13, 0, 15, 242, 15, 13, 127,
	120, 128, 0, 0, 161, 173, 180, 0, 162, 174,
	181, 195, 196, 197, 0, 163, 175, 182, 199, 200,
	201, 0, 164, 176, 183, 166, 167, 203, 204, 205,
	0, 168, 0, 0, 0, 15, 15, 16, 17, 18,
	0, 0, 298, 298, 0, 14, 0, 0, 292, 293,
	289, 290, 322, 13, 221, 222, 223, 227, 13, 13,
	0, -2, 120, 261, 262, 263, 15, 189, 190, 88,
	90, 0, 13, -2, 128, 113, 0, 312, 313, 106,
	0, 107, 92, 130, 143, 0, 0, 0, 0, 147,
	149, 143, 130, 150, 15, 0, 153, 13, 0, 99,
	102, 104, 194, 0, 129, 235, 0, 0, 243, 13,
	15, -2, 128, 13, 100, 103, 105, 101, 198, 202,
	206, 0, 0, 245, 0, 0, 15, 0, 0, 264,
	15, 15, 279, 15, 119, 0, 0, 0, 317, 15,
	0, 15, 0, 13, 0, 13, 0, 13, 13, 0,
	13, 0, 89, 93, 0, 120, 294, 0, 0, 130,
	15, 280, 15, 145, 141, 142, 148, 15, 0, 130,
	0, 152, 0, 13, 124, 125, 126, 0, 0, 117,
	236, 241, 0, 0, 0, 0, 13, 99, 0, 13,
	0, 0, 0, 246, 0, 15, 15, 259, 252, 0,
	254, 0, 0, 268, 15, 0, 276, 295, 299, 300,
	301, 302, 0, 0, 296, 315, 15, 0, 15, 13,
	217, 0, 228, 0, 229, 0, 230, 232, 0, 0,
	13, 111, 132, 0, 281, 131, 130, 130, 138, 0,
	151, 78, 0, 108, 0, 244, 237, 238, 239, 0,
	83, 0, 110, 0, 170, 15, 257, 258, 253, 265,
	15, 267, 269, 0, 0, 15, 15, 15, 15, 0,
	0, 318, 13, 319, 224, 225, 226, 0, 0, 82,
	0, 0, 133, 0, 130, 0, 130, 139, 79, -2,
	0, 240, 109, 256, 0, 15, 15, 15, 277, 273,
	274, 275, 298, 15, 15, 316, 320, 13, 0, 112,
	114, 134, 0, 135, 0, 0, 0, 266, 270, 271,
	272, 0, 0, 0, 11, 13, 136, 137, 115, 169,
	303, 0, 0, 298, 305, 0, 307, 231, 12, 233,
	13, 304, 0, 298, 298, 311, 306, 234, 298, 309,
	310, 308,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:225
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:227
		{
		}
	case 3:
		//line parser.y:229
		{
		}
	case 4:
		//line parser.y:231
		{
		}
	case 5:
		//line parser.y:233
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:235
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:237
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:243
		{
		}
	case 11:
		//line parser.y:245
		{
		}
	case 12:
		//line parser.y:246
		{
		}
	case 13:
		//line parser.y:248
		{
		}
	case 14:
		//line parser.y:249
		{
		}
	case 15:
		//line parser.y:252
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:254
		{
		}
	case 17:
		//line parser.y:256
		{
		}
	case 18:
		//line parser.y:258
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		//line parser.y:269
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 75:
		//line parser.y:271
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 76:
		//line parser.y:279
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:282
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 78:
		//line parser.y:285
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:294
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:304
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:310
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 82:
		//line parser.y:318
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:327
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:336
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:345
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:355
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:365
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:374
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:385
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:396
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:406
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:416
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:427
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:440
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:449
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:459
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:469
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:479
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:491
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:501
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:511
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:521
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:531
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:541
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:551
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:561
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:571
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:583
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 109:
		//line parser.y:593
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 110:
		//line parser.y:603
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 111:
		//line parser.y:613
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 112:
		//line parser.y:623
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 113:
		//line parser.y:638
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 114:
		//line parser.y:650
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 115:
		//line parser.y:652
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 116:
		//line parser.y:654
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 117:
		//line parser.y:656
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:659
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:661
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:663
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 121:
		//line parser.y:665
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:667
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:669
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:671
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:673
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:675
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:678
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 128:
		//line parser.y:688
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:690
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:693
		{
			RubyVAL.genericSlice = nil
		}
	case 131:
		//line parser.y:695
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 132:
		//line parser.y:698
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 133:
		//line parser.y:709
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 134:
		//line parser.y:721
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 135:
		//line parser.y:733
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 136:
		//line parser.y:745
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 137:
		//line parser.y:758
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 138:
		//line parser.y:771
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 139:
		//line parser.y:782
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 140:
		//line parser.y:796
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 141:
		//line parser.y:798
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 142:
		//line parser.y:800
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 143:
		//line parser.y:802
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 144:
		//line parser.y:804
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 145:
		//line parser.y:806
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 146:
		//line parser.y:809
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 147:
		//line parser.y:811
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 148:
		//line parser.y:813
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 149:
		//line parser.y:815
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 150:
		//line parser.y:819
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 151:
		//line parser.y:829
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 152:
		//line parser.y:841
		{
			name := RubyS[Rubypt-3].genericValue.(ast.BareReference).Name
			if name != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + name + ")")
			}

			class := ast.Eigenclass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 153:
		//line parser.y:856
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 154:
		//line parser.y:867
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 155:
		//line parser.y:876
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 156:
		//line parser.y:895
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 157:
		//line parser.y:913
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 158:
		//line parser.y:922
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 159:
		//line parser.y:928
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 160:
		//line parser.y:934
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 161:
		//line parser.y:936
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 162:
		//line parser.y:945
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 163:
		//line parser.y:954
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 164:
		//line parser.y:963
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 165:
		//line parser.y:972
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 166:
		//line parser.y:975
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:984
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:993
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 169:
		//line parser.y:1003
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 170:
		//line parser.y:1018
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 171:
		//line parser.y:1024
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1033
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1039
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1048
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1057
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1066
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1075
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 178:
		//line parser.y:1084
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 179:
		//line parser.y:1093
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1099
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 181:
		//line parser.y:1108
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1117
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 183:
		//line parser.y:1126
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 184:
		//line parser.y:1135
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 185:
		//line parser.y:1142
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 186:
		//line parser.y:1144
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
		}
	case 187:
		//line parser.y:1147
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 188:
		//line parser.y:1153
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 189:
		//line parser.y:1160
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 190:
		//line parser.y:1166
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 191:
		//line parser.y:1173
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 192:
		//line parser.y:1175
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 193:
		//line parser.y:1177
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 194:
		//line parser.y:1179
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 195:
		//line parser.y:1182
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 196:
		//line parser.y:1184
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1186
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1188
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1191
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1193
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1195
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1197
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1200
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1202
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1204
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1206
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 207:
		//line parser.y:1210
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 208:
		//line parser.y:1212
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 209:
		//line parser.y:1214
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 210:
		//line parser.y:1216
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 211:
		//line parser.y:1219
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 212:
		//line parser.y:1230
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 213:
		//line parser.y:1241
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 214:
		//line parser.y:1252
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 215:
		//line parser.y:1263
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 216:
		//line parser.y:1274
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 217:
		//line parser.y:1285
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 218:
		//line parser.y:1287
		{
		}
	case 219:
		//line parser.y:1288
		{
		}
	case 220:
		//line parser.y:1290
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 221:
		//line parser.y:1292
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 222:
		//line parser.y:1294
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 223:
		//line parser.y:1296
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1298
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1300
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1302
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 227:
		//line parser.y:1305
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 228:
		//line parser.y:1307
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 229:
		//line parser.y:1315
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 230:
		//line parser.y:1324
		{
			name := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 231:
		//line parser.y:1332
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 232:
		//line parser.y:1341
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 233:
		//line parser.y:1348
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 234:
		//line parser.y:1355
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 235:
		//line parser.y:1363
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 236:
		//line parser.y:1368
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 237:
		//line parser.y:1373
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 238:
		//line parser.y:1378
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 239:
		//line parser.y:1383
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 240:
		//line parser.y:1388
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 241:
		//line parser.y:1397
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 242:
		//line parser.y:1399
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 243:
		//line parser.y:1401
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 244:
		//line parser.y:1403
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 245:
		//line parser.y:1406
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 246:
		//line parser.y:1415
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 247:
		//line parser.y:1425
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1434
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1443
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1452
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 251:
		//line parser.y:1461
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1470
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1479
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1489
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1498
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 256:
		//line parser.y:1509
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 257:
		//line parser.y:1518
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 258:
		//line parser.y:1526
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 259:
		//line parser.y:1534
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 260:
		//line parser.y:1542
		{
		}
	case 261:
		//line parser.y:1543
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 262:
		//line parser.y:1544
		{
		}
	case 263:
		//line parser.y:1547
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 264:
		//line parser.y:1550
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 265:
		//line parser.y:1559
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 266:
		//line parser.y:1569
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 267:
		//line parser.y:1579
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 268:
		//line parser.y:1589
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 269:
		//line parser.y:1591
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 270:
		//line parser.y:1605
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 271:
		//line parser.y:1626
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 272:
		//line parser.y:1647
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 273:
		//line parser.y:1668
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 274:
		//line parser.y:1683
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 275:
		//line parser.y:1698
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 276:
		//line parser.y:1715
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 277:
		//line parser.y:1717
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 278:
		//line parser.y:1720
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 279:
		//line parser.y:1722
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 280:
		//line parser.y:1725
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 281:
		//line parser.y:1727
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 282:
		//line parser.y:1730
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 283:
		//line parser.y:1737
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 284:
		//line parser.y:1739
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 285:
		//line parser.y:1742
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 286:
		//line parser.y:1750
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 287:
		//line parser.y:1752
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 288:
		//line parser.y:1756
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 289:
		//line parser.y:1758
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 290:
		//line parser.y:1760
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 291:
		//line parser.y:1764
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 292:
		//line parser.y:1766
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 293:
		//line parser.y:1768
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 294:
		//line parser.y:1772
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 295:
		//line parser.y:1783
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 296:
		//line parser.y:1789
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 297:
		//line parser.y:1796
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 298:
		//line parser.y:1803
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 299:
		//line parser.y:1805
		{
		}
	case 300:
		//line parser.y:1807
		{
		}
	case 301:
		//line parser.y:1809
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 302:
		//line parser.y:1811
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 303:
		//line parser.y:1814
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 304:
		//line parser.y:1822
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 305:
		//line parser.y:1831
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 306:
		//line parser.y:1839
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 307:
		//line parser.y:1848
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 308:
		//line parser.y:1857
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 309:
		//line parser.y:1865
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 310:
		//line parser.y:1873
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 311:
		//line parser.y:1881
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 312:
		//line parser.y:1890
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 313:
		//line parser.y:1893
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 314:
		//line parser.y:1896
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 315:
		//line parser.y:1903
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 316:
		//line parser.y:1909
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 317:
		//line parser.y:1915
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 318:
		//line parser.y:1921
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 319:
		//line parser.y:1928
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 320:
		//line parser.y:1930
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 321:
		//line parser.y:1933
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 322:
		//line parser.y:1940
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	}
	goto Rubystack /* stack new state and value */
}

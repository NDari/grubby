//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	symbolSlice     []ast.Symbol
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CAPITAL_REF = 57351
const NAMESPACED_CAPITAL_REF = 57352
const LPAREN = 57353
const RPAREN = 57354
const COMMA = 57355
const NamespacedModule = 57356
const ProcArg = 57357
const DO = 57358
const DEF = 57359
const END = 57360
const IF = 57361
const ELSE = 57362
const ELSIF = 57363
const UNLESS = 57364
const CLASS = 57365
const MODULE = 57366
const FOR = 57367
const WHILE = 57368
const UNTIL = 57369
const BEGIN = 57370
const RESCUE = 57371
const ENSURE = 57372
const BREAK = 57373
const NEXT = 57374
const REDO = 57375
const RETRY = 57376
const RETURN = 57377
const YIELD = 57378
const AND = 57379
const OR = 57380
const LAMBDA = 57381
const CASE = 57382
const WHEN = 57383
const ALIAS = 57384
const SELF = 57385
const NIL = 57386
const PUBLIC = 57387
const PROTECTED = 57388
const PRIVATE = 57389
const LESSTHAN = 57390
const GREATERTHAN = 57391
const EQUALTO = 57392
const BANG = 57393
const COMPLEMENT = 57394
const BINARY_PLUS = 57395
const UNARY_PLUS = 57396
const BINARY_MINUS = 57397
const UNARY_MINUS = 57398
const STAR = 57399
const RANGE = 57400
const OR_EQUALS = 57401
const WHITESPACE = 57402
const NEWLINE = 57403
const SEMICOLON = 57404
const COLON = 57405
const DOT = 57406
const PIPE = 57407
const SLASH = 57408
const AMPERSAND = 57409
const QUESTIONMARK = 57410
const CARET = 57411
const LBRACKET = 57412
const RBRACKET = 57413
const LBRACE = 57414
const RBRACE = 57415
const DOLLARSIGN = 57416
const ATSIGN = 57417
const FILE_CONST_REF = 57418
const LINE_CONST_REF = 57419
const EOF = 57420

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"NAMESPACED_CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"PUBLIC",
	"PROTECTED",
	"PRIVATE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1761

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 137,
	12, 118,
	13, 118,
	-2, 245,
	-1, 338,
	4, 21,
	37, 21,
	38, 21,
	48, 21,
	49, 21,
	53, 21,
	55, 21,
	64, 21,
	65, 21,
	66, 21,
	67, 21,
	-2, 118,
	-1, 349,
	12, 118,
	13, 118,
	-2, 245,
	-1, 387,
	4, 34,
	37, 34,
	38, 34,
	49, 34,
	53, 34,
	55, 34,
	61, 13,
	64, 34,
	65, 34,
	66, 34,
	67, 34,
	73, 13,
	-2, 15,
}

const RubyNprod = 309
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4301

var RubyAct = []int{

	315, 435, 5, 179, 569, 36, 400, 243, 434, 139,
	247, 140, 322, 58, 245, 145, 28, 138, 111, 26,
	386, 2, 3, 261, 150, 303, 146, 211, 196, 391,
	212, 321, 104, 25, 200, 105, 124, 321, 4, 106,
	321, 296, 321, 545, 160, 158, 290, 321, 270, 513,
	491, 120, 121, 146, 511, 410, 133, 136, 125, 495,
	176, 177, 109, 110, 186, 187, 376, 112, 356, 113,
	190, 114, 122, 356, 102, 101, 306, 321, 108, 117,
	115, 116, 205, 127, 161, 460, 128, 206, 207, 493,
	544, 103, 299, 162, 97, 204, 213, 293, 164, 273,
	189, 198, 199, 398, 159, 216, 217, 218, 397, 205,
	97, 54, 124, 163, 225, 97, 201, 97, 163, 230,
	557, 277, 356, 126, 235, 251, 392, 239, 240, 241,
	129, 377, 321, 248, 125, 455, 160, 158, 246, 157,
	252, 237, 250, 160, 158, 170, 223, 450, 259, 257,
	260, 538, 166, 462, 171, 232, 233, 264, 461, 267,
	269, 263, 285, 286, 154, 288, 289, 276, 294, 295,
	281, 300, 301, 302, 183, 284, 266, 183, 183, 283,
	355, 451, 278, 161, 249, 321, 432, 454, 307, 164,
	323, 244, 324, 325, 326, 327, 159, 363, 165, 254,
	183, 183, 183, 159, 340, 104, 321, 248, 105, 163,
	321, 170, 106, 175, 339, 167, 250, 78, 450, 183,
	173, 183, 183, 320, 183, 333, 183, 183, 183, 183,
	346, 183, 104, 559, 183, 105, 183, 183, 347, 106,
	343, 123, 169, 132, 408, 130, 183, 552, 553, 154,
	174, 451, 358, 183, 183, 183, 271, 172, 249, 104,
	369, 362, 105, 317, 154, 104, 106, 131, 105, 183,
	154, 183, 106, 104, 551, 183, 105, 111, 291, 167,
	106, 297, 99, 558, 423, 304, 505, 405, 168, 406,
	421, 525, 501, 154, 408, 264, 374, 408, 408, 263,
	526, 319, 107, 408, 499, 373, 419, 311, 312, 379,
	120, 121, 154, 183, 154, 318, 193, 104, 407, 194,
	105, 109, 110, 486, 106, 487, 112, 416, 113, 413,
	114, 414, 183, 412, 175, 183, 361, 108, 117, 115,
	116, 119, 248, 329, 183, 183, 415, 246, 274, 429,
	576, 250, 415, 438, 361, 543, 104, 428, 202, 105,
	160, 430, 417, 106, 584, 418, 581, 580, 436, 328,
	420, 422, 437, 197, 440, 411, 442, 579, 195, 581,
	580, 522, 445, 467, 466, 465, 183, 467, 466, 191,
	183, 183, 192, 249, 426, 261, 389, 261, 548, 449,
	372, 373, 468, 527, 452, 135, 82, 510, 446, 509,
	471, 481, 481, 344, 477, 396, 345, 395, 476, 489,
	456, 134, 458, 135, 82, 497, 135, 82, 214, 183,
	394, 215, 384, 500, 378, 183, 502, 366, 365, 364,
	360, 309, 308, 242, 502, 220, 575, 330, 475, 336,
	154, 508, 383, 316, 492, 183, 494, 335, 496, 223,
	1, 154, 203, 516, 183, 96, 95, 519, 183, 94,
	93, 507, 92, 91, 44, 183, 43, 42, 41, 57,
	482, 20, 46, 47, 528, 529, 154, 21, 16, 12,
	111, 13, 11, 48, 514, 24, 515, 23, 22, 578,
	27, 14, 19, 10, 38, 33, 55, 18, 15, 183,
	183, 45, 540, 542, 32, 17, 546, 536, 31, 30,
	40, 39, 34, 120, 121, 533, 29, 183, 35, 79,
	0, 0, 549, 0, 109, 110, 0, 183, 0, 112,
	0, 113, 502, 114, 502, 0, 0, 0, 0, 0,
	108, 117, 115, 116, 149, 0, 0, 565, 154, 155,
	0, 0, 0, 481, 481, 481, 0, 555, 573, 184,
	0, 582, 184, 184, 0, 0, 0, 0, 0, 0,
	0, 586, 0, 0, 481, 0, 0, 0, 481, 481,
	481, 223, 0, 0, 0, 184, 184, 184, 0, 0,
	0, 577, 0, 0, 154, 0, 183, 562, 563, 564,
	0, 0, 0, 585, 184, 0, 184, 184, 0, 184,
	0, 184, 184, 184, 184, 0, 184, 583, 0, 184,
	0, 184, 184, 0, 37, 0, 0, 587, 588, 149,
	0, 184, 589, 0, 155, 0, 0, 0, 184, 184,
	184, 272, 0, 0, 149, 0, 183, 0, 0, 155,
	149, 0, 0, 0, 184, 155, 184, 0, 0, 183,
	184, 0, 0, 292, 0, 0, 298, 0, 0, 0,
	305, 0, 0, 149, 0, 0, 0, 151, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	151, 151, 332, 0, 149, 0, 0, 155, 184, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 151, 151, 0, 184, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	184, 0, 151, 0, 151, 151, 0, 151, 0, 151,
	151, 151, 151, 0, 151, 0, 0, 151, 0, 151,
	151, 0, 75, 181, 74, 83, 182, 82, 84, 151,
	0, 0, 151, 0, 0, 0, 151, 151, 151, 0,
	0, 184, 0, 0, 0, 184, 184, 151, 0, 0,
	0, 0, 151, 151, 151, 0, 85, 0, 151, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 89, 90, 0, 151, 0, 321, 0,
	0, 0, 277, 0, 184, 0, 0, 80, 0, 81,
	184, 98, 97, 77, 76, 151, 151, 151, 0, 0,
	149, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	184, 149, 0, 0, 0, 151, 155, 0, 151, 184,
	0, 0, 0, 184, 0, 0, 0, 151, 151, 0,
	184, 0, 0, 0, 0, 0, 448, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 338, 74, 83, 182,
	82, 84, 0, 0, 184, 184, 0, 0, 0, 151,
	0, 0, 0, 387, 151, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 184, 99, 100, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 89, 90, 448, 0,
	0, 321, 151, 155, 0, 277, 0, 9, 151, 0,
	80, 0, 81, 334, 98, 97, 77, 76, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 387, 0,
	0, 0, 0, 0, 151, 0, 0, 151, 0, 0,
	0, 151, 111, 0, 535, 0, 0, 0, 151, 155,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 151,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 188, 180, 120, 121, 0, 0, 0,
	0, 0, 151, 151, 0, 0, 109, 110, 0, 0,
	0, 112, 0, 113, 0, 114, 208, 209, 210, 0,
	151, 184, 108, 117, 115, 116, 0, 0, 0, 567,
	151, 0, 0, 0, 184, 219, 0, 221, 222, 0,
	224, 0, 226, 227, 228, 229, 0, 231, 0, 0,
	234, 151, 236, 238, 0, 56, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 258, 0, 0, 0, 262,
	265, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 280, 258, 282, 310, 0,
	0, 287, 0, 0, 0, 0, 0, 151, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 185, 185, 0, 0, 0, 0, 0, 331, 337,
	258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 185, 185, 0, 350, 151,
	178, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 354, 151, 185, 0, 185, 185, 111, 185, 0,
	185, 185, 185, 185, 0, 185, 0, 0, 185, 0,
	185, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 156, 0, 0, 0, 185, 185, 185,
	120, 121, 380, 0, 0, 0, 337, 388, 156, 0,
	0, 109, 110, 185, 156, 185, 112, 0, 113, 185,
	114, 122, 253, 0, 0, 256, 0, 108, 117, 115,
	116, 0, 0, 0, 390, 275, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 409, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 156, 185, 156, 0,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 427, 0, 0, 0, 0, 185, 258, 0, 185,
	431, 0, 0, 0, 380, 0, 0, 0, 185, 185,
	0, 439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 152, 74, 83, 153, 82, 137, 0, 0,
	0, 157, 146, 0, 0, 463, 464, 0, 0, 0,
	185, 0, 359, 0, 185, 185, 0, 0, 0, 0,
	0, 367, 0, 180, 370, 85, 0, 0, 0, 99,
	100, 0, 0, 498, 0, 0, 0, 86, 87, 0,
	88, 0, 89, 90, 0, 382, 0, 385, 0, 425,
	0, 0, 0, 185, 447, 0, 279, 0, 147, 185,
	98, 97, 77, 76, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 185,
	403, 404, 0, 0, 0, 156, 0, 0, 185, 0,
	0, 0, 185, 0, 0, 0, 0, 120, 121, 185,
	534, 0, 537, 0, 0, 0, 0, 0, 109, 110,
	156, 0, 385, 112, 0, 113, 0, 114, 122, 0,
	0, 0, 0, 0, 108, 117, 115, 116, 0, 0,
	0, 375, 0, 185, 185, 111, 0, 0, 443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 560, 0, 0, 457, 459, 0, 0, 0,
	0, 185, 0, 0, 0, 566, 0, 0, 120, 121,
	0, 469, 0, 0, 0, 473, 0, 474, 0, 109,
	110, 0, 156, 488, 112, 490, 113, 0, 114, 0,
	0, 0, 0, 0, 0, 108, 117, 115, 116, 0,
	0, 0, 518, 0, 0, 503, 0, 0, 0, 504,
	0, 0, 0, 0, 75, 152, 74, 83, 153, 82,
	137, 0, 144, 0, 157, 146, 0, 0, 156, 0,
	185, 0, 0, 0, 0, 0, 520, 521, 0, 0,
	0, 0, 0, 0, 524, 0, 0, 0, 85, 0,
	0, 0, 99, 100, 0, 0, 530, 0, 532, 142,
	86, 87, 0, 88, 0, 89, 90, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	185, 147, 0, 98, 97, 77, 76, 0, 547, 0,
	0, 0, 0, 185, 0, 0, 550, 75, 52, 74,
	83, 53, 82, 84, 0, 0, 0, 0, 0, 49,
	572, 483, 571, 570, 484, 50, 51, 561, 63, 64,
	61, 403, 404, 67, 68, 0, 69, 66, 62, 0,
	0, 85, 65, 0, 70, 99, 100, 71, 73, 72,
	0, 0, 0, 86, 87, 0, 88, 0, 89, 90,
	0, 0, 0, 479, 480, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 81, 0, 98, 97, 77, 76,
	75, 52, 74, 83, 53, 82, 84, 0, 0, 0,
	0, 0, 49, 568, 483, 571, 570, 484, 50, 51,
	0, 63, 64, 61, 0, 0, 67, 68, 0, 69,
	66, 62, 0, 0, 85, 65, 0, 70, 99, 100,
	71, 73, 72, 0, 0, 0, 86, 87, 0, 88,
	0, 89, 90, 0, 0, 0, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 81, 0, 98,
	97, 77, 76, 75, 52, 74, 83, 53, 82, 84,
	0, 0, 0, 0, 0, 49, 470, 59, 402, 401,
	60, 50, 51, 0, 63, 64, 61, 0, 0, 67,
	68, 0, 69, 66, 62, 0, 0, 85, 65, 0,
	70, 99, 100, 71, 73, 72, 0, 0, 0, 86,
	87, 0, 88, 0, 89, 90, 0, 0, 0, 313,
	314, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	81, 0, 98, 97, 77, 76, 75, 52, 74, 83,
	53, 82, 84, 0, 0, 0, 0, 0, 49, 399,
	59, 402, 401, 60, 50, 51, 0, 63, 64, 61,
	0, 0, 67, 68, 0, 69, 66, 62, 0, 0,
	85, 65, 0, 70, 99, 100, 71, 73, 72, 0,
	0, 0, 86, 87, 0, 88, 0, 89, 90, 0,
	0, 0, 313, 314, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 81, 0, 98, 97, 77, 76, 75,
	52, 74, 83, 53, 82, 84, 0, 0, 0, 0,
	0, 49, 541, 59, 0, 0, 60, 50, 51, 0,
	63, 64, 61, 408, 0, 67, 68, 0, 69, 66,
	62, 0, 0, 85, 65, 0, 70, 99, 100, 71,
	73, 72, 0, 0, 0, 86, 87, 0, 88, 0,
	89, 90, 0, 0, 0, 313, 314, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 81, 0, 98, 97,
	77, 76, 75, 52, 74, 83, 53, 82, 84, 0,
	0, 0, 0, 0, 49, 539, 59, 0, 0, 60,
	50, 51, 0, 63, 64, 61, 408, 0, 67, 68,
	0, 69, 66, 62, 0, 0, 85, 65, 0, 70,
	99, 100, 71, 73, 72, 0, 0, 0, 86, 87,
	0, 88, 0, 89, 90, 0, 0, 0, 313, 314,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 81,
	0, 98, 97, 77, 76, 75, 52, 74, 83, 53,
	82, 84, 0, 0, 0, 0, 0, 49, 441, 59,
	0, 0, 60, 50, 51, 0, 63, 64, 61, 408,
	0, 67, 68, 0, 69, 66, 62, 0, 0, 85,
	65, 0, 70, 99, 100, 71, 73, 72, 0, 0,
	0, 86, 87, 0, 88, 0, 89, 90, 0, 0,
	0, 313, 314, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 81, 0, 98, 97, 77, 76, 75, 52,
	74, 83, 53, 82, 84, 0, 0, 0, 0, 0,
	49, 433, 59, 0, 0, 60, 50, 51, 0, 63,
	64, 61, 408, 0, 67, 68, 0, 69, 66, 62,
	0, 0, 85, 65, 0, 70, 99, 100, 71, 73,
	72, 0, 0, 0, 86, 87, 0, 88, 0, 89,
	90, 0, 0, 0, 313, 314, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 81, 0, 98, 97, 77,
	76, 75, 52, 74, 83, 53, 82, 84, 0, 0,
	0, 0, 0, 49, 0, 59, 0, 0, 60, 50,
	51, 0, 63, 64, 61, 0, 0, 67, 68, 0,
	69, 66, 62, 0, 0, 85, 65, 0, 70, 99,
	100, 71, 73, 72, 0, 0, 0, 86, 87, 0,
	88, 0, 89, 90, 0, 0, 0, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 81, 0,
	98, 97, 77, 76, 8, 75, 52, 74, 83, 53,
	82, 84, 0, 0, 0, 0, 0, 49, 574, 483,
	0, 0, 484, 50, 51, 0, 63, 64, 61, 0,
	0, 67, 68, 0, 69, 66, 62, 0, 0, 85,
	65, 0, 70, 99, 100, 71, 73, 72, 0, 0,
	0, 86, 87, 0, 88, 0, 89, 90, 0, 0,
	0, 479, 480, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 81, 0, 98, 97, 77, 76, 75, 52,
	74, 83, 53, 82, 84, 0, 0, 0, 0, 0,
	49, 554, 59, 0, 0, 60, 50, 51, 0, 63,
	64, 61, 0, 0, 67, 68, 0, 69, 66, 62,
	0, 0, 85, 65, 0, 70, 99, 100, 71, 73,
	72, 0, 0, 0, 86, 87, 0, 88, 0, 89,
	90, 0, 0, 0, 313, 314, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 81, 0, 98, 97, 77,
	76, 75, 52, 74, 83, 53, 82, 84, 0, 0,
	0, 0, 0, 49, 531, 59, 0, 0, 60, 50,
	51, 0, 63, 64, 61, 0, 0, 67, 68, 0,
	69, 66, 62, 0, 0, 85, 65, 0, 70, 99,
	100, 71, 73, 72, 0, 0, 0, 86, 87, 0,
	88, 0, 89, 90, 0, 0, 0, 313, 314, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 81, 0,
	98, 97, 77, 76, 75, 52, 74, 83, 53, 82,
	84, 0, 0, 0, 0, 0, 49, 523, 59, 0,
	0, 60, 50, 51, 0, 63, 64, 61, 0, 0,
	67, 68, 0, 69, 66, 62, 0, 0, 85, 65,
	0, 70, 99, 100, 71, 73, 72, 0, 0, 0,
	86, 87, 0, 88, 0, 89, 90, 0, 0, 0,
	313, 314, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 81, 0, 98, 97, 77, 76, 75, 52, 74,
	83, 53, 82, 84, 0, 0, 0, 0, 0, 49,
	0, 59, 0, 0, 60, 50, 51, 0, 63, 64,
	61, 0, 0, 67, 68, 0, 69, 66, 62, 0,
	0, 85, 65, 0, 70, 99, 100, 71, 73, 72,
	0, 0, 0, 86, 87, 0, 88, 0, 89, 90,
	0, 0, 0, 313, 314, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 81, 512, 98, 97, 77, 76,
	75, 52, 74, 83, 53, 82, 84, 0, 0, 0,
	0, 0, 49, 506, 59, 0, 0, 60, 50, 51,
	0, 63, 64, 61, 0, 0, 67, 68, 0, 69,
	66, 62, 0, 0, 85, 65, 0, 70, 99, 100,
	71, 73, 72, 0, 0, 0, 86, 87, 0, 88,
	0, 89, 90, 0, 0, 0, 313, 314, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 81, 0, 98,
	97, 77, 76, 75, 52, 74, 83, 53, 82, 84,
	0, 0, 0, 0, 0, 49, 485, 483, 0, 0,
	484, 50, 51, 0, 63, 64, 61, 0, 0, 67,
	68, 0, 69, 66, 62, 0, 0, 85, 65, 0,
	70, 99, 100, 71, 73, 72, 0, 0, 0, 86,
	87, 0, 88, 0, 89, 90, 0, 0, 0, 479,
	480, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	81, 0, 98, 97, 77, 76, 75, 52, 74, 83,
	53, 82, 84, 0, 0, 0, 0, 0, 49, 478,
	483, 0, 0, 484, 50, 51, 0, 63, 64, 61,
	0, 0, 67, 68, 0, 69, 66, 62, 0, 0,
	85, 65, 0, 70, 99, 100, 71, 73, 72, 0,
	0, 0, 86, 87, 0, 88, 0, 89, 90, 0,
	0, 0, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 81, 0, 98, 97, 77, 76, 75,
	52, 74, 83, 53, 82, 84, 0, 0, 0, 0,
	0, 49, 472, 59, 0, 0, 60, 50, 51, 0,
	63, 64, 61, 0, 0, 67, 68, 0, 69, 66,
	62, 0, 0, 85, 65, 0, 70, 99, 100, 71,
	73, 72, 0, 0, 0, 86, 87, 0, 88, 0,
	89, 90, 0, 0, 0, 313, 314, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 81, 0, 98, 97,
	77, 76, 75, 52, 74, 83, 53, 82, 84, 0,
	0, 0, 0, 0, 49, 453, 59, 0, 0, 60,
	50, 51, 0, 63, 64, 61, 0, 0, 67, 68,
	0, 69, 66, 62, 0, 0, 85, 65, 0, 70,
	99, 100, 71, 73, 72, 0, 0, 0, 86, 87,
	0, 88, 0, 89, 90, 0, 0, 0, 313, 314,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 81,
	0, 98, 97, 77, 76, 75, 52, 74, 83, 53,
	82, 84, 0, 0, 0, 0, 0, 49, 444, 59,
	0, 0, 60, 50, 51, 0, 63, 64, 61, 0,
	0, 67, 68, 0, 69, 66, 62, 0, 0, 85,
	65, 0, 70, 99, 100, 71, 73, 72, 0, 0,
	0, 86, 87, 0, 88, 0, 89, 90, 0, 0,
	0, 313, 314, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 81, 0, 98, 97, 77, 76, 75, 52,
	74, 83, 53, 82, 84, 0, 0, 0, 0, 0,
	49, 381, 59, 0, 0, 60, 50, 51, 0, 63,
	64, 61, 0, 0, 67, 68, 0, 69, 66, 62,
	0, 0, 85, 65, 0, 70, 99, 100, 71, 73,
	72, 0, 0, 0, 86, 87, 0, 88, 0, 89,
	90, 0, 0, 0, 313, 314, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 81, 0, 98, 97, 77,
	76, 75, 52, 74, 83, 53, 82, 84, 0, 0,
	0, 0, 0, 49, 371, 59, 0, 0, 60, 50,
	51, 0, 63, 64, 61, 0, 0, 67, 68, 0,
	69, 66, 62, 0, 0, 85, 65, 0, 70, 99,
	100, 71, 73, 72, 0, 0, 0, 86, 87, 0,
	88, 0, 89, 90, 0, 0, 0, 313, 314, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 81, 0,
	98, 97, 77, 76, 75, 52, 74, 83, 53, 82,
	84, 0, 0, 0, 0, 0, 49, 368, 59, 0,
	0, 60, 50, 51, 0, 63, 64, 61, 0, 0,
	67, 68, 0, 69, 66, 62, 0, 0, 85, 65,
	0, 70, 99, 100, 71, 73, 72, 0, 0, 0,
	86, 87, 0, 88, 0, 89, 90, 0, 0, 0,
	313, 314, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 81, 0, 98, 97, 77, 76, 75, 52, 74,
	83, 53, 82, 84, 0, 0, 0, 0, 0, 49,
	0, 483, 0, 0, 484, 50, 51, 0, 63, 64,
	61, 0, 0, 67, 68, 0, 69, 66, 62, 0,
	0, 85, 65, 0, 70, 99, 100, 71, 73, 72,
	0, 0, 0, 86, 87, 0, 88, 0, 89, 90,
	0, 0, 0, 479, 480, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 81, 0, 98, 97, 77, 76,
	75, 52, 74, 83, 53, 82, 84, 0, 0, 0,
	0, 0, 49, 0, 59, 0, 0, 60, 50, 51,
	0, 63, 64, 61, 0, 0, 67, 68, 0, 69,
	66, 62, 0, 0, 85, 65, 0, 70, 99, 100,
	71, 73, 72, 0, 0, 0, 86, 87, 0, 88,
	0, 89, 90, 0, 0, 0, 313, 314, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 81, 0, 98,
	97, 77, 76, 75, 52, 74, 83, 53, 82, 84,
	342, 0, 0, 0, 0, 49, 0, 59, 0, 0,
	60, 50, 51, 0, 63, 64, 61, 0, 0, 67,
	68, 0, 69, 66, 62, 0, 0, 85, 65, 0,
	70, 99, 100, 71, 73, 72, 0, 0, 0, 86,
	87, 0, 88, 0, 89, 90, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	81, 0, 98, 97, 77, 76, 75, 52, 74, 83,
	53, 82, 84, 0, 0, 0, 0, 0, 49, 0,
	59, 0, 0, 60, 50, 51, 0, 63, 64, 61,
	0, 0, 67, 68, 0, 69, 66, 62, 0, 0,
	85, 65, 0, 70, 99, 100, 71, 73, 72, 0,
	0, 0, 86, 87, 0, 88, 0, 89, 90, 0,
	0, 0, 321, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 81, 0, 98, 97, 77, 76, 75,
	52, 74, 83, 53, 82, 84, 0, 0, 0, 0,
	0, 49, 0, 59, 0, 0, 60, 50, 51, 0,
	63, 64, 61, 0, 0, 67, 68, 0, 69, 66,
	62, 0, 0, 85, 65, 0, 70, 99, 100, 71,
	73, 72, 0, 0, 0, 86, 87, 0, 88, 0,
	89, 90, 75, 152, 74, 83, 153, 82, 137, 0,
	0, 0, 157, 146, 80, 0, 81, 0, 98, 97,
	77, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 142, 86, 87,
	0, 88, 0, 89, 90, 75, 152, 74, 83, 153,
	82, 84, 0, 0, 0, 157, 0, 279, 0, 147,
	0, 98, 97, 77, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 89, 90, 0, 0,
	0, 321, 75, 181, 74, 83, 182, 82, 349, 0,
	80, 0, 81, 146, 98, 97, 77, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 348, 86, 87,
	0, 88, 0, 89, 90, 75, 338, 74, 83, 182,
	82, 84, 0, 0, 0, 0, 0, 80, 0, 147,
	0, 98, 97, 77, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 89, 90, 111, 0,
	0, 321, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 81, 334, 98, 97, 77, 76, 75, 152,
	74, 83, 153, 82, 137, 0, 0, 0, 157, 146,
	0, 120, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 110, 0, 0, 0, 112, 0, 113,
	0, 114, 85, 0, 0, 0, 99, 100, 108, 117,
	115, 116, 119, 0, 86, 87, 0, 88, 0, 89,
	90, 75, 181, 74, 83, 182, 82, 84, 0, 0,
	0, 0, 0, 279, 0, 147, 0, 98, 97, 77,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 99,
	100, 111, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 89, 90, 0, 0, 0, 321, 0, 75,
	152, 74, 83, 153, 82, 84, 80, 0, 81, 157,
	98, 97, 77, 76, 120, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 110, 0, 0, 0,
	112, 0, 113, 85, 114, 0, 0, 99, 100, 0,
	352, 108, 117, 115, 116, 86, 87, 0, 88, 0,
	89, 90, 75, 181, 74, 83, 182, 82, 84, 0,
	0, 0, 0, 0, 80, 0, 81, 0, 98, 97,
	77, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 85, 0, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 111, 89, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 121, 0, 80, 0, 81,
	0, 98, 97, 77, 76, 109, 110, 111, 0, 0,
	112, 0, 113, 0, 114, 120, 121, 0, 0, 0,
	0, 108, 117, 115, 116, 0, 109, 110, 517, 0,
	0, 112, 111, 113, 0, 114, 0, 0, 0, 0,
	120, 121, 108, 117, 115, 116, 0, 0, 0, 393,
	118, 109, 110, 0, 556, 0, 112, 107, 113, 0,
	114, 0, 0, 0, 0, 120, 121, 108, 117, 115,
	116, 0, 0, 0, 357, 111, 109, 110, 0, 0,
	0, 112, 0, 113, 0, 114, 122, 120, 121, 0,
	0, 0, 108, 117, 115, 116, 119, 424, 109, 110,
	0, 0, 0, 112, 0, 113, 0, 114, 120, 121,
	0, 0, 0, 0, 108, 117, 115, 116, 0, 109,
	110, 0, 0, 0, 112, 0, 113, 0, 114, 0,
	120, 121, 0, 0, 0, 108, 117, 115, 116, 0,
	0, 109, 110, 0, 0, 0, 112, 0, 113, 0,
	114, 0, 0, 0, 0, 0, 0, 108, 117, 115,
	116,
}
var RubyPact = []int{

	-40, 2226, -1000, -1000, -1000, 13, -1000, -1000, -1000, 4168,
	-1000, -1000, -1000, -1000, 219, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 64, -1000, 66,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 239,
	417, 396, 1559, 34, 139, 229, 95, 207, 200, 3614,
	3614, -1000, 4067, 3614, 3614, 4067, 4067, 370, 297, -1000,
	371, 366, 366, 366, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 347, -1000, 37, 3614, 3614, 4067, 4067,
	4067, -1000, -1000, -1000, -1000, -1000, -1000, 21, 422, -1000,
	-1000, -1000, -1000, -1000, 3614, 3614, 3614, 4067, 439, 4067,
	4067, -1000, 4067, 3614, 4067, 4067, 4067, 4067, 3614, 4067,
	-1000, -1000, 4067, 3614, 4067, 4067, 3614, 3614, 3614, 437,
	127, 61, 336, 151, 4067, 350, -1000, 4014, 37, -1000,
	10, 4067, 4067, 4067, 42, 335, 56, -1000, 4211, -1000,
	-1000, -12, 3667, 133, 48, 165, 161, 4067, 4014, 4067,
	-1000, 3614, 3614, 4067, 3614, 3614, 40, 3614, 3614, 35,
	3614, 3614, 3614, 19, 436, 435, 298, 246, 3395, 250,
	4211, 3903, 126, 43, -1000, -1000, 254, 240, 4211, 149,
	250, 3614, 3614, 3614, 3614, 362, 330, -1000, 330, 330,
	3720, 3830, 4014, 3468, -1000, -1000, 298, 298, 4211, 4211,
	4211, -1000, -1000, 407, -1000, -1000, 298, 298, 298, 4211,
	3777, 4211, 4211, 3956, 4211, 298, 4211, 4211, 4211, 4211,
	298, 3997, 3956, 3956, 4211, 298, 4211, 109, 4143, 298,
	298, 298, 37, -1000, 434, 323, 201, -1000, 147, 433,
	432, 431, -1000, 3249, 396, 4211, 3176, 388, 4211, -1000,
	-1000, -1000, 1410, -5, 60, 273, -1000, -1000, 3884, -1000,
	-1000, -1000, -1000, 428, 4067, 3103, -1000, 426, 890, 4067,
	4211, 384, 1193, -42, 55, 298, 298, 4118, 298, 298,
	-1000, -1000, -1000, 424, 298, 298, -1000, -1000, -1000, 411,
	298, 298, 298, -1000, -1000, -1000, 409, 321, 38, 33,
	1861, -1000, -1000, -1000, -1000, 298, 269, 4067, -1000, -1000,
	149, -1000, 311, 4067, 298, 298, 298, 298, -1000, 355,
	293, 4211, -1000, -1000, -1000, 277, 271, 4233, 1336, 382,
	298, -1000, -1000, 757, -1000, -1000, -1000, 37, 3614, 4014,
	4211, 4211, 4067, 4211, 4211, -1000, 4067, 136, -1000, 2153,
	336, 201, 341, 4067, -1000, -1000, 336, 2080, -1000, -1000,
	3030, -1000, 37, -1000, 3720, 168, -1000, -1000, -1000, 124,
	4211, -1000, 2957, 122, -1000, 3395, -1000, -12, 14, -1000,
	108, -1000, -1000, 103, -1000, -1000, -1000, 4067, 4067, -1000,
	367, 3614, -1000, 1788, 2884, -1000, -1000, -1000, 414, 4211,
	2811, 2738, 305, -1000, -1000, 4067, 250, -1000, -21, -1000,
	16, -1000, -14, -1000, 3614, 4067, -1000, 4211, -1000, 298,
	292, 4211, 3614, -1000, 274, -1000, -1000, -1000, -1000, 4211,
	-1000, -1000, 268, 2665, -1000, -1000, 3720, 4211, -1000, -1000,
	3614, 403, -1000, -1000, -1000, 401, -19, 2592, -24, 3395,
	97, -1000, 3614, 4097, 1481, -1000, 3614, -1000, 298, 3395,
	-1000, 363, -1000, 2519, 3395, 287, 397, -1000, -1000, -1000,
	-1000, 298, -1000, 3614, 3614, -1000, -1000, -1000, 2446, 250,
	3395, -1000, 3720, -1000, 3956, -1000, 145, 298, 4211, -1000,
	298, -1000, -1000, 2007, 1934, -1000, -1000, 343, 298, 20,
	-1000, -1000, -1000, -1000, -30, 3541, 298, 238, -1000, 298,
	3395, 3395, -1000, -1000, 3395, 392, 396, -1000, 213, 186,
	2373, -1000, 3395, 71, 4211, -1000, -1000, 4190, 57, -1000,
	265, -1000, 215, -1000, 4067, -1000, 298, 3395, -1000, -1000,
	3395, -1000, -1000, -1000, -1000, 71, 3614, 4067, -1000, -1000,
	988, 3395, 1715, 1642, 2300, 337, 486, -1000, -1000, 359,
	3614, -1000, -1000, 346, -1000, -1000, -1000, 71, -1000, -1000,
	3614, -1000, 298, 3322, -1000, 71, 298, 3322, 3322, 3322,
}
var RubyPgo = []int{

	0, 529, 0, 217, 528, 19, 9, 526, 522, 521,
	1085, 520, 1, 519, 518, 16, 515, 24, 514, 511,
	501, 508, 507, 957, 505, 506, 634, 504, 503, 502,
	500, 498, 497, 495, 493, 492, 491, 10, 111, 489,
	488, 5, 12, 487, 28, 483, 482, 33, 481, 480,
	4, 479, 478, 477, 476, 474, 473, 472, 470, 469,
	466, 465, 1118, 462, 8, 17, 20, 6, 460, 7,
	457, 55, 453, 11, 452, 3, 449, 15, 13, 14,
	448, 447, 446, 34,
}
var RubyR1 = []int{

	0, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 82, 82, 83, 83, 62, 62, 62, 62, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 34, 34, 34, 34,
	34, 34, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 47, 19, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 27, 65, 65, 65, 65, 75, 75, 73, 73,
	73, 73, 73, 73, 73, 17, 77, 77, 28, 28,
	28, 28, 28, 28, 28, 28, 69, 69, 79, 79,
	79, 37, 37, 37, 37, 35, 35, 36, 39, 41,
	41, 41, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 78, 78, 40, 40, 40, 40, 40, 40, 40,
	10, 10, 38, 38, 25, 25, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 8, 3, 1, 81, 81, 81, 81, 81,
	81, 81, 4, 4, 4, 70, 70, 76, 76, 76,
	6, 6, 6, 6, 6, 6, 66, 74, 74, 74,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 67, 67, 67, 67, 63, 63, 63, 9, 22,
	22, 12, 12, 12, 12, 80, 80, 72, 72, 64,
	64, 29, 29, 30, 31, 31, 33, 33, 33, 32,
	32, 32, 15, 48, 48, 48, 71, 71, 71, 71,
	71, 49, 49, 49, 49, 49, 50, 50, 50, 50,
	46, 45, 11, 43, 43, 43, 43, 42, 42, 5,
	7, 13, 13, 14, 14, 18, 18, 44, 44,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 4, 5,
	1, 4, 4, 2, 3, 2, 3, 4, 5, 4,
	3, 4, 5, 2, 3, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 6, 7, 6,
	6, 4, 3, 6, 1, 4, 1, 3, 0, 1,
	1, 1, 4, 4, 4, 2, 1, 3, 5, 6,
	7, 7, 8, 8, 5, 6, 1, 3, 0, 1,
	3, 1, 2, 3, 2, 4, 6, 5, 4, 1,
	2, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 9, 6, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 4,
	3, 3, 3, 4, 3, 3, 3, 4, 3, 3,
	3, 4, 2, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 5, 1, 1, 0, 1, 1, 1, 4,
	4, 4, 3, 5, 5, 3, 7, 3, 7, 8,
	3, 4, 5, 5, 5, 6, 3, 0, 1, 3,
	4, 5, 3, 3, 3, 3, 3, 5, 6, 5,
	3, 4, 3, 3, 2, 0, 2, 2, 3, 4,
	6, 2, 3, 5, 4, 1, 3, 0, 2, 1,
	2, 2, 1, 1, 2, 1, 1, 3, 3, 1,
	3, 3, 5, 5, 5, 3, 0, 2, 2, 2,
	2, 5, 6, 5, 6, 5, 4, 3, 3, 2,
	4, 4, 2, 5, 7, 4, 6, 4, 5, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 3,
}
var RubyChk = []int{

	-1000, -68, 61, 62, 78, -2, 61, 62, 78, -23,
	-28, -35, -39, -36, -20, -21, -40, -16, -22, -29,
	-48, -43, -31, -32, -33, -47, -5, -30, -15, -7,
	-13, -14, -18, -24, -8, -4, -41, -26, -27, -9,
	-11, -52, -53, -54, -55, -19, -46, -45, -34, 17,
	23, 24, 6, 9, -38, -25, -10, -51, -78, 19,
	22, 28, 36, 26, 27, 40, 35, 31, 32, 34,
	42, 45, 47, 46, 7, 5, 77, 76, -3, -1,
	70, 72, 10, 8, 11, 39, 51, 52, 54, 56,
	57, -56, -57, -58, -59, -60, -61, 75, 74, 43,
	44, 62, 61, 78, 19, 22, 26, 29, 64, 48,
	49, 4, 53, 55, 57, 66, 67, 65, 22, 68,
	37, 38, 58, 22, 48, 70, 59, 19, 22, 64,
	6, -3, 4, -41, 4, 9, -41, 11, -65, -6,
	-73, 70, 50, 59, 13, -77, 16, 72, -23, -20,
	-17, -26, 6, 9, -38, -25, -10, 15, 11, 70,
	10, 50, 59, 70, 50, 59, 13, 50, 59, 13,
	50, 59, 50, 13, 50, 13, -2, -2, -62, -75,
	-23, 6, 9, -38, -25, -10, -2, -2, -23, -83,
	-75, 19, 22, 19, 22, 7, -44, 7, -44, -44,
	-83, -83, 11, -63, -6, 72, -2, -2, -23, -23,
	-23, 6, 9, 75, 6, 9, -2, -2, -2, -23,
	6, -23, -23, -83, -23, -2, -23, -23, -23, -23,
	-2, -23, -83, -83, -23, -2, -23, -77, -23, -2,
	-2, -2, 6, -69, 64, -79, 11, -37, 6, 57,
	15, 64, -69, -62, 48, -23, -62, -73, -23, -6,
	-6, 13, -23, -5, -77, -23, -47, -15, -23, -15,
	6, -38, -25, 57, 13, -62, -66, 65, -83, 70,
	-23, -73, -23, -5, -77, -2, -2, -23, -2, -2,
	6, -38, -25, 57, -2, -2, 6, -38, -25, 57,
	-2, -2, -2, 6, -38, -25, 57, -78, 6, 6,
	-62, 61, 62, 61, 62, -2, -72, 13, 61, 61,
	-83, 61, -42, 41, -2, -2, -2, -2, 7, 13,
	-81, -23, -20, -17, 73, -70, -76, -23, 6, -73,
	-2, 62, 12, -83, 6, 9, -6, -65, 50, 11,
	-23, -23, 63, -23, -23, 71, 13, 71, -6, -62,
	6, 13, -79, 50, 6, 6, 6, -62, 18, -41,
	-62, 18, 12, 13, -83, 71, 71, 71, 6, -83,
	-23, 18, -62, -74, 6, -62, -66, -26, -23, 12,
	71, 71, 71, 71, 6, 6, 6, 70, 70, 18,
	-67, 21, 20, -62, -62, 18, 20, -12, 29, -23,
	-71, -71, -42, 18, 20, 41, -75, 7, -83, 13,
	-83, 13, -83, 13, 4, 63, 12, -23, -6, -2,
	-73, -23, 50, 18, -64, -12, -69, -37, 12, -23,
	-69, 18, -64, -62, 18, -6, -83, -23, -20, -17,
	50, 13, -17, 18, 65, 13, -83, -62, -83, -62,
	71, 50, 50, -23, -23, 18, 21, 20, -2, -62,
	18, -67, 18, -62, -62, -80, 4, -41, 18, 61,
	62, -2, -49, 19, 22, 18, 18, 20, -62, -75,
	-62, 71, -83, 73, -83, 73, -83, -2, -23, 12,
	-2, 18, -12, -62, -62, 18, 18, -17, -2, 6,
	6, 73, 73, 73, -83, -83, -2, 71, 71, -2,
	-62, -62, 18, 18, -62, 4, 13, 6, -2, -2,
	-62, 18, -62, -83, -23, -20, -17, -23, 6, 18,
	-64, 18, -64, 12, 70, 73, -2, -62, 6, -41,
	-62, 61, 61, 62, 18, -83, 4, 63, 18, 18,
	-23, -62, -71, -71, -71, -2, -23, 71, 18, -50,
	21, 20, 18, -50, 18, -82, 13, -83, 13, 18,
	21, 20, -2, -71, 18, -83, -2, -71, -71, -71,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 0,
	0, 0, 21, 22, 23, 24, 25, 0, 0, 0,
	0, 15, 262, 0, 0, 13, 265, 269, 266, 263,
	0, 301, 303, 305, 19, 20, 26, 27, 28, 29,
	13, 13, 151, 80, 245, 0, 0, 0, 0, 0,
	0, 46, 47, 48, 49, 50, 51, 0, 0, 203,
	204, 5, 6, 7, 0, 0, 0, 0, 0, 0,
	0, 13, 0, 0, 0, 0, 0, 0, 0, 0,
	13, 13, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 138, 15, 0, 149, 15, -2, 83, 85,
	93, 13, 0, 0, 0, 114, 15, 13, 119, 120,
	121, 34, 21, 22, 23, 24, 25, 0, 118, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 15, 0, 257, 261,
	116, 21, 22, 23, 24, 25, 0, 0, 13, 0,
	264, 0, 0, 0, 0, 0, 302, 307, 304, 306,
	205, 0, 118, 0, 292, 13, 192, 193, 194, 195,
	77, 172, 173, 0, 170, 171, 232, 240, 275, 76,
	86, 95, 97, 0, 196, 197, 198, 199, 200, 201,
	234, 0, 0, 0, 299, 236, 96, 0, 126, 169,
	233, 235, 90, 15, 0, 136, 138, 139, 141, 0,
	0, 0, 15, 0, 0, 15, 0, 0, 119, 84,
	94, 13, 126, 0, 0, 152, 153, 154, 163, 164,
	176, 177, 178, 0, 13, 0, 15, 227, 15, 13,
	125, 0, 126, 0, 0, 155, 165, 0, 156, 166,
	180, 181, 182, 0, 157, 167, 184, 185, 186, 0,
	158, 168, 159, 188, 189, 190, 0, 160, 0, 0,
	0, 15, 15, 16, 17, 18, 0, 0, 276, 276,
	0, 14, 0, 0, 270, 271, 267, 268, 300, 0,
	13, 206, 207, 208, 212, 13, 13, 0, -2, 0,
	246, 247, 248, 15, 174, 175, 87, 89, 0, -2,
	126, 111, 0, 290, 291, 105, 0, 106, 91, 0,
	138, 0, 0, 0, 142, 144, 138, 0, 145, 15,
	0, 148, 78, 13, 0, 98, 101, 103, 179, 0,
	127, 220, 0, 0, 228, 13, 15, -2, 126, 82,
	99, 102, 104, 100, 183, 187, 191, 0, 0, 230,
	0, 0, 15, 0, 0, 249, 15, 258, 15, 117,
	0, 0, 0, 295, 15, 0, 15, 308, 0, 13,
	0, 13, 0, 13, 13, 0, 81, 0, 88, 92,
	0, 272, 0, 128, 0, 259, 15, 140, 137, 143,
	15, 134, 0, 0, 147, 79, 0, 122, 123, 124,
	0, 0, 115, 221, 226, 0, 0, 0, 0, 13,
	98, 13, 0, 0, 0, 231, 0, 15, 15, 244,
	237, 0, 239, 0, 251, 15, 0, 255, 273, 277,
	278, 279, 280, 0, 0, 274, 293, 15, 0, 15,
	13, 202, 0, 213, 0, 214, 0, 215, 217, 112,
	110, 129, 260, 0, 0, 135, 146, 124, 107, 0,
	229, 222, 223, 224, 0, 0, 109, 0, 162, 15,
	242, 243, 238, 250, 252, 0, 0, 15, 15, 0,
	0, 296, 13, 297, 209, 210, 211, 0, 0, 130,
	0, 131, 0, 113, 0, 225, 108, 241, 15, 256,
	254, 276, 15, 15, 294, 298, 13, 0, 132, 133,
	0, 253, 0, 0, 0, 11, 13, 161, 281, 0,
	0, 276, 283, 0, 285, 216, 12, 218, 13, 282,
	0, 276, 276, 289, 284, 219, 276, 287, 288, 286,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:228
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:230
		{
		}
	case 3:
		//line parser.y:232
		{
		}
	case 4:
		//line parser.y:234
		{
		}
	case 5:
		//line parser.y:236
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:238
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:240
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:246
		{
		}
	case 11:
		//line parser.y:248
		{
		}
	case 12:
		//line parser.y:249
		{
		}
	case 13:
		//line parser.y:251
		{
		}
	case 14:
		//line parser.y:252
		{
		}
	case 15:
		//line parser.y:255
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:257
		{
		}
	case 17:
		//line parser.y:259
		{
		}
	case 18:
		//line parser.y:261
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 75:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 76:
		//line parser.y:272
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:275
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 78:
		//line parser.y:278
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:287
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-2].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:297
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:303
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:312
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:321
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:330
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:340
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:350
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:359
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:370
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:381
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:391
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:401
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:412
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:425
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:434
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:444
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:454
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:464
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:476
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:486
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:496
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:506
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:516
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:526
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:536
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:546
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:556
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:568
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:578
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 109:
		//line parser.y:591
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 110:
		//line parser.y:601
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 111:
		//line parser.y:613
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 112:
		//line parser.y:625
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 113:
		//line parser.y:627
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-1].genericValue)
		}
	case 114:
		//line parser.y:629
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 115:
		//line parser.y:631
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:634
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:636
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:638
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 119:
		//line parser.y:640
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:642
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:644
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:646
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:648
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:650
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:653
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 126:
		//line parser.y:663
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:665
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:669
		{
			method := ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 129:
		//line parser.y:679
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 130:
		//line parser.y:690
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 131:
		//line parser.y:701
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 132:
		//line parser.y:712
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 133:
		//line parser.y:724
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 134:
		//line parser.y:736
		{
			method := ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 135:
		//line parser.y:746
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 136:
		//line parser.y:759
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 137:
		//line parser.y:761
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 138:
		//line parser.y:763
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 139:
		//line parser.y:765
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 140:
		//line parser.y:767
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 141:
		//line parser.y:770
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 142:
		//line parser.y:772
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 143:
		//line parser.y:774
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 144:
		//line parser.y:776
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 145:
		//line parser.y:780
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 146:
		//line parser.y:790
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 147:
		//line parser.y:802
		{
			name := RubyS[Rubypt-3].genericValue.(ast.BareReference).Name
			if name != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + name + ")")
			}

			class := ast.Eigenclass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 148:
		//line parser.y:817
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 149:
		//line parser.y:828
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 150:
		//line parser.y:837
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 151:
		//line parser.y:856
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 152:
		//line parser.y:874
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 153:
		//line parser.y:883
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 154:
		//line parser.y:889
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 155:
		//line parser.y:895
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 156:
		//line parser.y:904
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 157:
		//line parser.y:913
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 158:
		//line parser.y:922
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 159:
		//line parser.y:932
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 160:
		//line parser.y:941
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 161:
		//line parser.y:951
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 162:
		//line parser.y:966
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 163:
		//line parser.y:972
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 164:
		//line parser.y:981
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 165:
		//line parser.y:987
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:996
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:1005
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:1014
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 169:
		//line parser.y:1023
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 170:
		//line parser.y:1030
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 171:
		//line parser.y:1032
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 172:
		//line parser.y:1035
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 173:
		//line parser.y:1041
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 174:
		//line parser.y:1048
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 175:
		//line parser.y:1054
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 176:
		//line parser.y:1061
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 177:
		//line parser.y:1063
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 178:
		//line parser.y:1065
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 179:
		//line parser.y:1067
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 180:
		//line parser.y:1070
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 181:
		//line parser.y:1072
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 182:
		//line parser.y:1074
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 183:
		//line parser.y:1076
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 184:
		//line parser.y:1079
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 185:
		//line parser.y:1081
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 186:
		//line parser.y:1083
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 187:
		//line parser.y:1085
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 188:
		//line parser.y:1088
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 189:
		//line parser.y:1090
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 190:
		//line parser.y:1092
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 191:
		//line parser.y:1094
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 192:
		//line parser.y:1098
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 193:
		//line parser.y:1100
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 194:
		//line parser.y:1102
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 195:
		//line parser.y:1104
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 196:
		//line parser.y:1107
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 197:
		//line parser.y:1118
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 198:
		//line parser.y:1129
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 199:
		//line parser.y:1140
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 200:
		//line parser.y:1151
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 201:
		//line parser.y:1162
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 202:
		//line parser.y:1173
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 203:
		//line parser.y:1175
		{
		}
	case 204:
		//line parser.y:1176
		{
		}
	case 205:
		//line parser.y:1178
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 206:
		//line parser.y:1180
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:1182
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 208:
		//line parser.y:1184
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 209:
		//line parser.y:1186
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 210:
		//line parser.y:1188
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 211:
		//line parser.y:1190
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 212:
		//line parser.y:1193
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 213:
		//line parser.y:1195
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 214:
		//line parser.y:1203
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 215:
		//line parser.y:1212
		{
			name := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 216:
		//line parser.y:1220
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 217:
		//line parser.y:1229
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 218:
		//line parser.y:1236
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 219:
		//line parser.y:1243
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 220:
		//line parser.y:1251
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 221:
		//line parser.y:1256
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 222:
		//line parser.y:1261
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 223:
		//line parser.y:1266
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 224:
		//line parser.y:1271
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 225:
		//line parser.y:1276
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 226:
		//line parser.y:1285
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 227:
		//line parser.y:1287
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 228:
		//line parser.y:1289
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 229:
		//line parser.y:1291
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 230:
		//line parser.y:1294
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 231:
		//line parser.y:1303
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 232:
		//line parser.y:1313
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 233:
		//line parser.y:1322
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 234:
		//line parser.y:1331
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 235:
		//line parser.y:1340
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 236:
		//line parser.y:1349
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 237:
		//line parser.y:1358
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 238:
		//line parser.y:1367
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 239:
		//line parser.y:1377
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 240:
		//line parser.y:1386
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 241:
		//line parser.y:1397
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 242:
		//line parser.y:1406
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 243:
		//line parser.y:1414
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 244:
		//line parser.y:1422
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 245:
		//line parser.y:1430
		{
		}
	case 246:
		//line parser.y:1431
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 247:
		//line parser.y:1432
		{
		}
	case 248:
		//line parser.y:1435
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 249:
		//line parser.y:1438
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 250:
		//line parser.y:1447
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 251:
		//line parser.y:1458
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 252:
		//line parser.y:1460
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 253:
		//line parser.y:1474
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 254:
		//line parser.y:1495
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 255:
		//line parser.y:1511
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 256:
		//line parser.y:1513
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 257:
		//line parser.y:1516
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 258:
		//line parser.y:1518
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 259:
		//line parser.y:1521
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 260:
		//line parser.y:1523
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 261:
		//line parser.y:1526
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 262:
		//line parser.y:1533
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 263:
		//line parser.y:1535
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 264:
		//line parser.y:1538
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 265:
		//line parser.y:1546
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 266:
		//line parser.y:1550
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 267:
		//line parser.y:1552
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 268:
		//line parser.y:1554
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 269:
		//line parser.y:1558
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 270:
		//line parser.y:1560
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 271:
		//line parser.y:1562
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 272:
		//line parser.y:1566
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 273:
		//line parser.y:1577
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 274:
		//line parser.y:1583
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 275:
		//line parser.y:1590
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 276:
		//line parser.y:1597
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 277:
		//line parser.y:1599
		{
		}
	case 278:
		//line parser.y:1601
		{
		}
	case 279:
		//line parser.y:1603
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 280:
		//line parser.y:1605
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 281:
		//line parser.y:1608
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 282:
		//line parser.y:1616
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 283:
		//line parser.y:1625
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 284:
		//line parser.y:1633
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 285:
		//line parser.y:1642
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 286:
		//line parser.y:1651
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 287:
		//line parser.y:1659
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 288:
		//line parser.y:1667
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 289:
		//line parser.y:1675
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 290:
		//line parser.y:1684
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 291:
		//line parser.y:1687
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 292:
		//line parser.y:1690
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 293:
		//line parser.y:1697
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 294:
		//line parser.y:1703
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 295:
		//line parser.y:1709
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 296:
		//line parser.y:1715
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 297:
		//line parser.y:1722
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 298:
		//line parser.y:1724
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 299:
		//line parser.y:1727
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 300:
		//line parser.y:1734
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 301:
		//line parser.y:1741
		{
			RubyVAL.genericValue = ast.Public{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 302:
		//line parser.y:1743
		{
			RubyVAL.genericValue = ast.Public{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Methods: RubyS[Rubypt-0].symbolSlice}
		}
	case 303:
		//line parser.y:1746
		{
			RubyVAL.genericValue = ast.Private{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 304:
		//line parser.y:1748
		{
			RubyVAL.genericValue = ast.Private{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Methods: RubyS[Rubypt-0].symbolSlice}
		}
	case 305:
		//line parser.y:1751
		{
			RubyVAL.genericValue = ast.Protected{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 306:
		//line parser.y:1753
		{
			RubyVAL.genericValue = ast.Protected{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Methods: RubyS[Rubypt-0].symbolSlice}
		}
	case 307:
		//line parser.y:1757
		{
			RubyVAL.symbolSlice = append(RubyVAL.symbolSlice, RubyS[Rubypt-0].genericValue.(ast.Symbol))
		}
	case 308:
		//line parser.y:1759
		{
			RubyVAL.symbolSlice = append(RubyVAL.symbolSlice, RubyS[Rubypt-0].genericValue.(ast.Symbol))
		}
	}
	goto Rubystack /* stack new state and value */
}

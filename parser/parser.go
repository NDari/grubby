//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SPECIAL_CHAR_REF = 57349
const CAPITAL_REF = 57350
const LPAREN = 57351
const RPAREN = 57352
const COMMA = 57353
const NamespacedModule = 57354
const DO = 57355
const DEF = 57356
const END = 57357
const IF = 57358
const ELSE = 57359
const ELSIF = 57360
const UNLESS = 57361
const CLASS = 57362
const MODULE = 57363
const FOR = 57364
const WHILE = 57365
const UNTIL = 57366
const BEGIN = 57367
const RESCUE = 57368
const ENSURE = 57369
const BREAK = 57370
const NEXT = 57371
const REDO = 57372
const RETRY = 57373
const RETURN = 57374
const YIELD = 57375
const AND = 57376
const OR = 57377
const LAMBDA = 57378
const CASE = 57379
const WHEN = 57380
const TRUE = 57381
const FALSE = 57382
const LESSTHAN = 57383
const GREATERTHAN = 57384
const EQUALTO = 57385
const BANG = 57386
const COMPLEMENT = 57387
const BINARY_PLUS = 57388
const UNARY_PLUS = 57389
const NEGATIVE = 57390
const STAR = 57391
const RANGE = 57392
const OR_EQUALS = 57393
const WHITESPACE = 57394
const NEWLINE = 57395
const SEMICOLON = 57396
const COLON = 57397
const DOT = 57398
const PIPE = 57399
const SLASH = 57400
const AMPERSAND = 57401
const QUESTIONMARK = 57402
const CARET = 57403
const LBRACKET = 57404
const RBRACKET = 57405
const LBRACE = 57406
const RBRACE = 57407
const DOLLARSIGN = 57408
const ATSIGN = 57409
const FILE_CONST_REF = 57410
const LINE_CONST_REF = 57411
const EOF = 57412

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"NEGATIVE",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1418

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 122,
	10, 110,
	11, 110,
	-2, 242,
	-1, 314,
	53, 13,
	65, 13,
	-2, 31,
	-1, 327,
	10, 110,
	11, 110,
	-2, 242,
}

const RubyNprod = 296
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 3965

var RubyAct = []int{

	293, 413, 5, 412, 547, 31, 162, 300, 217, 378,
	124, 215, 219, 123, 25, 363, 129, 52, 369, 281,
	13, 388, 227, 92, 2, 3, 93, 299, 299, 274,
	268, 299, 134, 132, 299, 26, 352, 18, 62, 491,
	471, 4, 299, 469, 248, 333, 467, 184, 98, 185,
	119, 121, 465, 522, 159, 160, 376, 333, 98, 375,
	90, 89, 284, 146, 299, 164, 165, 238, 141, 134,
	427, 143, 277, 271, 168, 333, 116, 91, 107, 108,
	85, 179, 180, 178, 130, 96, 97, 251, 107, 108,
	85, 85, 430, 189, 190, 96, 97, 370, 111, 256,
	95, 197, 144, 147, 109, 85, 202, 545, 186, 353,
	95, 207, 425, 177, 211, 212, 213, 433, 535, 112,
	178, 142, 146, 141, 299, 299, 143, 332, 256, 209,
	223, 92, 436, 517, 93, 426, 435, 410, 429, 153,
	48, 244, 242, 230, 92, 263, 264, 93, 266, 267,
	255, 272, 273, 98, 278, 279, 280, 237, 239, 262,
	229, 241, 230, 150, 259, 245, 247, 425, 529, 530,
	302, 303, 304, 305, 130, 285, 142, 318, 261, 229,
	299, 528, 149, 107, 108, 340, 141, 138, 225, 143,
	96, 97, 92, 220, 309, 93, 230, 92, 317, 109,
	93, 153, 301, 324, 138, 95, 325, 138, 138, 154,
	110, 308, 368, 229, 147, 143, 114, 299, 92, 115,
	144, 93, 148, 138, 138, 138, 158, 339, 145, 297,
	130, 345, 156, 146, 296, 138, 221, 138, 138, 142,
	138, 111, 138, 138, 138, 138, 222, 138, 335, 152,
	138, 113, 138, 138, 536, 289, 290, 460, 157, 461,
	479, 98, 112, 234, 155, 386, 138, 138, 138, 249,
	130, 386, 98, 476, 120, 242, 92, 138, 76, 93,
	393, 150, 234, 138, 386, 220, 357, 138, 218, 151,
	269, 107, 108, 275, 241, 426, 385, 282, 96, 97,
	474, 348, 107, 108, 98, 503, 390, 109, 394, 96,
	97, 175, 504, 95, 234, 138, 234, 554, 220, 389,
	351, 218, 92, 171, 95, 93, 172, 407, 221, 295,
	391, 496, 392, 138, 107, 108, 138, 562, 222, 559,
	558, 96, 97, 416, 338, 138, 138, 419, 230, 414,
	408, 415, 401, 393, 130, 383, 95, 384, 239, 406,
	399, 221, 396, 495, 98, 229, 386, 357, 216, 158,
	553, 222, 138, 138, 557, 338, 559, 558, 306, 105,
	442, 421, 500, 253, 441, 440, 94, 405, 367, 455,
	455, 445, 451, 138, 107, 108, 252, 98, 138, 138,
	463, 96, 97, 322, 472, 323, 99, 525, 100, 101,
	109, 475, 169, 449, 477, 170, 95, 104, 102, 103,
	106, 477, 439, 505, 441, 440, 486, 107, 108, 366,
	367, 347, 348, 489, 96, 97, 138, 494, 187, 488,
	188, 497, 138, 483, 487, 118, 98, 117, 98, 95,
	313, 138, 485, 374, 373, 483, 371, 138, 506, 507,
	484, 450, 372, 361, 362, 120, 358, 354, 234, 76,
	138, 98, 484, 294, 138, 342, 107, 108, 107, 108,
	341, 138, 519, 96, 97, 96, 97, 513, 98, 337,
	312, 138, 287, 94, 523, 286, 214, 192, 95, 329,
	95, 107, 108, 1, 514, 334, 176, 61, 96, 97,
	526, 60, 59, 58, 57, 56, 138, 138, 107, 108,
	39, 477, 38, 95, 37, 96, 97, 106, 36, 51,
	456, 20, 41, 42, 138, 543, 21, 15, 12, 11,
	95, 455, 455, 455, 106, 138, 551, 24, 23, 560,
	540, 541, 542, 71, 316, 77, 137, 78, 130, 564,
	76, 22, 455, 234, 27, 19, 455, 455, 455, 10,
	49, 561, 33, 28, 17, 234, 14, 40, 16, 35,
	34, 565, 566, 29, 79, 73, 567, 87, 88, 98,
	30, 72, 80, 81, 534, 82, 83, 84, 403, 0,
	0, 299, 0, 0, 0, 256, 0, 234, 0, 138,
	74, 0, 75, 311, 86, 85, 0, 139, 0, 107,
	108, 0, 138, 0, 107, 108, 96, 97, 107, 108,
	0, 96, 97, 138, 139, 96, 97, 139, 139, 0,
	0, 95, 0, 0, 0, 0, 95, 0, 0, 0,
	95, 0, 0, 139, 139, 139, 138, 32, 0, 0,
	0, 138, 0, 138, 98, 139, 0, 139, 139, 0,
	139, 556, 139, 139, 139, 139, 138, 139, 0, 0,
	139, 0, 139, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 235, 107, 108, 139, 139, 139, 250,
	0, 96, 97, 0, 133, 0, 0, 139, 0, 0,
	0, 0, 235, 139, 0, 0, 95, 139, 0, 0,
	270, 133, 0, 276, 133, 133, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 133, 133, 0, 235, 139, 235, 0, 0, 0,
	0, 0, 133, 0, 133, 133, 0, 133, 0, 133,
	133, 133, 133, 139, 133, 0, 139, 133, 0, 133,
	133, 0, 0, 0, 0, 139, 139, 0, 0, 0,
	133, 0, 98, 133, 133, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 133,
	133, 0, 139, 139, 133, 0, 0, 0, 0, 0,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 96,
	97, 0, 0, 139, 99, 0, 100, 101, 139, 139,
	0, 133, 314, 133, 95, 104, 102, 103, 106, 0,
	71, 136, 77, 137, 122, 0, 128, 76, 134, 0,
	133, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 133, 0, 0, 139, 0, 0, 0,
	0, 79, 139, 0, 87, 88, 0, 0, 126, 80,
	81, 139, 82, 83, 84, 0, 127, 139, 0, 133,
	133, 0, 0, 0, 0, 0, 0, 125, 235, 135,
	139, 86, 85, 0, 139, 0, 0, 0, 0, 0,
	133, 139, 0, 0, 0, 314, 133, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 71, 136, 77,
	137, 122, 537, 0, 76, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 139, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 79, 133,
	0, 87, 88, 0, 139, 0, 80, 81, 133, 82,
	83, 84, 0, 0, 133, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 133, 135, 133, 86, 85,
	0, 133, 0, 235, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 235, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 133, 0, 0, 235, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 9,
	0, 133, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 139, 0, 0, 0, 0, 71, 136,
	77, 137, 122, 0, 0, 76, 134, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 139, 133, 139, 0, 0, 131, 0, 0, 79,
	0, 0, 87, 88, 0, 0, 139, 80, 81, 0,
	82, 83, 84, 163, 0, 0, 166, 163, 404, 0,
	0, 0, 0, 0, 133, 258, 133, 135, 0, 86,
	85, 0, 181, 182, 183, 0, 50, 0, 0, 133,
	0, 0, 0, 0, 191, 0, 193, 194, 0, 196,
	133, 198, 199, 200, 201, 0, 203, 0, 0, 206,
	0, 208, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 133, 0, 240, 243, 246, 133, 0,
	133, 0, 0, 140, 0, 0, 131, 0, 0, 0,
	0, 228, 260, 133, 0, 0, 265, 0, 0, 0,
	140, 0, 0, 140, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	140, 140, 0, 307, 315, 228, 0, 0, 0, 0,
	0, 140, 0, 140, 140, 0, 140, 0, 140, 140,
	140, 140, 131, 140, 0, 328, 140, 0, 140, 140,
	0, 0, 0, 0, 330, 331, 0, 0, 0, 236,
	0, 0, 140, 140, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 0, 236, 140,
	0, 349, 131, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 0,
	173, 0, 356, 0, 0, 0, 0, 315, 365, 0,
	236, 140, 236, 71, 316, 77, 137, 78, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 140, 0, 79, 387, 0, 87, 88, 0,
	0, 163, 80, 81, 161, 82, 83, 84, 0, 0,
	397, 299, 0, 0, 0, 0, 131, 167, 140, 140,
	74, 0, 75, 311, 86, 85, 174, 228, 0, 409,
	0, 0, 0, 356, 0, 0, 0, 0, 0, 140,
	417, 0, 0, 0, 140, 140, 0, 0, 0, 195,
	423, 0, 0, 0, 0, 0, 0, 0, 204, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	226, 0, 0, 0, 0, 437, 438, 0, 0, 0,
	0, 0, 140, 254, 0, 0, 257, 0, 140, 0,
	0, 0, 0, 163, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 140, 473, 0, 0, 0, 71, 136,
	77, 137, 78, 0, 236, 76, 140, 298, 0, 0,
	140, 0, 482, 0, 0, 0, 0, 140, 0, 321,
	0, 0, 0, 0, 482, 0, 0, 140, 0, 79,
	0, 0, 87, 88, 0, 0, 0, 80, 81, 0,
	82, 83, 84, 0, 0, 0, 299, 0, 0, 0,
	0, 0, 140, 140, 336, 74, 512, 75, 516, 86,
	85, 0, 343, 0, 0, 0, 0, 0, 0, 0,
	140, 521, 0, 0, 0, 0, 0, 0, 0, 350,
	0, 140, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 355, 360, 0, 364, 0, 0, 236,
	0, 0, 0, 0, 0, 533, 0, 0, 0, 0,
	131, 236, 538, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 544, 0, 0, 381, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 236, 0, 140, 0, 395, 0, 0,
	0, 0, 0, 398, 400, 402, 0, 0, 140, 0,
	364, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 0, 0, 422,
	0, 0, 140, 0, 0, 0, 0, 140, 0, 140,
	0, 0, 431, 0, 0, 432, 0, 0, 434, 0,
	0, 0, 140, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 0, 447, 0, 448, 0, 0, 0, 0,
	0, 462, 0, 464, 0, 0, 0, 466, 0, 0,
	468, 0, 470, 0, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 478, 0, 71, 232, 77, 233, 78,
	0, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	498, 499, 0, 0, 0, 0, 79, 0, 502, 87,
	88, 0, 0, 0, 80, 81, 0, 82, 83, 84,
	508, 0, 510, 299, 0, 511, 0, 0, 0, 515,
	0, 0, 74, 0, 75, 0, 86, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 524, 0, 0, 71,
	46, 77, 47, 78, 527, 0, 76, 0, 43, 0,
	53, 532, 0, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 539, 70, 67, 63, 381, 382,
	79, 66, 0, 87, 88, 195, 0, 0, 80, 81,
	0, 82, 83, 84, 0, 555, 0, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 74, 563, 75, 0,
	86, 85, 0, 0, 8, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 550, 457, 549, 548, 458,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 0, 82, 83, 84,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 86, 85, 71, 46,
	77, 47, 78, 0, 0, 76, 0, 43, 546, 457,
	549, 548, 458, 44, 45, 0, 64, 65, 55, 0,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 0,
	82, 83, 84, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 46, 77, 47, 78, 0, 0, 76, 0,
	43, 444, 53, 380, 379, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 0, 82, 83, 84, 0, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 86, 85, 71, 46, 77, 47, 78, 0,
	0, 76, 0, 43, 377, 53, 380, 379, 54, 44,
	45, 0, 64, 65, 55, 0, 0, 68, 69, 0,
	70, 67, 63, 0, 0, 79, 66, 0, 87, 88,
	0, 0, 0, 80, 81, 0, 82, 83, 84, 0,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 76, 0, 43, 518, 53, 0,
	0, 54, 44, 45, 0, 64, 65, 55, 386, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 0, 82,
	83, 84, 0, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	71, 46, 77, 47, 78, 0, 0, 76, 0, 43,
	418, 53, 0, 0, 54, 44, 45, 0, 64, 65,
	55, 386, 0, 68, 69, 0, 70, 67, 63, 0,
	0, 79, 66, 0, 87, 88, 0, 0, 0, 80,
	81, 0, 82, 83, 84, 0, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 411, 53, 0, 0, 54, 44, 45,
	0, 64, 65, 55, 386, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 0, 82, 83, 84, 0, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 86, 85, 71, 46, 77, 47,
	78, 0, 0, 76, 0, 43, 552, 457, 0, 0,
	458, 44, 45, 0, 64, 65, 55, 0, 0, 68,
	69, 0, 70, 67, 63, 0, 0, 79, 66, 0,
	87, 88, 0, 0, 0, 80, 81, 0, 82, 83,
	84, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	46, 77, 47, 78, 0, 0, 76, 0, 43, 531,
	53, 0, 0, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	0, 82, 83, 84, 0, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	86, 85, 71, 46, 77, 47, 78, 0, 0, 76,
	0, 43, 509, 53, 0, 0, 54, 44, 45, 0,
	64, 65, 55, 0, 0, 68, 69, 0, 70, 67,
	63, 0, 0, 79, 66, 0, 87, 88, 0, 0,
	0, 80, 81, 0, 82, 83, 84, 0, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 501, 53, 0, 0, 54,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 0, 82, 83, 84,
	0, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 86, 85, 71, 46,
	77, 47, 78, 0, 0, 76, 0, 43, 0, 53,
	0, 0, 54, 44, 45, 0, 64, 65, 55, 0,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 0,
	82, 83, 84, 0, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 490, 86,
	85, 71, 46, 77, 47, 78, 0, 0, 76, 0,
	43, 480, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 0, 82, 83, 84, 0, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 86, 85, 71, 46, 77, 47, 78, 0,
	0, 76, 0, 43, 459, 457, 0, 0, 458, 44,
	45, 0, 64, 65, 55, 0, 0, 68, 69, 0,
	70, 67, 63, 0, 0, 79, 66, 0, 87, 88,
	0, 0, 0, 80, 81, 0, 82, 83, 84, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 76, 0, 43, 452, 457, 0,
	0, 458, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 0, 82,
	83, 84, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	71, 46, 77, 47, 78, 0, 0, 76, 0, 43,
	446, 53, 0, 0, 54, 44, 45, 0, 64, 65,
	55, 0, 0, 68, 69, 0, 70, 67, 63, 0,
	0, 79, 66, 0, 87, 88, 0, 0, 0, 80,
	81, 0, 82, 83, 84, 0, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 428, 53, 0, 0, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 0, 82, 83, 84, 0, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 86, 85, 71, 46, 77, 47,
	78, 0, 0, 76, 0, 43, 359, 53, 0, 0,
	54, 44, 45, 0, 64, 65, 55, 0, 0, 68,
	69, 0, 70, 67, 63, 0, 0, 79, 66, 0,
	87, 88, 0, 0, 0, 80, 81, 0, 82, 83,
	84, 0, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	46, 77, 47, 78, 0, 0, 76, 0, 43, 346,
	53, 0, 0, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	0, 82, 83, 84, 0, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	86, 85, 71, 46, 77, 47, 78, 0, 0, 76,
	0, 43, 344, 53, 0, 0, 54, 44, 45, 0,
	64, 65, 55, 0, 0, 68, 69, 0, 70, 67,
	63, 0, 0, 79, 66, 0, 87, 88, 0, 0,
	0, 80, 81, 0, 82, 83, 84, 0, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 0, 457, 0, 0, 458,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 0, 82, 83, 84,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 86, 85, 71, 46,
	77, 47, 78, 0, 0, 76, 0, 43, 0, 53,
	0, 0, 54, 44, 45, 0, 64, 65, 55, 0,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 0,
	82, 83, 84, 0, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 46, 77, 47, 78, 320, 0, 76, 0,
	43, 0, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 0, 82, 83, 84, 0, 0, 0, 0,
	319, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 86, 85, 71, 46, 77, 47, 78, 0,
	0, 76, 0, 43, 0, 53, 0, 0, 54, 44,
	45, 0, 64, 65, 55, 0, 0, 68, 69, 0,
	70, 67, 63, 0, 0, 79, 66, 0, 87, 88,
	0, 0, 0, 80, 81, 0, 82, 83, 84, 0,
	0, 0, 299, 71, 46, 77, 47, 78, 0, 0,
	76, 74, 43, 75, 53, 86, 85, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 0, 82, 83, 84, 71, 232,
	77, 233, 78, 0, 0, 76, 0, 0, 0, 0,
	74, 0, 75, 0, 86, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 87, 88, 0, 0, 0, 80, 81, 0,
	82, 83, 84, 0, 0, 0, 299, 71, 232, 77,
	233, 78, 492, 0, 76, 74, 0, 75, 0, 86,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 87, 88, 0, 0, 0, 80, 81, 0, 82,
	83, 84, 0, 0, 0, 299, 71, 136, 77, 137,
	78, 481, 0, 76, 74, 0, 75, 0, 86, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	87, 88, 0, 0, 0, 80, 81, 0, 82, 83,
	84, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	424, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	136, 77, 137, 122, 0, 0, 76, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 87, 88, 0, 0, 126, 80, 81,
	0, 82, 83, 84, 71, 136, 77, 137, 327, 0,
	0, 76, 134, 0, 0, 0, 258, 0, 135, 0,
	86, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 87, 88,
	0, 0, 326, 80, 81, 0, 82, 83, 84, 71,
	232, 77, 233, 78, 0, 0, 76, 0, 0, 0,
	0, 74, 0, 135, 0, 86, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 87, 88, 0, 0, 0, 80, 81,
	0, 82, 83, 84, 0, 0, 0, 299, 0, 0,
	0, 0, 0, 310, 0, 0, 74, 0, 75, 0,
	86, 85, 71, 136, 77, 137, 78, 0, 0, 76,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 87, 88, 0, 0,
	0, 80, 81, 0, 82, 83, 84, 71, 232, 77,
	233, 78, 0, 0, 76, 0, 0, 0, 0, 74,
	0, 135, 0, 86, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 87, 88, 0, 0, 0, 80, 81, 0, 82,
	83, 84, 71, 136, 77, 137, 122, 0, 0, 76,
	134, 231, 0, 0, 74, 0, 75, 0, 86, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 87, 88, 0, 0,
	0, 80, 81, 0, 82, 83, 84, 71, 136, 77,
	137, 78, 0, 0, 76, 0, 0, 0, 0, 258,
	0, 135, 0, 86, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 87, 88, 0, 0, 0, 80, 81, 0, 82,
	83, 84, 71, 520, 77, 137, 78, 0, 0, 76,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 87, 88, 0, 0,
	0, 80, 81, 0, 82, 83, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85,
}
var RubyPact = []int{

	-29, 1794, -1000, -1000, -1000, 7, -1000, -1000, -1000, 360,
	-1000, -1000, -1000, 191, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 200, -1000, 20, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 441, 266, 266, 835, 177, 171, 238,
	158, 221, 215, 3358, 3358, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3852, 3358, 3358, 3852, 3852, 396, 307,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 302, -1000, 19,
	3358, 3358, 3852, 3852, 3852, 41, 432, -1000, -1000, -1000,
	-1000, -1000, 3358, 3358, 3852, 491, 3852, 3852, -1000, 3852,
	3358, 3852, 3852, 3852, 3852, 3358, 3852, -1000, -1000, 3852,
	3358, 3852, 3852, 3358, 3358, 3358, 490, 312, 279, 147,
	203, -1000, 3762, 19, 56, 3852, 3852, 3852, 38, 385,
	372, 778, -1000, 57, 42, -1000, 3807, 114, 1, -1000,
	-1000, 3762, 3852, -1000, 3358, 3358, 3852, 3358, 3358, 24,
	3358, 3358, 23, 3358, 3358, 3358, 13, 489, 486, 260,
	202, 3183, 318, 585, 181, 176, 585, 164, 318, 3358,
	3358, 3358, 3358, 3654, 1308, 3762, 3246, -1000, -1000, 260,
	260, 585, 585, 585, -1000, -1000, 397, -1000, -1000, 260,
	260, 585, 3609, 585, 585, 1453, 585, 260, 585, 585,
	585, 585, 260, 444, 1453, 1453, 585, 260, 585, 64,
	442, 260, 260, 260, 19, -1000, 483, 364, 187, -1000,
	142, 474, 469, -1000, 3057, 266, 2994, 421, 778, -1000,
	-1000, 3852, 3564, 59, 60, 120, 96, -1000, -1000, -1000,
	257, -27, 46, 467, -1000, -1000, 484, -1000, -1000, -1000,
	-1000, 461, 3717, 460, 2931, -1000, 458, 548, 3852, 419,
	149, -45, 34, 260, 260, 393, 260, 260, -1000, -1000,
	-1000, 456, 260, 260, -1000, -1000, -1000, 448, 260, 260,
	260, -1000, -1000, -1000, 447, 358, -3, -6, 2049, -1000,
	-1000, -1000, -1000, 260, 340, 3852, -1000, -1000, 164, -1000,
	315, 3852, 260, 260, 260, 260, 351, 778, -1000, -1000,
	3852, -1000, 349, 341, 57, 594, 1063, 377, 260, -1000,
	-1000, 71, -1000, -1000, 56, 19, 3358, 3762, 585, 3852,
	585, 585, -1000, 3717, 94, -1000, 2238, 279, 187, 333,
	3852, -1000, -1000, 2175, -1000, -1000, -1000, 19, -1000, 585,
	3501, 124, -1000, -1000, -1000, 11, 585, -1000, -1000, -1000,
	2868, 81, -1000, -1000, 3183, 54, -1000, -1000, 93, -1000,
	-1000, 89, -1000, -1000, -1000, 3852, 3852, -1000, 407, 3358,
	-1000, 1986, 2805, -1000, -1000, -1000, 457, 585, 2742, 2679,
	242, -1000, -1000, 3852, 318, -11, -1000, 585, -19, -1000,
	-22, -1000, -25, 3358, 3852, -1000, -1000, 260, 290, 585,
	3358, -1000, 258, -1000, -1000, -1000, -1000, 585, -1000, 245,
	2616, -1000, 3452, 585, 446, 3358, 438, 433, -1000, -1000,
	427, 2553, -26, 69, 3403, -1000, 3358, 300, 268, -1000,
	3358, -1000, 260, 3183, -1000, 367, -1000, 2490, 3183, 301,
	417, -1000, -1000, -1000, -1000, 260, -1000, 3358, 3358, -1000,
	-1000, -1000, 2427, 318, 3183, -1000, 1710, -1000, 1453, -1000,
	127, -1000, 260, 585, -1000, 260, -1000, -1000, 2112, -1000,
	-1000, 3897, 778, -1000, -1000, -1000, 260, -9, -1000, -1000,
	-1000, -1000, 3852, 3309, 260, 284, -1000, 260, 3183, 3183,
	-1000, -1000, 3183, 401, 266, -1000, 128, 115, 2364, -1000,
	3183, 72, 778, -1000, -1000, 3852, 590, 63, -1000, 239,
	922, 585, 3852, 260, 3183, -1000, -1000, 3183, -1000, -1000,
	-1000, -1000, 72, 585, 3358, 3852, -1000, -1000, 44, 3183,
	1923, 1860, 2301, 306, 660, -1000, -1000, 359, 3358, -1000,
	-1000, 322, -1000, -1000, -1000, 72, -1000, -1000, 3358, -1000,
	260, 3120, -1000, 72, 260, 3120, 3120, 3120,
}
var RubyPgo = []int{

	0, 0, 591, 590, 35, 33, 585, 583, 580, 1136,
	579, 1, 38, 578, 577, 20, 576, 574, 1049, 573,
	570, 657, 572, 569, 565, 564, 561, 548, 547, 37,
	539, 12, 140, 538, 537, 5, 7, 536, 533, 532,
	14, 531, 530, 4, 529, 528, 524, 522, 520, 515,
	514, 513, 512, 511, 507, 1298, 506, 3, 13, 15,
	9, 503, 11, 490, 21, 473, 22, 463, 6, 450,
	16, 17, 10, 8, 413, 378, 370, 1300,
}
var RubyR1 = []int{

	0, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 76, 76, 77, 77, 55, 55, 55, 55, 19,
	19, 19, 19, 19, 19, 19, 19, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 29, 29, 29, 29, 29, 29, 29, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 40, 14,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 58, 58, 58, 58, 58, 58, 68, 68,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 72,
	72, 72, 72, 72, 70, 70, 70, 23, 23, 23,
	23, 23, 23, 62, 62, 73, 73, 73, 31, 31,
	31, 31, 30, 30, 33, 35, 35, 35, 15, 15,
	15, 15, 15, 15, 15, 16, 16, 71, 71, 34,
	34, 34, 34, 34, 34, 34, 9, 9, 32, 32,
	20, 20, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 2, 6,
	7, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	3, 3, 3, 3, 63, 63, 69, 69, 69, 5,
	5, 5, 5, 59, 67, 67, 67, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 60, 60,
	60, 60, 56, 56, 56, 8, 17, 17, 11, 11,
	11, 11, 74, 74, 65, 65, 57, 57, 24, 24,
	25, 26, 26, 28, 28, 28, 27, 27, 27, 12,
	41, 41, 64, 64, 64, 64, 64, 42, 42, 42,
	42, 42, 43, 43, 43, 43, 39, 38, 10, 37,
	37, 37, 37, 36, 36, 4,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 5, 1, 4, 4, 2, 3, 3, 4, 4,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 6, 7, 6,
	6, 4, 3, 7, 1, 5, 1, 3, 1, 3,
	0, 1, 1, 1, 2, 4, 4, 4, 5, 1,
	1, 4, 2, 5, 1, 3, 3, 5, 6, 7,
	8, 5, 6, 1, 3, 0, 1, 3, 1, 2,
	3, 2, 4, 6, 4, 1, 2, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 9, 6, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 4, 3, 3, 3, 4,
	3, 3, 3, 4, 3, 3, 3, 4, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 1, 1,
	5, 0, 1, 1, 1, 2, 4, 4, 4, 5,
	3, 5, 5, 5, 3, 7, 3, 7, 8, 3,
	4, 5, 5, 3, 0, 1, 3, 4, 5, 3,
	3, 3, 3, 3, 5, 6, 5, 3, 4, 3,
	3, 2, 0, 2, 2, 3, 4, 6, 2, 3,
	5, 4, 1, 3, 0, 2, 1, 2, 2, 1,
	1, 2, 1, 1, 3, 3, 1, 3, 3, 5,
	5, 5, 0, 2, 2, 2, 2, 5, 6, 5,
	6, 5, 4, 3, 3, 2, 4, 4, 2, 5,
	7, 4, 6, 4, 5, 3,
}
var RubyChk = []int{

	-1000, -61, 53, 54, 70, -1, 53, 54, 70, -18,
	-23, -30, -33, -15, -16, -34, -13, -17, -29, -24,
	-41, -37, -26, -27, -28, -40, -4, -25, -19, -7,
	-3, -35, -21, -22, -8, -10, -45, -46, -47, -48,
	-14, -39, -38, 14, 20, 21, 6, 8, -32, -20,
	-9, -44, -71, 16, 19, 25, -49, -50, -51, -52,
	-53, -54, -12, 33, 23, 24, 37, 32, 28, 29,
	31, 5, -2, -6, 62, 64, 12, 7, 9, 36,
	44, 45, 47, 48, 49, 67, 66, 39, 40, 54,
	53, 70, 16, 19, 26, 56, 41, 42, 4, 46,
	48, 49, 58, 59, 57, 19, 60, 34, 35, 50,
	19, 41, 62, 51, 16, 19, 56, 6, 4, -35,
	8, -35, 9, -58, -72, 62, 43, 51, 11, -70,
	-29, -18, -5, -21, 13, 64, 6, 8, -32, -20,
	-9, 9, 62, 12, 43, 51, 62, 43, 51, 11,
	43, 51, 11, 43, 51, 43, 11, 43, 11, -1,
	-1, -55, -68, -18, -1, -1, -18, -77, -68, 16,
	19, 16, 19, -77, -77, 9, -56, -5, 64, -1,
	-1, -18, -18, -18, 6, 8, 67, 6, 8, -1,
	-1, -18, 6, -18, -18, -77, -18, -1, -18, -18,
	-18, -18, -1, -18, -77, -77, -18, -1, -18, -70,
	-18, -1, -1, -1, 6, -62, 56, -73, 9, -31,
	6, 49, 59, -62, -55, 41, -55, -66, -18, -29,
	-15, 59, 6, 8, -32, -20, -9, -5, 11, -5,
	-18, -4, -70, -18, -40, -12, -18, -12, 6, -32,
	-20, 49, 11, 11, -55, -59, 57, -77, 62, -66,
	-18, -4, -70, -1, -1, -18, -1, -1, 6, -32,
	-20, 49, -1, -1, 6, -32, -20, 49, -1, -1,
	-1, 6, -32, -20, 49, -71, 6, 6, -55, 53,
	54, 53, 54, -1, -65, 11, 53, 53, -77, 53,
	-36, 38, -1, -1, -1, -1, -75, -18, -29, -15,
	59, 65, -63, -69, -21, -18, 6, -66, -1, 54,
	10, -77, 6, 8, -72, -58, 43, 9, -18, 55,
	-18, -18, 63, 11, 63, -5, -55, 6, 11, -73,
	43, 6, 6, -55, 15, -35, 15, 10, 11, -18,
	-77, 63, 63, 63, 6, -77, -18, -5, 6, 15,
	-55, -67, 6, -59, -55, -18, 10, 11, 63, 63,
	63, 63, 6, 6, 6, 62, 62, 15, -60, 18,
	17, -55, -55, 15, 17, -11, 26, -18, -64, -64,
	-36, 15, 17, 38, -68, -77, 11, -18, -77, 11,
	-77, 11, -77, 4, 55, 10, -5, -1, -66, -18,
	43, 15, -57, -11, -62, -31, 10, -18, 15, -57,
	-55, -5, -77, -18, 59, 43, 11, 59, 15, 57,
	11, -55, -77, 63, -77, 43, 43, -18, -18, 15,
	18, 17, -1, -55, 15, -60, 15, -55, -55, -74,
	4, -35, 15, 53, 54, -1, -42, 16, 19, 15,
	15, 17, -55, -68, -55, 63, -77, 65, -77, 65,
	-77, 65, -1, -18, 10, -1, 15, -11, -55, 15,
	15, 59, -18, -15, -29, 6, -1, 6, 6, 6,
	65, 65, 59, -77, -1, 63, 63, -1, -55, -55,
	15, 15, -55, 4, 11, 6, -1, -1, -55, 15,
	-55, -77, -18, -15, -29, 59, -18, 6, 15, -57,
	6, -18, 62, -1, -55, 6, -35, -55, 53, 53,
	54, 15, -77, -18, 4, 55, 15, 10, -18, -55,
	-64, -64, -64, -1, -18, 63, 15, -43, 18, 17,
	15, -43, 15, -76, 11, -77, 11, 15, 18, 17,
	-1, -64, 15, -77, -1, -64, -64, -64,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 0, 0, 0, 20, 21, 22, 23,
	24, 0, 0, 0, 0, 15, 42, 43, 44, 45,
	46, 47, 48, 259, 0, 0, 13, 262, 266, 263,
	260, 19, 25, 26, 13, 13, 147, 72, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 5,
	6, 7, 0, 0, 0, 0, 0, 0, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 13, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 135, 15,
	145, 15, -2, 75, 84, 13, 0, 0, 0, 104,
	106, 119, 120, 31, 15, 13, 20, 21, 22, 23,
	24, 110, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 15,
	0, 254, 258, 108, 0, 0, 13, 0, 261, 0,
	0, 0, 0, 201, 0, 110, 0, 288, 13, 188,
	189, 190, 191, 69, 168, 169, 0, 166, 167, 229,
	237, 68, 77, 85, 87, 0, 192, 193, 194, 195,
	196, 197, 231, 0, 0, 0, 295, 233, 86, 0,
	124, 165, 230, 232, 81, 15, 0, 133, 135, 136,
	138, 0, 0, 15, 0, 0, 0, 0, 111, 112,
	113, 0, 20, 21, 22, 23, 24, 76, 13, 122,
	124, 0, 0, 148, 149, 150, 159, 160, 172, 173,
	174, 0, 13, 0, 0, 15, 224, 15, 13, 0,
	124, 0, 0, 151, 161, 0, 152, 162, 176, 177,
	178, 0, 153, 163, 180, 181, 182, 0, 154, 164,
	155, 184, 185, 186, 0, 156, 0, 0, 0, 15,
	15, 16, 17, 18, 0, 0, 272, 272, 0, 14,
	0, 0, 267, 268, 264, 265, 13, 202, 203, 204,
	0, 210, 13, 13, -2, 0, 20, 0, 243, 244,
	245, 15, 170, 171, 78, 79, 0, -2, 101, 0,
	286, 287, 95, 0, 96, 82, 0, 135, 0, 0,
	0, 139, 141, 0, 142, 15, 144, 70, 13, 114,
	0, 88, 91, 93, 175, 0, 125, 126, 107, 219,
	0, 0, 225, 15, 13, 124, 74, 13, 89, 92,
	94, 90, 179, 183, 187, 0, 0, 227, 0, 0,
	15, 0, 0, 246, 15, 255, 15, 109, 0, 0,
	0, 291, 15, 0, 15, 0, 13, 205, 0, 13,
	0, 13, 0, 13, 0, 73, 80, 83, 0, 269,
	0, 127, 0, 256, 15, 137, 134, 140, 131, 0,
	0, 71, 0, 121, 0, 0, 0, 0, 220, 223,
	0, 0, 0, 88, 0, 13, 0, 0, 0, 228,
	0, 15, 15, 241, 234, 0, 236, 0, 248, 15,
	0, 252, 270, 273, 274, 275, 276, 0, 0, 271,
	289, 15, 0, 15, 13, 200, 0, 211, 0, 212,
	0, 213, 214, 216, 102, 100, 128, 257, 0, 132,
	143, 0, 115, 116, 117, 123, 97, 0, 105, 226,
	221, 222, 0, 0, 99, 0, 158, 15, 239, 240,
	235, 247, 249, 0, 0, 15, 15, 0, 0, 292,
	13, 293, 206, 207, 208, 0, 0, 0, 129, 0,
	20, 118, 0, 98, 238, 15, 253, 251, 272, 15,
	15, 290, 294, 209, 13, 0, 130, 103, 0, 250,
	0, 0, 0, 11, 13, 157, 277, 0, 0, 272,
	279, 0, 281, 215, 12, 217, 13, 278, 0, 272,
	272, 285, 280, 218, 272, 283, 284, 282,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:211
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:213
		{
		}
	case 3:
		//line parser.y:215
		{
		}
	case 4:
		//line parser.y:217
		{
		}
	case 5:
		//line parser.y:219
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:221
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:223
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:229
		{
		}
	case 11:
		//line parser.y:231
		{
		}
	case 12:
		//line parser.y:232
		{
		}
	case 13:
		//line parser.y:234
		{
		}
	case 14:
		//line parser.y:235
		{
		}
	case 15:
		//line parser.y:238
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:240
		{
		}
	case 17:
		//line parser.y:242
		{
		}
	case 18:
		//line parser.y:244
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		//line parser.y:256
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 69:
		//line parser.y:259
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 70:
		//line parser.y:262
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 71:
		//line parser.y:269
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 72:
		//line parser.y:276
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 73:
		//line parser.y:280
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 74:
		//line parser.y:287
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 75:
		//line parser.y:294
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 76:
		//line parser.y:301
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 77:
		//line parser.y:308
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 78:
		//line parser.y:315
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 79:
		//line parser.y:323
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 80:
		//line parser.y:331
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 81:
		//line parser.y:339
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 82:
		//line parser.y:347
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 83:
		//line parser.y:355
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 84:
		//line parser.y:366
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 85:
		//line parser.y:373
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 86:
		//line parser.y:381
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 87:
		//line parser.y:389
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 88:
		//line parser.y:399
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 89:
		//line parser.y:407
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 90:
		//line parser.y:415
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 91:
		//line parser.y:423
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 92:
		//line parser.y:431
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 93:
		//line parser.y:439
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 94:
		//line parser.y:447
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 95:
		//line parser.y:455
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 96:
		//line parser.y:463
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 97:
		//line parser.y:473
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:481
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 99:
		//line parser.y:492
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 100:
		//line parser.y:500
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 101:
		//line parser.y:510
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 102:
		//line parser.y:520
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 103:
		//line parser.y:522
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 104:
		//line parser.y:524
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 105:
		//line parser.y:526
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 106:
		//line parser.y:528
		{
			RubyVAL.genericSlice = []ast.Node{RubyS[Rubypt-0].genericValue}
		}
	case 107:
		//line parser.y:530
		{
			RubyVAL.genericSlice = []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}
		}
	case 108:
		//line parser.y:533
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 109:
		//line parser.y:535
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 110:
		//line parser.y:537
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 111:
		//line parser.y:539
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 112:
		//line parser.y:541
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:543
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:545
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 115:
		//line parser.y:552
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:554
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:556
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:558
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 119:
		//line parser.y:567
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:569
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:571
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:573
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:575
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 124:
		//line parser.y:578
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:580
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:582
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:586
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 128:
		//line parser.y:594
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:603
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:612
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:622
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 132:
		//line parser.y:630
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 133:
		//line parser.y:641
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 134:
		//line parser.y:643
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 135:
		//line parser.y:645
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 136:
		//line parser.y:647
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:649
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:652
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 139:
		//line parser.y:654
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 140:
		//line parser.y:656
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 141:
		//line parser.y:658
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 142:
		//line parser.y:662
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name: RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 143:
		//line parser.y:669
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 144:
		//line parser.y:679
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 145:
		//line parser.y:688
		{
			RubyVAL.genericValue = ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
		}
	case 146:
		//line parser.y:695
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(string)}, "")
			pieces := strings.Split(fullName, "::")

			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.Join(pieces[:len(pieces)-1], "::"),
				IsGlobalNamespace: false,
			}
		}
	case 147:
		//line parser.y:707
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(string), "::")
			namespace := strings.Join(pieces[:len(pieces)-1], "::")
			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.TrimPrefix(namespace, "::"),
				IsGlobalNamespace: true,
			}
		}
	case 148:
		//line parser.y:718
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 149:
		//line parser.y:725
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 150:
		//line parser.y:729
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 151:
		//line parser.y:733
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 152:
		//line parser.y:740
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 153:
		//line parser.y:747
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 154:
		//line parser.y:754
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 155:
		//line parser.y:762
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 156:
		//line parser.y:769
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 157:
		//line parser.y:777
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 158:
		//line parser.y:792
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 159:
		//line parser.y:798
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 160:
		//line parser.y:805
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 161:
		//line parser.y:809
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:816
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 163:
		//line parser.y:823
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 164:
		//line parser.y:830
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 165:
		//line parser.y:837
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 166:
		//line parser.y:840
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 167:
		//line parser.y:842
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 168:
		//line parser.y:845
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:847
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:850
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 171:
		//line parser.y:852
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 172:
		//line parser.y:855
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 173:
		//line parser.y:857
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 174:
		//line parser.y:859
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 175:
		//line parser.y:861
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 176:
		//line parser.y:864
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:866
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 178:
		//line parser.y:868
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 179:
		//line parser.y:870
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 180:
		//line parser.y:873
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:875
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 182:
		//line parser.y:877
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 183:
		//line parser.y:879
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 184:
		//line parser.y:882
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 185:
		//line parser.y:884
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 186:
		//line parser.y:886
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 187:
		//line parser.y:888
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 188:
		//line parser.y:891
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:892
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:893
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 191:
		//line parser.y:894
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 192:
		//line parser.y:897
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 193:
		//line parser.y:906
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 194:
		//line parser.y:915
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 195:
		//line parser.y:924
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:933
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 197:
		//line parser.y:942
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 198:
		//line parser.y:950
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 199:
		//line parser.y:951
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 200:
		//line parser.y:953
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 201:
		//line parser.y:955
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 202:
		//line parser.y:957
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 203:
		//line parser.y:959
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 204:
		//line parser.y:961
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 205:
		//line parser.y:963
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 206:
		//line parser.y:970
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:972
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 208:
		//line parser.y:974
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 209:
		//line parser.y:976
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 210:
		//line parser.y:984
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 211:
		//line parser.y:986
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 212:
		//line parser.y:994
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 213:
		//line parser.y:1002
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 214:
		//line parser.y:1005
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 215:
		//line parser.y:1012
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 216:
		//line parser.y:1020
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 217:
		//line parser.y:1027
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 218:
		//line parser.y:1034
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 219:
		//line parser.y:1042
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 220:
		//line parser.y:1044
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 221:
		//line parser.y:1051
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 222:
		//line parser.y:1055
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 223:
		//line parser.y:1058
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 224:
		//line parser.y:1060
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 225:
		//line parser.y:1062
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1064
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 227:
		//line parser.y:1067
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 228:
		//line parser.y:1074
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 229:
		//line parser.y:1082
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 230:
		//line parser.y:1089
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 231:
		//line parser.y:1096
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 232:
		//line parser.y:1103
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 233:
		//line parser.y:1110
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 234:
		//line parser.y:1117
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 235:
		//line parser.y:1124
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 236:
		//line parser.y:1132
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 237:
		//line parser.y:1139
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 238:
		//line parser.y:1148
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 239:
		//line parser.y:1155
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 240:
		//line parser.y:1162
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 241:
		//line parser.y:1169
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 242:
		//line parser.y:1176
		{
		}
	case 243:
		//line parser.y:1177
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 244:
		//line parser.y:1178
		{
		}
	case 245:
		//line parser.y:1181
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 246:
		//line parser.y:1184
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 247:
		//line parser.y:1191
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 248:
		//line parser.y:1200
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 249:
		//line parser.y:1202
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 250:
		//line parser.y:1215
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 251:
		//line parser.y:1234
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 252:
		//line parser.y:1248
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 253:
		//line parser.y:1250
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1253
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 255:
		//line parser.y:1255
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 256:
		//line parser.y:1258
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 257:
		//line parser.y:1260
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 258:
		//line parser.y:1263
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 259:
		//line parser.y:1270
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 260:
		//line parser.y:1272
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 261:
		//line parser.y:1275
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 262:
		//line parser.y:1283
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 263:
		//line parser.y:1287
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 264:
		//line parser.y:1289
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 265:
		//line parser.y:1291
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 266:
		//line parser.y:1295
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 267:
		//line parser.y:1297
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 268:
		//line parser.y:1299
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 269:
		//line parser.y:1303
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 270:
		//line parser.y:1312
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 271:
		//line parser.y:1314
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 272:
		//line parser.y:1317
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 273:
		//line parser.y:1319
		{
		}
	case 274:
		//line parser.y:1321
		{
		}
	case 275:
		//line parser.y:1323
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 276:
		//line parser.y:1325
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 277:
		//line parser.y:1328
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 278:
		//line parser.y:1335
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 279:
		//line parser.y:1343
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 280:
		//line parser.y:1350
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 281:
		//line parser.y:1358
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 282:
		//line parser.y:1366
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 283:
		//line parser.y:1373
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 284:
		//line parser.y:1380
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 285:
		//line parser.y:1387
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 286:
		//line parser.y:1395
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 287:
		//line parser.y:1398
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 288:
		//line parser.y:1400
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 289:
		//line parser.y:1403
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 290:
		//line parser.y:1405
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 291:
		//line parser.y:1407
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 292:
		//line parser.y:1409
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 293:
		//line parser.y:1412
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 294:
		//line parser.y:1414
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 295:
		//line parser.y:1416
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

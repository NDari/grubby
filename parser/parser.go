//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	hashPair        ast.HashKeyValuePair
	astString       ast.String

	methodParam      ast.MethodParam
	methodParamSlice []ast.MethodParam
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const IVAR_OR_CLASS_VARIABLE = 57355
const LPAREN = 57356
const RPAREN = 57357
const COMMA = 57358
const STRING = 57359
const NamespacedModule = 57360
const ProcArg = 57361
const DO = 57362
const DEF = 57363
const END = 57364
const IF = 57365
const ELSE = 57366
const ELSIF = 57367
const UNLESS = 57368
const CLASS = 57369
const MODULE = 57370
const FOR = 57371
const WHILE = 57372
const UNTIL = 57373
const BEGIN = 57374
const RESCUE = 57375
const ENSURE = 57376
const BREAK = 57377
const NEXT = 57378
const REDO = 57379
const RETRY = 57380
const RETURN = 57381
const YIELD = 57382
const AND = 57383
const OR = 57384
const LAMBDA = 57385
const CASE = 57386
const WHEN = 57387
const ALIAS = 57388
const SELF = 57389
const NIL = 57390
const DEFINED = 57391
const LESSTHAN = 57392
const GREATERTHAN = 57393
const EQUALTO = 57394
const BANG = 57395
const COMPLEMENT = 57396
const BINARY_PLUS = 57397
const UNARY_PLUS = 57398
const BINARY_MINUS = 57399
const UNARY_MINUS = 57400
const STAR = 57401
const RANGE = 57402
const EXCLUSIVE_RANGE = 57403
const OR_EQUALS = 57404
const AND_EQUALS = 57405
const WHITESPACE = 57406
const NEWLINE = 57407
const SEMICOLON = 57408
const COLON = 57409
const DOT = 57410
const PIPE = 57411
const SLASH = 57412
const AMPERSAND = 57413
const QUESTIONMARK = 57414
const CARET = 57415
const LBRACKET = 57416
const RBRACKET = 57417
const LBRACE = 57418
const RBRACE = 57419
const FILE_CONST_REF = 57420
const LINE_CONST_REF = 57421
const EOF = 57422

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"IVAR_OR_CLASS_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"DEFINED",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"EXCLUSIVE_RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1902

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 129,
	68, 20,
	-2, 157,
	-1, 140,
	21, 259,
	23, 259,
	26, 259,
	27, 259,
	28, 259,
	30, 259,
	31, 259,
	32, 259,
	35, 259,
	36, 259,
	38, 259,
	39, 259,
	40, 259,
	44, 259,
	46, 259,
	66, 259,
	-2, 11,
	-1, 151,
	21, 13,
	23, 13,
	26, 13,
	27, 13,
	28, 13,
	30, 13,
	31, 13,
	32, 13,
	35, 13,
	36, 13,
	38, 13,
	39, 13,
	40, 13,
	44, 13,
	46, 13,
	66, 13,
	-2, 11,
	-1, 209,
	21, 259,
	23, 259,
	26, 259,
	27, 259,
	28, 259,
	30, 259,
	31, 259,
	32, 259,
	35, 259,
	36, 259,
	38, 259,
	39, 259,
	40, 259,
	44, 259,
	46, 259,
	66, 259,
	-2, 11,
	-1, 213,
	21, 13,
	23, 13,
	26, 13,
	27, 13,
	28, 13,
	30, 13,
	31, 13,
	32, 13,
	35, 13,
	36, 13,
	38, 13,
	39, 13,
	40, 13,
	44, 13,
	46, 13,
	66, 13,
	77, 13,
	-2, 11,
	-1, 353,
	16, 126,
	-2, 20,
	-1, 364,
	21, 259,
	23, 259,
	26, 259,
	27, 259,
	28, 259,
	30, 259,
	31, 259,
	32, 259,
	35, 259,
	36, 259,
	38, 259,
	39, 259,
	40, 259,
	44, 259,
	46, 259,
	66, 259,
	-2, 11,
	-1, 402,
	65, 11,
	77, 11,
	-2, 13,
	-1, 445,
	65, 11,
	77, 11,
	-2, 13,
	-1, 561,
	65, 11,
	77, 11,
	-2, 14,
	-1, 603,
	16, 135,
	-2, 11,
	-1, 607,
	65, 11,
	77, 11,
	-2, 14,
}

const RubyNprod = 324
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4657

var RubyAct = []int{

	332, 457, 5, 648, 164, 155, 460, 458, 143, 430,
	186, 419, 154, 258, 142, 255, 293, 141, 339, 256,
	25, 272, 21, 55, 126, 150, 14, 127, 54, 132,
	371, 69, 129, 68, 338, 133, 99, 134, 135, 100,
	2, 3, 93, 101, 338, 536, 646, 167, 338, 175,
	165, 122, 150, 338, 338, 4, 632, 183, 184, 338,
	605, 192, 193, 124, 125, 559, 531, 413, 338, 149,
	371, 529, 94, 95, 196, 123, 371, 153, 97, 96,
	489, 213, 214, 215, 338, 26, 106, 208, 168, 535,
	198, 411, 396, 98, 527, 212, 371, 375, 169, 170,
	220, 221, 222, 72, 71, 153, 371, 171, 213, 229,
	166, 290, 373, 167, 234, 604, 165, 417, 172, 416,
	241, 206, 245, 115, 116, 250, 251, 252, 253, 412,
	371, 171, 104, 105, 621, 410, 157, 107, 122, 108,
	171, 109, 120, 28, 378, 263, 262, 128, 264, 644,
	103, 112, 110, 111, 168, 394, 270, 645, 271, 121,
	167, 367, 123, 165, 157, 374, 277, 289, 279, 302,
	303, 304, 592, 307, 308, 309, 166, 313, 314, 315,
	338, 120, 590, 338, 195, 175, 153, 290, 294, 370,
	242, 340, 290, 247, 156, 481, 623, 486, 207, 338,
	236, 341, 342, 343, 344, 324, 244, 197, 316, 248,
	591, 338, 356, 351, 273, 497, 153, 106, 496, 349,
	480, 172, 156, 166, 563, 456, 554, 119, 227, 455,
	275, 173, 174, 348, 453, 381, 300, 237, 238, 360,
	338, 305, 361, 171, 99, 157, 338, 100, 176, 317,
	266, 101, 301, 643, 115, 116, 176, 306, 99, 259,
	338, 100, 269, 104, 105, 101, 177, 178, 107, 376,
	108, 261, 109, 291, 338, 157, 338, 379, 392, 30,
	259, 103, 112, 110, 111, 642, 616, 299, 567, 278,
	281, 283, 261, 73, 482, 99, 153, 351, 100, 641,
	617, 618, 101, 156, 428, 459, 106, 628, 409, 626,
	401, 260, 99, 182, 321, 100, 337, 259, 99, 101,
	322, 100, 310, 624, 257, 101, 153, 130, 311, 261,
	481, 355, 380, 156, 601, 359, 284, 328, 329, 180,
	427, 131, 285, 115, 116, 153, 431, 202, 594, 181,
	203, 436, 104, 105, 336, 157, 432, 107, 551, 108,
	335, 109, 200, 447, 444, 201, 323, 273, 544, 260,
	103, 112, 110, 111, 312, 179, 446, 566, 205, 424,
	153, 425, 153, 275, 522, 157, 523, 482, 286, 468,
	428, 426, 461, 473, 393, 469, 433, 576, 434, 479,
	465, 466, 467, 334, 157, 296, 476, 435, 577, 398,
	272, 483, 493, 156, 403, 442, 405, 440, 407, 435,
	475, 503, 492, 99, 438, 661, 100, 658, 657, 167,
	101, 517, 517, 448, 506, 656, 345, 658, 657, 157,
	182, 157, 571, 156, 502, 501, 525, 382, 500, 449,
	502, 501, 462, 378, 541, 463, 542, 543, 371, 537,
	545, 180, 156, 378, 287, 546, 611, 386, 437, 578,
	385, 552, 612, 439, 441, 579, 546, 153, 512, 478,
	204, 556, 557, 138, 77, 137, 450, 558, 451, 452,
	415, 138, 77, 454, 138, 77, 414, 156, 565, 156,
	397, 384, 568, 383, 382, 326, 325, 254, 224, 346,
	511, 352, 333, 1, 472, 211, 91, 90, 89, 88,
	580, 581, 87, 86, 487, 41, 40, 39, 38, 518,
	20, 495, 43, 44, 16, 493, 157, 477, 539, 12,
	13, 588, 11, 45, 24, 23, 22, 27, 19, 10,
	595, 597, 599, 35, 18, 587, 596, 598, 600, 15,
	528, 479, 530, 70, 532, 608, 534, 487, 603, 602,
	42, 17, 46, 37, 36, 31, 29, 32, 74, 0,
	0, 0, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 622, 156, 555, 0, 0, 625, 0,
	627, 0, 629, 546, 0, 546, 0, 546, 0, 0,
	560, 0, 0, 0, 0, 0, 0, 0, 564, 0,
	0, 0, 0, 0, 0, 0, 637, 638, 639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 517, 517,
	517, 478, 652, 158, 0, 0, 0, 0, 585, 0,
	659, 0, 158, 0, 0, 158, 158, 0, 663, 593,
	660, 517, 0, 0, 0, 517, 517, 517, 664, 665,
	0, 158, 0, 666, 0, 0, 158, 158, 158, 0,
	106, 0, 0, 606, 0, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 0, 158, 158, 477,
	158, 0, 158, 158, 158, 158, 620, 158, 0, 102,
	158, 158, 0, 158, 0, 158, 158, 115, 116, 0,
	0, 0, 0, 106, 0, 630, 104, 105, 0, 633,
	158, 107, 0, 108, 0, 109, 0, 158, 158, 158,
	158, 0, 0, 0, 103, 112, 110, 111, 114, 0,
	0, 0, 158, 0, 0, 0, 158, 0, 0, 158,
	115, 116, 654, 0, 158, 0, 0, 0, 0, 104,
	105, 0, 158, 0, 107, 0, 108, 662, 109, 117,
	118, 0, 158, 0, 0, 0, 0, 103, 112, 110,
	111, 0, 0, 0, 494, 0, 0, 0, 0, 158,
	158, 69, 159, 68, 78, 160, 77, 162, 161, 140,
	0, 148, 93, 0, 163, 150, 0, 158, 0, 0,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 158, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 94, 95, 92, 0, 0, 145, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 146, 147, 106,
	0, 0, 158, 0, 0, 0, 0, 0, 0, 144,
	0, 151, 0, 72, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 0, 0, 0, 158, 0,
	158, 0, 158, 0, 0, 0, 115, 116, 106, 0,
	0, 0, 0, 0, 0, 104, 105, 0, 9, 0,
	107, 158, 108, 0, 109, 117, 118, 0, 0, 0,
	0, 0, 0, 103, 112, 110, 111, 158, 0, 0,
	395, 0, 0, 158, 0, 115, 116, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 158, 0, 158, 107,
	0, 108, 158, 109, 117, 118, 158, 0, 0, 152,
	0, 0, 103, 112, 110, 111, 0, 0, 187, 372,
	0, 194, 199, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 210, 0, 0,
	0, 158, 216, 217, 218, 0, 0, 0, 0, 0,
	158, 219, 0, 0, 0, 0, 0, 0, 0, 158,
	158, 223, 0, 225, 226, 0, 228, 0, 230, 231,
	232, 233, 0, 235, 0, 0, 239, 240, 158, 243,
	0, 246, 249, 0, 0, 0, 158, 0, 0, 0,
	0, 0, 0, 158, 158, 158, 267, 158, 0, 0,
	0, 0, 0, 274, 276, 280, 282, 0, 69, 159,
	68, 78, 160, 77, 162, 161, 79, 0, 152, 93,
	0, 163, 298, 0, 0, 249, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 0, 0, 0, 320, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 152, 94,
	95, 92, 0, 106, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 347, 354, 338, 0, 0,
	0, 158, 0, 158, 0, 113, 75, 0, 76, 0,
	72, 71, 102, 320, 0, 0, 365, 0, 0, 0,
	115, 116, 0, 0, 0, 0, 368, 369, 158, 104,
	105, 0, 0, 0, 107, 0, 108, 0, 109, 117,
	118, 0, 0, 0, 106, 295, 0, 103, 112, 110,
	111, 114, 0, 33, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 0,
	402, 115, 116, 0, 406, 0, 408, 0, 210, 0,
	104, 105, 0, 0, 158, 107, 0, 108, 0, 109,
	117, 118, 136, 139, 0, 0, 0, 152, 103, 112,
	110, 111, 114, 188, 292, 0, 188, 0, 0, 0,
	0, 0, 0, 429, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 188, 188, 188,
	0, 0, 152, 0, 210, 0, 188, 0, 445, 0,
	0, 0, 249, 0, 0, 0, 188, 0, 188, 188,
	0, 188, 0, 188, 188, 188, 188, 0, 188, 0,
	464, 188, 188, 185, 188, 0, 188, 188, 0, 0,
	0, 0, 474, 0, 0, 0, 0, 484, 0, 0,
	0, 188, 0, 0, 0, 0, 354, 0, 188, 188,
	188, 188, 0, 0, 0, 498, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	188, 0, 0, 0, 187, 188, 0, 0, 0, 106,
	0, 0, 533, 188, 0, 0, 0, 0, 0, 210,
	538, 540, 0, 484, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 288, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 0, 188, 0,
	107, 188, 108, 0, 109, 117, 118, 0, 0, 0,
	0, 188, 188, 103, 112, 110, 111, 0, 327, 0,
	0, 0, 0, 0, 0, 69, 189, 68, 78, 190,
	77, 134, 191, 79, 0, 0, 93, 586, 0, 354,
	389, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 474, 188, 94, 95, 92, 188,
	0, 188, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 338, 0, 0, 0, 0, 0,
	377, 115, 116, 75, 0, 76, 589, 72, 71, 387,
	104, 105, 390, 0, 0, 107, 0, 108, 188, 109,
	117, 118, 0, 631, 188, 0, 0, 366, 103, 112,
	110, 111, 0, 0, 400, 0, 0, 0, 404, 0,
	640, 0, 0, 188, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 159, 68, 78,
	160, 77, 162, 161, 140, 188, 0, 93, 0, 163,
	150, 0, 0, 422, 423, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 80, 0, 0, 0, 94, 95, 92,
	188, 188, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 513, 0, 0, 0, 0, 443, 0, 188,
	0, 106, 0, 0, 297, 0, 151, 188, 72, 71,
	0, 0, 0, 0, 470, 188, 188, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 488, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 115, 116,
	0, 0, 0, 0, 0, 0, 504, 104, 105, 0,
	508, 509, 107, 510, 108, 0, 109, 0, 0, 524,
	0, 526, 0, 0, 0, 103, 112, 110, 111, 114,
	488, 0, 69, 159, 68, 78, 160, 77, 162, 161,
	140, 0, 148, 93, 547, 163, 150, 0, 0, 0,
	548, 549, 550, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 94, 95, 92, 0, 562, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 569, 570, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 0,
	297, 613, 151, 0, 72, 71, 0, 0, 582, 0,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	189, 68, 78, 190, 77, 134, 191, 79, 188, 0,
	93, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	0, 0, 0, 609, 0, 0, 80, 0, 610, 0,
	94, 95, 92, 614, 615, 327, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 338, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 0, 0, 0, 635, 636, 0, 0,
	0, 0, 422, 423, 69, 50, 68, 78, 51, 77,
	53, 52, 79, 0, 0, 93, 0, 0, 0, 47,
	651, 519, 650, 649, 520, 48, 49, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 92, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 0, 515, 516, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 72, 71, 69, 50,
	68, 78, 51, 77, 53, 52, 79, 0, 0, 93,
	0, 0, 0, 47, 647, 519, 650, 649, 520, 48,
	49, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 92, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 0, 515, 516, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	72, 71, 69, 50, 68, 78, 51, 77, 53, 52,
	79, 0, 0, 93, 0, 0, 0, 47, 505, 56,
	421, 420, 57, 48, 49, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 92, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	0, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 72, 71, 69, 50, 68, 78,
	51, 77, 53, 52, 79, 0, 0, 93, 0, 0,
	0, 47, 418, 56, 421, 420, 57, 48, 49, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 92,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 0, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 72, 71,
	69, 50, 68, 78, 51, 77, 53, 52, 79, 0,
	0, 93, 0, 0, 0, 47, 0, 56, 0, 0,
	57, 48, 49, 0, 60, 61, 58, 428, 459, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 92, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 0, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 72, 71, 69, 50, 68, 78, 51, 77,
	53, 52, 79, 0, 0, 93, 0, 0, 0, 47,
	572, 56, 0, 0, 57, 48, 49, 0, 60, 61,
	58, 0, 573, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 92, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 0, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 72, 71, 69, 50,
	68, 78, 51, 77, 53, 52, 79, 0, 0, 93,
	0, 0, 0, 47, 0, 56, 0, 0, 57, 48,
	49, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 92, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 0, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	72, 71, 8, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 653,
	519, 0, 0, 520, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 515, 516, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 634, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 619, 56, 0,
	0, 57, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 583, 56, 0, 0, 57, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 574, 56, 0, 0, 57,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 553,
	56, 0, 0, 57, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 521, 519, 0, 0, 520, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 515, 516, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 514, 519, 0,
	0, 520, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	515, 516, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 507, 56, 0, 0, 57, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 0, 56, 0, 0, 57,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	490, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 485,
	56, 0, 0, 57, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 471, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 399, 56, 0,
	0, 57, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 391, 56, 0, 0, 57, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 388, 56, 0, 0, 57,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 0,
	519, 0, 0, 520, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 515, 516, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 0, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 0, 56, 0,
	0, 57, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	607, 331, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 0, 56, 0, 0, 57, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 561, 331, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 358, 0,
	93, 0, 0, 0, 47, 0, 56, 0, 0, 57,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 0, 357,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 0,
	56, 0, 0, 57, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 0, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 159, 68, 78, 160, 77, 162, 161, 140,
	0, 0, 93, 0, 163, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 94, 95, 92, 0, 0, 145, 81, 82,
	0, 83, 0, 84, 85, 69, 353, 68, 78, 190,
	77, 134, 191, 79, 0, 0, 93, 0, 0, 297,
	0, 151, 0, 72, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 350, 72, 71, 69,
	189, 68, 78, 190, 77, 134, 191, 364, 0, 0,
	93, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	94, 95, 92, 0, 0, 362, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 0, 151,
	0, 72, 71, 69, 159, 68, 78, 160, 77, 162,
	161, 140, 0, 0, 93, 0, 163, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 69, 189, 68,
	78, 190, 77, 134, 191, 79, 0, 0, 93, 0,
	0, 297, 0, 151, 0, 72, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 189, 68, 78, 190, 77, 134, 191, 79,
	0, 0, 93, 0, 0, 69, 159, 68, 78, 160,
	77, 162, 161, 209, 0, 0, 93, 0, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 62,
	0, 0, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 80, 84, 85, 0, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 75,
	0, 76, 0, 72, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	189, 68, 78, 190, 77, 134, 191, 79, 0, 0,
	93, 0, 0, 69, 318, 68, 78, 190, 77, 134,
	319, 79, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	80, 84, 85, 0, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 75, 0, 76,
	0, 72, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 159, 68,
	78, 160, 77, 162, 161, 79, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 655, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 106, 295, 0, 0,
	0, 0, 115, 116, 0, 75, 0, 76, 0, 72,
	71, 104, 105, 0, 0, 0, 107, 0, 108, 106,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	112, 110, 111, 115, 116, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 0, 0, 0, 107, 0, 108,
	0, 109, 0, 0, 0, 0, 115, 116, 0, 0,
	103, 112, 110, 111, 0, 104, 105, 0, 0, 0,
	107, 0, 108, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 112, 110, 111,
}
var RubyPact = []int{

	-25, 2292, -1000, -1000, -1000, 13, -1000, -1000, -1000, 1099,
	-1000, -1000, -1000, -1000, 201, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 107, 1, -1000, 79, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 25, 481, 484,
	795, 36, 169, 204, 323, 297, 3921, 3921, -1000, 4413,
	3921, 3921, 4413, 4501, 339, 324, -1000, 472, -1000, -1000,
	361, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4339, -1000,
	32, 3921, 3921, 4413, 4413, 4413, -1000, -1000, -1000, -1000,
	-1000, -1000, 4413, -1000, -1000, -1000, -1000, -1000, -1000, 3921,
	3921, 3921, 4413, 501, 4413, 4413, -1000, 4413, 3921, 4413,
	4413, 4413, 4413, 3921, 4413, -1000, -1000, 4413, 4413, 3921,
	4413, 3921, 4413, 4413, 3921, 3921, 3921, 3921, 500, 310,
	78, 77, 310, -1000, -1000, -1000, 200, 4413, 418, -1000,
	-1000, 32, -1000, 5, 4413, 4325, 4413, 4413, 329, 448,
	42, 123, 1160, -1000, -1000, 389, -1000, -1000, 88, 3995,
	102, 66, 196, 4413, -1000, -1000, 4413, -1000, 3921, 3921,
	3921, 4413, 3921, 3921, 3921, 315, 3921, 3921, 3921, 4427,
	307, 499, 498, 400, 272, 3551, 387, 4585, 68, 4197,
	149, 57, 295, 289, 4585, 146, 387, -1000, -1000, 1607,
	3921, 3921, 3921, 3921, 428, -1000, 1052, 4049, 394, -1000,
	1160, 3773, -1000, 123, 400, 400, 4585, 4585, 4585, 4585,
	400, 400, 400, 4585, 4123, 4585, 4585, 4251, 4585, 400,
	4585, 4585, 4585, 4585, 400, 1450, 94, 4251, 4251, 4585,
	4585, 400, 114, 894, 37, 400, 4585, 90, 22, 1345,
	400, 400, 400, 400, 32, -1000, 447, 273, -1000, 183,
	497, 496, 494, 463, -1000, 3403, 484, 4585, 3329, 1052,
	-1000, -1000, -1000, 80, 855, 17, 676, -1000, -1000, -1000,
	1607, -1000, 1607, -1000, -1000, -1000, 493, -1000, 3255, -1000,
	252, 4049, 3551, -1000, -1000, 4413, -1000, 4413, 4585, 1052,
	60, 16, 400, 400, 400, 54, -8, 400, 400, 400,
	-1000, -1000, 489, 400, 400, 400, 445, 442, 1676, 33,
	4585, -1000, -1000, 483, 424, 45, 43, 2070, -1000, -1000,
	-1000, -1000, 400, 357, 4413, -1000, -1000, 146, -1000, 374,
	4413, 400, 400, 400, 400, -1000, 408, 4585, -1000, -1000,
	-1000, 401, 399, 1540, 4562, 1052, 400, -1000, -1000, 4251,
	-1000, 32, 3921, 4413, -1000, 4585, -1000, -1000, 4585, 4585,
	182, -1000, 177, -1000, 173, -1000, -1000, 2144, 252, 437,
	440, 4413, -1000, -1000, 310, 310, 310, 2144, -1000, -1000,
	3181, -1000, 377, 1052, 168, 278, -1000, -1000, 1763, -1000,
	3107, 128, 4562, 3, 3033, 118, 4585, 4251, 719, 394,
	166, -1000, 163, -1000, -1000, -1000, 4413, 4413, -1000, 426,
	3921, -1000, 1996, 2959, -1000, -1000, -1000, -1000, 473, 4585,
	2885, 2811, 362, -1000, -1000, 4413, 387, 19, -1000, -6,
	-1000, -11, -1000, 4413, 394, 4585, -1000, 400, 14, -30,
	1052, 4251, 4251, 3921, 4251, 3921, 3921, 346, 271, -1000,
	-1000, -1000, -1000, -1000, 4585, -1000, -1000, -1000, 336, 271,
	2737, -1000, 211, -1000, 1160, -1000, -1000, -1000, -1000, 389,
	3921, 3921, 480, -1000, 4585, -1000, -1000, -12, 3551, -1000,
	-1000, 3699, -1000, -1000, 143, 209, -1000, 3921, 302, 213,
	-1000, 3921, -1000, 400, 3551, -1000, 420, -1000, 2218, 2663,
	3551, 392, 462, -1000, -1000, -1000, -1000, 400, -1000, 3921,
	3921, -1000, -1000, -1000, 2589, 387, 3551, -1000, 1052, -1000,
	1419, -1000, 175, 4585, 195, 120, -1000, 377, 4585, -1000,
	1345, 400, 400, 400, -1000, 326, -1000, 3551, 2144, 2144,
	2144, -1000, 312, -1000, 32, 1052, 400, 400, 41, -1000,
	-17, -1000, 3625, -1000, 3847, 400, 371, -1000, 400, 3551,
	3551, -1000, -1000, -1000, -1000, 3551, 459, 484, -1000, -1000,
	221, 235, 2515, -1000, 3551, 115, 4585, -1000, -1000, -1000,
	67, -1000, 3921, 181, -1000, 301, 271, 287, 271, 285,
	271, -1000, -1000, -1000, 4413, -1000, -21, -1000, 400, 3551,
	2441, -1000, -1000, -1000, 3551, 3551, -1000, -1000, -1000, -1000,
	115, 4413, 400, -1000, -1000, 277, -1000, 263, -1000, 231,
	134, 82, -1000, -31, -1000, 3551, 3551, 1922, 1848, 2367,
	4531, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 413, 3921,
	-1000, -1000, 403, -1000, 115, -1000, -1000, 3921, -1000, 400,
	3477, -1000, 115, 400, 3477, 3477, 3477,
}
var RubyPgo = []int{

	0, 578, 0, 293, 577, 85, 14, 576, 575, 574,
	573, 6, 572, 143, 571, 12, 570, 26, 563, 559,
	554, 908, 279, 592, 553, 549, 548, 547, 546, 545,
	544, 543, 542, 540, 539, 534, 1173, 18, 22, 533,
	532, 20, 530, 529, 3, 28, 528, 527, 526, 525,
	523, 522, 519, 518, 517, 516, 1234, 515, 7, 17,
	11, 513, 9, 1, 512, 8, 10, 511, 69, 23,
	510, 509, 13, 16, 15, 19, 4, 5, 121,
}
var RubyR1 = []int{

	0, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 78, 78, 56, 56, 56, 56, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 31, 31, 31, 31, 31,
	31, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 18, 18, 41, 16, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 24,
	59, 59, 59, 59, 66, 66, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 15,
	68, 68, 63, 63, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 74, 74, 74, 75, 75, 75,
	72, 72, 72, 72, 32, 32, 33, 34, 36, 36,
	36, 17, 17, 17, 17, 17, 17, 17, 17, 19,
	19, 19, 69, 69, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 8, 3, 1, 71, 71,
	71, 71, 71, 71, 71, 4, 4, 4, 4, 76,
	77, 77, 67, 67, 67, 6, 6, 6, 6, 6,
	6, 6, 6, 73, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 60, 60, 60, 60, 57,
	57, 57, 9, 20, 20, 20, 20, 11, 11, 11,
	11, 11, 11, 70, 70, 64, 64, 58, 58, 26,
	26, 27, 28, 28, 28, 28, 30, 30, 30, 29,
	29, 29, 13, 13, 42, 42, 42, 62, 62, 62,
	62, 62, 43, 43, 43, 43, 43, 44, 44, 44,
	44, 40, 39, 10, 38, 38, 38, 38, 37, 37,
	5, 5, 7, 12,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 2, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 6, 7, 1, 2,
	6, 6, 2, 3, 2, 3, 4, 5, 4, 3,
	4, 5, 2, 3, 3, 3, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 6,
	6, 6, 6, 6, 6, 7, 6, 6, 8, 4,
	5, 8, 1, 4, 1, 3, 0, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 4, 2,
	1, 4, 0, 2, 6, 7, 8, 8, 8, 9,
	9, 9, 6, 7, 1, 3, 3, 0, 1, 3,
	1, 2, 3, 2, 4, 6, 5, 4, 1, 2,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 9, 6, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 3, 4, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 5, 1, 1, 0, 1,
	1, 1, 4, 4, 4, 3, 5, 6, 5, 3,
	1, 4, 3, 7, 8, 3, 4, 4, 4, 7,
	8, 5, 6, 3, 4, 5, 3, 3, 3, 3,
	3, 5, 6, 5, 3, 4, 3, 3, 2, 0,
	2, 2, 3, 4, 6, 8, 6, 2, 3, 5,
	5, 4, 4, 1, 3, 0, 2, 1, 2, 2,
	1, 1, 2, 2, 2, 1, 1, 3, 3, 1,
	3, 3, 6, 6, 5, 5, 3, 0, 2, 2,
	2, 2, 5, 6, 5, 6, 5, 4, 3, 3,
	2, 4, 4, 2, 5, 7, 4, 6, 4, 5,
	3, 3, 3, 2,
}
var RubyChk = []int{

	-1000, -61, 65, 66, 80, -2, 65, 66, 80, -21,
	-25, -32, -34, -33, -17, -19, -35, -14, -20, -26,
	-42, -38, -28, -29, -30, -41, -5, -27, -13, -7,
	-22, -8, -4, -36, -23, -24, -9, -10, -46, -47,
	-48, -49, -16, -40, -39, -31, -12, 21, 27, 28,
	7, 10, 13, 12, -45, -69, 23, 26, 32, 40,
	30, 31, 44, 39, 35, 36, 38, 46, 8, 6,
	-18, 79, 78, -3, -1, 74, 76, 11, 9, 14,
	43, 53, 54, 56, 58, 59, -50, -51, -52, -53,
	-54, -55, 49, 17, 47, 48, 66, 65, 80, 23,
	26, 30, 33, 68, 50, 51, 4, 55, 57, 59,
	70, 71, 69, 26, 72, 41, 42, 60, 61, 26,
	74, 52, 50, 74, 62, 63, 23, 26, 68, 7,
	-22, -3, 4, 10, 12, 13, -36, 4, 10, -36,
	14, -59, -6, -65, 74, 52, 62, 63, 16, -68,
	20, 76, -21, -17, -15, -77, -13, -5, -23, 7,
	10, 13, 12, 19, -76, 14, 74, 11, 52, 62,
	63, 74, 52, 62, 63, 16, 52, 62, 63, 52,
	16, 52, 16, -2, -2, -56, -66, -21, -36, 7,
	10, 13, -2, -2, -21, -78, -66, -13, -17, -21,
	23, 26, 23, 26, 8, 17, -78, -78, -65, 14,
	-21, -57, -6, 76, -2, -2, -21, -21, -21, -21,
	-2, -2, -2, -21, 7, -21, -21, -78, -21, -2,
	-21, -21, -21, -21, -2, -21, -5, -78, -78, -21,
	-21, -2, -68, -21, -5, -2, -21, -68, -5, -21,
	-2, -2, -2, -2, 7, -74, -75, 14, -72, 7,
	59, 19, 68, 68, -74, -56, 50, -21, -56, -78,
	-6, -6, 16, -68, -21, -5, -21, -41, -13, -38,
	-21, -13, -21, -13, 7, 13, 59, 16, -56, -73,
	69, -78, -56, -73, 65, 5, 16, 74, -21, -78,
	-68, -5, -2, -2, -2, -68, -5, -2, -2, -2,
	7, 13, 59, -2, -2, -2, -45, -68, 7, 13,
	-21, 7, 13, 59, -69, 7, 7, -56, 65, 66,
	65, 66, -2, -64, 16, 65, 65, -78, 65, -37,
	45, -2, -2, -2, -2, 8, -71, -21, -17, -15,
	77, -77, -67, 7, -21, -78, -2, 66, 15, -78,
	-6, -59, 52, 74, 14, -21, 67, 67, -21, -21,
	75, 16, 75, 75, 75, 75, -6, -56, 16, -75,
	59, 52, 7, 7, 7, 7, 4, -56, 22, -36,
	-56, 22, -65, -78, 75, 75, 75, 7, -78, 22,
	-56, -75, -21, -78, -56, -78, -21, -78, -21, -65,
	75, 75, 75, 75, 7, 7, 74, 74, 22, -60,
	25, 24, -56, -56, 22, 24, 34, -11, 33, -21,
	-62, -62, -37, 22, 24, 45, -66, -78, 16, -78,
	16, -78, 16, 67, -65, -21, -6, -2, -68, -5,
	-78, -78, -78, 52, -78, 52, 52, -63, -58, 34,
	-11, -72, 15, 15, -21, -74, -74, -74, -63, -58,
	-56, 22, -78, 16, -21, -17, -15, -13, -5, -77,
	52, 52, 16, -15, -21, 22, 69, -78, -56, 77,
	77, -56, -73, -76, 75, -78, 52, 52, -21, -21,
	22, 25, 24, -2, -56, 22, -60, 22, -56, -56,
	-56, -70, 5, -36, 22, 65, 66, -2, -43, 23,
	26, 22, 22, 24, -56, -66, -56, 75, -78, 77,
	-78, 77, -78, -21, -78, 75, 75, -65, -21, -5,
	-21, -2, -2, -2, 22, -63, -11, -56, -56, -56,
	-56, 22, -63, 22, 15, -78, -2, -2, 7, 77,
	-78, 65, -56, 15, -78, -2, 75, 75, -2, -56,
	-56, 22, 22, 34, 22, -56, 5, 16, 7, 13,
	-2, -2, -56, 22, -56, -78, -21, -17, -15, 77,
	7, 15, 52, -78, 22, -63, -58, -63, -58, -63,
	-58, 22, -6, -15, 74, 77, -78, 65, -2, -56,
	-56, 7, 13, -36, -56, -56, 65, 65, 66, 22,
	-78, 67, -2, 15, 22, -63, 22, -63, 22, -63,
	-78, -21, 77, -78, 22, -56, -56, -62, -62, -62,
	-21, 22, 22, 22, 15, 75, 77, 22, -44, 25,
	24, 22, -44, 22, -78, 16, 22, 25, 24, -2,
	-62, 22, -78, -2, -62, -62, -62,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 0, 0, 0,
	20, 21, 23, 22, 0, 0, 0, 0, 13, 280,
	0, 0, 11, 285, 289, 286, 281, 0, 17, 18,
	19, 24, 25, 26, 27, 11, 11, 170, 78, 259,
	0, 0, 0, 0, 0, 0, 45, 46, 47, 48,
	49, 50, 0, 72, 216, 217, 5, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 11, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, 157, 21, 22, 23, 13, 0, 168, 13,
	-2, 82, 84, 92, 11, 0, 0, 0, 0, 122,
	13, -2, 127, 128, 129, 130, 131, 132, 32, 20,
	21, 23, 22, 0, 230, 11, 0, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 13, 0, 275, 279, 124, 31, 20,
	21, 23, 0, 0, 11, 0, 282, 283, 284, 124,
	0, 0, 0, 0, 0, 73, 218, 0, 79, -2,
	127, 0, 313, -2, 205, 206, 207, 208, 75, 323,
	246, 254, 296, 74, 85, 94, 96, 0, 209, 210,
	211, 212, 213, 214, 248, 0, 0, 0, 0, 320,
	321, 250, 0, 140, 0, 178, 95, 0, 0, 140,
	189, 195, 247, 249, 89, 13, 154, 157, 158, 160,
	0, 0, 0, 0, 13, 0, 0, 13, 0, 126,
	83, 93, 11, 0, 140, 0, 171, 172, 173, 174,
	184, 185, 190, 191, 196, 197, 0, 11, 0, 13,
	157, 0, 11, 13, 11, 0, 11, 11, 139, 126,
	0, 0, 175, 186, 192, 0, 0, 176, 187, 193,
	199, 200, 0, 177, 188, 194, 179, 180, 20, 23,
	140, 202, 203, 0, 181, 0, 0, 0, 13, 13,
	14, 15, 16, 0, 0, 297, 297, 0, 12, 0,
	0, 290, 291, 287, 288, 322, 11, 219, 220, 221,
	225, 11, 11, -2, 0, 126, 260, 261, 262, 0,
	86, 88, 0, 11, -2, 119, 11, 11, 311, 312,
	100, 11, 101, 102, 107, 108, 90, 142, 0, 0,
	0, 0, 161, 163, 157, 157, 157, 142, 164, 13,
	0, 167, 11, 0, 97, 98, 99, 198, 0, 235,
	0, 0, -2, 0, 0, 13, 229, 0, 140, 11,
	103, 104, 105, 106, 201, 204, 0, 0, 244, 0,
	0, 13, 0, 0, 263, 13, 13, 276, 13, 125,
	0, 0, 0, 316, 13, 0, 13, 0, 11, 0,
	11, 0, 11, 0, 11, -2, 87, 91, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 142, 13,
	277, 159, 155, 156, 162, 13, 13, 13, 0, 142,
	0, 166, 0, 11, 133, 134, 135, 136, 137, 138,
	0, 0, 0, 123, 141, 236, 243, 0, 11, 237,
	238, 0, 13, 231, 98, 0, 11, 0, 0, 0,
	245, 0, 13, 13, 258, 251, 0, 253, 0, 0,
	267, 13, 0, 273, 294, 298, 299, 300, 301, 0,
	0, 295, 314, 13, 0, 13, 11, 215, 0, 226,
	0, 228, 0, 232, 0, 109, 110, 11, 292, 293,
	0, 113, 114, 117, 144, 0, 278, 143, 142, 142,
	142, 152, 0, 165, 76, 0, 111, 112, 0, 241,
	0, -2, 0, 81, 0, 116, 0, 183, 13, 256,
	257, 252, 264, 13, 266, 268, 0, 0, 13, 13,
	13, 0, 0, 317, 11, 318, 222, 223, 224, 227,
	0, 80, 0, 0, 145, 0, 142, 0, 142, 0,
	142, 153, 77, -2, 0, 242, 0, -2, 115, 255,
	0, 13, 13, 274, 271, 272, 297, 13, 13, 315,
	319, 0, 118, 120, 146, 0, 147, 0, 148, 0,
	0, 0, 239, 0, 265, 269, 270, 0, 0, 0,
	11, 149, 150, 151, 121, 182, 240, 302, 0, 0,
	297, 304, 0, 306, 233, 11, 303, 0, 297, 297,
	310, 305, 234, 297, 308, 309, 307,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:236
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:238
		{
		}
	case 3:
		//line parser.y:240
		{
		}
	case 4:
		//line parser.y:242
		{
		}
	case 5:
		//line parser.y:244
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:246
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:248
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:254
		{
		}
	case 11:
		//line parser.y:256
		{
		}
	case 12:
		//line parser.y:257
		{
		}
	case 13:
		//line parser.y:260
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 14:
		//line parser.y:262
		{
		}
	case 15:
		//line parser.y:264
		{
		}
	case 16:
		//line parser.y:266
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 17:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 18:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		//line parser.y:277
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 73:
		//line parser.y:279
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 74:
		//line parser.y:287
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 75:
		//line parser.y:290
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 76:
		//line parser.y:293
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 77:
		//line parser.y:302
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:312
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:318
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 80:
		//line parser.y:326
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:335
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:344
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:353
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:363
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:373
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 86:
		//line parser.y:381
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:392
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:403
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:413
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:423
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:434
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:447
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 93:
		//line parser.y:455
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 94:
		//line parser.y:464
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 95:
		//line parser.y:473
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 96:
		//line parser.y:482
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:493
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 98:
		//line parser.y:502
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 99:
		//line parser.y:511
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:520
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 101:
		//line parser.y:529
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 102:
		//line parser.y:538
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 103:
		//line parser.y:547
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 104:
		//line parser.y:556
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 105:
		//line parser.y:565
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 106:
		//line parser.y:574
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 107:
		//line parser.y:583
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 108:
		//line parser.y:592
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 109:
		//line parser.y:601
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 110:
		//line parser.y:614
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 111:
		//line parser.y:630
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 112:
		//line parser.y:639
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 113:
		//line parser.y:648
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 114:
		//line parser.y:657
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:666
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:675
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 117:
		//line parser.y:684
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 118:
		//line parser.y:693
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 119:
		//line parser.y:708
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 120:
		//line parser.y:720
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 121:
		//line parser.y:722
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 122:
		//line parser.y:724
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 123:
		//line parser.y:726
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:729
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:731
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:734
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 127:
		//line parser.y:736
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:738
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:740
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:742
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 131:
		//line parser.y:749
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 132:
		//line parser.y:751
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:753
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 134:
		//line parser.y:755
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:757
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:759
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:761
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:763
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 139:
		//line parser.y:772
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 140:
		//line parser.y:783
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 141:
		//line parser.y:785
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 142:
		//line parser.y:789
		{
			RubyVAL.genericSlice = nil
		}
	case 143:
		//line parser.y:791
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 144:
		//line parser.y:794
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 145:
		//line parser.y:805
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:817
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 147:
		//line parser.y:829
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 148:
		//line parser.y:841
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 149:
		//line parser.y:853
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 150:
		//line parser.y:866
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 151:
		//line parser.y:879
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 152:
		//line parser.y:892
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 153:
		//line parser.y:903
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 154:
		//line parser.y:917
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-0].methodParamSlice
		}
	case 155:
		//line parser.y:919
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 156:
		//line parser.y:921
		{
			RubyVAL.methodParamSlice = []ast.MethodParam{{Name: "", IsSplat: true}}
		}
	case 157:
		//line parser.y:923
		{
		}
	case 158:
		//line parser.y:925
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 159:
		//line parser.y:927
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 160:
		//line parser.y:930
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 161:
		//line parser.y:932
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsSplat: true}
		}
	case 162:
		//line parser.y:934
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name, DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 163:
		//line parser.y:936
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsProc: true}
		}
	case 164:
		//line parser.y:940
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 165:
		//line parser.y:950
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 166:
		//line parser.y:962
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 167:
		//line parser.y:975
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 168:
		//line parser.y:986
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 169:
		//line parser.y:995
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 170:
		//line parser.y:1014
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 171:
		//line parser.y:1032
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1041
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1047
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1053
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 175:
		//line parser.y:1055
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1064
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 177:
		//line parser.y:1066
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 178:
		//line parser.y:1068
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 179:
		//line parser.y:1071
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1080
		{
			var rhs ast.Node = RubyS[Rubypt-0].genericSlice
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				rhs = RubyS[Rubypt-0].genericSlice[0]
			}
			RubyVAL.genericValue = ast.Assignment{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				LHS:  RubyS[Rubypt-2].genericValue,
				RHS:  rhs,
			}
		}
	case 181:
		//line parser.y:1092
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1102
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 183:
		//line parser.y:1117
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 184:
		//line parser.y:1123
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 185:
		//line parser.y:1132
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1138
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1147
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 188:
		//line parser.y:1149
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:1151
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 190:
		//line parser.y:1160
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 191:
		//line parser.y:1169
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 192:
		//line parser.y:1175
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 193:
		//line parser.y:1184
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 194:
		//line parser.y:1186
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 195:
		//line parser.y:1188
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 196:
		//line parser.y:1196
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1198
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 198:
		//line parser.y:1200
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1203
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1205
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 201:
		//line parser.y:1207
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1210
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1212
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1214
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1218
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 206:
		//line parser.y:1220
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 207:
		//line parser.y:1222
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 208:
		//line parser.y:1224
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 209:
		//line parser.y:1227
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 210:
		//line parser.y:1238
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 211:
		//line parser.y:1249
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 212:
		//line parser.y:1260
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 213:
		//line parser.y:1271
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 214:
		//line parser.y:1282
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 215:
		//line parser.y:1293
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 216:
		//line parser.y:1295
		{
		}
	case 217:
		//line parser.y:1296
		{
		}
	case 218:
		//line parser.y:1298
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 219:
		//line parser.y:1300
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 220:
		//line parser.y:1302
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 221:
		//line parser.y:1304
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 222:
		//line parser.y:1306
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 223:
		//line parser.y:1308
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1310
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1313
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 226:
		//line parser.y:1315
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 227:
		//line parser.y:1317
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Pairs: RubyS[Rubypt-3].hashPairSlice}
		}
	case 228:
		//line parser.y:1319
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 229:
		//line parser.y:1328
		{
			RubyVAL.hashPair = ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue}
		}
	case 230:
		//line parser.y:1331
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 231:
		//line parser.y:1333
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 232:
		//line parser.y:1336
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 233:
		//line parser.y:1343
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 234:
		//line parser.y:1350
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 235:
		//line parser.y:1358
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
		}
	case 236:
		//line parser.y:1362
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 237:
		//line parser.y:1366
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
		}
	case 238:
		//line parser.y:1370
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 239:
		//line parser.y:1374
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Body: RubyS[Rubypt-3].genericSlice}
		}
	case 240:
		//line parser.y:1378
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Args: RubyS[Rubypt-4].methodParamSlice, Body: RubyS[Rubypt-3].genericSlice}
		}
	case 241:
		//line parser.y:1382
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 242:
		//line parser.y:1386
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
		}
	case 243:
		//line parser.y:1395
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 244:
		//line parser.y:1399
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 245:
		//line parser.y:1408
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 246:
		//line parser.y:1418
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 247:
		//line parser.y:1427
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1436
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1445
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1454
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 251:
		//line parser.y:1463
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1472
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1482
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1491
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1502
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 256:
		//line parser.y:1511
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 257:
		//line parser.y:1519
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 258:
		//line parser.y:1527
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 259:
		//line parser.y:1535
		{
		}
	case 260:
		//line parser.y:1536
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 261:
		//line parser.y:1537
		{
		}
	case 262:
		//line parser.y:1540
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 263:
		//line parser.y:1543
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 264:
		//line parser.y:1552
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 265:
		//line parser.y:1562
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 266:
		//line parser.y:1572
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 267:
		//line parser.y:1582
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 268:
		//line parser.y:1584
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 269:
		//line parser.y:1598
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 270:
		//line parser.y:1614
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 271:
		//line parser.y:1630
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 272:
		//line parser.y:1640
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 273:
		//line parser.y:1652
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 274:
		//line parser.y:1654
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 275:
		//line parser.y:1657
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 276:
		//line parser.y:1659
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 277:
		//line parser.y:1662
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 278:
		//line parser.y:1664
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 279:
		//line parser.y:1667
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 280:
		//line parser.y:1674
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 281:
		//line parser.y:1676
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 282:
		//line parser.y:1679
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 283:
		//line parser.y:1687
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 284:
		//line parser.y:1689
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 285:
		//line parser.y:1691
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 286:
		//line parser.y:1695
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 287:
		//line parser.y:1697
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 288:
		//line parser.y:1699
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 289:
		//line parser.y:1703
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 290:
		//line parser.y:1705
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 291:
		//line parser.y:1707
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 292:
		//line parser.y:1711
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-5].genericValue,
				True:      RubyS[Rubypt-3].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 293:
		//line parser.y:1721
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-5].genericValue,
				True:      RubyS[Rubypt-3].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
				Line:      RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 294:
		//line parser.y:1731
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 295:
		//line parser.y:1737
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 296:
		//line parser.y:1744
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 297:
		//line parser.y:1751
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 298:
		//line parser.y:1753
		{
		}
	case 299:
		//line parser.y:1755
		{
		}
	case 300:
		//line parser.y:1757
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 301:
		//line parser.y:1759
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 302:
		//line parser.y:1762
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 303:
		//line parser.y:1770
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 304:
		//line parser.y:1779
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 305:
		//line parser.y:1787
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 306:
		//line parser.y:1796
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 307:
		//line parser.y:1805
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 308:
		//line parser.y:1813
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 309:
		//line parser.y:1821
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 310:
		//line parser.y:1829
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 311:
		//line parser.y:1838
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 312:
		//line parser.y:1841
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 313:
		//line parser.y:1844
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 314:
		//line parser.y:1851
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 315:
		//line parser.y:1857
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 316:
		//line parser.y:1863
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 317:
		//line parser.y:1869
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 318:
		//line parser.y:1876
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 319:
		//line parser.y:1878
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 320:
		//line parser.y:1881
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 321:
		//line parser.y:1883
		{
			RubyVAL.genericValue = ast.Range{
				Start:            RubyS[Rubypt-2].genericValue,
				End:              RubyS[Rubypt-0].genericValue,
				Line:             RubyS[Rubypt-2].genericValue.LineNumber(),
				ExcludeLastValue: true,
			}
		}
	case 322:
		//line parser.y:1893
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 323:
		//line parser.y:1900
		{
			RubyVAL.genericValue = ast.Defined{Node: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

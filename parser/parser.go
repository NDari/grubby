//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CONSTANT = 57351
const NAMESPACED_CAPITAL_REF = 57352
const LPAREN = 57353
const RPAREN = 57354
const COMMA = 57355
const NamespacedModule = 57356
const ProcArg = 57357
const DO = 57358
const DEF = 57359
const END = 57360
const IF = 57361
const ELSE = 57362
const ELSIF = 57363
const UNLESS = 57364
const CLASS = 57365
const MODULE = 57366
const FOR = 57367
const WHILE = 57368
const UNTIL = 57369
const BEGIN = 57370
const RESCUE = 57371
const ENSURE = 57372
const BREAK = 57373
const NEXT = 57374
const REDO = 57375
const RETRY = 57376
const RETURN = 57377
const YIELD = 57378
const AND = 57379
const OR = 57380
const LAMBDA = 57381
const CASE = 57382
const WHEN = 57383
const ALIAS = 57384
const SELF = 57385
const NIL = 57386
const LESSTHAN = 57387
const GREATERTHAN = 57388
const EQUALTO = 57389
const BANG = 57390
const COMPLEMENT = 57391
const BINARY_PLUS = 57392
const UNARY_PLUS = 57393
const BINARY_MINUS = 57394
const UNARY_MINUS = 57395
const STAR = 57396
const RANGE = 57397
const OR_EQUALS = 57398
const AND_EQUALS = 57399
const WHITESPACE = 57400
const NEWLINE = 57401
const SEMICOLON = 57402
const COLON = 57403
const DOT = 57404
const PIPE = 57405
const SLASH = 57406
const AMPERSAND = 57407
const QUESTIONMARK = 57408
const CARET = 57409
const LBRACKET = 57410
const RBRACKET = 57411
const LBRACE = 57412
const RBRACE = 57413
const DOLLARSIGN = 57414
const ATSIGN = 57415
const FILE_CONST_REF = 57416
const LINE_CONST_REF = 57417
const EOF = 57418

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1909

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 133,
	12, 115,
	13, 115,
	-2, 254,
	-1, 346,
	4, 21,
	37, 21,
	38, 21,
	45, 21,
	46, 21,
	50, 21,
	52, 21,
	62, 21,
	63, 21,
	64, 21,
	65, 21,
	-2, 115,
	-1, 357,
	12, 115,
	13, 115,
	-2, 254,
	-1, 396,
	4, 34,
	37, 34,
	38, 34,
	46, 34,
	50, 34,
	52, 34,
	59, 13,
	62, 34,
	63, 34,
	64, 34,
	65, 34,
	71, 13,
	-2, 15,
}

const RubyNprod = 317
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4533

var RubyAct = []int{

	324, 442, 5, 602, 180, 443, 409, 147, 245, 249,
	445, 331, 135, 247, 136, 134, 55, 54, 142, 26,
	2, 3, 395, 98, 312, 400, 99, 330, 14, 303,
	100, 296, 143, 364, 330, 274, 330, 4, 25, 566,
	211, 330, 28, 212, 570, 544, 528, 330, 526, 385,
	330, 157, 155, 507, 565, 162, 281, 177, 178, 505,
	503, 188, 189, 96, 95, 364, 420, 123, 192, 407,
	124, 406, 315, 364, 157, 155, 161, 306, 146, 299,
	97, 206, 207, 277, 263, 161, 205, 143, 158, 401,
	253, 91, 204, 119, 105, 125, 91, 583, 91, 216,
	217, 218, 91, 611, 121, 122, 193, 213, 225, 156,
	119, 91, 91, 230, 154, 330, 120, 461, 235, 236,
	332, 386, 240, 241, 242, 243, 256, 114, 115, 363,
	51, 473, 156, 120, 557, 103, 104, 254, 330, 238,
	106, 205, 107, 472, 108, 165, 117, 261, 259, 262,
	441, 466, 102, 111, 109, 110, 266, 265, 330, 289,
	290, 291, 146, 293, 294, 295, 280, 300, 301, 302,
	285, 307, 308, 309, 311, 288, 287, 268, 146, 162,
	151, 269, 271, 273, 146, 599, 372, 330, 163, 164,
	185, 310, 316, 185, 185, 170, 333, 334, 335, 336,
	161, 465, 166, 118, 348, 498, 72, 499, 341, 157,
	155, 170, 146, 185, 185, 185, 598, 347, 250, 98,
	171, 172, 99, 248, 462, 586, 100, 252, 425, 340,
	462, 146, 185, 354, 185, 185, 355, 185, 584, 185,
	185, 185, 185, 250, 185, 250, 158, 185, 248, 174,
	185, 185, 252, 127, 252, 159, 160, 366, 461, 578,
	579, 185, 370, 563, 151, 105, 251, 156, 185, 185,
	185, 185, 275, 558, 246, 519, 169, 513, 176, 326,
	151, 98, 432, 173, 99, 185, 151, 185, 100, 418,
	444, 251, 185, 251, 98, 542, 297, 99, 114, 115,
	304, 100, 266, 265, 543, 313, 103, 104, 250, 430,
	166, 106, 175, 107, 151, 108, 116, 252, 428, 167,
	168, 320, 321, 102, 111, 109, 110, 128, 176, 126,
	471, 151, 185, 151, 577, 197, 417, 426, 198, 202,
	98, 422, 423, 99, 424, 98, 98, 100, 99, 99,
	369, 185, 100, 100, 185, 278, 371, 438, 414, 617,
	415, 614, 613, 185, 185, 425, 93, 564, 437, 418,
	416, 612, 439, 614, 613, 146, 157, 446, 452, 447,
	328, 337, 453, 199, 451, 327, 146, 537, 608, 478,
	477, 460, 609, 373, 456, 421, 463, 525, 98, 449,
	476, 99, 478, 477, 195, 100, 524, 196, 405, 185,
	105, 479, 459, 185, 185, 511, 382, 448, 369, 482,
	404, 493, 493, 435, 263, 398, 263, 381, 382, 352,
	501, 488, 353, 130, 509, 338, 131, 76, 131, 76,
	131, 76, 512, 114, 115, 514, 214, 403, 393, 215,
	387, 103, 104, 375, 515, 520, 106, 185, 107, 374,
	108, 116, 523, 185, 515, 522, 373, 105, 102, 111,
	109, 110, 368, 318, 531, 399, 317, 151, 534, 244,
	220, 487, 185, 344, 392, 325, 459, 343, 151, 1,
	203, 185, 90, 89, 88, 185, 547, 548, 87, 86,
	114, 115, 85, 185, 41, 40, 39, 38, 103, 104,
	494, 20, 555, 106, 151, 107, 43, 108, 116, 559,
	561, 44, 52, 560, 562, 102, 111, 109, 110, 21,
	16, 567, 384, 554, 12, 13, 11, 185, 185, 45,
	24, 23, 22, 27, 19, 10, 35, 30, 18, 15,
	42, 17, 37, 36, 31, 29, 185, 32, 73, 0,
	0, 0, 585, 0, 587, 185, 0, 0, 0, 0,
	0, 515, 152, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 596, 0, 186, 186, 0, 151, 0,
	0, 0, 0, 0, 493, 493, 493, 0, 606, 0,
	0, 0, 0, 0, 615, 186, 186, 186, 0, 0,
	0, 0, 0, 0, 619, 0, 0, 493, 0, 545,
	0, 493, 493, 493, 186, 0, 186, 186, 0, 186,
	0, 186, 186, 186, 186, 151, 186, 185, 0, 186,
	0, 0, 186, 186, 593, 594, 595, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 152, 105, 0, 0,
	186, 186, 186, 186, 276, 0, 0, 0, 0, 0,
	0, 616, 152, 571, 0, 0, 34, 186, 152, 186,
	0, 620, 621, 0, 186, 0, 622, 0, 298, 0,
	114, 115, 305, 0, 0, 0, 185, 314, 103, 104,
	0, 0, 0, 106, 0, 107, 152, 108, 0, 0,
	0, 0, 0, 0, 185, 102, 111, 109, 110, 0,
	0, 0, 600, 152, 186, 152, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 148,
	148, 0, 0, 186, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 186, 0, 0, 148,
	148, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	148, 148, 0, 148, 0, 148, 148, 148, 148, 0,
	148, 0, 0, 148, 0, 0, 148, 148, 0, 0,
	0, 186, 0, 0, 0, 186, 186, 148, 0, 0,
	148, 0, 0, 0, 148, 148, 148, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 148, 148, 148, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 186, 0, 105, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 186, 0, 0, 148, 148, 148,
	152, 0, 0, 186, 0, 0, 105, 186, 0, 0,
	114, 115, 0, 0, 0, 186, 0, 148, 103, 104,
	148, 0, 0, 106, 0, 107, 152, 108, 0, 148,
	148, 0, 0, 0, 0, 102, 111, 109, 110, 114,
	115, 0, 533, 0, 0, 0, 0, 103, 104, 186,
	186, 0, 106, 0, 107, 105, 108, 0, 0, 0,
	0, 9, 0, 0, 102, 111, 109, 110, 186, 0,
	0, 532, 0, 0, 0, 148, 0, 186, 0, 396,
	148, 0, 0, 0, 0, 0, 0, 0, 114, 115,
	0, 0, 0, 0, 0, 0, 103, 104, 0, 0,
	152, 106, 0, 107, 0, 108, 0, 0, 0, 0,
	0, 145, 0, 102, 111, 109, 110, 0, 0, 0,
	402, 181, 0, 148, 190, 194, 0, 0, 0, 148,
	0, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 208, 209, 210, 152, 396, 186,
	0, 0, 0, 0, 148, 0, 0, 148, 0, 0,
	0, 148, 0, 219, 0, 221, 222, 0, 224, 148,
	226, 227, 228, 229, 0, 231, 0, 0, 234, 105,
	148, 237, 239, 0, 0, 572, 0, 0, 0, 0,
	0, 0, 257, 0, 0, 260, 0, 0, 0, 264,
	267, 270, 272, 148, 148, 0, 0, 0, 186, 105,
	0, 145, 114, 115, 0, 53, 284, 260, 286, 0,
	103, 104, 148, 292, 0, 106, 186, 107, 0, 108,
	0, 148, 0, 0, 101, 0, 0, 102, 111, 109,
	110, 0, 114, 115, 365, 145, 0, 0, 0, 0,
	103, 104, 200, 0, 148, 106, 0, 107, 0, 108,
	0, 0, 339, 345, 260, 153, 0, 102, 111, 109,
	110, 113, 0, 0, 0, 187, 0, 0, 187, 187,
	0, 0, 358, 0, 0, 359, 0, 0, 0, 0,
	0, 0, 0, 0, 361, 362, 0, 0, 187, 187,
	187, 148, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 187, 0, 187,
	187, 0, 187, 0, 187, 187, 187, 187, 201, 187,
	0, 0, 187, 0, 0, 187, 187, 0, 0, 0,
	389, 0, 0, 0, 345, 397, 187, 0, 0, 153,
	0, 0, 0, 187, 187, 187, 187, 0, 223, 0,
	0, 0, 148, 0, 0, 153, 0, 232, 233, 0,
	187, 153, 187, 0, 0, 0, 0, 187, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 0, 0, 0, 181, 0, 0, 282, 0, 153,
	0, 0, 0, 0, 0, 0, 319, 0, 145, 0,
	0, 0, 0, 436, 0, 0, 153, 187, 153, 260,
	0, 0, 440, 0, 0, 0, 389, 0, 0, 0,
	0, 0, 0, 0, 450, 0, 187, 0, 0, 187,
	0, 0, 105, 329, 0, 458, 0, 0, 187, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 351, 0,
	112, 0, 0, 0, 0, 179, 0, 101, 474, 475,
	0, 0, 0, 0, 0, 114, 115, 0, 0, 0,
	0, 0, 0, 103, 104, 0, 0, 181, 106, 0,
	107, 0, 108, 116, 187, 0, 510, 0, 187, 187,
	102, 111, 109, 110, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 383, 0, 0, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 388, 0, 0, 0, 0, 255, 0, 0, 258,
	0, 0, 187, 0, 105, 0, 0, 0, 187, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 0, 0, 0, 553, 187, 556, 0,
	0, 0, 0, 153, 0, 0, 187, 114, 115, 0,
	187, 0, 0, 0, 0, 103, 104, 0, 187, 0,
	106, 427, 107, 0, 108, 33, 429, 431, 0, 153,
	0, 0, 102, 111, 109, 110, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 187, 0, 0, 0, 588, 0, 0,
	0, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	0, 187, 0, 129, 132, 597, 0, 467, 0, 469,
	187, 0, 367, 0, 0, 182, 0, 0, 182, 182,
	0, 376, 0, 0, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 0, 0, 0, 0, 182, 182,
	182, 504, 0, 506, 0, 508, 223, 391, 0, 394,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 182,
	182, 0, 182, 0, 182, 182, 182, 182, 0, 182,
	0, 0, 182, 0, 0, 182, 182, 0, 0, 0,
	153, 0, 187, 529, 0, 530, 182, 412, 413, 105,
	0, 0, 0, 182, 182, 182, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 182, 0, 0, 552, 0, 182, 394, 0,
	0, 0, 114, 115, 0, 0, 0, 0, 0, 0,
	103, 104, 0, 0, 0, 106, 0, 107, 0, 108,
	0, 187, 0, 0, 0, 454, 360, 102, 111, 109,
	110, 0, 0, 0, 0, 0, 0, 182, 0, 187,
	0, 0, 468, 470, 581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 480, 182,
	0, 0, 484, 485, 0, 486, 0, 0, 182, 182,
	0, 500, 0, 502, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 516, 378, 517, 0, 0, 0, 0, 518, 0,
	0, 0, 0, 0, 618, 0, 69, 346, 68, 77,
	184, 76, 78, 0, 182, 0, 0, 0, 182, 182,
	0, 0, 0, 0, 0, 535, 536, 0, 0, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 549, 0, 551, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 0,
	330, 0, 182, 0, 281, 0, 0, 0, 182, 74,
	0, 75, 342, 92, 91, 71, 70, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 569, 182, 582, 0,
	0, 574, 575, 576, 0, 0, 182, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 591, 592,
	0, 114, 115, 0, 0, 412, 413, 0, 0, 103,
	104, 0, 0, 0, 106, 0, 107, 0, 108, 0,
	0, 0, 182, 182, 0, 0, 102, 111, 109, 110,
	0, 0, 0, 0, 489, 0, 0, 0, 0, 0,
	0, 182, 69, 49, 68, 77, 50, 76, 78, 0,
	182, 0, 0, 0, 46, 605, 495, 604, 603, 496,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 0, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 601, 495, 604, 603,
	496, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 573,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 0, 491, 492, 0,
	0, 182, 0, 0, 0, 0, 74, 0, 75, 0,
	92, 91, 71, 70, 0, 0, 0, 0, 0, 182,
	69, 49, 68, 77, 50, 76, 78, 0, 0, 0,
	0, 0, 46, 481, 56, 411, 410, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 79, 62, 0, 67, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 0, 322, 323, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 408, 56, 411, 410, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 0, 322, 323, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 418, 444, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 538, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 539, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 0, 322, 323, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	92, 91, 71, 70, 69, 49, 68, 77, 50, 76,
	78, 0, 0, 0, 0, 0, 46, 0, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 79, 62,
	0, 67, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 0, 6, 7,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 92, 91, 71, 70, 8, 69, 49, 68, 77,
	50, 76, 78, 0, 0, 0, 0, 0, 46, 607,
	495, 0, 0, 496, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	79, 62, 0, 67, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 0,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 92, 91, 71, 70, 69, 49, 68,
	77, 50, 76, 78, 0, 0, 0, 0, 0, 46,
	589, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 79, 62, 0, 67, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 0, 0, 0,
	0, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 71, 70, 69, 49,
	68, 77, 50, 76, 78, 0, 0, 0, 0, 0,
	46, 580, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 79, 62, 0, 67, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 0, 322, 323, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 92, 91, 71, 70, 69,
	49, 68, 77, 50, 76, 78, 0, 0, 0, 0,
	0, 46, 550, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 79, 62, 0, 67, 93, 94, 0,
	0, 0, 80, 81, 0, 82, 0, 83, 84, 0,
	0, 0, 0, 322, 323, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 92, 91, 71, 70,
	69, 49, 68, 77, 50, 76, 78, 0, 0, 0,
	0, 0, 46, 540, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 79, 62, 0, 67, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 0, 322, 323, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 0, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 0, 322, 323, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 527, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 521, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 497, 495, 0, 0,
	496, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 0, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	92, 91, 71, 70, 69, 49, 68, 77, 50, 76,
	78, 0, 0, 0, 0, 0, 46, 490, 495, 0,
	0, 496, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 79, 62,
	0, 67, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 0, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 92, 91, 71, 70, 69, 49, 68, 77, 50,
	76, 78, 0, 0, 0, 0, 0, 46, 483, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 79,
	62, 0, 67, 93, 94, 0, 0, 0, 80, 81,
	0, 82, 0, 83, 84, 0, 0, 0, 0, 322,
	323, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 71, 70, 69, 49, 68, 77,
	50, 76, 78, 0, 0, 0, 0, 0, 46, 464,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	79, 62, 0, 67, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 0,
	322, 323, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 92, 91, 71, 70, 69, 49, 68,
	77, 50, 76, 78, 0, 0, 0, 0, 0, 46,
	455, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 79, 62, 0, 67, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 0, 0, 0,
	0, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 71, 70, 69, 49,
	68, 77, 50, 76, 78, 0, 0, 0, 0, 0,
	46, 390, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 79, 62, 0, 67, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 0, 322, 323, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 92, 91, 71, 70, 69,
	49, 68, 77, 50, 76, 78, 0, 0, 0, 0,
	0, 46, 380, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 79, 62, 0, 67, 93, 94, 0,
	0, 0, 80, 81, 0, 82, 0, 83, 84, 0,
	0, 0, 0, 322, 323, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 92, 91, 71, 70,
	69, 49, 68, 77, 50, 76, 78, 0, 0, 0,
	0, 0, 46, 377, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 79, 62, 0, 67, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 0, 322, 323, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 0, 495, 0, 0, 496, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 0, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	350, 0, 0, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	92, 91, 71, 70, 69, 49, 68, 77, 50, 76,
	78, 0, 0, 0, 0, 0, 46, 0, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 79, 62,
	0, 67, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 92, 91, 71, 70, 69, 49, 68, 77, 50,
	76, 78, 0, 0, 0, 0, 0, 46, 0, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 79,
	62, 0, 67, 93, 94, 0, 0, 0, 80, 81,
	0, 82, 0, 83, 84, 69, 149, 68, 77, 150,
	76, 133, 0, 141, 0, 154, 143, 0, 74, 0,
	75, 0, 92, 91, 71, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 93, 94, 0, 0, 138, 80, 81,
	0, 82, 0, 83, 84, 0, 139, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	144, 0, 92, 91, 71, 70, 69, 149, 68, 77,
	150, 76, 133, 0, 0, 0, 154, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 0,
	0, 0, 434, 0, 0, 0, 0, 0, 0, 283,
	0, 144, 0, 92, 91, 71, 70, 69, 149, 68,
	77, 150, 76, 133, 0, 0, 0, 154, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 93, 94, 0, 0, 138,
	80, 81, 0, 82, 0, 83, 84, 69, 149, 68,
	77, 150, 76, 78, 0, 0, 0, 154, 0, 0,
	283, 0, 144, 0, 92, 91, 71, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 0, 0, 0,
	0, 330, 69, 183, 68, 77, 184, 76, 78, 0,
	74, 0, 75, 0, 92, 91, 71, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 0, 330, 0, 0, 0,
	281, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 183, 68, 77, 184, 76, 357,
	0, 0, 0, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 93, 94, 0, 0, 356, 80, 81, 0, 82,
	0, 83, 84, 69, 346, 68, 77, 184, 76, 78,
	0, 0, 0, 0, 0, 0, 74, 0, 144, 0,
	92, 91, 71, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 342,
	92, 91, 71, 70, 69, 149, 68, 77, 150, 76,
	133, 0, 0, 0, 154, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 69, 183, 68, 77, 184, 76,
	78, 0, 0, 0, 0, 0, 0, 283, 0, 144,
	0, 92, 91, 71, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 0, 330, 0,
	69, 149, 68, 77, 150, 76, 78, 74, 0, 75,
	154, 92, 91, 71, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	69, 183, 68, 77, 184, 76, 78, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 93, 94,
	105, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 0, 0, 114, 115, 0, 0, 0, 0, 0,
	0, 103, 104, 0, 0, 0, 106, 0, 107, 0,
	108, 0, 0, 0, 114, 115, 0, 0, 102, 111,
	109, 110, 103, 104, 0, 0, 0, 106, 0, 107,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 102,
	111, 109, 110,
}
var RubyPact = []int{

	-39, 2339, -1000, -1000, -1000, 4, -1000, -1000, -1000, 1318,
	-1000, -1000, -1000, -1000, 124, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 156, 48, -1000, 33, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 323, 429, 431, 3810,
	199, 132, 263, 164, 236, 265, 3760, 3760, -1000, 4405,
	3760, 3760, 4405, 4405, 385, 316, -1000, 376, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 328, -1000, 16,
	3760, 3760, 4405, 4405, 4405, -1000, -1000, -1000, -1000, -1000,
	-1000, 34, 440, -1000, -1000, -1000, -1000, -1000, 3760, 3760,
	3760, 4405, 474, 4405, 4405, -1000, 4405, 3760, 4405, 4405,
	4405, 4405, 3760, 4405, -1000, -1000, 4405, 3760, 3760, 4405,
	4405, 3760, 3760, 3760, 3760, 473, 212, 28, 237, 81,
	4405, 366, -1000, 4355, 16, -1000, 71, 4405, 4405, 4405,
	4405, 29, 342, -7, -1000, 4446, -1000, -1000, 65, 3952,
	41, 8, 155, 148, 4405, 4355, 4405, -1000, 3760, 3760,
	3760, 4405, 3760, 3760, 3760, 25, 3760, 3760, 3760, 23,
	3760, 3760, 3760, 3760, 18, 470, 467, 327, 262, 3547,
	266, 4446, -1000, 4249, 64, 17, -1000, -1000, 326, 321,
	4446, 79, 266, -1000, 1420, 3760, 3760, 3760, 3760, 374,
	4002, 4178, 4355, 3618, -1000, -1000, 327, 327, 4446, 4446,
	4446, -1000, -1000, 423, -1000, -1000, 327, 327, 327, 4446,
	4128, 4446, 4446, 4299, 4446, 327, 4446, 4446, 4446, 4446,
	327, 1605, 4299, 4299, 4446, 327, 327, 4446, 60, 1055,
	327, 327, 327, 327, 16, -1000, 466, 337, 302, -1000,
	139, 460, 453, 447, -1000, 3405, 431, 4446, 3334, 415,
	4446, -1000, -1000, -1000, 463, -20, 52, 1085, -1000, -1000,
	1420, -1000, 1420, -1000, -1000, -1000, -1000, 444, 4405, 3263,
	-1000, 442, 1741, 4405, 4446, 413, 406, -44, 20, 327,
	327, 327, 931, 327, 327, 327, -1000, -1000, -1000, 441,
	327, 327, 327, -1000, -1000, -1000, 414, 327, 327, 327,
	236, 327, -1000, -1000, -1000, 402, 315, 3, 1, 2126,
	-1000, -1000, -1000, -1000, 327, 340, 4405, -1000, -1000, 79,
	-1000, 324, 4405, 327, 327, 327, 327, -1000, 305, 4446,
	-1000, -1000, -1000, 296, 269, 4467, 3881, 411, 327, -1000,
	-1000, 4057, -1000, -1000, -1000, 16, 3760, 4355, 4446, 4446,
	4405, 4446, 4446, -1000, 4405, 103, -1000, 2197, 237, 239,
	405, 387, 4405, -1000, -1000, 237, 2197, -1000, -1000, 3192,
	-1000, 16, -1000, 4002, 211, -1000, -1000, -1000, 99, 4446,
	-1000, 3121, 138, -1000, 3547, -1000, 65, 261, -1000, 96,
	-1000, -1000, 84, -1000, -1000, -1000, 4405, 4405, -1000, 382,
	3760, -1000, 2055, 3050, -1000, -1000, -1000, -1000, 427, 4446,
	2979, 2908, 187, -1000, -1000, 4405, 266, -9, -1000, -12,
	-1000, -18, -1000, 3760, 4405, -1000, 4446, -1000, 327, 403,
	4446, 3760, 259, 260, -1000, -1000, -1000, -1000, -1000, -1000,
	4446, -1000, 257, 260, 2837, -1000, -1000, 4002, 4446, -1000,
	-1000, 3760, 400, -1000, -1000, -1000, 391, -23, 2766, -25,
	3547, 70, -1000, 3760, 882, 853, -1000, 3760, -1000, 327,
	3547, -1000, 369, -1000, 2268, 2695, 3547, 291, 39, -1000,
	-1000, -1000, -1000, 327, -1000, 3760, 3760, -1000, -1000, -1000,
	2624, 266, 3547, -1000, 4002, -1000, 4299, -1000, 128, 327,
	4446, -1000, 327, -1000, 255, -1000, 3547, 2197, 2197, -1000,
	245, -1000, 355, 327, -14, -1000, -1000, -1000, -1000, -32,
	3689, 327, 217, -1000, 327, 3547, 3547, -1000, -1000, -1000,
	-1000, 3547, 38, 431, -1000, -1000, -1000, 275, 200, 2553,
	-1000, 3547, 56, 4446, -1000, -1000, 1824, 36, -1000, 220,
	260, 207, 260, -1000, -1000, 4405, -1000, 327, 3547, 2482,
	-1000, -1000, -1000, -1000, 3547, 3547, 3547, -1000, -1000, -1000,
	-1000, 56, 3760, 4405, -1000, 198, -1000, 167, 653, -1000,
	3547, 3547, 3547, 1978, 1897, 2411, 379, 90, -1000, -1000,
	-1000, -1000, 353, 3760, -1000, -1000, 341, -1000, -1000, -1000,
	56, -1000, -1000, 3760, -1000, 327, 3476, -1000, 56, 327,
	3476, 3476, 3476,
}
var RubyPgo = []int{

	0, 558, 0, 206, 557, 19, 12, 555, 554, 553,
	1095, 552, 10, 42, 551, 7, 550, 28, 549, 548,
	941, 547, 522, 676, 546, 545, 544, 543, 542, 541,
	540, 539, 536, 535, 9, 130, 534, 530, 1475, 11,
	529, 521, 516, 38, 511, 510, 3, 17, 507, 506,
	505, 504, 502, 499, 498, 494, 493, 492, 1286, 490,
	5, 15, 22, 6, 489, 8, 487, 66, 1, 485,
	14, 484, 4, 483, 18, 16, 13, 481, 435, 388,
	1132,
}
var RubyR1 = []int{

	0, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 79, 79, 80, 80, 58, 58, 58, 58, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 31, 31, 31, 31,
	31, 31, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 43, 16, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 24, 61,
	61, 61, 61, 72, 72, 70, 70, 70, 70, 70,
	70, 70, 15, 74, 74, 68, 68, 25, 25, 25,
	25, 25, 25, 25, 25, 65, 65, 65, 76, 76,
	76, 34, 34, 34, 34, 32, 32, 33, 36, 38,
	38, 38, 17, 17, 17, 17, 17, 17, 17, 17,
	18, 18, 18, 75, 75, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 10,
	10, 35, 35, 22, 22, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 8, 3, 1, 78, 78, 78, 78, 78, 78,
	78, 4, 4, 4, 66, 66, 73, 73, 73, 6,
	6, 6, 6, 6, 6, 62, 71, 71, 71, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	63, 63, 63, 63, 59, 59, 59, 9, 19, 19,
	19, 19, 12, 12, 12, 12, 12, 12, 12, 12,
	77, 77, 69, 69, 60, 60, 26, 26, 27, 28,
	28, 28, 30, 30, 30, 29, 29, 29, 13, 44,
	44, 44, 67, 67, 67, 67, 67, 45, 45, 45,
	45, 45, 46, 46, 46, 46, 42, 41, 11, 40,
	40, 40, 40, 39, 39, 5, 7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 5, 1, 4, 4,
	2, 3, 2, 3, 4, 5, 4, 3, 4, 5,
	2, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 6, 7, 6, 6, 4, 3,
	6, 1, 4, 1, 3, 0, 1, 1, 1, 4,
	4, 4, 2, 1, 3, 0, 2, 6, 7, 8,
	8, 9, 9, 6, 7, 1, 3, 3, 0, 1,
	3, 1, 2, 3, 2, 4, 6, 5, 4, 1,
	2, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 9, 6, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 3, 3, 3, 3, 3, 4, 3,
	3, 3, 4, 3, 3, 3, 4, 3, 3, 3,
	4, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 5, 1, 1, 0, 1, 1, 1, 4, 4,
	4, 3, 5, 5, 3, 7, 3, 7, 8, 3,
	4, 5, 5, 5, 6, 3, 0, 1, 3, 4,
	5, 3, 3, 3, 3, 3, 5, 6, 5, 3,
	4, 3, 3, 2, 0, 2, 2, 3, 4, 6,
	8, 6, 2, 3, 5, 5, 5, 4, 4, 4,
	1, 3, 0, 2, 1, 2, 2, 1, 1, 2,
	2, 1, 1, 3, 3, 1, 3, 3, 5, 5,
	5, 3, 0, 2, 2, 2, 2, 5, 6, 5,
	6, 5, 4, 3, 3, 2, 4, 4, 2, 5,
	7, 4, 6, 4, 5, 3, 3,
}
var RubyChk = []int{

	-1000, -64, 59, 60, 76, -2, 59, 60, 76, -20,
	-25, -32, -36, -33, -17, -18, -37, -14, -19, -26,
	-44, -40, -28, -29, -30, -43, -5, -27, -13, -7,
	-21, -8, -4, -38, -23, -24, -9, -11, -48, -49,
	-50, -51, -16, -42, -41, -31, 17, 23, 24, 6,
	9, -35, -22, -10, -47, -75, 19, 22, 28, 36,
	26, 27, 40, 35, 31, 32, 34, 42, 7, 5,
	75, 74, -3, -1, 68, 70, 10, 8, 11, 39,
	48, 49, 51, 53, 54, -52, -53, -54, -55, -56,
	-57, 73, 72, 43, 44, 60, 59, 76, 19, 22,
	26, 29, 62, 45, 46, 4, 50, 52, 54, 64,
	65, 63, 22, 66, 37, 38, 55, 22, 47, 45,
	68, 56, 57, 19, 22, 62, 6, -3, 4, -38,
	4, 9, -38, 11, -61, -6, -70, 68, 47, 56,
	57, 13, -74, 16, 70, -20, -17, -15, -23, 6,
	9, -35, -22, -10, 15, 11, 68, 10, 47, 56,
	57, 68, 47, 56, 57, 13, 47, 56, 57, 13,
	47, 56, 57, 47, 13, 47, 13, -2, -2, -58,
	-72, -20, -38, 6, 9, -35, -22, -10, -2, -2,
	-20, -80, -72, -13, -20, 19, 22, 19, 22, 7,
	-80, -80, 11, -59, -6, 70, -2, -2, -20, -20,
	-20, 6, 9, 73, 6, 9, -2, -2, -2, -20,
	6, -20, -20, -80, -20, -2, -20, -20, -20, -20,
	-2, -20, -80, -80, -20, -2, -2, -20, -74, -20,
	-2, -2, -2, -2, 6, -65, 62, -76, 11, -34,
	6, 54, 15, 62, -65, -58, 45, -20, -58, -70,
	-20, -6, -6, 13, -20, -5, -74, -20, -43, -13,
	-20, -13, -20, -13, 6, -35, -22, 54, 13, -58,
	-62, 63, -80, 68, -20, -70, -20, -5, -74, -2,
	-2, -2, -20, -2, -2, -2, 6, -35, -22, 54,
	-2, -2, -2, 6, -35, -22, 54, -2, -2, -2,
	-47, -2, 6, -35, -22, 54, -75, 6, 6, -58,
	59, 60, 59, 60, -2, -69, 13, 59, 59, -80,
	59, -39, 41, -2, -2, -2, -2, 7, -78, -20,
	-17, -15, 71, -66, -73, -20, 6, -70, -2, 60,
	12, -80, 6, 9, -6, -61, 47, 11, -20, -20,
	61, -20, -20, 69, 13, 69, -6, -58, 6, 13,
	-76, 54, 47, 6, 6, 6, -58, 18, -38, -58,
	18, 12, 13, -80, 69, 69, 69, 6, -80, -20,
	18, -58, -71, 6, -58, -62, -23, -20, 12, 69,
	69, 69, 69, 6, 6, 6, 68, 68, 18, -63,
	21, 20, -58, -58, 18, 20, 30, -12, 29, -20,
	-67, -67, -39, 18, 20, 41, -72, -80, 13, -80,
	13, -80, 13, 4, 61, 12, -20, -6, -2, -70,
	-20, 47, -68, -60, 30, -12, -65, -34, 12, 12,
	-20, -65, -68, -60, -58, 18, -6, -80, -20, -17,
	-15, 47, 13, -15, 18, 63, 13, -80, -58, -80,
	-58, 69, 47, 47, -20, -20, 18, 21, 20, -2,
	-58, 18, -63, 18, -58, -58, -58, -77, 4, -38,
	18, 59, 60, -2, -45, 19, 22, 18, 18, 20,
	-58, -72, -58, 69, -80, 71, -80, 71, -80, -2,
	-20, 12, -2, 18, -68, -12, -58, -58, -58, 18,
	-68, 18, -15, -2, 6, 6, 71, 71, 71, -80,
	-80, -2, 69, 69, -2, -58, -58, 18, 18, 30,
	18, -58, 4, 13, 6, -35, -22, -2, -2, -58,
	18, -58, -80, -20, -17, -15, -20, 6, 18, -68,
	-60, -68, -60, 18, 12, 68, 71, -2, -58, -58,
	6, -35, -22, -38, -58, -58, -58, 59, 59, 60,
	18, -80, 4, 61, 18, -68, 18, -68, -20, 18,
	-58, -58, -58, -67, -67, -67, -2, -20, 18, 18,
	69, 18, -46, 21, 20, 18, -46, 18, -79, 13,
	-80, 13, 18, 21, 20, -2, -67, 18, -80, -2,
	-67, -67, -67,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 0, 0, 0, 21,
	22, 23, 24, 25, 0, 0, 0, 0, 15, 277,
	0, 0, 13, 281, 285, 282, 278, 0, 19, 20,
	26, 27, 28, 29, 13, 13, 151, 77, 254, 0,
	0, 0, 0, 0, 0, 46, 47, 48, 49, 50,
	51, 0, 0, 212, 213, 5, 6, 7, 0, 0,
	0, 0, 0, 0, 0, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 138, 15,
	0, 149, 15, -2, 80, 82, 90, 13, 0, 0,
	0, 0, 111, 15, 13, 116, 117, 118, 34, 21,
	22, 23, 24, 25, 0, 115, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 15, 0, 272,
	276, 113, 33, 21, 22, 23, 24, 25, 0, 0,
	13, 0, 279, 280, 113, 0, 0, 0, 0, 0,
	214, 0, 115, 0, 308, 13, 201, 202, 203, 204,
	74, 181, 182, 0, 179, 180, 241, 249, 291, 73,
	83, 92, 94, 0, 205, 206, 207, 208, 209, 210,
	243, 0, 0, 0, 315, 245, 159, 93, 0, 123,
	171, 178, 242, 244, 87, 15, 0, 135, 138, 139,
	141, 0, 0, 0, 15, 0, 0, 15, 0, 0,
	116, 81, 91, 13, 123, 0, 0, 152, 153, 154,
	165, 166, 172, 173, 185, 186, 187, 0, 13, 0,
	15, 236, 15, 13, 122, 0, 123, 0, 0, 155,
	167, 174, 0, 156, 168, 175, 189, 190, 191, 0,
	157, 169, 176, 193, 194, 195, 0, 158, 170, 177,
	160, 161, 197, 198, 199, 0, 162, 0, 0, 0,
	15, 15, 16, 17, 18, 0, 0, 292, 292, 0,
	14, 0, 0, 286, 287, 283, 284, 316, 13, 215,
	216, 217, 221, 13, 13, 0, -2, 0, 255, 256,
	257, 15, 183, 184, 84, 86, 0, -2, 123, 108,
	0, 306, 307, 102, 0, 103, 88, 125, 138, 0,
	0, 0, 0, 142, 144, 138, 125, 145, 15, 0,
	148, 75, 13, 0, 95, 98, 100, 188, 0, 124,
	229, 0, 0, 237, 13, 15, -2, 123, 79, 96,
	99, 101, 97, 192, 196, 200, 0, 0, 239, 0,
	0, 15, 0, 0, 258, 15, 15, 273, 15, 114,
	0, 0, 0, 311, 15, 0, 15, 0, 13, 0,
	13, 0, 13, 13, 0, 78, 0, 85, 89, 0,
	288, 0, 0, 125, 15, 274, 15, 140, 136, 137,
	143, 15, 0, 125, 0, 147, 76, 0, 119, 120,
	121, 0, 0, 112, 230, 235, 0, 0, 0, 0,
	13, 95, 13, 0, 0, 0, 240, 0, 15, 15,
	253, 246, 0, 248, 0, 0, 262, 15, 0, 270,
	289, 293, 294, 295, 296, 0, 0, 290, 309, 15,
	0, 15, 13, 211, 0, 222, 0, 223, 0, 224,
	226, 109, 107, 127, 0, 275, 126, 125, 125, 133,
	0, 146, 121, 104, 0, 238, 231, 232, 233, 0,
	0, 106, 0, 164, 15, 251, 252, 247, 259, 15,
	261, 263, 0, 0, 15, 15, 15, 15, 0, 0,
	312, 13, 313, 218, 219, 220, 0, 0, 128, 0,
	125, 0, 125, 134, 110, 0, 234, 105, 250, 0,
	15, 15, 15, 271, 267, 268, 269, 292, 15, 15,
	310, 314, 13, 0, 129, 0, 130, 0, 0, 260,
	264, 265, 266, 0, 0, 0, 11, 13, 131, 132,
	163, 297, 0, 0, 292, 299, 0, 301, 225, 12,
	227, 13, 298, 0, 292, 292, 305, 300, 228, 292,
	303, 304, 302,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:221
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:223
		{
		}
	case 3:
		//line parser.y:225
		{
		}
	case 4:
		//line parser.y:227
		{
		}
	case 5:
		//line parser.y:229
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:231
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:233
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:239
		{
		}
	case 11:
		//line parser.y:241
		{
		}
	case 12:
		//line parser.y:242
		{
		}
	case 13:
		//line parser.y:244
		{
		}
	case 14:
		//line parser.y:245
		{
		}
	case 15:
		//line parser.y:248
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:250
		{
		}
	case 17:
		//line parser.y:252
		{
		}
	case 18:
		//line parser.y:254
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:265
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 74:
		//line parser.y:268
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 75:
		//line parser.y:271
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 76:
		//line parser.y:280
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-2].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 77:
		//line parser.y:290
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:296
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:305
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-3].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-3].genericValue.LineNumber()},
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:314
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:323
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:333
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:343
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:352
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:363
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:374
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:384
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:394
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:405
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:418
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:427
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:437
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:447
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:457
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:469
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:479
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:489
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:499
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:509
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:519
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:529
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:539
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:549
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:561
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:571
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:581
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:591
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:603
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 109:
		//line parser.y:615
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 110:
		//line parser.y:617
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-1].genericValue)
		}
	case 111:
		//line parser.y:619
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 112:
		//line parser.y:621
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:624
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:626
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:628
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 116:
		//line parser.y:630
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:632
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:634
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:636
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:638
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:640
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:643
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 123:
		//line parser.y:653
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:655
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:658
		{
			RubyVAL.genericSlice = nil
		}
	case 126:
		//line parser.y:660
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 127:
		//line parser.y:663
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 128:
		//line parser.y:674
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 129:
		//line parser.y:686
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 130:
		//line parser.y:698
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 131:
		//line parser.y:710
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 132:
		//line parser.y:723
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 133:
		//line parser.y:736
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 134:
		//line parser.y:747
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 135:
		//line parser.y:761
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 136:
		//line parser.y:763
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 137:
		//line parser.y:765
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 138:
		//line parser.y:767
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 139:
		//line parser.y:769
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 140:
		//line parser.y:771
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 141:
		//line parser.y:774
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 142:
		//line parser.y:776
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 143:
		//line parser.y:778
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 144:
		//line parser.y:780
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 145:
		//line parser.y:784
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 146:
		//line parser.y:794
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 147:
		//line parser.y:806
		{
			name := RubyS[Rubypt-3].genericValue.(ast.BareReference).Name
			if name != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + name + ")")
			}

			class := ast.Eigenclass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 148:
		//line parser.y:821
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 149:
		//line parser.y:832
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 150:
		//line parser.y:841
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 151:
		//line parser.y:860
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 152:
		//line parser.y:878
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 153:
		//line parser.y:887
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 154:
		//line parser.y:893
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 155:
		//line parser.y:899
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 156:
		//line parser.y:908
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 157:
		//line parser.y:917
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 158:
		//line parser.y:926
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 159:
		//line parser.y:935
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 160:
		//line parser.y:938
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 161:
		//line parser.y:947
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 162:
		//line parser.y:956
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 163:
		//line parser.y:966
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 164:
		//line parser.y:981
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 165:
		//line parser.y:987
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:996
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:1002
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:1011
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 169:
		//line parser.y:1020
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 170:
		//line parser.y:1029
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1038
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1047
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1056
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1062
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1071
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1080
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1089
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 178:
		//line parser.y:1098
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 179:
		//line parser.y:1105
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 180:
		//line parser.y:1107
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
		}
	case 181:
		//line parser.y:1110
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 182:
		//line parser.y:1116
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 183:
		//line parser.y:1123
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 184:
		//line parser.y:1129
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 185:
		//line parser.y:1136
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 186:
		//line parser.y:1138
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 187:
		//line parser.y:1140
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 188:
		//line parser.y:1142
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 189:
		//line parser.y:1145
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 190:
		//line parser.y:1147
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 191:
		//line parser.y:1149
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 192:
		//line parser.y:1151
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 193:
		//line parser.y:1154
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 194:
		//line parser.y:1156
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 195:
		//line parser.y:1158
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 196:
		//line parser.y:1160
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1163
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1165
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1167
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1169
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1173
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 202:
		//line parser.y:1175
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 203:
		//line parser.y:1177
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 204:
		//line parser.y:1179
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 205:
		//line parser.y:1182
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 206:
		//line parser.y:1193
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 207:
		//line parser.y:1204
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 208:
		//line parser.y:1215
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 209:
		//line parser.y:1226
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 210:
		//line parser.y:1237
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 211:
		//line parser.y:1248
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 212:
		//line parser.y:1250
		{
		}
	case 213:
		//line parser.y:1251
		{
		}
	case 214:
		//line parser.y:1253
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 215:
		//line parser.y:1255
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 216:
		//line parser.y:1257
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 217:
		//line parser.y:1259
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 218:
		//line parser.y:1261
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 219:
		//line parser.y:1263
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 220:
		//line parser.y:1265
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 221:
		//line parser.y:1268
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 222:
		//line parser.y:1270
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 223:
		//line parser.y:1278
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 224:
		//line parser.y:1287
		{
			name := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 225:
		//line parser.y:1295
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 226:
		//line parser.y:1304
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 227:
		//line parser.y:1311
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 228:
		//line parser.y:1318
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 229:
		//line parser.y:1326
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 230:
		//line parser.y:1331
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 231:
		//line parser.y:1336
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 232:
		//line parser.y:1341
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 233:
		//line parser.y:1346
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 234:
		//line parser.y:1351
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 235:
		//line parser.y:1360
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 236:
		//line parser.y:1362
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 237:
		//line parser.y:1364
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 238:
		//line parser.y:1366
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 239:
		//line parser.y:1369
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 240:
		//line parser.y:1378
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 241:
		//line parser.y:1388
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 242:
		//line parser.y:1397
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 243:
		//line parser.y:1406
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 244:
		//line parser.y:1415
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 245:
		//line parser.y:1424
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 246:
		//line parser.y:1433
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 247:
		//line parser.y:1442
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1452
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1461
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1472
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 251:
		//line parser.y:1481
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 252:
		//line parser.y:1489
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 253:
		//line parser.y:1497
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 254:
		//line parser.y:1505
		{
		}
	case 255:
		//line parser.y:1506
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 256:
		//line parser.y:1507
		{
		}
	case 257:
		//line parser.y:1510
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 258:
		//line parser.y:1513
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 259:
		//line parser.y:1522
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 260:
		//line parser.y:1532
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 261:
		//line parser.y:1542
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 262:
		//line parser.y:1552
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 263:
		//line parser.y:1554
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 264:
		//line parser.y:1568
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 265:
		//line parser.y:1589
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 266:
		//line parser.y:1610
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 267:
		//line parser.y:1631
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 268:
		//line parser.y:1646
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 269:
		//line parser.y:1661
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 270:
		//line parser.y:1678
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 271:
		//line parser.y:1680
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 272:
		//line parser.y:1683
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 273:
		//line parser.y:1685
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 274:
		//line parser.y:1688
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 275:
		//line parser.y:1690
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 276:
		//line parser.y:1693
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 277:
		//line parser.y:1700
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 278:
		//line parser.y:1702
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 279:
		//line parser.y:1705
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 280:
		//line parser.y:1713
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 281:
		//line parser.y:1715
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 282:
		//line parser.y:1719
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 283:
		//line parser.y:1721
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 284:
		//line parser.y:1723
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 285:
		//line parser.y:1727
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 286:
		//line parser.y:1729
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 287:
		//line parser.y:1731
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 288:
		//line parser.y:1735
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 289:
		//line parser.y:1746
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 290:
		//line parser.y:1752
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 291:
		//line parser.y:1759
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 292:
		//line parser.y:1766
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 293:
		//line parser.y:1768
		{
		}
	case 294:
		//line parser.y:1770
		{
		}
	case 295:
		//line parser.y:1772
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 296:
		//line parser.y:1774
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 297:
		//line parser.y:1777
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 298:
		//line parser.y:1785
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 299:
		//line parser.y:1794
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 300:
		//line parser.y:1802
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 301:
		//line parser.y:1811
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 302:
		//line parser.y:1820
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 303:
		//line parser.y:1828
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 304:
		//line parser.y:1836
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 305:
		//line parser.y:1844
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 306:
		//line parser.y:1853
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 307:
		//line parser.y:1856
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 308:
		//line parser.y:1859
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 309:
		//line parser.y:1866
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 310:
		//line parser.y:1872
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 311:
		//line parser.y:1878
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 312:
		//line parser.y:1884
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 313:
		//line parser.y:1891
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 314:
		//line parser.y:1893
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 315:
		//line parser.y:1896
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 316:
		//line parser.y:1903
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	}
	goto Rubystack /* stack new state and value */
}

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SPECIAL_CHAR_REF = 57349
const CAPITAL_REF = 57350
const LPAREN = 57351
const RPAREN = 57352
const COMMA = 57353
const NamespacedModule = 57354
const DO = 57355
const DEF = 57356
const END = 57357
const IF = 57358
const ELSE = 57359
const ELSIF = 57360
const UNLESS = 57361
const CLASS = 57362
const MODULE = 57363
const FOR = 57364
const WHILE = 57365
const UNTIL = 57366
const BEGIN = 57367
const RESCUE = 57368
const ENSURE = 57369
const BREAK = 57370
const NEXT = 57371
const REDO = 57372
const RETRY = 57373
const RETURN = 57374
const YIELD = 57375
const AND = 57376
const OR = 57377
const LAMBDA = 57378
const CASE = 57379
const WHEN = 57380
const TRUE = 57381
const FALSE = 57382
const LESSTHAN = 57383
const GREATERTHAN = 57384
const EQUALTO = 57385
const BANG = 57386
const COMPLEMENT = 57387
const POSITIVE = 57388
const NEGATIVE = 57389
const STAR = 57390
const RANGE = 57391
const OR_EQUALS = 57392
const WHITESPACE = 57393
const NEWLINE = 57394
const SEMICOLON = 57395
const COLON = 57396
const DOT = 57397
const PIPE = 57398
const SLASH = 57399
const AMPERSAND = 57400
const QUESTIONMARK = 57401
const CARET = 57402
const LBRACKET = 57403
const RBRACKET = 57404
const LBRACE = 57405
const RBRACE = 57406
const DOLLARSIGN = 57407
const ATSIGN = 57408
const FILE_CONST_REF = 57409
const EOF = 57410

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"POSITIVE",
	"NEGATIVE",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1389

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 122,
	10, 108,
	11, 108,
	-2, 240,
	-1, 312,
	52, 13,
	64, 13,
	-2, 31,
	-1, 325,
	10, 108,
	11, 108,
	-2, 240,
}

const RubyNprod = 292
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 3789

var RubyAct = []int{

	291, 408, 5, 538, 409, 31, 161, 218, 375, 214,
	298, 226, 366, 216, 62, 18, 13, 297, 124, 350,
	52, 123, 384, 129, 360, 2, 3, 459, 71, 314,
	77, 136, 78, 26, 25, 76, 279, 183, 272, 184,
	92, 4, 146, 93, 297, 297, 297, 514, 266, 131,
	119, 121, 297, 247, 158, 159, 485, 465, 463, 79,
	145, 254, 87, 88, 461, 163, 164, 80, 81, 82,
	83, 84, 98, 331, 167, 297, 90, 89, 282, 254,
	275, 178, 179, 237, 74, 133, 75, 309, 86, 85,
	269, 116, 91, 188, 189, 250, 85, 185, 85, 48,
	111, 196, 107, 108, 373, 372, 201, 145, 85, 96,
	97, 206, 133, 85, 210, 211, 212, 109, 297, 297,
	112, 297, 254, 95, 367, 423, 152, 331, 222, 176,
	429, 526, 422, 153, 331, 177, 208, 421, 228, 229,
	140, 244, 246, 142, 261, 262, 137, 264, 265, 241,
	270, 271, 257, 276, 277, 278, 228, 229, 253, 240,
	432, 243, 177, 137, 421, 260, 137, 137, 148, 300,
	301, 302, 303, 236, 238, 259, 316, 283, 351, 426,
	431, 219, 137, 137, 137, 330, 315, 157, 306, 307,
	228, 229, 141, 406, 137, 152, 137, 137, 509, 137,
	146, 137, 137, 137, 137, 140, 137, 147, 142, 137,
	322, 137, 137, 323, 219, 299, 98, 217, 145, 156,
	224, 149, 233, 220, 425, 137, 137, 137, 248, 297,
	343, 337, 155, 221, 338, 137, 110, 142, 120, 143,
	233, 137, 76, 496, 297, 137, 107, 108, 267, 92,
	497, 273, 93, 96, 97, 280, 220, 141, 99, 100,
	101, 151, 92, 333, 154, 93, 221, 95, 104, 102,
	103, 106, 233, 137, 233, 422, 140, 527, 98, 142,
	241, 473, 98, 293, 470, 520, 521, 397, 382, 174,
	240, 137, 382, 149, 137, 382, 395, 381, 287, 288,
	150, 355, 92, 137, 137, 93, 390, 386, 107, 108,
	143, 92, 107, 108, 93, 96, 97, 144, 385, 96,
	97, 92, 392, 109, 93, 403, 157, 109, 141, 95,
	137, 137, 336, 95, 251, 114, 365, 404, 115, 380,
	349, 228, 229, 415, 411, 410, 92, 519, 544, 93,
	382, 137, 454, 545, 455, 137, 137, 295, 92, 170,
	111, 93, 171, 71, 135, 77, 136, 122, 528, 113,
	76, 133, 238, 402, 320, 389, 321, 438, 517, 98,
	112, 355, 294, 468, 346, 449, 449, 441, 445, 553,
	483, 550, 549, 137, 79, 417, 457, 87, 88, 137,
	466, 482, 80, 81, 82, 83, 84, 469, 137, 107,
	108, 481, 98, 471, 137, 168, 96, 97, 169, 256,
	471, 134, 480, 86, 85, 233, 219, 137, 98, 217,
	95, 137, 479, 488, 478, 477, 371, 491, 137, 412,
	336, 370, 107, 108, 401, 364, 478, 477, 137, 96,
	97, 304, 498, 499, 98, 369, 363, 364, 107, 108,
	387, 359, 388, 95, 98, 96, 97, 186, 220, 187,
	536, 352, 137, 137, 511, 215, 506, 505, 221, 95,
	345, 346, 340, 389, 107, 108, 490, 444, 515, 137,
	339, 96, 97, 335, 107, 108, 548, 285, 550, 549,
	137, 96, 97, 518, 494, 95, 437, 436, 435, 284,
	437, 436, 489, 213, 191, 95, 471, 98, 233, 118,
	49, 117, 368, 311, 358, 292, 534, 310, 1, 175,
	233, 61, 449, 449, 449, 60, 542, 59, 58, 98,
	551, 57, 531, 532, 533, 56, 39, 107, 108, 38,
	555, 37, 36, 449, 96, 97, 51, 449, 449, 449,
	233, 450, 137, 552, 20, 41, 42, 138, 95, 107,
	108, 21, 106, 556, 557, 137, 96, 97, 558, 15,
	12, 11, 24, 23, 138, 22, 137, 138, 138, 27,
	95, 19, 10, 33, 28, 17, 14, 332, 40, 16,
	35, 34, 29, 138, 138, 138, 73, 137, 30, 72,
	0, 0, 137, 0, 137, 138, 0, 138, 138, 0,
	138, 0, 138, 138, 138, 138, 137, 138, 0, 0,
	138, 0, 138, 138, 0, 0, 0, 98, 0, 0,
	98, 0, 0, 234, 0, 0, 138, 138, 138, 249,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 94,
	0, 234, 138, 0, 0, 0, 138, 107, 108, 268,
	107, 108, 274, 0, 96, 97, 281, 96, 97, 71,
	231, 77, 232, 78, 0, 0, 76, 0, 95, 0,
	327, 95, 106, 234, 138, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 138, 87, 88, 138, 0, 0, 80, 81,
	82, 83, 84, 0, 138, 138, 297, 0, 0, 0,
	0, 0, 507, 0, 0, 74, 0, 75, 0, 86,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 138, 0, 0, 71, 46, 77, 47, 78,
	32, 0, 76, 0, 43, 541, 451, 540, 539, 452,
	44, 45, 138, 64, 65, 55, 138, 138, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 525, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	399, 0, 447, 448, 0, 0, 0, 132, 0, 0,
	0, 74, 0, 75, 138, 86, 85, 0, 107, 108,
	138, 0, 0, 0, 132, 96, 97, 132, 132, 138,
	107, 108, 0, 0, 0, 138, 0, 96, 97, 95,
	0, 0, 0, 132, 132, 132, 234, 98, 138, 0,
	0, 95, 138, 0, 547, 132, 0, 132, 132, 138,
	132, 0, 132, 132, 132, 132, 0, 132, 0, 138,
	132, 0, 132, 132, 0, 0, 0, 107, 108, 0,
	0, 0, 0, 132, 96, 97, 132, 132, 132, 0,
	0, 0, 0, 138, 138, 0, 132, 0, 95, 0,
	0, 132, 132, 0, 0, 0, 132, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 132, 312, 132, 0, 0, 94, 234,
	0, 0, 0, 0, 0, 0, 107, 108, 0, 0,
	0, 234, 132, 96, 97, 132, 0, 0, 99, 100,
	101, 109, 0, 0, 132, 132, 0, 95, 104, 102,
	103, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 132, 132, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 132, 0, 0, 0, 312, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 138, 0, 138, 0, 0, 0, 0,
	0, 0, 71, 135, 77, 136, 122, 138, 128, 76,
	133, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 79, 0, 132, 87, 88, 0, 0,
	126, 80, 81, 82, 83, 84, 132, 127, 132, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 125, 132,
	134, 0, 86, 85, 9, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 135, 77, 136, 122, 0,
	0, 76, 133, 132, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 130, 0, 0, 0, 79, 0, 0, 87, 88,
	0, 132, 0, 80, 81, 82, 83, 84, 162, 0,
	0, 165, 162, 400, 0, 0, 0, 0, 0, 132,
	256, 0, 134, 0, 86, 85, 0, 180, 181, 182,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 192, 193, 0, 195, 0, 197, 198, 199, 200,
	0, 202, 0, 0, 205, 0, 207, 209, 0, 0,
	0, 132, 0, 132, 0, 0, 0, 227, 0, 0,
	239, 242, 245, 0, 0, 0, 132, 0, 0, 0,
	130, 0, 0, 0, 0, 227, 258, 132, 0, 0,
	263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 231, 77, 232, 78, 132, 0,
	76, 0, 0, 132, 0, 132, 0, 305, 313, 227,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 79, 0, 130, 87, 88, 326,
	0, 0, 80, 81, 82, 83, 84, 0, 328, 329,
	297, 0, 0, 0, 0, 0, 486, 0, 0, 74,
	0, 75, 0, 86, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 130, 0, 0, 71,
	46, 77, 47, 78, 50, 0, 76, 0, 43, 537,
	451, 540, 539, 452, 44, 45, 354, 64, 65, 55,
	313, 362, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 447, 448, 0, 0,
	0, 139, 0, 0, 0, 74, 0, 75, 383, 86,
	85, 0, 0, 0, 162, 0, 0, 0, 139, 0,
	0, 139, 139, 393, 0, 0, 0, 172, 0, 130,
	0, 0, 0, 0, 0, 0, 0, 139, 139, 139,
	227, 0, 405, 0, 0, 0, 354, 0, 0, 139,
	0, 139, 139, 413, 139, 0, 139, 139, 139, 139,
	286, 139, 0, 419, 139, 0, 139, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 235, 0, 0,
	139, 139, 139, 0, 0, 0, 0, 433, 434, 0,
	139, 0, 0, 0, 166, 235, 139, 0, 0, 0,
	139, 0, 0, 173, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 467, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 235, 139, 235,
	0, 0, 0, 476, 0, 203, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 476, 139, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 139,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 504, 0, 508, 0, 0,
	223, 0, 225, 0, 0, 139, 139, 0, 0, 0,
	513, 0, 0, 296, 252, 0, 0, 0, 0, 0,
	0, 513, 0, 0, 0, 319, 139, 0, 0, 0,
	139, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 0, 0, 0, 0, 130, 0, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 535, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 139, 0, 0, 71, 231, 77,
	232, 78, 0, 139, 76, 348, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 353,
	235, 0, 139, 341, 0, 0, 139, 0, 79, 0,
	0, 87, 88, 139, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 139, 297, 0, 0, 0, 0, 0,
	475, 0, 0, 74, 357, 75, 361, 86, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 139, 0,
	0, 0, 391, 0, 0, 0, 0, 0, 394, 396,
	398, 0, 0, 0, 139, 0, 0, 0, 378, 379,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 235, 418, 0, 0, 0, 0, 0,
	361, 0, 0, 0, 0, 235, 0, 0, 0, 428,
	0, 0, 430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 416, 71, 135, 77, 136, 78,
	0, 0, 76, 0, 0, 235, 0, 139, 0, 0,
	460, 427, 0, 462, 0, 464, 0, 194, 0, 0,
	139, 0, 0, 0, 0, 0, 79, 0, 439, 87,
	88, 139, 0, 443, 80, 81, 82, 83, 84, 456,
	0, 458, 297, 0, 0, 0, 0, 0, 420, 487,
	0, 74, 139, 75, 0, 86, 85, 139, 0, 139,
	0, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 492, 493,
	0, 0, 0, 0, 0, 495, 0, 0, 71, 46,
	77, 47, 78, 0, 0, 76, 500, 43, 502, 53,
	0, 0, 54, 44, 45, 0, 64, 65, 55, 0,
	523, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 516, 194, 0, 6, 7, 0, 0, 0,
	0, 0, 0, 546, 74, 0, 75, 0, 86, 85,
	0, 8, 0, 0, 0, 554, 0, 0, 530, 0,
	0, 378, 379, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 440, 53, 377, 376, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 374, 53, 377, 376, 54,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 76, 0, 43, 510, 53, 0,
	0, 54, 44, 45, 0, 64, 65, 55, 382, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	46, 77, 47, 78, 0, 0, 76, 0, 43, 414,
	53, 0, 0, 54, 44, 45, 0, 64, 65, 55,
	382, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 46, 77, 47, 78, 0, 0, 76, 0,
	43, 407, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 382, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 543, 451, 0, 0, 452, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 522, 53, 0, 0, 54,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 76, 0, 43, 501, 53, 0,
	0, 54, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	46, 77, 47, 78, 0, 0, 76, 0, 43, 0,
	53, 0, 0, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 484, 86,
	85, 71, 46, 77, 47, 78, 0, 0, 76, 0,
	43, 474, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 453, 451, 0, 0, 452, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 446, 451, 0, 0, 452,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 76, 0, 43, 442, 53, 0,
	0, 54, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	46, 77, 47, 78, 0, 0, 76, 0, 43, 424,
	53, 0, 0, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 46, 77, 47, 78, 0, 0, 76, 0,
	43, 356, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 344, 53, 0, 0, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 342, 53, 0, 0, 54,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 76, 0, 43, 0, 451, 0,
	0, 452, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	46, 77, 47, 78, 0, 0, 76, 0, 43, 0,
	53, 0, 0, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 46, 77, 47, 78, 318, 0, 76, 0,
	43, 0, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 0, 317,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 0, 53, 0, 0, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	297, 71, 46, 77, 47, 78, 0, 0, 76, 74,
	43, 75, 53, 86, 85, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 71, 135, 77, 136, 122,
	0, 0, 76, 133, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 87,
	88, 0, 0, 126, 80, 81, 82, 83, 84, 71,
	135, 77, 136, 325, 0, 0, 76, 133, 0, 0,
	0, 256, 0, 134, 0, 86, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 87, 88, 0, 0, 324, 80, 81,
	82, 83, 84, 71, 314, 77, 136, 78, 0, 0,
	76, 0, 0, 0, 0, 74, 0, 134, 0, 86,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	297, 71, 231, 77, 232, 78, 0, 0, 76, 74,
	0, 75, 309, 86, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 297, 71,
	135, 77, 136, 78, 308, 0, 76, 74, 0, 75,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 135, 77, 136, 78, 0, 0, 76, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 71, 231, 77, 232, 78,
	0, 0, 76, 0, 0, 0, 0, 74, 0, 134,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 71,
	135, 77, 136, 122, 0, 0, 76, 133, 230, 0,
	0, 74, 0, 75, 0, 86, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 71, 135, 77, 136, 78, 0, 0,
	76, 0, 0, 0, 0, 256, 0, 134, 0, 86,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 71, 512, 77,
	136, 78, 0, 0, 76, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85,
}
var RubyPact = []int{

	-27, 1893, -1000, -1000, -1000, 24, -1000, -1000, -1000, 912,
	-1000, -1000, -1000, 217, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 319, -1000, 36, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 515, 230, 230, 1037, 267, 157, 250,
	83, 221, 176, 3256, 3256, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3678, 3256, 3256, 3678, 3678, 399, 343,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 280, -1000, 99,
	3256, 3256, 3678, 3678, 3678, 31, 461, -1000, -1000, -1000,
	-1000, -1000, 3256, 3256, 3678, 508, 3678, 3678, -1000, 3678,
	3256, 3678, 3678, 3678, 3678, 3256, 3678, -1000, -1000, 3678,
	3256, 3678, 3678, 3256, 3256, 3256, 507, 420, 208, 179,
	225, -1000, 3590, 99, 72, 3678, 3678, 3678, 47, 323,
	375, -1000, 59, 5, -1000, 3634, 131, 46, -1000, -1000,
	3590, 3678, -1000, 3256, 3256, 3678, 3256, 3256, 42, 3256,
	3256, 32, 3256, 3256, 3256, 30, 503, 491, 286, 246,
	3084, 272, 375, 330, 305, 375, 177, 272, 3256, 3256,
	3256, 3256, 3436, 3388, 3590, 3146, -1000, -1000, 286, 286,
	375, 375, 375, -1000, -1000, 368, -1000, -1000, 286, 286,
	375, 3344, 375, 375, 3484, 375, 286, 375, 375, 375,
	375, 286, 636, 3484, 3484, 375, 286, 375, 123, 535,
	286, 286, 286, 99, -1000, 487, 321, 175, -1000, 191,
	484, 476, -1000, 2960, 230, 2898, 470, 212, -1000, -1000,
	3678, 3300, 196, -1, 178, 152, -1000, -1000, -1000, 278,
	-43, 116, 633, -1000, -1000, 513, -1000, -1000, -1000, -1000,
	465, 3546, 2836, -1000, 455, 23, 3678, 446, 274, -50,
	62, 286, 286, 460, 286, 286, -1000, -1000, -1000, 449,
	286, 286, -1000, -1000, -1000, 435, 286, 286, 286, -1000,
	-1000, -1000, 430, 315, 44, 43, 2030, -1000, -1000, -1000,
	-1000, 286, 324, 3678, -1000, -1000, 177, -1000, 445, 3678,
	286, 286, 286, 286, 311, 212, -1000, -1000, 3678, -1000,
	285, 276, 59, 796, 1119, 434, 286, -1000, -1000, 66,
	-1000, -1000, 72, 99, 3256, 3590, 375, 3678, 375, 375,
	-1000, 3546, 150, -1000, 2216, 208, 175, 429, 3678, -1000,
	-1000, 2154, -1000, -1000, -1000, 99, -1000, 375, 1790, 121,
	-1000, -1000, -1000, 67, 375, -1000, -1000, 2774, 168, -1000,
	-1000, 3084, 68, -1000, -1000, 137, -1000, -1000, 117, -1000,
	-1000, -1000, 3678, 3678, -1000, 493, 3256, -1000, 1968, 2712,
	-1000, -1000, 230, 375, 2650, 2588, 337, -1000, -1000, 3678,
	272, -35, -1000, 375, 0, -1000, -6, -1000, -7, 3256,
	3678, -1000, -1000, 286, 373, 375, 3256, -1000, 269, -1000,
	-1000, -1000, -1000, 375, -1000, 266, 2526, -1000, 1642, 375,
	426, 3256, 405, 395, -1000, -1000, 384, 2464, -8, 94,
	1258, -1000, 3256, 450, 424, -1000, 3256, -1000, 286, 3084,
	-1000, 489, -1000, 3084, 239, -1000, -1000, -1000, -1000, 286,
	-1000, 3256, 3256, -1000, -1000, -1000, 2402, 272, 3084, -1000,
	674, -1000, 3484, -1000, 192, -1000, 286, 375, -1000, 286,
	-1000, -1000, 2092, -1000, -1000, 3722, 212, -1000, -1000, -1000,
	286, -14, -1000, -1000, -1000, -1000, 3678, 3208, 286, 264,
	-1000, 286, 3084, 3084, -1000, 3084, 372, 230, 295, 233,
	2340, -1000, 3084, 69, 212, -1000, -1000, 3678, 784, 77,
	-1000, 262, 358, 375, 3678, 286, 3084, -1000, -1000, -1000,
	-1000, -1000, -1000, 69, 375, 3256, 3678, -1000, -1000, 408,
	3084, 1334, 750, 2278, 342, 843, -1000, -1000, 481, 3256,
	-1000, -1000, 374, -1000, -1000, -1000, 69, -1000, -1000, 3256,
	-1000, 286, 3022, -1000, 69, 286, 3022, 3022, 3022,
}
var RubyPgo = []int{

	0, 0, 609, 608, 33, 49, 606, 602, 601, 1344,
	600, 4, 14, 599, 598, 16, 596, 595, 1104, 594,
	520, 760, 593, 592, 591, 589, 585, 583, 582, 15,
	581, 7, 99, 580, 579, 5, 10, 571, 566, 565,
	34, 564, 561, 3, 556, 552, 551, 549, 546, 545,
	541, 538, 537, 535, 531, 1450, 529, 1, 21, 24,
	8, 528, 9, 527, 22, 525, 11, 524, 6, 523,
	23, 20, 18, 13, 487, 451, 348, 1417,
}
var RubyR1 = []int{

	0, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 76, 76, 77, 77, 55, 55, 55, 55, 19,
	19, 19, 19, 19, 19, 19, 19, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 29, 29, 29, 29, 29, 29, 29, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 40, 14,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 58, 58, 58, 58, 68, 68, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 72, 72, 72,
	72, 72, 70, 70, 70, 23, 23, 23, 23, 23,
	23, 62, 62, 73, 73, 73, 31, 31, 31, 31,
	30, 30, 33, 35, 35, 35, 15, 15, 15, 15,
	15, 15, 15, 16, 16, 71, 71, 34, 34, 34,
	34, 34, 34, 34, 9, 9, 32, 32, 20, 20,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 2, 6, 7, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 3, 3,
	3, 3, 63, 63, 69, 69, 69, 5, 5, 5,
	5, 59, 67, 67, 67, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 60, 60, 60, 60,
	56, 56, 56, 8, 17, 11, 11, 11, 74, 74,
	65, 65, 57, 57, 24, 24, 25, 26, 26, 28,
	28, 28, 27, 27, 27, 12, 41, 41, 64, 64,
	64, 64, 64, 42, 42, 42, 42, 42, 43, 43,
	43, 43, 39, 38, 10, 37, 37, 37, 37, 36,
	36, 4,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 5, 1, 4, 4, 2, 3, 3, 4, 4,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 6, 7, 6,
	6, 4, 3, 7, 1, 5, 1, 3, 0, 1,
	1, 1, 2, 4, 4, 4, 5, 1, 1, 4,
	2, 5, 1, 3, 3, 5, 6, 7, 8, 5,
	6, 1, 3, 0, 1, 3, 1, 2, 3, 2,
	4, 6, 4, 1, 2, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 9, 6, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 4, 3, 3, 3, 4, 3, 3,
	3, 4, 3, 3, 3, 4, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 1, 1, 5, 0,
	1, 1, 1, 2, 4, 4, 4, 5, 3, 5,
	5, 5, 3, 7, 3, 7, 8, 3, 4, 5,
	5, 3, 0, 1, 3, 4, 5, 3, 3, 3,
	3, 3, 5, 6, 5, 3, 4, 3, 3, 2,
	0, 2, 2, 3, 4, 2, 3, 5, 1, 3,
	0, 2, 1, 2, 2, 1, 1, 2, 1, 1,
	3, 3, 1, 3, 3, 5, 5, 5, 0, 2,
	2, 2, 2, 5, 6, 5, 6, 5, 4, 3,
	3, 2, 4, 4, 2, 5, 7, 4, 6, 4,
	5, 3,
}
var RubyChk = []int{

	-1000, -61, 52, 53, 68, -1, 52, 53, 68, -18,
	-23, -30, -33, -15, -16, -34, -13, -17, -29, -24,
	-41, -37, -26, -27, -28, -40, -4, -25, -19, -7,
	-3, -35, -21, -22, -8, -10, -45, -46, -47, -48,
	-14, -39, -38, 14, 20, 21, 6, 8, -32, -20,
	-9, -44, -71, 16, 19, 25, -49, -50, -51, -52,
	-53, -54, -12, 33, 23, 24, 37, 32, 28, 29,
	31, 5, -2, -6, 61, 63, 12, 7, 9, 36,
	44, 45, 46, 47, 48, 66, 65, 39, 40, 53,
	52, 68, 16, 19, 26, 55, 41, 42, 4, 46,
	47, 48, 57, 58, 56, 19, 59, 34, 35, 49,
	19, 41, 61, 50, 16, 19, 55, 6, 4, -35,
	8, -35, 9, -58, -72, 61, 43, 50, 11, -70,
	-18, -5, -21, 13, 63, 6, 8, -32, -20, -9,
	9, 61, 12, 43, 50, 61, 43, 50, 11, 43,
	50, 11, 43, 50, 43, 11, 43, 11, -1, -1,
	-55, -68, -18, -1, -1, -18, -77, -68, 16, 19,
	16, 19, -77, -77, 9, -56, -5, 63, -1, -1,
	-18, -18, -18, 6, 8, 66, 6, 8, -1, -1,
	-18, 6, -18, -18, -77, -18, -1, -18, -18, -18,
	-18, -1, -18, -77, -77, -18, -1, -18, -70, -18,
	-1, -1, -1, 6, -62, 55, -73, 9, -31, 6,
	48, 58, -62, -55, 41, -55, -66, -18, -29, -15,
	58, 6, 8, -32, -20, -9, -5, 11, -5, -18,
	-4, -70, -18, -40, -12, -18, -12, 6, -32, -20,
	48, 11, -55, -59, 56, -77, 61, -66, -18, -4,
	-70, -1, -1, -18, -1, -1, 6, -32, -20, 48,
	-1, -1, 6, -32, -20, 48, -1, -1, -1, 6,
	-32, -20, 48, -71, 6, 6, -55, 52, 53, 52,
	53, -1, -65, 11, 52, 52, -77, 52, -36, 38,
	-1, -1, -1, -1, -75, -18, -29, -15, 58, 64,
	-63, -69, -21, -18, 6, -66, -1, 53, 10, -77,
	6, 8, -72, -58, 43, 9, -18, 54, -18, -18,
	62, 11, 62, -5, -55, 6, 11, -73, 43, 6,
	6, -55, 15, -35, 15, 10, 11, -18, -77, 62,
	62, 62, 6, -77, -18, -5, 15, -55, -67, 6,
	-59, -55, -18, 10, 11, 62, 62, 62, 62, 6,
	6, 6, 61, 61, 15, -60, 18, 17, -55, -55,
	15, -11, 26, -18, -64, -64, -36, 15, 17, 38,
	-68, -77, 11, -18, -77, 11, -77, 11, -77, 4,
	54, 10, -5, -1, -66, -18, 43, 15, -57, -11,
	-62, -31, 10, -18, 15, -57, -55, -5, -77, -18,
	58, 43, 11, 58, 15, 56, 11, -55, -77, 62,
	-77, 43, 43, -18, -18, 15, 18, 17, -1, -55,
	15, -60, 15, -55, -74, -35, 15, 52, 53, -1,
	-42, 16, 19, 15, 15, 17, -55, -68, -55, 62,
	-77, 64, -77, 64, -77, 64, -1, -18, 10, -1,
	15, -11, -55, 15, 15, 58, -18, -15, -29, 6,
	-1, 6, 6, 6, 64, 64, 58, -77, -1, 62,
	62, -1, -55, -55, 15, -55, 4, 11, -1, -1,
	-55, 15, -55, -77, -18, -15, -29, 58, -18, 6,
	15, -57, 6, -18, 61, -1, -55, 6, -35, 52,
	52, 53, 15, -77, -18, 4, 54, 15, 10, -18,
	-55, -64, -64, -64, -1, -18, 62, 15, -43, 18,
	17, 15, -43, 15, -76, 11, -77, 11, 15, 18,
	17, -1, -64, 15, -77, -1, -64, -64, -64,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 0, 0, 0, 20, 21, 22, 23,
	24, 0, 0, 0, 0, 15, 42, 43, 44, 45,
	46, 47, 48, 255, 0, 0, 13, 258, 262, 259,
	256, 19, 25, 26, 13, 13, 145, 72, 240, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 5,
	6, 7, 0, 0, 0, 0, 0, 0, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 13, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 133, 15,
	143, 15, -2, 75, 84, 13, 0, 0, 0, 104,
	117, 118, 31, 15, 13, 20, 21, 22, 23, 24,
	108, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
	250, 254, 106, 0, 0, 13, 0, 257, 0, 0,
	0, 0, 199, 0, 108, 0, 284, 13, 186, 187,
	188, 189, 69, 166, 167, 0, 164, 165, 227, 235,
	68, 77, 85, 87, 0, 190, 191, 192, 193, 194,
	195, 229, 0, 0, 0, 291, 231, 86, 0, 122,
	163, 228, 230, 81, 15, 0, 131, 133, 134, 136,
	0, 0, 15, 0, 0, 0, 0, 109, 110, 111,
	0, 20, 21, 22, 23, 24, 76, 13, 120, 122,
	0, 0, 146, 147, 148, 157, 158, 170, 171, 172,
	0, 13, 0, 15, 222, 15, 13, 0, 122, 0,
	0, 149, 159, 0, 150, 160, 174, 175, 176, 0,
	151, 161, 178, 179, 180, 0, 152, 162, 153, 182,
	183, 184, 0, 154, 0, 0, 0, 15, 15, 16,
	17, 18, 0, 0, 268, 268, 0, 14, 0, 0,
	263, 264, 260, 261, 13, 200, 201, 202, 0, 208,
	13, 13, -2, 0, 20, 0, 241, 242, 243, 15,
	168, 169, 78, 79, 0, -2, 101, 0, 282, 283,
	95, 0, 96, 82, 0, 133, 0, 0, 0, 137,
	139, 0, 140, 15, 142, 70, 13, 112, 0, 88,
	91, 93, 173, 0, 123, 124, 217, 0, 0, 223,
	15, 13, 122, 74, 13, 89, 92, 94, 90, 177,
	181, 185, 0, 0, 225, 0, 0, 15, 0, 0,
	244, 251, 15, 107, 0, 0, 0, 287, 15, 0,
	15, 0, 13, 203, 0, 13, 0, 13, 0, 13,
	0, 73, 80, 83, 0, 265, 0, 125, 0, 252,
	15, 135, 132, 138, 129, 0, 0, 71, 0, 119,
	0, 0, 0, 0, 218, 221, 0, 0, 0, 88,
	0, 13, 0, 0, 0, 226, 0, 15, 15, 239,
	232, 0, 234, 245, 15, 248, 266, 269, 270, 271,
	272, 0, 0, 267, 285, 15, 0, 15, 13, 198,
	0, 209, 0, 210, 0, 211, 212, 214, 102, 100,
	126, 253, 0, 130, 141, 0, 113, 114, 115, 121,
	97, 0, 105, 224, 219, 220, 0, 0, 99, 0,
	156, 15, 237, 238, 233, 246, 0, 0, 15, 0,
	0, 288, 13, 289, 204, 205, 206, 0, 0, 0,
	127, 0, 20, 116, 0, 98, 236, 15, 249, 268,
	15, 15, 286, 290, 207, 13, 0, 128, 103, 0,
	247, 0, 0, 0, 11, 13, 155, 273, 0, 0,
	268, 275, 0, 277, 213, 12, 215, 13, 274, 0,
	268, 268, 281, 276, 216, 268, 279, 280, 278,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:207
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:209
		{
		}
	case 3:
		//line parser.y:211
		{
		}
	case 4:
		//line parser.y:213
		{
		}
	case 5:
		//line parser.y:215
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:217
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:219
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:225
		{
		}
	case 11:
		//line parser.y:227
		{
		}
	case 12:
		//line parser.y:228
		{
		}
	case 13:
		//line parser.y:230
		{
		}
	case 14:
		//line parser.y:231
		{
		}
	case 15:
		//line parser.y:234
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:236
		{
		}
	case 17:
		//line parser.y:238
		{
		}
	case 18:
		//line parser.y:240
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		//line parser.y:252
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 69:
		//line parser.y:255
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 70:
		//line parser.y:258
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 71:
		//line parser.y:265
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 72:
		//line parser.y:272
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 73:
		//line parser.y:276
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 74:
		//line parser.y:283
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 75:
		//line parser.y:290
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 76:
		//line parser.y:297
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 77:
		//line parser.y:304
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 78:
		//line parser.y:311
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 79:
		//line parser.y:319
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 80:
		//line parser.y:327
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 81:
		//line parser.y:335
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 82:
		//line parser.y:343
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 83:
		//line parser.y:351
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 84:
		//line parser.y:362
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 85:
		//line parser.y:369
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 86:
		//line parser.y:377
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 87:
		//line parser.y:385
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 88:
		//line parser.y:395
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 89:
		//line parser.y:403
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 90:
		//line parser.y:411
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 91:
		//line parser.y:419
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 92:
		//line parser.y:427
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 93:
		//line parser.y:435
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 94:
		//line parser.y:443
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 95:
		//line parser.y:451
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 96:
		//line parser.y:459
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 97:
		//line parser.y:469
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:477
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 99:
		//line parser.y:488
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 100:
		//line parser.y:496
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 101:
		//line parser.y:506
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 102:
		//line parser.y:516
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 103:
		//line parser.y:518
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 104:
		//line parser.y:520
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 105:
		//line parser.y:522
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 106:
		//line parser.y:525
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 107:
		//line parser.y:527
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 108:
		//line parser.y:529
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 109:
		//line parser.y:531
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 110:
		//line parser.y:533
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 111:
		//line parser.y:535
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 112:
		//line parser.y:537
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 113:
		//line parser.y:544
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:546
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:548
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:550
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 117:
		//line parser.y:559
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:561
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:563
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:565
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:567
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 122:
		//line parser.y:570
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:572
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:574
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:578
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 126:
		//line parser.y:586
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 127:
		//line parser.y:595
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 128:
		//line parser.y:604
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:614
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:622
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:633
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 132:
		//line parser.y:635
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 133:
		//line parser.y:637
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 134:
		//line parser.y:639
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:641
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:644
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 137:
		//line parser.y:646
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 138:
		//line parser.y:648
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 139:
		//line parser.y:650
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 140:
		//line parser.y:654
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name: RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 141:
		//line parser.y:661
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 142:
		//line parser.y:671
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 143:
		//line parser.y:680
		{
			RubyVAL.genericValue = ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
		}
	case 144:
		//line parser.y:687
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(string)}, "")
			pieces := strings.Split(fullName, "::")

			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.Join(pieces[:len(pieces)-1], "::"),
				IsGlobalNamespace: false,
			}
		}
	case 145:
		//line parser.y:699
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(string), "::")
			namespace := strings.Join(pieces[:len(pieces)-1], "::")
			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.TrimPrefix(namespace, "::"),
				IsGlobalNamespace: true,
			}
		}
	case 146:
		//line parser.y:710
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 147:
		//line parser.y:717
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 148:
		//line parser.y:721
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 149:
		//line parser.y:725
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 150:
		//line parser.y:732
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 151:
		//line parser.y:739
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 152:
		//line parser.y:746
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 153:
		//line parser.y:754
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 154:
		//line parser.y:761
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 155:
		//line parser.y:769
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 156:
		//line parser.y:784
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 157:
		//line parser.y:790
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 158:
		//line parser.y:797
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 159:
		//line parser.y:801
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 160:
		//line parser.y:808
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 161:
		//line parser.y:815
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:822
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 163:
		//line parser.y:829
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 164:
		//line parser.y:832
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 165:
		//line parser.y:834
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 166:
		//line parser.y:837
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 167:
		//line parser.y:839
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 168:
		//line parser.y:842
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:844
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:847
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 171:
		//line parser.y:849
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 172:
		//line parser.y:851
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 173:
		//line parser.y:853
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 174:
		//line parser.y:856
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 175:
		//line parser.y:858
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 176:
		//line parser.y:860
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:862
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 178:
		//line parser.y:865
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 179:
		//line parser.y:867
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 180:
		//line parser.y:869
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:871
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 182:
		//line parser.y:874
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 183:
		//line parser.y:876
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 184:
		//line parser.y:878
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 185:
		//line parser.y:880
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 186:
		//line parser.y:883
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 187:
		//line parser.y:884
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 188:
		//line parser.y:885
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:886
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:889
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 191:
		//line parser.y:898
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 192:
		//line parser.y:907
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 193:
		//line parser.y:916
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 194:
		//line parser.y:925
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 195:
		//line parser.y:934
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:942
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 197:
		//line parser.y:943
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 198:
		//line parser.y:945
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 199:
		//line parser.y:947
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 200:
		//line parser.y:949
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 201:
		//line parser.y:951
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 202:
		//line parser.y:953
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 203:
		//line parser.y:955
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 204:
		//line parser.y:962
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 205:
		//line parser.y:964
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 206:
		//line parser.y:966
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:968
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 208:
		//line parser.y:976
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 209:
		//line parser.y:978
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 210:
		//line parser.y:986
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 211:
		//line parser.y:994
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 212:
		//line parser.y:997
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 213:
		//line parser.y:1004
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 214:
		//line parser.y:1012
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 215:
		//line parser.y:1019
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 216:
		//line parser.y:1026
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 217:
		//line parser.y:1034
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 218:
		//line parser.y:1036
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 219:
		//line parser.y:1043
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 220:
		//line parser.y:1047
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 221:
		//line parser.y:1050
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 222:
		//line parser.y:1052
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 223:
		//line parser.y:1054
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1056
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1059
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 226:
		//line parser.y:1066
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 227:
		//line parser.y:1074
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 228:
		//line parser.y:1081
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 229:
		//line parser.y:1088
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 230:
		//line parser.y:1095
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 231:
		//line parser.y:1102
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 232:
		//line parser.y:1109
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 233:
		//line parser.y:1116
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 234:
		//line parser.y:1124
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 235:
		//line parser.y:1131
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 236:
		//line parser.y:1140
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 237:
		//line parser.y:1147
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 238:
		//line parser.y:1154
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 239:
		//line parser.y:1161
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 240:
		//line parser.y:1168
		{
		}
	case 241:
		//line parser.y:1169
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 242:
		//line parser.y:1170
		{
		}
	case 243:
		//line parser.y:1173
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 244:
		//line parser.y:1176
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 245:
		//line parser.y:1184
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 246:
		//line parser.y:1186
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 247:
		//line parser.y:1199
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 248:
		//line parser.y:1219
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 249:
		//line parser.y:1221
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 250:
		//line parser.y:1224
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 251:
		//line parser.y:1226
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 252:
		//line parser.y:1229
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 253:
		//line parser.y:1231
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1234
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 255:
		//line parser.y:1241
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 256:
		//line parser.y:1243
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 257:
		//line parser.y:1246
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 258:
		//line parser.y:1254
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 259:
		//line parser.y:1258
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 260:
		//line parser.y:1260
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 261:
		//line parser.y:1262
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 262:
		//line parser.y:1266
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 263:
		//line parser.y:1268
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 264:
		//line parser.y:1270
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 265:
		//line parser.y:1274
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 266:
		//line parser.y:1283
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 267:
		//line parser.y:1285
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 268:
		//line parser.y:1288
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 269:
		//line parser.y:1290
		{
		}
	case 270:
		//line parser.y:1292
		{
		}
	case 271:
		//line parser.y:1294
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 272:
		//line parser.y:1296
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 273:
		//line parser.y:1299
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 274:
		//line parser.y:1306
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 275:
		//line parser.y:1314
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 276:
		//line parser.y:1321
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 277:
		//line parser.y:1329
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 278:
		//line parser.y:1337
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 279:
		//line parser.y:1344
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 280:
		//line parser.y:1351
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 281:
		//line parser.y:1358
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 282:
		//line parser.y:1366
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 283:
		//line parser.y:1369
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 284:
		//line parser.y:1371
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 285:
		//line parser.y:1374
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 286:
		//line parser.y:1376
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 287:
		//line parser.y:1378
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 288:
		//line parser.y:1380
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 289:
		//line parser.y:1383
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 290:
		//line parser.y:1385
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 291:
		//line parser.y:1387
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

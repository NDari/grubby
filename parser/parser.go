//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SPECIAL_CHAR_REF = 57349
const CAPITAL_REF = 57350
const LPAREN = 57351
const RPAREN = 57352
const COMMA = 57353
const NamespacedModule = 57354
const DO = 57355
const DEF = 57356
const END = 57357
const IF = 57358
const ELSE = 57359
const ELSIF = 57360
const UNLESS = 57361
const CLASS = 57362
const MODULE = 57363
const FOR = 57364
const WHILE = 57365
const UNTIL = 57366
const BEGIN = 57367
const RESCUE = 57368
const ENSURE = 57369
const BREAK = 57370
const NEXT = 57371
const REDO = 57372
const RETRY = 57373
const RETURN = 57374
const YIELD = 57375
const AND = 57376
const OR = 57377
const LAMBDA = 57378
const CASE = 57379
const WHEN = 57380
const TRUE = 57381
const FALSE = 57382
const LESSTHAN = 57383
const GREATERTHAN = 57384
const EQUALTO = 57385
const BANG = 57386
const COMPLEMENT = 57387
const POSITIVE = 57388
const NEGATIVE = 57389
const STAR = 57390
const RANGE = 57391
const OR_EQUALS = 57392
const WHITESPACE = 57393
const NEWLINE = 57394
const SEMICOLON = 57395
const COLON = 57396
const DOT = 57397
const PIPE = 57398
const SLASH = 57399
const AMPERSAND = 57400
const QUESTIONMARK = 57401
const CARET = 57402
const LBRACKET = 57403
const RBRACKET = 57404
const LBRACE = 57405
const RBRACE = 57406
const DOLLARSIGN = 57407
const ATSIGN = 57408
const FILE_CONST_REF = 57409
const EOF = 57410

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"POSITIVE",
	"NEGATIVE",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1385

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 122,
	10, 108,
	11, 108,
	-2, 240,
	-1, 309,
	52, 13,
	64, 13,
	-2, 31,
	-1, 322,
	10, 108,
	11, 108,
	-2, 240,
}

const RubyNprod = 290
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 3805

var RubyAct = []int{

	290, 402, 5, 532, 381, 31, 161, 217, 403, 213,
	372, 18, 357, 62, 215, 225, 52, 129, 278, 124,
	123, 92, 2, 3, 93, 300, 300, 111, 363, 300,
	25, 300, 300, 98, 347, 13, 452, 478, 4, 26,
	182, 458, 183, 456, 454, 506, 370, 112, 369, 145,
	119, 121, 133, 271, 158, 159, 328, 90, 89, 98,
	281, 98, 300, 107, 108, 163, 164, 265, 417, 131,
	96, 97, 253, 91, 166, 99, 100, 101, 85, 246,
	328, 177, 178, 218, 95, 104, 102, 103, 106, 107,
	108, 107, 108, 187, 188, 274, 96, 97, 96, 97,
	184, 195, 176, 116, 109, 146, 200, 364, 519, 268,
	95, 205, 95, 85, 209, 210, 211, 423, 501, 530,
	48, 249, 236, 145, 133, 219, 328, 85, 221, 415,
	207, 348, 300, 300, 227, 220, 253, 420, 426, 85,
	243, 245, 425, 240, 260, 261, 252, 263, 264, 175,
	269, 270, 227, 275, 276, 277, 256, 242, 228, 259,
	400, 98, 152, 148, 300, 239, 384, 137, 296, 297,
	298, 299, 152, 282, 176, 313, 228, 327, 171, 153,
	300, 258, 419, 303, 137, 227, 149, 137, 137, 312,
	335, 107, 108, 235, 237, 146, 151, 223, 96, 97,
	110, 142, 147, 137, 137, 137, 109, 304, 416, 228,
	319, 320, 95, 145, 98, 137, 292, 137, 137, 362,
	137, 541, 137, 137, 137, 137, 416, 137, 149, 340,
	137, 334, 137, 137, 92, 150, 157, 93, 92, 92,
	415, 93, 93, 232, 107, 108, 137, 137, 137, 247,
	140, 96, 97, 142, 172, 140, 137, 509, 142, 98,
	169, 232, 137, 170, 167, 95, 137, 168, 156, 266,
	512, 513, 272, 240, 286, 287, 279, 193, 98, 120,
	155, 391, 330, 76, 143, 173, 202, 203, 98, 107,
	108, 144, 232, 137, 232, 239, 96, 97, 489, 382,
	378, 389, 141, 114, 109, 490, 115, 141, 107, 108,
	95, 137, 154, 254, 137, 96, 97, 346, 107, 108,
	352, 386, 397, 137, 137, 96, 97, 476, 111, 95,
	98, 448, 140, 449, 227, 142, 483, 113, 398, 95,
	409, 405, 404, 157, 295, 333, 482, 250, 112, 475,
	137, 137, 520, 218, 450, 316, 216, 539, 228, 466,
	107, 108, 92, 379, 474, 93, 143, 96, 97, 98,
	379, 137, 98, 472, 432, 137, 137, 547, 368, 544,
	543, 95, 443, 443, 141, 439, 435, 367, 365, 237,
	396, 451, 366, 356, 459, 219, 349, 463, 352, 107,
	108, 462, 107, 108, 98, 220, 96, 97, 379, 96,
	97, 464, 411, 137, 92, 345, 473, 93, 464, 218,
	95, 337, 216, 95, 471, 336, 137, 481, 538, 350,
	329, 484, 137, 377, 107, 108, 471, 542, 332, 544,
	543, 96, 97, 232, 379, 137, 491, 492, 470, 137,
	511, 487, 284, 431, 430, 95, 137, 494, 283, 106,
	470, 219, 118, 98, 117, 498, 137, 503, 214, 212,
	190, 220, 92, 98, 301, 93, 429, 438, 431, 430,
	385, 507, 461, 343, 406, 333, 388, 390, 392, 497,
	137, 137, 308, 107, 108, 94, 510, 395, 361, 92,
	96, 97, 93, 107, 108, 137, 360, 361, 294, 355,
	96, 97, 464, 324, 95, 137, 524, 525, 526, 528,
	342, 343, 412, 291, 95, 443, 443, 443, 106, 536,
	317, 49, 318, 232, 545, 293, 185, 422, 186, 546,
	424, 307, 1, 174, 549, 232, 61, 443, 60, 550,
	551, 443, 443, 443, 552, 518, 59, 58, 57, 56,
	39, 38, 37, 36, 51, 453, 444, 20, 455, 41,
	457, 137, 193, 42, 232, 21, 137, 383, 138, 15,
	12, 393, 11, 24, 23, 107, 108, 22, 27, 137,
	19, 10, 96, 97, 33, 138, 28, 17, 138, 138,
	137, 14, 40, 16, 480, 35, 95, 34, 29, 73,
	30, 107, 108, 72, 138, 138, 138, 0, 96, 97,
	137, 0, 0, 0, 0, 137, 138, 137, 138, 138,
	0, 138, 95, 138, 138, 138, 138, 0, 138, 0,
	137, 138, 0, 138, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 138, 138, 138,
	248, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 233, 138, 516, 0, 0, 138, 0, 0,
	267, 0, 0, 273, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 527, 0, 0, 193, 0, 0,
	0, 0, 0, 233, 138, 233, 0, 0, 540, 71,
	135, 77, 136, 122, 0, 128, 76, 133, 0, 0,
	548, 0, 138, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 138, 0, 0, 0, 0,
	79, 0, 0, 87, 88, 0, 0, 126, 80, 81,
	82, 83, 84, 0, 127, 0, 0, 0, 0, 0,
	0, 138, 138, 0, 0, 125, 0, 134, 32, 86,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 138, 138, 71, 135,
	77, 136, 122, 521, 0, 76, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 79,
	0, 0, 87, 88, 138, 0, 0, 80, 81, 82,
	83, 84, 132, 0, 0, 132, 132, 138, 0, 0,
	0, 0, 0, 138, 255, 0, 134, 0, 86, 85,
	0, 132, 132, 132, 233, 0, 138, 0, 0, 0,
	138, 0, 0, 132, 0, 132, 132, 138, 132, 0,
	132, 132, 132, 132, 0, 132, 0, 138, 132, 0,
	132, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 132, 132, 132, 0, 0, 0,
	0, 138, 138, 0, 132, 0, 0, 0, 0, 132,
	132, 0, 0, 0, 132, 0, 138, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	132, 309, 132, 0, 233, 94, 0, 0, 0, 0,
	0, 0, 0, 107, 108, 0, 233, 0, 0, 132,
	96, 97, 132, 0, 0, 99, 100, 101, 109, 0,
	0, 132, 132, 0, 95, 104, 102, 103, 106, 0,
	0, 0, 138, 0, 0, 233, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 132,
	138, 0, 0, 0, 0, 9, 71, 311, 77, 136,
	78, 138, 0, 76, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 309, 132, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 138, 79, 138, 0,
	87, 88, 0, 0, 0, 80, 81, 82, 83, 84,
	0, 138, 130, 300, 0, 0, 0, 253, 0, 0,
	0, 132, 74, 0, 75, 306, 86, 85, 0, 162,
	0, 0, 165, 162, 132, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 179, 180,
	181, 132, 0, 132, 0, 0, 0, 132, 0, 0,
	189, 0, 191, 192, 132, 194, 0, 196, 197, 198,
	199, 0, 201, 0, 132, 204, 0, 206, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 0,
	0, 238, 241, 244, 0, 0, 0, 0, 132, 132,
	0, 130, 0, 0, 0, 0, 226, 257, 0, 0,
	0, 262, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 310, 226,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 130, 0, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 132, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 344, 130, 132, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 351, 0, 0, 0,
	310, 359, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 132, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	0, 0, 0, 0, 285, 0, 139, 0, 0, 139,
	139, 387, 0, 0, 0, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 139, 139, 139, 226, 0,
	399, 0, 0, 0, 351, 0, 0, 139, 0, 139,
	139, 407, 139, 0, 139, 139, 139, 139, 0, 139,
	0, 413, 139, 0, 139, 139, 0, 0, 0, 0,
	160, 0, 0, 0, 0, 234, 0, 0, 139, 139,
	139, 0, 0, 0, 0, 427, 428, 0, 139, 0,
	0, 0, 0, 234, 139, 0, 0, 0, 139, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 139, 234, 0, 469, 0,
	0, 0, 0, 0, 222, 0, 224, 0, 0, 0,
	469, 0, 0, 139, 0, 0, 139, 0, 251, 0,
	0, 0, 0, 0, 0, 139, 139, 0, 71, 230,
	77, 231, 78, 0, 0, 76, 162, 0, 0, 496,
	0, 500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 139, 505, 0, 0, 0, 0, 79,
	0, 0, 87, 88, 0, 505, 0, 80, 81, 82,
	83, 84, 0, 139, 0, 300, 0, 139, 139, 0,
	0, 499, 0, 0, 74, 517, 75, 0, 86, 85,
	130, 0, 522, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 0, 0, 529, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 71, 230, 77, 231, 78, 0, 139, 76,
	0, 0, 0, 0, 139, 0, 0, 354, 0, 358,
	0, 0, 0, 0, 0, 234, 0, 139, 0, 0,
	0, 139, 0, 79, 0, 0, 87, 88, 139, 0,
	0, 80, 81, 82, 83, 84, 0, 0, 139, 300,
	0, 375, 376, 0, 0, 479, 0, 0, 74, 0,
	75, 0, 86, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 139, 0, 0, 0, 0, 0, 0,
	0, 358, 0, 0, 0, 0, 0, 139, 0, 71,
	230, 77, 231, 78, 0, 0, 76, 139, 0, 0,
	0, 0, 0, 0, 0, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 0, 0, 0, 0,
	79, 0, 421, 87, 88, 0, 0, 234, 80, 81,
	82, 83, 84, 0, 0, 0, 300, 0, 0, 433,
	0, 0, 468, 0, 437, 74, 0, 75, 0, 86,
	85, 0, 0, 139, 0, 0, 234, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 465,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 71, 135, 77, 136, 78, 0,
	0, 76, 0, 0, 0, 0, 485, 486, 0, 0,
	0, 0, 139, 488, 0, 0, 0, 139, 0, 139,
	0, 0, 0, 0, 493, 79, 495, 0, 87, 88,
	0, 0, 139, 80, 81, 82, 83, 84, 0, 0,
	0, 300, 0, 0, 0, 0, 0, 414, 0, 0,
	74, 0, 75, 0, 86, 85, 0, 0, 0, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 523, 0, 0, 375, 376, 71,
	46, 77, 47, 78, 0, 0, 76, 0, 43, 535,
	445, 534, 533, 446, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 441, 442, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 46, 77, 47, 78, 0, 0, 76, 0,
	43, 531, 445, 534, 533, 446, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 441, 442,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 434, 53, 374, 373, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 371, 53, 374, 373, 54,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 76, 0, 43, 0, 53, 0,
	0, 54, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 6, 7, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 0,
	8, 71, 46, 77, 47, 78, 0, 0, 76, 0,
	43, 502, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 379, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 408, 53, 0, 0, 54, 44, 45,
	0, 64, 65, 55, 379, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 401, 53, 0, 0, 54,
	44, 45, 0, 64, 65, 55, 379, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 76, 0, 43, 537, 445, 0,
	0, 446, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 441, 442, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	46, 77, 47, 78, 0, 0, 76, 0, 43, 514,
	53, 0, 0, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 46, 77, 47, 78, 0, 0, 76, 0,
	43, 0, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	477, 86, 85, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 467, 53, 0, 0, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 447, 445, 0, 0, 446,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 441, 442, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 76, 0, 43, 440, 445, 0,
	0, 446, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 441, 442, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	46, 77, 47, 78, 0, 0, 76, 0, 43, 436,
	53, 0, 0, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 46, 77, 47, 78, 0, 0, 76, 0,
	43, 418, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 71, 46, 77, 47, 78, 0, 0,
	76, 0, 43, 353, 53, 0, 0, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 341, 53, 0, 0, 54,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 76, 0, 43, 339, 53, 0,
	0, 54, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	46, 77, 47, 78, 0, 0, 76, 0, 43, 0,
	445, 0, 0, 446, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 441, 442, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 46, 77, 47, 78, 0, 0, 76, 0,
	43, 0, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 71, 46, 77, 47, 78, 315, 0,
	76, 0, 43, 0, 53, 0, 0, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	0, 314, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 76, 0, 43, 0, 53, 0, 0, 54,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 300, 71, 46, 77, 47, 78, 0, 0,
	76, 74, 43, 75, 53, 86, 85, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 71, 135, 77,
	136, 122, 0, 0, 76, 133, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 71, 135, 77, 136, 122, 394, 0, 76, 133,
	0, 0, 0, 255, 0, 134, 0, 86, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 87, 88, 0, 0, 126,
	80, 81, 82, 83, 84, 71, 135, 77, 136, 322,
	0, 0, 76, 133, 0, 0, 0, 255, 0, 134,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 87,
	88, 0, 0, 321, 80, 81, 82, 83, 84, 71,
	311, 77, 136, 78, 0, 0, 76, 0, 0, 0,
	0, 74, 0, 134, 0, 86, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 300, 71, 230, 77,
	231, 78, 0, 0, 76, 74, 0, 75, 306, 86,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 300, 71, 135, 77, 136, 78,
	305, 0, 76, 74, 0, 75, 0, 86, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 135, 77,
	136, 78, 0, 0, 76, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 71, 230, 77, 231, 78, 0, 0, 76, 0,
	0, 0, 0, 74, 0, 134, 0, 86, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 71, 135, 77, 136, 122,
	0, 0, 76, 133, 229, 0, 0, 74, 0, 75,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 71,
	135, 77, 136, 78, 0, 0, 76, 0, 0, 0,
	0, 255, 0, 134, 0, 86, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 71, 504, 77, 136, 78, 0, 0,
	76, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85,
}
var RubyPact = []int{

	-30, 2062, -1000, -1000, -1000, 5, -1000, -1000, -1000, 919,
	-1000, -1000, -1000, 181, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 287, -1000, 48, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 458, 271, 271, 704, 241, 152, 185,
	129, 269, 225, 3228, 3228, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3694, 3228, 3228, 3694, 3694, 248, 244,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 276, -1000, 39,
	3228, 3228, 3694, 3694, 3694, 34, 530, -1000, -1000, -1000,
	-1000, -1000, 3228, 3228, 3694, 464, 3694, 3694, -1000, 3694,
	3228, 3694, 3694, 3694, 3694, 3228, 3694, -1000, -1000, 3694,
	3228, 3694, 3694, 3228, 3228, 3228, 463, 413, 347, 156,
	189, -1000, 3606, 39, 111, 3694, 3694, 3694, 73, 336,
	365, -1000, -14, 16, -1000, 3650, 246, -12, -1000, -1000,
	3606, 3694, -1000, 3228, 3228, 3694, 3228, 3228, 61, 3228,
	3228, 47, 3228, 3228, 3228, 12, 452, 446, 223, 222,
	3056, 205, 365, 483, 456, 365, 205, 3228, 3228, 3228,
	3228, 3452, 3404, 3606, 3118, -1000, -1000, 223, 223, 365,
	365, 365, -1000, -1000, 524, -1000, -1000, 223, 223, 365,
	3360, 365, 365, 3500, 365, 223, 365, 365, 365, 365,
	223, 459, 3500, 3500, 365, 223, 365, 115, 368, 223,
	223, 223, 39, -1000, 432, 334, 77, -1000, 147, 419,
	415, -1000, 2932, 271, 2870, 510, 29, -1000, -1000, 3694,
	3316, 323, 62, 143, 119, -1000, -1000, -1000, 255, -28,
	69, 469, -1000, -1000, 400, -1000, -1000, -1000, -1000, 390,
	3562, 2808, -1000, 387, 1001, 3694, 496, 157, -34, 45,
	223, 223, 326, 223, 223, -1000, -1000, -1000, 386, 223,
	223, -1000, -1000, -1000, 381, 223, 223, 223, -1000, -1000,
	-1000, 372, 332, -13, -15, 2000, -1000, -1000, -1000, -1000,
	223, 418, 3694, -1000, -1000, 128, 223, 223, 223, 223,
	-1000, 310, 29, -1000, -1000, 3694, -1000, 290, 270, -14,
	577, 3272, 487, 223, -1000, -1000, 80, -1000, -1000, 111,
	39, 3228, 3606, 365, 3694, 365, 365, -1000, 3562, 117,
	-1000, 2250, 347, 77, 474, 3694, -1000, -1000, 2188, -1000,
	-1000, -1000, 39, -1000, 365, 1719, 197, -1000, -1000, -1000,
	10, 365, -1000, -1000, 2746, 126, -1000, -1000, 3056, 55,
	-1000, -1000, 99, -1000, -1000, 95, -1000, -1000, -1000, 3694,
	3694, -1000, 461, 3228, -1000, 1938, 2684, -1000, -1000, 271,
	365, 2622, 2560, 316, 3694, -26, -1000, 365, -20, -1000,
	-21, -1000, -23, 3228, 3694, -1000, -1000, 223, 472, 365,
	3228, -1000, 382, -1000, -1000, -1000, -1000, 365, -1000, 344,
	2498, -1000, 1624, 365, 367, 3228, 358, 343, -1000, -1000,
	321, 2436, -27, 86, 1537, -1000, 3228, 284, 274, -1000,
	3228, -1000, 223, 3056, -1000, 436, -1000, 3056, 294, -1000,
	-1000, -1000, -1000, 223, -1000, 3228, 3228, -1000, -1000, -1000,
	3694, 205, -1000, 1443, -1000, 3500, -1000, 112, -1000, 223,
	365, -1000, 223, -1000, -1000, 2126, -1000, -1000, 3738, 29,
	-1000, -1000, -1000, 223, -16, -1000, -1000, -1000, -1000, 3694,
	3180, 223, 215, -1000, 223, 3056, 3056, -1000, 3056, 251,
	271, 398, 218, 2374, 205, 3056, 29, -1000, -1000, 3694,
	551, 54, -1000, 337, 783, 365, 3694, 223, 3056, -1000,
	-1000, -1000, -1000, -1000, -1000, 3056, 81, 365, 3228, 3694,
	-1000, -1000, 57, 3056, 1876, 1814, 2312, 81, 346, 210,
	-1000, -1000, 422, 3228, -1000, -1000, 362, -1000, -1000, -1000,
	81, -1000, -1000, 3228, -1000, 223, 2994, -1000, 81, 223,
	2994, 2994, 2994,
}
var RubyPgo = []int{

	0, 0, 613, 610, 39, 69, 609, 608, 607, 1242,
	605, 8, 13, 603, 602, 35, 601, 597, 1005, 596,
	531, 768, 594, 591, 590, 588, 587, 584, 583, 11,
	582, 7, 120, 580, 579, 5, 577, 575, 573, 569,
	30, 567, 566, 3, 564, 563, 562, 561, 560, 559,
	558, 557, 556, 548, 546, 1304, 543, 1, 20, 12,
	10, 542, 9, 541, 4, 523, 15, 509, 6, 492,
	17, 16, 19, 14, 477, 474, 428, 178,
}
var RubyR1 = []int{

	0, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 76, 76, 77, 77, 55, 55, 55, 55, 19,
	19, 19, 19, 19, 19, 19, 19, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 29, 29, 29, 29, 29, 29, 29, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 40, 14,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 58, 58, 58, 58, 68, 68, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 72, 72, 72,
	72, 72, 70, 70, 70, 23, 23, 23, 23, 23,
	23, 62, 62, 73, 73, 73, 31, 31, 31, 31,
	30, 30, 33, 35, 35, 35, 15, 15, 15, 15,
	15, 15, 15, 16, 16, 71, 71, 34, 34, 34,
	34, 34, 34, 34, 9, 9, 32, 32, 20, 20,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 2, 6, 7, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 3, 3,
	3, 3, 63, 63, 69, 69, 69, 5, 5, 5,
	5, 59, 67, 67, 67, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 60, 60, 60, 60,
	56, 56, 56, 8, 17, 11, 11, 11, 74, 74,
	65, 65, 57, 57, 24, 24, 25, 26, 26, 28,
	28, 28, 27, 27, 27, 12, 41, 41, 64, 64,
	64, 64, 64, 42, 42, 42, 42, 42, 43, 43,
	43, 43, 39, 38, 10, 37, 37, 36, 36, 4,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 5, 1, 4, 4, 2, 3, 3, 4, 4,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 6, 7, 6,
	6, 4, 3, 7, 1, 5, 1, 3, 0, 1,
	1, 1, 2, 4, 4, 4, 5, 1, 1, 4,
	2, 5, 1, 3, 3, 5, 6, 7, 8, 5,
	6, 1, 3, 0, 1, 3, 1, 2, 3, 2,
	4, 6, 4, 1, 2, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 9, 6, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 4, 3, 3, 3, 4, 3, 3,
	3, 4, 3, 3, 3, 4, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 1, 1, 5, 0,
	1, 1, 1, 2, 4, 4, 4, 5, 3, 5,
	5, 5, 3, 7, 3, 7, 8, 3, 4, 5,
	5, 3, 0, 1, 3, 4, 5, 3, 3, 3,
	3, 3, 5, 6, 5, 3, 4, 3, 3, 2,
	0, 2, 2, 3, 4, 2, 3, 5, 1, 3,
	0, 2, 1, 2, 2, 1, 1, 2, 1, 1,
	3, 3, 1, 3, 3, 5, 5, 5, 0, 2,
	2, 2, 2, 5, 6, 5, 6, 5, 4, 3,
	3, 2, 4, 4, 2, 5, 7, 4, 5, 3,
}
var RubyChk = []int{

	-1000, -61, 52, 53, 68, -1, 52, 53, 68, -18,
	-23, -30, -33, -15, -16, -34, -13, -17, -29, -24,
	-41, -37, -26, -27, -28, -40, -4, -25, -19, -7,
	-3, -35, -21, -22, -8, -10, -45, -46, -47, -48,
	-14, -39, -38, 14, 20, 21, 6, 8, -32, -20,
	-9, -44, -71, 16, 19, 25, -49, -50, -51, -52,
	-53, -54, -12, 33, 23, 24, 37, 32, 28, 29,
	31, 5, -2, -6, 61, 63, 12, 7, 9, 36,
	44, 45, 46, 47, 48, 66, 65, 39, 40, 53,
	52, 68, 16, 19, 26, 55, 41, 42, 4, 46,
	47, 48, 57, 58, 56, 19, 59, 34, 35, 49,
	19, 41, 61, 50, 16, 19, 55, 6, 4, -35,
	8, -35, 9, -58, -72, 61, 43, 50, 11, -70,
	-18, -5, -21, 13, 63, 6, 8, -32, -20, -9,
	9, 61, 12, 43, 50, 61, 43, 50, 11, 43,
	50, 11, 43, 50, 43, 11, 43, 11, -1, -1,
	-55, -68, -18, -1, -1, -18, -68, 16, 19, 16,
	19, -77, -77, 9, -56, -5, 63, -1, -1, -18,
	-18, -18, 6, 8, 66, 6, 8, -1, -1, -18,
	6, -18, -18, -77, -18, -1, -18, -18, -18, -18,
	-1, -18, -77, -77, -18, -1, -18, -70, -18, -1,
	-1, -1, 6, -62, 55, -73, 9, -31, 6, 48,
	58, -62, -55, 41, -55, -66, -18, -29, -15, 58,
	6, 8, -32, -20, -9, -5, 11, -5, -18, -4,
	-70, -18, -40, -12, -18, -12, 6, -32, -20, 48,
	11, -55, -59, 56, -77, 61, -66, -18, -4, -70,
	-1, -1, -18, -1, -1, 6, -32, -20, 48, -1,
	-1, 6, -32, -20, 48, -1, -1, -1, 6, -32,
	-20, 48, -71, 6, 6, -55, 52, 53, 52, 53,
	-1, -65, 11, 52, 52, -77, -1, -1, -1, -1,
	52, -75, -18, -29, -15, 58, 64, -63, -69, -21,
	-18, 6, -66, -1, 53, 10, -77, 6, 8, -72,
	-58, 43, 9, -18, 54, -18, -18, 62, 11, 62,
	-5, -55, 6, 11, -73, 43, 6, 6, -55, 15,
	-35, 15, 10, 11, -18, -77, 62, 62, 62, 6,
	-77, -18, -5, 15, -55, -67, 6, -59, -55, -18,
	10, 11, 62, 62, 62, 62, 6, 6, 6, 61,
	61, 15, -60, 18, 17, -55, -55, 15, -11, 26,
	-18, -64, -64, -36, 38, -77, 11, -18, -77, 11,
	-77, 11, -77, 4, 54, 10, -5, -1, -66, -18,
	43, 15, -57, -11, -62, -31, 10, -18, 15, -57,
	-55, -5, -77, -18, 58, 43, 11, 58, 15, 56,
	11, -55, -77, 62, -77, 43, 43, -18, -18, 15,
	18, 17, -1, -55, 15, -60, 15, -55, -74, -35,
	15, 52, 53, -1, -42, 16, 19, 15, 15, 17,
	38, -68, 62, -77, 64, -77, 64, -77, 64, -1,
	-18, 10, -1, 15, -11, -55, 15, 15, 58, -18,
	-15, -29, 6, -1, 6, 6, 6, 64, 64, 58,
	-77, -1, 62, 62, -1, -55, -55, 15, -55, 4,
	11, -1, -1, -55, -68, -55, -18, -15, -29, 58,
	-18, 6, 15, -57, 6, -18, 61, -1, -55, 6,
	-35, 52, 52, 53, 15, -55, -77, -18, 4, 54,
	15, 10, -18, -55, -64, -64, -64, -77, -1, -18,
	62, 15, -43, 18, 17, 15, -43, 15, -76, 11,
	-77, 11, 15, 18, 17, -1, -64, 15, -77, -1,
	-64, -64, -64,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 0, 0, 0, 20, 21, 22, 23,
	24, 0, 0, 0, 0, 15, 42, 43, 44, 45,
	46, 47, 48, 255, 0, 0, 0, 258, 262, 259,
	256, 19, 25, 26, 13, 13, 145, 72, 240, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 5,
	6, 7, 0, 0, 0, 0, 0, 0, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 13, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 133, 15,
	143, 15, -2, 75, 84, 13, 0, 0, 0, 104,
	117, 118, 31, 15, 13, 20, 21, 22, 23, 24,
	108, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
	250, 254, 106, 0, 0, 13, 257, 0, 0, 0,
	0, 199, 0, 108, 0, 284, 13, 186, 187, 188,
	189, 69, 166, 167, 0, 164, 165, 227, 235, 68,
	77, 85, 87, 0, 190, 191, 192, 193, 194, 195,
	229, 0, 0, 0, 289, 231, 86, 0, 122, 163,
	228, 230, 81, 15, 0, 131, 133, 134, 136, 0,
	0, 15, 0, 0, 0, 0, 109, 110, 111, 0,
	20, 21, 22, 23, 24, 76, 13, 120, 122, 0,
	0, 146, 147, 148, 157, 158, 170, 171, 172, 0,
	13, 0, 15, 222, 15, 13, 0, 122, 0, 0,
	149, 159, 0, 150, 160, 174, 175, 176, 0, 151,
	161, 178, 179, 180, 0, 152, 162, 153, 182, 183,
	184, 0, 154, 0, 0, 0, 15, 15, 16, 17,
	18, 0, 0, 268, 268, 0, 263, 264, 260, 261,
	14, 13, 200, 201, 202, 0, 208, 13, 13, -2,
	0, 20, 0, 241, 242, 243, 15, 168, 169, 78,
	79, 0, -2, 101, 0, 282, 283, 95, 0, 96,
	82, 0, 133, 0, 0, 0, 137, 139, 0, 140,
	15, 142, 70, 13, 112, 0, 88, 91, 93, 173,
	0, 123, 124, 217, 0, 0, 223, 15, 13, 122,
	74, 13, 89, 92, 94, 90, 177, 181, 185, 0,
	0, 225, 0, 0, 15, 0, 0, 244, 251, 15,
	107, 0, 0, 0, 0, 0, 13, 203, 0, 13,
	0, 13, 0, 13, 0, 73, 80, 83, 0, 265,
	0, 125, 0, 252, 15, 135, 132, 138, 129, 0,
	0, 71, 0, 119, 0, 0, 0, 0, 218, 221,
	0, 0, 0, 88, 0, 13, 0, 0, 0, 226,
	0, 15, 15, 239, 232, 0, 234, 245, 15, 248,
	266, 269, 270, 271, 272, 0, 0, 267, 285, 15,
	0, 15, 198, 0, 209, 0, 210, 0, 211, 212,
	214, 102, 100, 126, 253, 0, 130, 141, 0, 113,
	114, 115, 121, 97, 0, 105, 224, 219, 220, 0,
	0, 99, 0, 156, 15, 237, 238, 233, 246, 0,
	0, 15, 0, 0, 15, 13, 204, 205, 206, 0,
	0, 0, 127, 0, 20, 116, 0, 98, 236, 15,
	249, 268, 15, 15, 286, 13, 287, 207, 13, 0,
	128, 103, 0, 247, 0, 0, 0, 288, 11, 13,
	155, 273, 0, 0, 268, 275, 0, 277, 213, 12,
	215, 13, 274, 0, 268, 268, 281, 276, 216, 268,
	279, 280, 278,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:207
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:209
		{
		}
	case 3:
		//line parser.y:211
		{
		}
	case 4:
		//line parser.y:213
		{
		}
	case 5:
		//line parser.y:215
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:217
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:219
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:225
		{
		}
	case 11:
		//line parser.y:227
		{
		}
	case 12:
		//line parser.y:228
		{
		}
	case 13:
		//line parser.y:230
		{
		}
	case 14:
		//line parser.y:231
		{
		}
	case 15:
		//line parser.y:234
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:236
		{
		}
	case 17:
		//line parser.y:238
		{
		}
	case 18:
		//line parser.y:240
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		//line parser.y:252
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 69:
		//line parser.y:255
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 70:
		//line parser.y:258
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 71:
		//line parser.y:265
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 72:
		//line parser.y:272
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 73:
		//line parser.y:276
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 74:
		//line parser.y:283
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 75:
		//line parser.y:290
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 76:
		//line parser.y:297
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 77:
		//line parser.y:304
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 78:
		//line parser.y:311
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 79:
		//line parser.y:319
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 80:
		//line parser.y:327
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 81:
		//line parser.y:335
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 82:
		//line parser.y:343
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 83:
		//line parser.y:351
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 84:
		//line parser.y:362
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 85:
		//line parser.y:369
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 86:
		//line parser.y:377
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 87:
		//line parser.y:385
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 88:
		//line parser.y:395
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 89:
		//line parser.y:403
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 90:
		//line parser.y:411
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 91:
		//line parser.y:419
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 92:
		//line parser.y:427
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 93:
		//line parser.y:435
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 94:
		//line parser.y:443
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 95:
		//line parser.y:451
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 96:
		//line parser.y:459
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 97:
		//line parser.y:469
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:477
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 99:
		//line parser.y:488
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 100:
		//line parser.y:496
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 101:
		//line parser.y:506
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 102:
		//line parser.y:516
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 103:
		//line parser.y:518
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 104:
		//line parser.y:520
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 105:
		//line parser.y:522
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 106:
		//line parser.y:525
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 107:
		//line parser.y:527
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 108:
		//line parser.y:529
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 109:
		//line parser.y:531
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 110:
		//line parser.y:533
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 111:
		//line parser.y:535
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 112:
		//line parser.y:537
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 113:
		//line parser.y:544
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:546
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:548
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:550
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 117:
		//line parser.y:559
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:561
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:563
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:565
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:567
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 122:
		//line parser.y:570
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:572
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:574
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:578
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 126:
		//line parser.y:586
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 127:
		//line parser.y:595
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 128:
		//line parser.y:604
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:614
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:622
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:633
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 132:
		//line parser.y:635
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 133:
		//line parser.y:637
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 134:
		//line parser.y:639
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:641
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:644
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 137:
		//line parser.y:646
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 138:
		//line parser.y:648
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 139:
		//line parser.y:650
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 140:
		//line parser.y:654
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name: RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 141:
		//line parser.y:661
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 142:
		//line parser.y:671
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 143:
		//line parser.y:680
		{
			RubyVAL.genericValue = ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
		}
	case 144:
		//line parser.y:687
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(string)}, "")
			pieces := strings.Split(fullName, "::")

			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.Join(pieces[:len(pieces)-1], "::"),
				IsGlobalNamespace: false,
			}
		}
	case 145:
		//line parser.y:699
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(string), "::")
			namespace := strings.Join(pieces[:len(pieces)-1], "::")
			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.TrimPrefix(namespace, "::"),
				IsGlobalNamespace: true,
			}
		}
	case 146:
		//line parser.y:710
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 147:
		//line parser.y:717
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 148:
		//line parser.y:721
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 149:
		//line parser.y:725
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 150:
		//line parser.y:732
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 151:
		//line parser.y:739
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 152:
		//line parser.y:746
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 153:
		//line parser.y:754
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 154:
		//line parser.y:761
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 155:
		//line parser.y:769
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 156:
		//line parser.y:784
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 157:
		//line parser.y:790
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 158:
		//line parser.y:797
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 159:
		//line parser.y:801
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 160:
		//line parser.y:808
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 161:
		//line parser.y:815
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:822
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 163:
		//line parser.y:829
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 164:
		//line parser.y:832
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 165:
		//line parser.y:834
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 166:
		//line parser.y:837
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 167:
		//line parser.y:839
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 168:
		//line parser.y:842
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:844
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:847
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 171:
		//line parser.y:849
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 172:
		//line parser.y:851
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 173:
		//line parser.y:853
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 174:
		//line parser.y:856
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 175:
		//line parser.y:858
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 176:
		//line parser.y:860
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:862
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 178:
		//line parser.y:865
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 179:
		//line parser.y:867
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 180:
		//line parser.y:869
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:871
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 182:
		//line parser.y:874
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 183:
		//line parser.y:876
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 184:
		//line parser.y:878
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 185:
		//line parser.y:880
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 186:
		//line parser.y:883
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 187:
		//line parser.y:884
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 188:
		//line parser.y:885
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:886
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:889
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 191:
		//line parser.y:898
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 192:
		//line parser.y:907
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 193:
		//line parser.y:916
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 194:
		//line parser.y:925
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 195:
		//line parser.y:934
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:942
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 197:
		//line parser.y:943
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 198:
		//line parser.y:945
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 199:
		//line parser.y:947
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 200:
		//line parser.y:949
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 201:
		//line parser.y:951
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 202:
		//line parser.y:953
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 203:
		//line parser.y:955
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 204:
		//line parser.y:962
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 205:
		//line parser.y:964
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 206:
		//line parser.y:966
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:968
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 208:
		//line parser.y:976
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 209:
		//line parser.y:978
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 210:
		//line parser.y:986
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 211:
		//line parser.y:994
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 212:
		//line parser.y:997
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 213:
		//line parser.y:1004
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 214:
		//line parser.y:1012
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 215:
		//line parser.y:1019
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 216:
		//line parser.y:1026
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 217:
		//line parser.y:1034
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 218:
		//line parser.y:1036
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 219:
		//line parser.y:1043
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 220:
		//line parser.y:1047
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 221:
		//line parser.y:1050
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 222:
		//line parser.y:1052
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 223:
		//line parser.y:1054
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1056
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1059
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 226:
		//line parser.y:1066
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 227:
		//line parser.y:1074
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 228:
		//line parser.y:1081
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 229:
		//line parser.y:1088
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 230:
		//line parser.y:1095
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 231:
		//line parser.y:1102
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 232:
		//line parser.y:1109
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 233:
		//line parser.y:1116
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 234:
		//line parser.y:1124
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 235:
		//line parser.y:1131
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 236:
		//line parser.y:1140
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 237:
		//line parser.y:1147
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 238:
		//line parser.y:1154
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 239:
		//line parser.y:1161
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 240:
		//line parser.y:1168
		{
		}
	case 241:
		//line parser.y:1169
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 242:
		//line parser.y:1170
		{
		}
	case 243:
		//line parser.y:1173
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 244:
		//line parser.y:1176
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 245:
		//line parser.y:1184
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 246:
		//line parser.y:1186
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 247:
		//line parser.y:1199
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 248:
		//line parser.y:1219
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 249:
		//line parser.y:1221
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 250:
		//line parser.y:1224
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 251:
		//line parser.y:1226
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 252:
		//line parser.y:1229
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 253:
		//line parser.y:1231
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1234
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 255:
		//line parser.y:1241
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 256:
		//line parser.y:1243
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 257:
		//line parser.y:1246
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 258:
		//line parser.y:1254
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 259:
		//line parser.y:1258
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 260:
		//line parser.y:1260
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 261:
		//line parser.y:1262
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 262:
		//line parser.y:1266
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 263:
		//line parser.y:1268
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 264:
		//line parser.y:1270
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 265:
		//line parser.y:1274
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 266:
		//line parser.y:1283
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 267:
		//line parser.y:1285
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 268:
		//line parser.y:1288
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 269:
		//line parser.y:1290
		{
		}
	case 270:
		//line parser.y:1292
		{
		}
	case 271:
		//line parser.y:1294
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 272:
		//line parser.y:1296
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 273:
		//line parser.y:1299
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 274:
		//line parser.y:1306
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 275:
		//line parser.y:1314
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 276:
		//line parser.y:1321
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 277:
		//line parser.y:1329
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 278:
		//line parser.y:1337
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 279:
		//line parser.y:1344
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 280:
		//line parser.y:1351
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 281:
		//line parser.y:1358
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 282:
		//line parser.y:1366
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 283:
		//line parser.y:1369
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 284:
		//line parser.y:1371
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 285:
		//line parser.y:1374
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 286:
		//line parser.y:1376
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 287:
		//line parser.y:1379
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 288:
		//line parser.y:1381
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 289:
		//line parser.y:1383
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

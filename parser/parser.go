//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CONSTANT = 57351
const NAMESPACED_CAPITAL_REF = 57352
const LPAREN = 57353
const RPAREN = 57354
const COMMA = 57355
const NamespacedModule = 57356
const ProcArg = 57357
const DO = 57358
const DEF = 57359
const END = 57360
const IF = 57361
const ELSE = 57362
const ELSIF = 57363
const UNLESS = 57364
const CLASS = 57365
const MODULE = 57366
const FOR = 57367
const WHILE = 57368
const UNTIL = 57369
const BEGIN = 57370
const RESCUE = 57371
const ENSURE = 57372
const BREAK = 57373
const NEXT = 57374
const REDO = 57375
const RETRY = 57376
const RETURN = 57377
const YIELD = 57378
const AND = 57379
const OR = 57380
const LAMBDA = 57381
const CASE = 57382
const WHEN = 57383
const ALIAS = 57384
const SELF = 57385
const NIL = 57386
const LESSTHAN = 57387
const GREATERTHAN = 57388
const EQUALTO = 57389
const BANG = 57390
const COMPLEMENT = 57391
const BINARY_PLUS = 57392
const UNARY_PLUS = 57393
const BINARY_MINUS = 57394
const UNARY_MINUS = 57395
const STAR = 57396
const RANGE = 57397
const OR_EQUALS = 57398
const AND_EQUALS = 57399
const WHITESPACE = 57400
const NEWLINE = 57401
const SEMICOLON = 57402
const COLON = 57403
const DOT = 57404
const PIPE = 57405
const SLASH = 57406
const AMPERSAND = 57407
const QUESTIONMARK = 57408
const CARET = 57409
const LBRACKET = 57410
const RBRACKET = 57411
const LBRACE = 57412
const RBRACE = 57413
const DOLLARSIGN = 57414
const ATSIGN = 57415
const FILE_CONST_REF = 57416
const LINE_CONST_REF = 57417
const EOF = 57418

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1890

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 133,
	12, 115,
	13, 115,
	-2, 254,
	-1, 346,
	4, 21,
	37, 21,
	38, 21,
	45, 21,
	46, 21,
	50, 21,
	52, 21,
	62, 21,
	63, 21,
	64, 21,
	65, 21,
	-2, 115,
	-1, 357,
	12, 115,
	13, 115,
	-2, 254,
	-1, 396,
	4, 34,
	37, 34,
	38, 34,
	46, 34,
	50, 34,
	52, 34,
	59, 13,
	62, 34,
	63, 34,
	64, 34,
	65, 34,
	71, 13,
	-2, 15,
}

const RubyNprod = 315
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4229

var RubyAct = []int{

	324, 180, 5, 596, 444, 441, 147, 442, 249, 409,
	135, 245, 331, 134, 136, 55, 247, 25, 54, 26,
	142, 565, 395, 98, 2, 3, 99, 364, 312, 303,
	100, 211, 400, 330, 212, 330, 296, 330, 274, 419,
	28, 4, 540, 330, 14, 562, 330, 526, 330, 524,
	385, 561, 119, 407, 406, 505, 501, 177, 178, 364,
	503, 188, 189, 96, 95, 192, 143, 161, 69, 149,
	68, 77, 150, 76, 133, 120, 315, 306, 154, 143,
	97, 206, 207, 401, 299, 578, 277, 364, 91, 263,
	204, 281, 143, 253, 146, 91, 91, 125, 213, 216,
	217, 218, 79, 91, 193, 91, 93, 94, 225, 91,
	138, 80, 81, 230, 82, 386, 83, 84, 235, 236,
	205, 332, 240, 241, 242, 243, 330, 157, 155, 553,
	460, 283, 162, 144, 472, 92, 91, 71, 70, 330,
	254, 238, 154, 363, 471, 261, 205, 262, 259, 440,
	157, 155, 51, 161, 461, 465, 268, 265, 266, 289,
	290, 291, 372, 293, 294, 295, 280, 300, 301, 302,
	285, 307, 308, 309, 311, 174, 287, 288, 146, 269,
	271, 273, 330, 157, 155, 156, 330, 158, 460, 165,
	170, 316, 310, 176, 146, 166, 333, 334, 335, 336,
	146, 118, 151, 98, 348, 464, 99, 341, 156, 173,
	100, 98, 185, 72, 99, 185, 185, 347, 100, 256,
	158, 117, 593, 162, 169, 417, 443, 175, 146, 159,
	160, 354, 163, 164, 355, 185, 185, 185, 461, 98,
	170, 156, 99, 572, 161, 340, 100, 146, 592, 171,
	172, 573, 574, 581, 185, 366, 185, 185, 166, 185,
	127, 185, 185, 185, 185, 370, 185, 167, 168, 185,
	579, 559, 185, 185, 123, 98, 250, 124, 99, 320,
	321, 248, 100, 185, 554, 252, 151, 105, 326, 517,
	185, 185, 185, 185, 275, 414, 250, 415, 511, 431,
	119, 248, 151, 265, 266, 252, 417, 185, 151, 185,
	98, 121, 122, 99, 185, 328, 250, 100, 297, 429,
	114, 115, 304, 120, 251, 252, 427, 313, 103, 104,
	416, 250, 246, 106, 425, 107, 151, 108, 116, 496,
	252, 497, 421, 176, 251, 102, 111, 109, 110, 128,
	327, 126, 470, 151, 185, 151, 98, 437, 422, 99,
	423, 603, 424, 100, 251, 373, 436, 98, 420, 369,
	99, 448, 438, 185, 100, 278, 185, 560, 446, 371,
	445, 424, 451, 202, 452, 185, 185, 450, 93, 157,
	459, 146, 455, 337, 611, 462, 608, 607, 606, 538,
	608, 607, 146, 535, 199, 477, 476, 475, 539, 477,
	476, 478, 197, 195, 523, 198, 196, 509, 382, 522,
	491, 491, 481, 447, 369, 405, 499, 404, 458, 434,
	263, 185, 403, 507, 393, 185, 185, 398, 263, 381,
	382, 510, 131, 76, 486, 387, 130, 513, 512, 131,
	76, 131, 76, 352, 375, 374, 353, 513, 518, 214,
	373, 521, 215, 520, 368, 318, 317, 244, 220, 602,
	338, 485, 344, 529, 392, 325, 343, 532, 1, 185,
	203, 90, 89, 88, 87, 185, 86, 85, 41, 40,
	39, 38, 492, 105, 543, 544, 20, 43, 44, 151,
	21, 458, 16, 12, 185, 13, 11, 45, 24, 551,
	151, 23, 22, 185, 27, 19, 10, 185, 35, 30,
	52, 555, 557, 556, 558, 185, 114, 115, 18, 563,
	15, 42, 17, 37, 103, 104, 151, 36, 31, 106,
	29, 107, 32, 108, 116, 73, 0, 550, 0, 0,
	0, 102, 111, 109, 110, 0, 0, 0, 399, 185,
	185, 513, 580, 513, 582, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 185, 590, 0,
	186, 0, 0, 186, 186, 0, 185, 0, 491, 491,
	491, 0, 600, 0, 0, 0, 0, 0, 609, 0,
	0, 0, 0, 186, 186, 186, 0, 0, 613, 151,
	0, 491, 587, 588, 589, 491, 491, 491, 0, 0,
	0, 0, 186, 0, 186, 186, 0, 186, 0, 186,
	186, 186, 186, 0, 186, 0, 0, 186, 610, 541,
	186, 186, 0, 0, 0, 0, 0, 0, 614, 615,
	0, 186, 0, 616, 152, 151, 0, 185, 186, 186,
	186, 186, 276, 0, 0, 0, 0, 105, 0, 0,
	152, 0, 0, 0, 0, 186, 152, 186, 0, 0,
	0, 0, 186, 0, 0, 0, 298, 0, 0, 0,
	305, 566, 0, 0, 0, 314, 0, 0, 0, 0,
	114, 115, 0, 0, 152, 0, 0, 0, 103, 104,
	0, 0, 0, 106, 185, 107, 0, 108, 116, 0,
	0, 152, 186, 152, 0, 102, 111, 109, 110, 0,
	0, 185, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 186, 69, 49, 68, 77, 50,
	76, 78, 350, 186, 186, 0, 0, 46, 0, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 79,
	62, 0, 67, 93, 94, 34, 0, 0, 80, 81,
	0, 82, 0, 83, 84, 0, 105, 0, 0, 186,
	349, 0, 0, 186, 186, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 71, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	115, 0, 0, 0, 0, 148, 0, 103, 104, 0,
	0, 0, 106, 0, 107, 148, 108, 186, 148, 148,
	0, 0, 0, 186, 102, 111, 109, 110, 0, 0,
	0, 594, 0, 0, 0, 0, 0, 152, 148, 148,
	148, 0, 186, 0, 0, 0, 0, 0, 152, 0,
	0, 186, 0, 0, 0, 186, 0, 148, 0, 148,
	148, 0, 148, 186, 148, 148, 148, 148, 0, 148,
	0, 0, 148, 0, 152, 148, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 148, 0, 0, 148,
	0, 0, 0, 148, 148, 148, 148, 186, 186, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	148, 148, 148, 0, 0, 186, 0, 148, 114, 115,
	0, 0, 0, 0, 186, 0, 103, 104, 0, 0,
	0, 106, 0, 107, 0, 108, 0, 0, 0, 148,
	0, 0, 0, 102, 111, 109, 110, 152, 0, 0,
	531, 0, 0, 0, 0, 0, 148, 148, 148, 0,
	0, 0, 0, 69, 149, 68, 77, 150, 76, 133,
	0, 141, 0, 154, 143, 0, 148, 542, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 148,
	0, 0, 0, 152, 0, 186, 0, 79, 0, 0,
	0, 93, 94, 105, 0, 138, 80, 81, 0, 82,
	0, 83, 84, 0, 139, 140, 0, 0, 0, 0,
	9, 0, 0, 0, 0, 0, 137, 0, 144, 567,
	92, 91, 71, 70, 148, 0, 114, 115, 396, 148,
	0, 0, 0, 0, 103, 104, 0, 0, 0, 106,
	0, 107, 186, 108, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 109, 110, 0, 0, 0, 530, 186,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 0, 148, 190, 194, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 208, 209, 210, 0, 396, 0, 0,
	0, 0, 0, 148, 0, 0, 148, 0, 0, 0,
	148, 0, 219, 0, 221, 222, 0, 224, 148, 226,
	227, 228, 229, 0, 231, 0, 0, 234, 0, 148,
	237, 239, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 257, 0, 200, 260, 0, 0, 0, 264, 267,
	270, 272, 148, 148, 0, 0, 0, 0, 0, 0,
	145, 0, 0, 0, 0, 284, 260, 286, 0, 0,
	148, 0, 292, 114, 115, 0, 0, 0, 0, 148,
	0, 103, 104, 0, 0, 0, 106, 0, 107, 0,
	108, 0, 0, 0, 145, 0, 0, 0, 102, 111,
	109, 110, 148, 0, 0, 402, 191, 0, 0, 0,
	0, 339, 345, 260, 0, 0, 0, 0, 0, 201,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 0, 0, 359, 69, 149, 68, 77, 150,
	76, 133, 0, 361, 362, 154, 143, 0, 148, 223,
	148, 0, 0, 0, 0, 0, 0, 0, 232, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 93, 94, 53, 0, 0, 80, 81,
	0, 82, 0, 83, 84, 0, 0, 0, 282, 389,
	0, 433, 0, 345, 397, 0, 0, 0, 283, 0,
	144, 0, 92, 91, 71, 70, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 187, 0, 418, 187, 187,
	0, 0, 0, 181, 0, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 0, 0, 0, 145, 187, 187,
	187, 0, 435, 0, 0, 0, 0, 0, 260, 0,
	0, 439, 0, 0, 0, 389, 0, 187, 0, 187,
	187, 0, 187, 449, 187, 187, 187, 187, 0, 187,
	0, 0, 187, 0, 457, 187, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 187, 383, 0, 153,
	0, 0, 0, 187, 187, 187, 187, 473, 474, 0,
	0, 0, 388, 0, 0, 153, 0, 0, 0, 0,
	187, 153, 187, 0, 0, 181, 0, 187, 114, 115,
	0, 0, 0, 0, 508, 0, 103, 104, 0, 0,
	0, 106, 0, 107, 0, 108, 0, 0, 0, 153,
	0, 0, 0, 102, 111, 109, 110, 457, 0, 0,
	365, 0, 0, 0, 0, 0, 153, 187, 153, 0,
	0, 0, 426, 0, 0, 0, 0, 428, 430, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 187,
	0, 0, 0, 549, 0, 552, 0, 0, 69, 183,
	68, 77, 184, 76, 357, 0, 456, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 466, 0,
	468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 319, 79, 0, 187, 0, 93, 94, 187, 187,
	356, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 502, 583, 504, 0, 506, 223, 0, 0, 0,
	0, 74, 0, 144, 0, 92, 91, 71, 70, 591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 187, 0,
	179, 0, 0, 527, 0, 528, 105, 0, 0, 0,
	0, 0, 153, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 153, 112, 0, 187, 0, 0, 0,
	187, 101, 0, 0, 548, 0, 105, 0, 187, 114,
	115, 0, 0, 33, 0, 0, 0, 103, 104, 153,
	0, 0, 106, 0, 107, 0, 108, 116, 0, 0,
	0, 101, 0, 0, 102, 111, 109, 110, 113, 114,
	115, 255, 187, 187, 258, 0, 0, 103, 104, 0,
	0, 576, 106, 0, 107, 279, 108, 0, 0, 0,
	187, 129, 132, 0, 102, 111, 109, 110, 113, 187,
	0, 0, 0, 182, 0, 0, 182, 182, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 0, 0, 604, 182, 182, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 0, 0, 182, 0, 182, 182, 0,
	182, 0, 182, 182, 182, 182, 0, 182, 0, 0,
	182, 0, 0, 182, 182, 0, 0, 0, 153, 0,
	187, 0, 0, 105, 182, 0, 0, 0, 0, 0,
	0, 182, 182, 182, 182, 0, 0, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 376, 0, 182, 379,
	182, 0, 0, 0, 0, 182, 114, 115, 0, 0,
	0, 0, 0, 0, 103, 104, 0, 0, 0, 106,
	0, 107, 391, 108, 394, 0, 0, 187, 0, 0,
	0, 102, 111, 109, 110, 113, 69, 346, 68, 77,
	184, 76, 78, 0, 187, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 412, 413, 182, 0, 0, 182, 0, 0,
	79, 0, 0, 0, 93, 94, 182, 182, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 0,
	330, 0, 0, 394, 281, 0, 0, 0, 0, 74,
	378, 75, 342, 92, 91, 71, 70, 0, 0, 0,
	0, 0, 69, 346, 68, 77, 184, 76, 78, 0,
	453, 0, 182, 0, 0, 0, 182, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 467, 469, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	93, 94, 0, 479, 0, 80, 81, 483, 82, 484,
	83, 84, 0, 0, 105, 498, 330, 500, 0, 0,
	182, 0, 0, 605, 0, 74, 182, 75, 342, 92,
	91, 71, 70, 0, 0, 514, 0, 515, 0, 0,
	0, 0, 516, 0, 0, 182, 0, 114, 115, 0,
	0, 0, 0, 0, 182, 103, 104, 0, 182, 0,
	106, 0, 107, 0, 108, 0, 182, 0, 0, 533,
	534, 0, 102, 111, 109, 110, 0, 537, 0, 0,
	0, 0, 69, 149, 68, 77, 150, 76, 78, 545,
	0, 547, 154, 0, 0, 0, 0, 0, 0, 0,
	182, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 487, 0, 0, 0, 0, 79, 0, 182, 0,
	93, 94, 577, 0, 564, 80, 81, 182, 82, 0,
	83, 84, 569, 570, 571, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 0, 0, 114, 115, 584, 585, 586,
	0, 0, 0, 103, 104, 412, 413, 0, 106, 0,
	107, 0, 108, 69, 49, 68, 77, 50, 76, 78,
	102, 111, 109, 110, 0, 46, 599, 493, 598, 597,
	494, 47, 48, 0, 60, 61, 58, 0, 182, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 0, 489, 490, 0,
	0, 0, 0, 568, 0, 0, 74, 0, 75, 0,
	92, 91, 71, 70, 69, 49, 68, 77, 50, 76,
	78, 0, 0, 0, 0, 182, 46, 595, 493, 598,
	597, 494, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 182, 66, 63, 59, 0, 0, 79, 62,
	0, 67, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 0, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 92, 91, 71, 70, 69, 49, 68, 77, 50,
	76, 78, 0, 0, 0, 0, 0, 46, 480, 56,
	411, 410, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 79,
	62, 0, 67, 93, 94, 0, 0, 0, 80, 81,
	0, 82, 0, 83, 84, 0, 0, 0, 0, 322,
	323, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 71, 70, 69, 49, 68, 77,
	50, 76, 78, 0, 0, 0, 0, 0, 46, 408,
	56, 411, 410, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	79, 62, 0, 67, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 0,
	322, 323, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 92, 91, 71, 70, 69, 49, 68,
	77, 50, 76, 78, 0, 0, 0, 0, 0, 46,
	0, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 417, 443, 64, 65, 0, 66, 63, 59, 0,
	0, 79, 62, 0, 67, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 0, 0, 0,
	0, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 71, 70, 69, 49,
	68, 77, 50, 76, 78, 0, 0, 0, 0, 0,
	46, 0, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 79, 62, 0, 67, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 0, 6, 7, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 92, 91, 71, 70, 8,
	69, 49, 68, 77, 50, 76, 78, 0, 0, 0,
	0, 0, 46, 601, 493, 0, 0, 494, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 79, 62, 0, 67, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 0, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 575, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 0, 322, 323, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 546, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 536, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 0, 322, 323, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	92, 91, 71, 70, 69, 49, 68, 77, 50, 76,
	78, 0, 0, 0, 0, 0, 46, 0, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 79, 62,
	0, 67, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 0, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	525, 92, 91, 71, 70, 69, 49, 68, 77, 50,
	76, 78, 0, 0, 0, 0, 0, 46, 519, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 79,
	62, 0, 67, 93, 94, 0, 0, 0, 80, 81,
	0, 82, 0, 83, 84, 0, 0, 0, 0, 322,
	323, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 71, 70, 69, 49, 68, 77,
	50, 76, 78, 0, 0, 0, 0, 0, 46, 495,
	493, 0, 0, 494, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	79, 62, 0, 67, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 0,
	489, 490, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 92, 91, 71, 70, 69, 49, 68,
	77, 50, 76, 78, 0, 0, 0, 0, 0, 46,
	488, 493, 0, 0, 494, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 79, 62, 0, 67, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 0, 0, 0,
	0, 489, 490, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 71, 70, 69, 49,
	68, 77, 50, 76, 78, 0, 0, 0, 0, 0,
	46, 482, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 79, 62, 0, 67, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 0, 322, 323, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 92, 91, 71, 70, 69,
	49, 68, 77, 50, 76, 78, 0, 0, 0, 0,
	0, 46, 463, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 79, 62, 0, 67, 93, 94, 0,
	0, 0, 80, 81, 0, 82, 0, 83, 84, 0,
	0, 0, 0, 322, 323, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 92, 91, 71, 70,
	69, 49, 68, 77, 50, 76, 78, 0, 0, 0,
	0, 0, 46, 454, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 79, 62, 0, 67, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 0, 322, 323, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 390, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 0, 322, 323, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 380, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 0, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 377, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 0, 322, 323, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	92, 91, 71, 70, 69, 49, 68, 77, 50, 76,
	78, 0, 0, 0, 0, 0, 46, 0, 493, 0,
	0, 494, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 79, 62,
	0, 67, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 0, 489, 490,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 92, 91, 71, 70, 69, 49, 68, 77, 50,
	76, 78, 0, 0, 0, 0, 0, 46, 0, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 79,
	62, 0, 67, 93, 94, 0, 0, 0, 80, 81,
	0, 82, 0, 83, 84, 0, 0, 0, 0, 322,
	323, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 71, 70, 69, 49, 68, 77,
	50, 76, 78, 0, 0, 0, 0, 0, 46, 0,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	79, 62, 0, 67, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 92, 91, 71, 70, 69, 49, 68,
	77, 50, 76, 78, 0, 0, 0, 0, 0, 46,
	0, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 79, 62, 0, 67, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 69, 183, 68,
	77, 184, 76, 78, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 71, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 0, 0, 0,
	0, 330, 0, 0, 0, 281, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 71, 70, 69, 149,
	68, 77, 150, 76, 133, 0, 0, 0, 154, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 69, 183,
	68, 77, 184, 76, 78, 0, 0, 0, 0, 0,
	0, 283, 0, 144, 0, 92, 91, 71, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 0, 330, 0, 69, 149, 68, 77, 150, 76,
	78, 74, 0, 75, 154, 92, 91, 71, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 69, 183, 68, 77, 184, 76,
	78, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 92, 91, 71, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 93, 94, 105, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 74, 0, 75,
	0, 92, 91, 71, 70, 0, 0, 114, 115, 0,
	0, 0, 0, 0, 0, 103, 104, 432, 0, 0,
	106, 0, 107, 0, 108, 0, 0, 0, 114, 115,
	0, 360, 102, 111, 109, 110, 103, 104, 0, 0,
	0, 106, 0, 107, 0, 108, 0, 0, 0, 0,
	114, 115, 0, 102, 111, 109, 110, 0, 103, 104,
	0, 0, 0, 106, 0, 107, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 109, 110,
}
var RubyPact = []int{

	-35, 2523, -1000, -1000, -1000, 4, -1000, -1000, -1000, 1652,
	-1000, -1000, -1000, -1000, 199, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 154, 255, -1000, 35, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 345, 442, 433, 988,
	173, 176, 211, 193, 162, 180, 3802, 3802, -1000, 4079,
	3802, 3802, 4079, 4079, 394, 393, -1000, 397, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 372, -1000, 50,
	3802, 3802, 4079, 4079, 4079, -1000, -1000, -1000, -1000, -1000,
	-1000, 25, 453, -1000, -1000, -1000, -1000, -1000, 3802, 3802,
	3802, 4079, 462, 4079, 4079, -1000, 4079, 3802, 4079, 4079,
	4079, 4079, 3802, 4079, -1000, -1000, 4079, 3802, 3802, 4079,
	4079, 3802, 3802, 3802, 3802, 461, 270, 31, 290, 174,
	4079, 379, -1000, 4029, 50, -1000, 76, 4079, 4079, 4079,
	4079, 32, 362, 28, -1000, 4141, -1000, -1000, 7, 63,
	140, 85, 148, 143, 4079, 4029, 4079, -1000, 3802, 3802,
	3802, 4079, 3802, 3802, 3802, 30, 3802, 3802, 3802, 23,
	3802, 3802, 3802, 3802, 22, 460, 459, 337, 220, 3660,
	275, 4141, -1000, 3923, 117, -1, -1000, -1000, 291, 256,
	4141, 80, 275, -1000, 1819, 3802, 3802, 3802, 3802, 386,
	2077, 1957, 4029, 740, -1000, -1000, 337, 337, 4141, 4141,
	4141, -1000, -1000, 447, -1000, -1000, 337, 337, 337, 4141,
	1553, 4141, 4141, 3973, 4141, 337, 4141, 4141, 4141, 4141,
	337, 4120, 3973, 3973, 4141, 337, 337, 4141, 74, 1441,
	337, 337, 337, 337, 50, -1000, 458, 356, 325, -1000,
	115, 454, 449, 448, -1000, 3518, 433, 4141, 3447, 427,
	4141, -1000, -1000, -1000, 663, -19, 46, 1682, -1000, -1000,
	1819, -1000, 1819, -1000, -1000, -1000, -1000, 439, 4079, 3376,
	-1000, 428, 1881, 4079, 4141, 425, 489, -37, 14, 337,
	337, 337, 1176, 337, 337, 337, -1000, -1000, -1000, 426,
	337, 337, 337, -1000, -1000, -1000, 421, 337, 337, 337,
	162, 337, -1000, -1000, -1000, 419, 330, -14, -15, 2381,
	-1000, -1000, -1000, -1000, 337, 277, 4079, -1000, -1000, 80,
	-1000, 340, 4079, 337, 337, 337, 337, -1000, 313, 4141,
	-1000, -1000, -1000, 306, 286, 4163, 1270, 417, 337, -1000,
	-1000, 3852, -1000, -1000, -1000, 50, 3802, 4029, 4141, 4141,
	4079, 4141, 4141, -1000, 4079, 102, -1000, 2452, 290, 310,
	411, 359, 4079, -1000, -1000, 290, 2452, -1000, -1000, 3305,
	-1000, 50, -1000, 2077, 141, -1000, -1000, -1000, 127, 4141,
	-1000, 3234, 142, -1000, 3660, -1000, 7, 283, -1000, 97,
	-1000, -1000, 87, -1000, -1000, -1000, 4079, 4079, -1000, 389,
	3802, -1000, 2310, 3163, -1000, -1000, -1000, 440, 4141, 3092,
	3021, 321, -1000, -1000, 4079, 275, -13, -1000, -11, -1000,
	-16, -1000, 3802, 4079, -1000, 4141, -1000, 337, 405, 4141,
	3802, 280, 196, -1000, -1000, -1000, -1000, -1000, -1000, 4141,
	-1000, 271, 196, 2950, -1000, -1000, 2077, 4141, -1000, -1000,
	3802, 413, -1000, -1000, -1000, 408, -22, 2879, -24, 3660,
	83, -1000, 3802, 1029, 911, -1000, 3802, -1000, 337, 3660,
	-1000, 385, -1000, 2808, 3660, 395, 36, -1000, -1000, -1000,
	-1000, 337, -1000, 3802, 3802, -1000, -1000, -1000, 2737, 275,
	3660, -1000, 2077, -1000, 3973, -1000, 123, 337, 4141, -1000,
	337, -1000, 266, -1000, 3660, 2452, 2452, -1000, 253, -1000,
	365, 337, -17, -1000, -1000, -1000, -1000, -26, 3731, 337,
	225, -1000, 337, 3660, 3660, -1000, -1000, 3660, 15, 433,
	-1000, -1000, -1000, 184, 192, 2666, -1000, 3660, 67, 4141,
	-1000, -1000, 2118, 24, -1000, 252, 196, 235, 196, -1000,
	-1000, 4079, -1000, 337, 3660, -1000, -1000, -1000, -1000, 3660,
	3660, 3660, -1000, -1000, -1000, -1000, 67, 3802, 4079, -1000,
	230, -1000, 204, 792, 3660, 3660, 3660, 2239, 2168, 2595,
	348, 2010, -1000, -1000, -1000, -1000, 380, 3802, -1000, -1000,
	376, -1000, -1000, -1000, 67, -1000, -1000, 3802, -1000, 337,
	3589, -1000, 67, 337, 3589, 3589, 3589,
}
var RubyPgo = []int{

	0, 545, 0, 213, 542, 19, 10, 540, 538, 537,
	1315, 533, 4, 40, 532, 6, 531, 44, 530, 528,
	1050, 519, 520, 785, 518, 516, 515, 514, 512, 511,
	508, 507, 506, 505, 8, 152, 503, 502, 1693, 12,
	500, 498, 497, 17, 496, 492, 3, 18, 491, 490,
	489, 488, 487, 486, 484, 483, 482, 481, 1591, 480,
	7, 13, 22, 9, 478, 11, 476, 39, 5, 475,
	14, 474, 1, 472, 20, 15, 16, 471, 470, 469,
	1183,
}
var RubyR1 = []int{

	0, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 79, 79, 80, 80, 58, 58, 58, 58, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 31, 31, 31, 31,
	31, 31, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 43, 16, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 24, 61,
	61, 61, 61, 72, 72, 70, 70, 70, 70, 70,
	70, 70, 15, 74, 74, 68, 68, 25, 25, 25,
	25, 25, 25, 25, 25, 65, 65, 65, 76, 76,
	76, 34, 34, 34, 34, 32, 32, 33, 36, 38,
	38, 38, 17, 17, 17, 17, 17, 17, 17, 17,
	18, 18, 18, 75, 75, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 10,
	10, 35, 35, 22, 22, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 8, 3, 1, 78, 78, 78, 78, 78, 78,
	78, 4, 4, 4, 66, 66, 73, 73, 73, 6,
	6, 6, 6, 6, 6, 62, 71, 71, 71, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	63, 63, 63, 63, 59, 59, 59, 9, 19, 19,
	12, 12, 12, 12, 12, 12, 12, 12, 77, 77,
	69, 69, 60, 60, 26, 26, 27, 28, 28, 28,
	30, 30, 30, 29, 29, 29, 13, 44, 44, 44,
	67, 67, 67, 67, 67, 45, 45, 45, 45, 45,
	46, 46, 46, 46, 42, 41, 11, 40, 40, 40,
	40, 39, 39, 5, 7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 5, 1, 4, 4,
	2, 3, 2, 3, 4, 5, 4, 3, 4, 5,
	2, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 6, 7, 6, 6, 4, 3,
	6, 1, 4, 1, 3, 0, 1, 1, 1, 4,
	4, 4, 2, 1, 3, 0, 2, 6, 7, 8,
	8, 9, 9, 6, 7, 1, 3, 3, 0, 1,
	3, 1, 2, 3, 2, 4, 6, 5, 4, 1,
	2, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 9, 6, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 3, 3, 3, 3, 3, 4, 3,
	3, 3, 4, 3, 3, 3, 4, 3, 3, 3,
	4, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 5, 1, 1, 0, 1, 1, 1, 4, 4,
	4, 3, 5, 5, 3, 7, 3, 7, 8, 3,
	4, 5, 5, 5, 6, 3, 0, 1, 3, 4,
	5, 3, 3, 3, 3, 3, 5, 6, 5, 3,
	4, 3, 3, 2, 0, 2, 2, 3, 4, 6,
	2, 3, 5, 5, 5, 4, 4, 4, 1, 3,
	0, 2, 1, 2, 2, 1, 1, 2, 2, 1,
	1, 3, 3, 1, 3, 3, 5, 5, 5, 3,
	0, 2, 2, 2, 2, 5, 6, 5, 6, 5,
	4, 3, 3, 2, 4, 4, 2, 5, 7, 4,
	6, 4, 5, 3, 3,
}
var RubyChk = []int{

	-1000, -64, 59, 60, 76, -2, 59, 60, 76, -20,
	-25, -32, -36, -33, -17, -18, -37, -14, -19, -26,
	-44, -40, -28, -29, -30, -43, -5, -27, -13, -7,
	-21, -8, -4, -38, -23, -24, -9, -11, -48, -49,
	-50, -51, -16, -42, -41, -31, 17, 23, 24, 6,
	9, -35, -22, -10, -47, -75, 19, 22, 28, 36,
	26, 27, 40, 35, 31, 32, 34, 42, 7, 5,
	75, 74, -3, -1, 68, 70, 10, 8, 11, 39,
	48, 49, 51, 53, 54, -52, -53, -54, -55, -56,
	-57, 73, 72, 43, 44, 60, 59, 76, 19, 22,
	26, 29, 62, 45, 46, 4, 50, 52, 54, 64,
	65, 63, 22, 66, 37, 38, 55, 22, 47, 45,
	68, 56, 57, 19, 22, 62, 6, -3, 4, -38,
	4, 9, -38, 11, -61, -6, -70, 68, 47, 56,
	57, 13, -74, 16, 70, -20, -17, -15, -23, 6,
	9, -35, -22, -10, 15, 11, 68, 10, 47, 56,
	57, 68, 47, 56, 57, 13, 47, 56, 57, 13,
	47, 56, 57, 47, 13, 47, 13, -2, -2, -58,
	-72, -20, -38, 6, 9, -35, -22, -10, -2, -2,
	-20, -80, -72, -13, -20, 19, 22, 19, 22, 7,
	-80, -80, 11, -59, -6, 70, -2, -2, -20, -20,
	-20, 6, 9, 73, 6, 9, -2, -2, -2, -20,
	6, -20, -20, -80, -20, -2, -20, -20, -20, -20,
	-2, -20, -80, -80, -20, -2, -2, -20, -74, -20,
	-2, -2, -2, -2, 6, -65, 62, -76, 11, -34,
	6, 54, 15, 62, -65, -58, 45, -20, -58, -70,
	-20, -6, -6, 13, -20, -5, -74, -20, -43, -13,
	-20, -13, -20, -13, 6, -35, -22, 54, 13, -58,
	-62, 63, -80, 68, -20, -70, -20, -5, -74, -2,
	-2, -2, -20, -2, -2, -2, 6, -35, -22, 54,
	-2, -2, -2, 6, -35, -22, 54, -2, -2, -2,
	-47, -2, 6, -35, -22, 54, -75, 6, 6, -58,
	59, 60, 59, 60, -2, -69, 13, 59, 59, -80,
	59, -39, 41, -2, -2, -2, -2, 7, -78, -20,
	-17, -15, 71, -66, -73, -20, 6, -70, -2, 60,
	12, -80, 6, 9, -6, -61, 47, 11, -20, -20,
	61, -20, -20, 69, 13, 69, -6, -58, 6, 13,
	-76, 54, 47, 6, 6, 6, -58, 18, -38, -58,
	18, 12, 13, -80, 69, 69, 69, 6, -80, -20,
	18, -58, -71, 6, -58, -62, -23, -20, 12, 69,
	69, 69, 69, 6, 6, 6, 68, 68, 18, -63,
	21, 20, -58, -58, 18, 20, -12, 29, -20, -67,
	-67, -39, 18, 20, 41, -72, -80, 13, -80, 13,
	-80, 13, 4, 61, 12, -20, -6, -2, -70, -20,
	47, -68, -60, 30, -12, -65, -34, 12, 12, -20,
	-65, -68, -60, -58, 18, -6, -80, -20, -17, -15,
	47, 13, -15, 18, 63, 13, -80, -58, -80, -58,
	69, 47, 47, -20, -20, 18, 21, 20, -2, -58,
	18, -63, 18, -58, -58, -77, 4, -38, 18, 59,
	60, -2, -45, 19, 22, 18, 18, 20, -58, -72,
	-58, 69, -80, 71, -80, 71, -80, -2, -20, 12,
	-2, 18, -68, -12, -58, -58, -58, 18, -68, 18,
	-15, -2, 6, 6, 71, 71, 71, -80, -80, -2,
	69, 69, -2, -58, -58, 18, 18, -58, 4, 13,
	6, -35, -22, -2, -2, -58, 18, -58, -80, -20,
	-17, -15, -20, 6, 18, -68, -60, -68, -60, 18,
	12, 68, 71, -2, -58, 6, -35, -22, -38, -58,
	-58, -58, 59, 59, 60, 18, -80, 4, 61, 18,
	-68, 18, -68, -20, -58, -58, -58, -67, -67, -67,
	-2, -20, 18, 18, 69, 18, -46, 21, 20, 18,
	-46, 18, -79, 13, -80, 13, 18, 21, 20, -2,
	-67, 18, -80, -2, -67, -67, -67,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 0, 0, 0, 21,
	22, 23, 24, 25, 0, 0, 0, 0, 15, 275,
	0, 0, 13, 279, 283, 280, 276, 0, 19, 20,
	26, 27, 28, 29, 13, 13, 151, 77, 254, 0,
	0, 0, 0, 0, 0, 46, 47, 48, 49, 50,
	51, 0, 0, 212, 213, 5, 6, 7, 0, 0,
	0, 0, 0, 0, 0, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 138, 15,
	0, 149, 15, -2, 80, 82, 90, 13, 0, 0,
	0, 0, 111, 15, 13, 116, 117, 118, 34, 21,
	22, 23, 24, 25, 0, 115, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 15, 0, 270,
	274, 113, 33, 21, 22, 23, 24, 25, 0, 0,
	13, 0, 277, 278, 113, 0, 0, 0, 0, 0,
	214, 0, 115, 0, 306, 13, 201, 202, 203, 204,
	74, 181, 182, 0, 179, 180, 241, 249, 289, 73,
	83, 92, 94, 0, 205, 206, 207, 208, 209, 210,
	243, 0, 0, 0, 313, 245, 159, 93, 0, 123,
	171, 178, 242, 244, 87, 15, 0, 135, 138, 139,
	141, 0, 0, 0, 15, 0, 0, 15, 0, 0,
	116, 81, 91, 13, 123, 0, 0, 152, 153, 154,
	165, 166, 172, 173, 185, 186, 187, 0, 13, 0,
	15, 236, 15, 13, 122, 0, 123, 0, 0, 155,
	167, 174, 0, 156, 168, 175, 189, 190, 191, 0,
	157, 169, 176, 193, 194, 195, 0, 158, 170, 177,
	160, 161, 197, 198, 199, 0, 162, 0, 0, 0,
	15, 15, 16, 17, 18, 0, 0, 290, 290, 0,
	14, 0, 0, 284, 285, 281, 282, 314, 13, 215,
	216, 217, 221, 13, 13, 0, -2, 0, 255, 256,
	257, 15, 183, 184, 84, 86, 0, -2, 123, 108,
	0, 304, 305, 102, 0, 103, 88, 125, 138, 0,
	0, 0, 0, 142, 144, 138, 125, 145, 15, 0,
	148, 75, 13, 0, 95, 98, 100, 188, 0, 124,
	229, 0, 0, 237, 13, 15, -2, 123, 79, 96,
	99, 101, 97, 192, 196, 200, 0, 0, 239, 0,
	0, 15, 0, 0, 258, 15, 271, 15, 114, 0,
	0, 0, 309, 15, 0, 15, 0, 13, 0, 13,
	0, 13, 13, 0, 78, 0, 85, 89, 0, 286,
	0, 0, 125, 15, 272, 15, 140, 136, 137, 143,
	15, 0, 125, 0, 147, 76, 0, 119, 120, 121,
	0, 0, 112, 230, 235, 0, 0, 0, 0, 13,
	95, 13, 0, 0, 0, 240, 0, 15, 15, 253,
	246, 0, 248, 0, 260, 15, 0, 268, 287, 291,
	292, 293, 294, 0, 0, 288, 307, 15, 0, 15,
	13, 211, 0, 222, 0, 223, 0, 224, 226, 109,
	107, 127, 0, 273, 126, 125, 125, 133, 0, 146,
	121, 104, 0, 238, 231, 232, 233, 0, 0, 106,
	0, 164, 15, 251, 252, 247, 259, 261, 0, 0,
	15, 15, 15, 15, 0, 0, 310, 13, 311, 218,
	219, 220, 0, 0, 128, 0, 125, 0, 125, 134,
	110, 0, 234, 105, 250, 15, 15, 15, 269, 265,
	266, 267, 290, 15, 15, 308, 312, 13, 0, 129,
	0, 130, 0, 0, 262, 263, 264, 0, 0, 0,
	11, 13, 131, 132, 163, 295, 0, 0, 290, 297,
	0, 299, 225, 12, 227, 13, 296, 0, 290, 290,
	303, 298, 228, 290, 301, 302, 300,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:221
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:223
		{
		}
	case 3:
		//line parser.y:225
		{
		}
	case 4:
		//line parser.y:227
		{
		}
	case 5:
		//line parser.y:229
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:231
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:233
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:239
		{
		}
	case 11:
		//line parser.y:241
		{
		}
	case 12:
		//line parser.y:242
		{
		}
	case 13:
		//line parser.y:244
		{
		}
	case 14:
		//line parser.y:245
		{
		}
	case 15:
		//line parser.y:248
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:250
		{
		}
	case 17:
		//line parser.y:252
		{
		}
	case 18:
		//line parser.y:254
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:265
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 74:
		//line parser.y:268
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 75:
		//line parser.y:271
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 76:
		//line parser.y:280
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-2].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 77:
		//line parser.y:290
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:296
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:305
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-3].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-3].genericValue.LineNumber()},
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:314
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:323
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:333
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:343
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:352
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:363
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:374
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:384
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:394
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:405
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:418
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:427
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:437
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:447
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:457
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:469
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:479
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:489
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:499
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:509
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:519
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:529
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:539
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:549
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:561
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:571
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:581
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:591
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:603
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 109:
		//line parser.y:615
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 110:
		//line parser.y:617
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-1].genericValue)
		}
	case 111:
		//line parser.y:619
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 112:
		//line parser.y:621
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:624
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:626
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:628
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 116:
		//line parser.y:630
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:632
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:634
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:636
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:638
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:640
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:643
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 123:
		//line parser.y:653
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:655
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:658
		{
			RubyVAL.genericSlice = nil
		}
	case 126:
		//line parser.y:660
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 127:
		//line parser.y:663
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 128:
		//line parser.y:674
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 129:
		//line parser.y:686
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 130:
		//line parser.y:698
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 131:
		//line parser.y:710
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 132:
		//line parser.y:723
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 133:
		//line parser.y:736
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 134:
		//line parser.y:747
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 135:
		//line parser.y:761
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 136:
		//line parser.y:763
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 137:
		//line parser.y:765
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 138:
		//line parser.y:767
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 139:
		//line parser.y:769
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 140:
		//line parser.y:771
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 141:
		//line parser.y:774
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 142:
		//line parser.y:776
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 143:
		//line parser.y:778
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 144:
		//line parser.y:780
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 145:
		//line parser.y:784
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 146:
		//line parser.y:794
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 147:
		//line parser.y:806
		{
			name := RubyS[Rubypt-3].genericValue.(ast.BareReference).Name
			if name != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + name + ")")
			}

			class := ast.Eigenclass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 148:
		//line parser.y:821
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 149:
		//line parser.y:832
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 150:
		//line parser.y:841
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 151:
		//line parser.y:860
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 152:
		//line parser.y:878
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 153:
		//line parser.y:887
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 154:
		//line parser.y:893
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 155:
		//line parser.y:899
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 156:
		//line parser.y:908
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 157:
		//line parser.y:917
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 158:
		//line parser.y:926
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 159:
		//line parser.y:935
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 160:
		//line parser.y:938
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 161:
		//line parser.y:947
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 162:
		//line parser.y:956
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 163:
		//line parser.y:966
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 164:
		//line parser.y:981
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 165:
		//line parser.y:987
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:996
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:1002
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:1011
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 169:
		//line parser.y:1020
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 170:
		//line parser.y:1029
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1038
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1047
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1056
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1062
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1071
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1080
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1089
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 178:
		//line parser.y:1098
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 179:
		//line parser.y:1105
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 180:
		//line parser.y:1107
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
		}
	case 181:
		//line parser.y:1110
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 182:
		//line parser.y:1116
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 183:
		//line parser.y:1123
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 184:
		//line parser.y:1129
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 185:
		//line parser.y:1136
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 186:
		//line parser.y:1138
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 187:
		//line parser.y:1140
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 188:
		//line parser.y:1142
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 189:
		//line parser.y:1145
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 190:
		//line parser.y:1147
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 191:
		//line parser.y:1149
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 192:
		//line parser.y:1151
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 193:
		//line parser.y:1154
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 194:
		//line parser.y:1156
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 195:
		//line parser.y:1158
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 196:
		//line parser.y:1160
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1163
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1165
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1167
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1169
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1173
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 202:
		//line parser.y:1175
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 203:
		//line parser.y:1177
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 204:
		//line parser.y:1179
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 205:
		//line parser.y:1182
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 206:
		//line parser.y:1193
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 207:
		//line parser.y:1204
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 208:
		//line parser.y:1215
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 209:
		//line parser.y:1226
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 210:
		//line parser.y:1237
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 211:
		//line parser.y:1248
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 212:
		//line parser.y:1250
		{
		}
	case 213:
		//line parser.y:1251
		{
		}
	case 214:
		//line parser.y:1253
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 215:
		//line parser.y:1255
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 216:
		//line parser.y:1257
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 217:
		//line parser.y:1259
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 218:
		//line parser.y:1261
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 219:
		//line parser.y:1263
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 220:
		//line parser.y:1265
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 221:
		//line parser.y:1268
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 222:
		//line parser.y:1270
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 223:
		//line parser.y:1278
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 224:
		//line parser.y:1287
		{
			name := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 225:
		//line parser.y:1295
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 226:
		//line parser.y:1304
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 227:
		//line parser.y:1311
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 228:
		//line parser.y:1318
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 229:
		//line parser.y:1326
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 230:
		//line parser.y:1331
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 231:
		//line parser.y:1336
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 232:
		//line parser.y:1341
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 233:
		//line parser.y:1346
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 234:
		//line parser.y:1351
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 235:
		//line parser.y:1360
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 236:
		//line parser.y:1362
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 237:
		//line parser.y:1364
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 238:
		//line parser.y:1366
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 239:
		//line parser.y:1369
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 240:
		//line parser.y:1378
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 241:
		//line parser.y:1388
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 242:
		//line parser.y:1397
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 243:
		//line parser.y:1406
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 244:
		//line parser.y:1415
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 245:
		//line parser.y:1424
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 246:
		//line parser.y:1433
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 247:
		//line parser.y:1442
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1452
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1461
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1472
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 251:
		//line parser.y:1481
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 252:
		//line parser.y:1489
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 253:
		//line parser.y:1497
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 254:
		//line parser.y:1505
		{
		}
	case 255:
		//line parser.y:1506
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 256:
		//line parser.y:1507
		{
		}
	case 257:
		//line parser.y:1510
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 258:
		//line parser.y:1513
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 259:
		//line parser.y:1522
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 260:
		//line parser.y:1533
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 261:
		//line parser.y:1535
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 262:
		//line parser.y:1549
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 263:
		//line parser.y:1570
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 264:
		//line parser.y:1591
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 265:
		//line parser.y:1612
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 266:
		//line parser.y:1627
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 267:
		//line parser.y:1642
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 268:
		//line parser.y:1659
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 269:
		//line parser.y:1661
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 270:
		//line parser.y:1664
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 271:
		//line parser.y:1666
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 272:
		//line parser.y:1669
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 273:
		//line parser.y:1671
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 274:
		//line parser.y:1674
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 275:
		//line parser.y:1681
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 276:
		//line parser.y:1683
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 277:
		//line parser.y:1686
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 278:
		//line parser.y:1694
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 279:
		//line parser.y:1696
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 280:
		//line parser.y:1700
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 281:
		//line parser.y:1702
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 282:
		//line parser.y:1704
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 283:
		//line parser.y:1708
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 284:
		//line parser.y:1710
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 285:
		//line parser.y:1712
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 286:
		//line parser.y:1716
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 287:
		//line parser.y:1727
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 288:
		//line parser.y:1733
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 289:
		//line parser.y:1740
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 290:
		//line parser.y:1747
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 291:
		//line parser.y:1749
		{
		}
	case 292:
		//line parser.y:1751
		{
		}
	case 293:
		//line parser.y:1753
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 294:
		//line parser.y:1755
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 295:
		//line parser.y:1758
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 296:
		//line parser.y:1766
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 297:
		//line parser.y:1775
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 298:
		//line parser.y:1783
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 299:
		//line parser.y:1792
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 300:
		//line parser.y:1801
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 301:
		//line parser.y:1809
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 302:
		//line parser.y:1817
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 303:
		//line parser.y:1825
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 304:
		//line parser.y:1834
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 305:
		//line parser.y:1837
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 306:
		//line parser.y:1840
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 307:
		//line parser.y:1847
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 308:
		//line parser.y:1853
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 309:
		//line parser.y:1859
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 310:
		//line parser.y:1865
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 311:
		//line parser.y:1872
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 312:
		//line parser.y:1874
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 313:
		//line parser.y:1877
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 314:
		//line parser.y:1884
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	}
	goto Rubystack /* stack new state and value */
}

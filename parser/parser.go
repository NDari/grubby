//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SPECIAL_CHAR_REF = 57349
const CAPITAL_REF = 57350
const LPAREN = 57351
const RPAREN = 57352
const COMMA = 57353
const NamespacedModule = 57354
const DO = 57355
const DEF = 57356
const END = 57357
const IF = 57358
const ELSE = 57359
const ELSIF = 57360
const UNLESS = 57361
const CLASS = 57362
const MODULE = 57363
const FOR = 57364
const WHILE = 57365
const UNTIL = 57366
const BEGIN = 57367
const RESCUE = 57368
const ENSURE = 57369
const BREAK = 57370
const NEXT = 57371
const REDO = 57372
const RETRY = 57373
const RETURN = 57374
const YIELD = 57375
const AND = 57376
const OR = 57377
const LAMBDA = 57378
const CASE = 57379
const WHEN = 57380
const TRUE = 57381
const FALSE = 57382
const LESSTHAN = 57383
const GREATERTHAN = 57384
const EQUALTO = 57385
const BANG = 57386
const COMPLEMENT = 57387
const BINARY_PLUS = 57388
const UNARY_PLUS = 57389
const BINARY_MINUS = 57390
const UNARY_MINUS = 57391
const STAR = 57392
const RANGE = 57393
const OR_EQUALS = 57394
const WHITESPACE = 57395
const NEWLINE = 57396
const SEMICOLON = 57397
const COLON = 57398
const DOT = 57399
const PIPE = 57400
const SLASH = 57401
const AMPERSAND = 57402
const QUESTIONMARK = 57403
const CARET = 57404
const LBRACKET = 57405
const RBRACKET = 57406
const LBRACE = 57407
const RBRACE = 57408
const DOLLARSIGN = 57409
const ATSIGN = 57410
const FILE_CONST_REF = 57411
const LINE_CONST_REF = 57412
const EOF = 57413

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1423

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 127,
	10, 111,
	11, 111,
	-2, 240,
	-1, 317,
	54, 13,
	66, 13,
	-2, 33,
	-1, 330,
	10, 111,
	11, 111,
	-2, 240,
}

const RubyNprod = 295
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4314

var RubyAct = []int{

	297, 381, 5, 416, 415, 549, 292, 304, 224, 166,
	134, 129, 220, 222, 25, 391, 54, 128, 32, 2,
	3, 303, 366, 233, 285, 303, 303, 118, 303, 278,
	119, 28, 95, 494, 14, 96, 4, 475, 473, 97,
	471, 26, 188, 138, 189, 272, 102, 372, 303, 243,
	253, 138, 115, 356, 524, 379, 163, 164, 469, 145,
	168, 169, 147, 117, 165, 123, 126, 378, 288, 336,
	93, 92, 172, 281, 116, 336, 111, 112, 183, 184,
	150, 537, 260, 100, 101, 50, 88, 94, 103, 275,
	104, 88, 105, 113, 256, 182, 193, 194, 195, 99,
	108, 106, 107, 182, 190, 202, 437, 88, 303, 115,
	207, 303, 88, 146, 431, 212, 120, 151, 216, 217,
	218, 434, 373, 519, 305, 429, 440, 214, 357, 136,
	229, 116, 439, 232, 142, 228, 145, 150, 413, 147,
	303, 247, 336, 157, 142, 258, 249, 142, 142, 267,
	268, 145, 270, 271, 147, 276, 277, 266, 282, 283,
	284, 259, 235, 250, 252, 142, 142, 142, 433, 263,
	148, 303, 246, 157, 306, 307, 308, 309, 289, 149,
	235, 321, 158, 154, 142, 148, 142, 142, 265, 142,
	146, 142, 142, 142, 142, 335, 142, 225, 430, 142,
	223, 142, 142, 320, 303, 146, 181, 343, 260, 327,
	142, 162, 312, 239, 235, 328, 142, 142, 142, 254,
	153, 230, 464, 160, 465, 225, 142, 339, 223, 114,
	429, 239, 142, 538, 147, 346, 142, 342, 349, 273,
	225, 226, 279, 161, 389, 396, 286, 95, 221, 348,
	96, 227, 151, 95, 97, 159, 96, 156, 242, 244,
	97, 152, 179, 239, 142, 239, 363, 175, 367, 226,
	176, 430, 150, 247, 66, 140, 74, 141, 127, 227,
	133, 73, 138, 142, 226, 530, 142, 299, 483, 154,
	95, 531, 532, 96, 227, 142, 142, 97, 155, 389,
	384, 385, 388, 173, 246, 76, 174, 125, 90, 91,
	393, 73, 131, 77, 78, 397, 79, 392, 80, 81,
	506, 132, 142, 142, 480, 404, 102, 507, 293, 294,
	410, 367, 130, 558, 139, 389, 89, 88, 70, 69,
	478, 352, 402, 142, 394, 399, 395, 142, 142, 338,
	418, 422, 162, 417, 411, 423, 111, 112, 341, 95,
	419, 341, 96, 100, 101, 235, 97, 396, 103, 257,
	104, 95, 105, 435, 96, 408, 370, 527, 97, 99,
	108, 106, 107, 446, 555, 142, 449, 361, 369, 370,
	447, 142, 459, 459, 451, 508, 452, 301, 325, 142,
	326, 386, 466, 387, 468, 142, 467, 476, 455, 300,
	95, 492, 389, 96, 479, 556, 239, 97, 142, 481,
	95, 491, 142, 96, 482, 490, 481, 97, 454, 142,
	489, 564, 125, 561, 560, 559, 73, 561, 560, 488,
	142, 497, 351, 352, 503, 500, 445, 444, 102, 377,
	310, 124, 501, 502, 191, 125, 192, 244, 409, 73,
	505, 487, 509, 510, 142, 142, 361, 443, 376, 445,
	444, 375, 511, 487, 513, 122, 365, 121, 111, 112,
	358, 425, 142, 345, 344, 100, 101, 521, 340, 291,
	103, 290, 104, 142, 105, 113, 219, 525, 197, 453,
	316, 99, 108, 106, 107, 516, 364, 526, 371, 298,
	315, 1, 239, 51, 180, 529, 87, 86, 85, 84,
	83, 82, 40, 39, 239, 481, 528, 38, 37, 53,
	460, 20, 42, 43, 541, 21, 16, 545, 384, 385,
	12, 13, 11, 459, 459, 459, 542, 543, 544, 553,
	44, 562, 24, 23, 22, 27, 239, 19, 142, 10,
	34, 566, 143, 29, 459, 18, 177, 563, 459, 459,
	459, 142, 143, 15, 41, 143, 143, 567, 568, 17,
	36, 142, 569, 35, 30, 68, 31, 67, 0, 0,
	0, 0, 0, 143, 143, 143, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 142, 0,
	142, 0, 143, 0, 143, 143, 0, 143, 0, 143,
	143, 143, 143, 142, 143, 0, 0, 143, 171, 143,
	143, 0, 0, 0, 0, 0, 0, 0, 143, 178,
	0, 240, 0, 0, 143, 143, 143, 255, 0, 0,
	0, 0, 0, 0, 143, 0, 0, 0, 0, 240,
	143, 0, 0, 0, 143, 0, 0, 274, 0, 200,
	280, 0, 0, 0, 287, 0, 0, 0, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 240, 143, 240, 66, 319, 74, 141, 75, 0,
	0, 73, 0, 0, 0, 0, 261, 0, 0, 0,
	0, 143, 0, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 143, 76, 0, 0, 90, 91,
	0, 0, 0, 77, 78, 102, 79, 302, 80, 81,
	0, 0, 0, 303, 0, 0, 0, 260, 0, 324,
	143, 143, 71, 0, 72, 314, 89, 88, 70, 69,
	0, 0, 0, 0, 0, 111, 112, 0, 0, 0,
	0, 143, 100, 101, 0, 143, 143, 103, 0, 104,
	0, 105, 113, 0, 0, 0, 0, 0, 99, 108,
	106, 107, 0, 0, 0, 355, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	354, 0, 0, 143, 0, 0, 33, 0, 0, 143,
	0, 0, 0, 0, 359, 0, 0, 143, 0, 111,
	112, 0, 0, 143, 0, 0, 100, 101, 0, 0,
	0, 103, 0, 104, 240, 105, 143, 0, 0, 0,
	143, 0, 99, 108, 106, 107, 0, 143, 0, 547,
	0, 0, 0, 0, 0, 137, 0, 0, 143, 0,
	0, 0, 0, 0, 0, 137, 0, 398, 137, 137,
	0, 0, 401, 403, 405, 0, 0, 0, 0, 0,
	0, 0, 143, 143, 0, 0, 137, 137, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 0, 0, 0, 0, 137, 0, 137, 137, 426,
	137, 143, 137, 137, 137, 137, 0, 137, 0, 0,
	137, 0, 137, 137, 436, 0, 0, 438, 0, 0,
	240, 137, 0, 0, 137, 0, 0, 137, 137, 137,
	0, 0, 240, 0, 0, 0, 0, 137, 0, 0,
	0, 0, 137, 137, 0, 0, 470, 137, 0, 472,
	0, 474, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 240, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 137, 317, 137, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 496, 0, 0, 143,
	0, 0, 0, 0, 137, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 137, 0, 0,
	0, 143, 0, 0, 0, 514, 143, 0, 143, 0,
	0, 0, 66, 140, 74, 141, 127, 539, 0, 73,
	138, 143, 0, 137, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 137, 0, 90, 91, 317, 137,
	534, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 0, 139, 200, 89, 88, 70, 69, 0, 0,
	0, 0, 0, 557, 0, 0, 137, 0, 0, 9,
	102, 0, 137, 0, 0, 565, 0, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 137,
	111, 112, 0, 137, 0, 0, 0, 100, 101, 0,
	137, 0, 103, 0, 104, 0, 105, 0, 135, 0,
	0, 137, 0, 99, 108, 106, 107, 0, 167, 0,
	499, 170, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 137, 0, 0, 185,
	186, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 196, 0,
	198, 199, 0, 201, 137, 203, 204, 205, 206, 0,
	208, 0, 0, 211, 0, 213, 215, 102, 0, 0,
	0, 0, 0, 137, 231, 0, 0, 234, 0, 0,
	245, 248, 251, 0, 0, 137, 0, 0, 0, 98,
	135, 0, 0, 0, 0, 234, 264, 111, 112, 0,
	269, 0, 0, 0, 100, 101, 0, 0, 0, 103,
	0, 104, 0, 105, 0, 0, 0, 137, 0, 137,
	99, 108, 106, 107, 110, 0, 0, 311, 318, 234,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 135, 0, 0,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	334, 0, 0, 0, 137, 0, 0, 0, 0, 137,
	0, 137, 0, 0, 66, 48, 74, 49, 75, 0,
	0, 73, 0, 45, 137, 55, 353, 135, 56, 46,
	47, 0, 59, 60, 57, 0, 0, 63, 64, 0,
	65, 62, 58, 0, 0, 76, 61, 360, 90, 91,
	0, 318, 368, 77, 78, 0, 79, 0, 80, 81,
	0, 0, 0, 6, 7, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 72, 102, 89, 88, 70, 69,
	8, 0, 0, 0, 0, 0, 0, 0, 0, 390,
	0, 0, 52, 0, 0, 167, 0, 0, 0, 0,
	0, 0, 0, 400, 0, 111, 112, 0, 0, 135,
	0, 0, 100, 101, 0, 0, 0, 103, 0, 104,
	234, 105, 412, 0, 0, 0, 360, 0, 99, 108,
	106, 107, 0, 420, 0, 498, 0, 0, 0, 0,
	0, 144, 0, 0, 427, 0, 0, 0, 0, 0,
	0, 144, 0, 0, 144, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 441, 442,
	0, 0, 144, 144, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	0, 144, 0, 144, 144, 0, 144, 477, 144, 144,
	144, 144, 0, 144, 0, 0, 144, 0, 144, 144,
	102, 0, 0, 0, 0, 0, 486, 144, 0, 0,
	241, 0, 0, 144, 144, 144, 0, 0, 486, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 241, 144,
	111, 112, 0, 144, 0, 0, 0, 100, 101, 0,
	0, 0, 103, 0, 104, 0, 105, 0, 0, 0,
	515, 0, 518, 99, 108, 106, 107, 110, 0, 0,
	241, 144, 241, 0, 0, 523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 523, 0, 0, 0, 0,
	144, 0, 0, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 144, 0, 0, 0, 535, 0, 0,
	0, 0, 135, 0, 540, 0, 0, 66, 48, 74,
	49, 75, 0, 0, 73, 0, 45, 546, 55, 144,
	144, 56, 46, 47, 0, 59, 60, 57, 0, 0,
	63, 64, 0, 65, 62, 58, 0, 0, 76, 61,
	144, 90, 91, 0, 144, 144, 77, 78, 0, 79,
	0, 80, 81, 0, 0, 0, 295, 296, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 72, 493, 89,
	88, 70, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 66, 237, 74, 238, 75, 144, 0,
	73, 0, 0, 0, 0, 0, 144, 0, 0, 0,
	0, 0, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 76, 144, 0, 90, 91, 144,
	0, 0, 77, 78, 0, 79, 144, 80, 81, 0,
	0, 0, 303, 0, 0, 0, 0, 144, 517, 0,
	0, 71, 0, 72, 0, 89, 88, 70, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 144, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 48, 74, 49, 75, 0, 144,
	73, 0, 45, 552, 461, 551, 550, 462, 46, 47,
	144, 59, 60, 57, 0, 0, 63, 64, 0, 65,
	62, 58, 0, 0, 76, 61, 0, 90, 91, 241,
	0, 0, 77, 78, 0, 79, 0, 80, 81, 0,
	0, 241, 457, 458, 0, 66, 237, 74, 238, 75,
	0, 71, 73, 72, 0, 89, 88, 70, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 0, 144, 76, 0, 0, 90,
	91, 0, 0, 0, 77, 78, 0, 79, 144, 80,
	81, 0, 0, 0, 303, 0, 0, 0, 144, 0,
	495, 0, 0, 71, 0, 72, 0, 89, 88, 70,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 0, 0, 0, 0, 144, 0, 144, 0, 0,
	0, 0, 66, 48, 74, 49, 75, 0, 0, 73,
	144, 45, 548, 461, 551, 550, 462, 46, 47, 0,
	59, 60, 57, 0, 0, 63, 64, 0, 65, 62,
	58, 0, 0, 76, 61, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 66, 48,
	74, 49, 75, 0, 0, 73, 0, 45, 448, 55,
	383, 382, 56, 46, 47, 0, 59, 60, 57, 0,
	0, 63, 64, 0, 65, 62, 58, 0, 0, 76,
	61, 0, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 0, 0, 0, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 48, 74, 49, 75, 0,
	0, 73, 0, 45, 380, 55, 383, 382, 56, 46,
	47, 0, 59, 60, 57, 0, 0, 63, 64, 0,
	65, 62, 58, 0, 0, 76, 61, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 0, 80, 81,
	0, 0, 0, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 72, 0, 89, 88, 70, 69,
	66, 48, 74, 49, 75, 0, 0, 73, 0, 45,
	520, 55, 0, 0, 56, 46, 47, 0, 59, 60,
	57, 389, 0, 63, 64, 0, 65, 62, 58, 0,
	0, 76, 61, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 66, 48, 74, 49,
	75, 0, 0, 73, 0, 45, 421, 55, 0, 0,
	56, 46, 47, 0, 59, 60, 57, 389, 0, 63,
	64, 0, 65, 62, 58, 0, 0, 76, 61, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 72, 0, 89, 88,
	70, 69, 66, 48, 74, 49, 75, 0, 0, 73,
	0, 45, 414, 55, 0, 0, 56, 46, 47, 0,
	59, 60, 57, 389, 0, 63, 64, 0, 65, 62,
	58, 0, 0, 76, 61, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 66, 48,
	74, 49, 75, 0, 0, 73, 0, 45, 554, 461,
	0, 0, 462, 46, 47, 0, 59, 60, 57, 0,
	0, 63, 64, 0, 65, 62, 58, 0, 0, 76,
	61, 0, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 0, 0, 0, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 48, 74, 49, 75, 0,
	0, 73, 0, 45, 533, 55, 0, 0, 56, 46,
	47, 0, 59, 60, 57, 0, 0, 63, 64, 0,
	65, 62, 58, 0, 0, 76, 61, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 0, 80, 81,
	0, 0, 0, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 72, 0, 89, 88, 70, 69,
	66, 48, 74, 49, 75, 0, 0, 73, 0, 45,
	512, 55, 0, 0, 56, 46, 47, 0, 59, 60,
	57, 0, 0, 63, 64, 0, 65, 62, 58, 0,
	0, 76, 61, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 66, 48, 74, 49,
	75, 0, 0, 73, 0, 45, 504, 55, 0, 0,
	56, 46, 47, 0, 59, 60, 57, 0, 0, 63,
	64, 0, 65, 62, 58, 0, 0, 76, 61, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 72, 0, 89, 88,
	70, 69, 66, 48, 74, 49, 75, 0, 0, 73,
	0, 45, 484, 55, 0, 0, 56, 46, 47, 0,
	59, 60, 57, 0, 0, 63, 64, 0, 65, 62,
	58, 0, 0, 76, 61, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 66, 48,
	74, 49, 75, 0, 0, 73, 0, 45, 463, 461,
	0, 0, 462, 46, 47, 0, 59, 60, 57, 0,
	0, 63, 64, 0, 65, 62, 58, 0, 0, 76,
	61, 0, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 0, 0, 0, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 48, 74, 49, 75, 0,
	0, 73, 0, 45, 456, 461, 0, 0, 462, 46,
	47, 0, 59, 60, 57, 0, 0, 63, 64, 0,
	65, 62, 58, 0, 0, 76, 61, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 0, 80, 81,
	0, 0, 0, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 72, 0, 89, 88, 70, 69,
	66, 48, 74, 49, 75, 0, 0, 73, 0, 45,
	450, 55, 0, 0, 56, 46, 47, 0, 59, 60,
	57, 0, 0, 63, 64, 0, 65, 62, 58, 0,
	0, 76, 61, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 66, 48, 74, 49,
	75, 0, 0, 73, 0, 45, 432, 55, 0, 0,
	56, 46, 47, 0, 59, 60, 57, 0, 0, 63,
	64, 0, 65, 62, 58, 0, 0, 76, 61, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 295, 296, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 72, 0, 89, 88,
	70, 69, 66, 48, 74, 49, 75, 0, 0, 73,
	0, 45, 424, 55, 0, 0, 56, 46, 47, 0,
	59, 60, 57, 0, 0, 63, 64, 0, 65, 62,
	58, 0, 0, 76, 61, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 66, 48,
	74, 49, 75, 0, 0, 73, 0, 45, 362, 55,
	0, 0, 56, 46, 47, 0, 59, 60, 57, 0,
	0, 63, 64, 0, 65, 62, 58, 0, 0, 76,
	61, 0, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 0, 0, 0, 295, 296, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 48, 74, 49, 75, 0,
	0, 73, 0, 45, 350, 55, 0, 0, 56, 46,
	47, 0, 59, 60, 57, 0, 0, 63, 64, 0,
	65, 62, 58, 0, 0, 76, 61, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 0, 80, 81,
	0, 0, 0, 295, 296, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 72, 0, 89, 88, 70, 69,
	66, 48, 74, 49, 75, 0, 0, 73, 0, 45,
	347, 55, 0, 0, 56, 46, 47, 0, 59, 60,
	57, 0, 0, 63, 64, 0, 65, 62, 58, 0,
	0, 76, 61, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 295,
	296, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 66, 48, 74, 49,
	75, 0, 0, 73, 0, 45, 0, 461, 0, 0,
	462, 46, 47, 0, 59, 60, 57, 0, 0, 63,
	64, 0, 65, 62, 58, 0, 0, 76, 61, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 72, 0, 89, 88,
	70, 69, 66, 48, 74, 49, 75, 0, 0, 73,
	0, 45, 0, 55, 0, 0, 56, 46, 47, 0,
	59, 60, 57, 0, 0, 63, 64, 0, 65, 62,
	58, 0, 0, 76, 61, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 66, 48,
	74, 49, 75, 323, 0, 73, 0, 45, 0, 55,
	0, 0, 56, 46, 47, 0, 59, 60, 57, 0,
	0, 63, 64, 0, 65, 62, 58, 0, 0, 76,
	61, 0, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 0, 0, 0, 0, 322, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 48, 74, 49, 75, 0,
	0, 73, 0, 45, 0, 55, 0, 0, 56, 46,
	47, 0, 59, 60, 57, 0, 0, 63, 64, 0,
	65, 62, 58, 0, 0, 76, 61, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 0, 80, 81,
	0, 0, 0, 303, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 72, 0, 89, 88, 70, 69,
	66, 48, 74, 49, 75, 0, 0, 73, 0, 45,
	0, 55, 0, 0, 56, 46, 47, 0, 59, 60,
	57, 0, 0, 63, 64, 0, 65, 62, 58, 0,
	0, 76, 61, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 66, 237, 74, 238,
	75, 0, 0, 73, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 303, 66, 140, 74, 141,
	75, 485, 0, 73, 71, 0, 72, 0, 89, 88,
	70, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 0, 0, 0, 303, 0, 0, 0, 0,
	0, 428, 0, 0, 71, 0, 72, 0, 89, 88,
	70, 69, 66, 140, 74, 141, 127, 0, 0, 73,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 90, 91, 0, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 66, 140,
	74, 141, 127, 407, 0, 73, 138, 0, 0, 0,
	262, 0, 139, 0, 89, 88, 70, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 90, 91, 0, 0, 131, 77, 78, 0,
	79, 0, 80, 81, 66, 140, 74, 141, 330, 0,
	0, 73, 138, 0, 0, 0, 262, 0, 139, 0,
	89, 88, 70, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 90, 91,
	0, 0, 329, 77, 78, 0, 79, 0, 80, 81,
	66, 319, 74, 141, 75, 0, 0, 73, 0, 0,
	0, 0, 71, 0, 139, 0, 89, 88, 70, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 303,
	66, 237, 74, 238, 75, 0, 0, 73, 71, 0,
	72, 314, 89, 88, 70, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 303,
	66, 140, 74, 141, 75, 313, 0, 73, 71, 0,
	72, 0, 89, 88, 70, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 90, 91, 0, 0, 0, 77,
	78, 0, 79, 0, 80, 81, 0, 0, 0, 303,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	72, 0, 89, 88, 70, 69, 66, 140, 74, 141,
	75, 0, 0, 73, 138, 0, 0, 0, 66, 237,
	74, 238, 75, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 76,
	80, 81, 90, 91, 0, 0, 0, 77, 78, 0,
	79, 0, 80, 81, 71, 0, 139, 0, 89, 88,
	70, 69, 0, 236, 0, 0, 71, 0, 72, 0,
	89, 88, 70, 69, 66, 140, 74, 141, 127, 0,
	0, 73, 138, 0, 0, 0, 66, 140, 74, 141,
	75, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 90, 91,
	0, 0, 0, 77, 78, 0, 79, 76, 80, 81,
	90, 91, 0, 0, 0, 77, 78, 0, 79, 0,
	80, 81, 262, 0, 139, 0, 89, 88, 70, 69,
	0, 0, 0, 0, 71, 0, 72, 0, 89, 88,
	70, 69, 66, 522, 74, 141, 75, 0, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 90, 91, 102, 0,
	0, 77, 78, 0, 79, 0, 80, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	71, 0, 72, 0, 89, 88, 70, 69, 111, 112,
	0, 0, 0, 0, 0, 100, 101, 0, 0, 0,
	103, 0, 104, 0, 105, 0, 102, 0, 111, 112,
	0, 99, 108, 106, 107, 100, 101, 0, 374, 0,
	103, 109, 104, 0, 105, 0, 0, 102, 98, 0,
	0, 99, 108, 106, 107, 0, 111, 112, 337, 0,
	0, 0, 0, 100, 101, 0, 0, 102, 103, 0,
	104, 0, 105, 113, 0, 0, 0, 111, 112, 99,
	108, 106, 107, 110, 100, 101, 0, 536, 0, 103,
	0, 104, 0, 105, 0, 0, 0, 111, 112, 332,
	99, 108, 106, 107, 100, 101, 0, 406, 0, 103,
	0, 104, 0, 105, 0, 0, 0, 111, 112, 0,
	99, 108, 106, 107, 100, 101, 0, 0, 0, 103,
	0, 104, 0, 105, 0, 0, 0, 111, 112, 0,
	99, 108, 106, 107, 100, 101, 0, 0, 0, 103,
	0, 104, 0, 105, 0, 0, 0, 0, 0, 0,
	99, 108, 106, 107,
}
var RubyPact = []int{

	-35, 1339, -1000, -1000, -1000, 16, -1000, -1000, -1000, 4172,
	-1000, -1000, -1000, -1000, 210, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11, -1000, 59, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 471, 447, 299, 269, 127,
	209, 246, 130, 212, 200, 3465, 3465, -1000, 4021, 3465,
	3465, 4021, 4021, 287, 251, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 253, -1000, 30, 3465, 3465, 4021,
	4021, 4021, -1000, -1000, -1000, -1000, -1000, -1000, 36, 448,
	-1000, -1000, -1000, -1000, -1000, 3465, 3465, 3465, 4021, 492,
	4021, 4021, -1000, 4021, 3465, 4021, 4021, 4021, 4021, 3465,
	4021, -1000, -1000, 4021, 3465, 4021, 4021, 3465, 3465, 3465,
	490, 191, 219, 180, 4021, 222, -1000, 3943, 30, 38,
	4021, 4021, 4021, 44, 358, 4213, -1000, 68, 24, -1000,
	4009, 50, 17, -1000, -1000, 3943, 4021, -1000, 3465, 3465,
	4021, 3465, 3465, 39, 3465, 3465, 23, 3465, 3465, 3465,
	18, 485, 483, 394, 274, 3267, 276, 4213, 355, 343,
	4213, 86, 276, 3465, 3465, 3465, 3465, 3815, 3765, 3943,
	3333, -1000, -1000, 394, 394, 4213, 4213, 4213, -1000, -1000,
	392, -1000, -1000, 394, 394, 394, 4213, 3719, 4213, 4213,
	3865, 4213, 394, 4213, 4213, 4213, 4213, 394, 4193, 3865,
	3865, 4213, 394, 4213, 131, 4144, 394, 394, 394, 30,
	-1000, 482, 347, 234, -1000, 164, 478, 477, -1000, 3135,
	299, 4213, 3069, 432, 4213, -1000, 4021, 3673, 142, 74,
	140, 100, -1000, -1000, -1000, 731, -11, 64, 1233, -1000,
	-1000, 1536, -1000, -1000, -1000, -1000, 474, 3931, 3003, -1000,
	470, 689, 4021, 378, 444, -17, 58, 394, 394, 4124,
	394, 394, -1000, -1000, -1000, 465, 394, 394, -1000, -1000,
	-1000, 462, 394, 394, 394, -1000, -1000, -1000, 443, 341,
	4, -8, 2079, -1000, -1000, -1000, -1000, 394, 386, 4021,
	-1000, -1000, 86, -1000, 329, 4021, 394, 394, 394, 394,
	334, 4213, -1000, 4021, -1000, 331, 314, 68, 4253, 3627,
	365, 394, -1000, -1000, 150, -1000, -1000, 38, 30, 3465,
	3943, 4213, 4021, 4213, 4213, -1000, 3931, 95, -1000, 2277,
	219, 234, 350, 4021, -1000, -1000, 2211, -1000, -1000, 2937,
	-1000, 30, -1000, 4213, 3561, 187, -1000, -1000, -1000, 54,
	4213, -1000, -1000, 2871, 110, -1000, -1000, 3267, 42, -1000,
	-1000, 89, -1000, -1000, 83, -1000, -1000, -1000, 4021, 4021,
	-1000, 452, 3465, -1000, 2013, 2805, -1000, -1000, -1000, 424,
	4213, 2739, 2673, 207, -1000, -1000, 4021, 276, -6, -1000,
	4213, -26, -1000, -28, -1000, -29, 3465, 4021, -1000, -1000,
	394, 330, 4213, 3465, -1000, 309, -1000, -1000, -1000, -1000,
	4213, -1000, 273, 2607, -1000, -1000, 3511, 4213, 433, 3465,
	419, 415, -1000, -1000, 405, 1642, -33, 82, 1860, -1000,
	3465, 1401, 1116, -1000, 3465, -1000, 394, 3267, -1000, 429,
	-1000, 2541, 3267, 316, 389, -1000, -1000, -1000, -1000, 394,
	-1000, 3465, 3465, -1000, -1000, -1000, 2475, 276, 3267, -1000,
	1718, -1000, 3865, -1000, 117, -1000, 394, 4213, -1000, 394,
	-1000, -1000, 2145, -1000, -1000, 4087, 4213, -1000, -1000, 394,
	-9, -1000, -1000, -1000, -1000, 4021, 3399, 394, 260, -1000,
	394, 3267, 3267, -1000, -1000, 3267, 371, 299, -1000, 231,
	237, 2409, -1000, 3267, 57, 4213, -1000, 4021, 4233, 25,
	-1000, 218, 1037, 4213, 4021, 394, 3267, -1000, -1000, 3267,
	-1000, -1000, -1000, -1000, 57, 4213, 3465, 4021, -1000, -1000,
	795, 3267, 1947, 1808, 2343, 404, 322, -1000, -1000, 420,
	3465, -1000, -1000, 416, -1000, -1000, -1000, 57, -1000, -1000,
	3465, -1000, 394, 3201, -1000, 57, 394, 3201, 3201, 3201,
}
var RubyPgo = []int{

	0, 0, 587, 586, 41, 129, 585, 584, 583, 1422,
	580, 3, 31, 579, 574, 34, 573, 565, 1119, 563,
	513, 816, 560, 559, 557, 555, 554, 553, 552, 550,
	542, 541, 8, 85, 540, 536, 18, 7, 535, 533,
	532, 14, 531, 530, 5, 529, 528, 527, 523, 522,
	521, 520, 519, 518, 517, 516, 6, 514, 4, 17,
	22, 1, 511, 12, 510, 15, 509, 23, 506, 9,
	500, 10, 16, 11, 13, 499, 450, 384, 566,
}
var RubyR1 = []int{

	0, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 77, 77, 78, 78, 56, 56, 56, 56, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 29, 29, 29, 29, 29,
	29, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 41, 14, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 22, 59, 59, 59, 59, 69,
	69, 67, 67, 67, 67, 67, 67, 67, 73, 73,
	73, 73, 73, 71, 71, 71, 23, 23, 23, 23,
	23, 23, 63, 63, 74, 74, 74, 32, 32, 32,
	32, 30, 30, 31, 34, 36, 36, 36, 15, 15,
	15, 15, 15, 15, 15, 16, 16, 72, 72, 35,
	35, 35, 35, 35, 35, 35, 9, 9, 33, 33,
	20, 20, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 2, 6,
	7, 76, 76, 76, 76, 76, 76, 76, 3, 3,
	3, 3, 64, 64, 70, 70, 70, 5, 5, 5,
	5, 60, 68, 68, 68, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 61, 61, 61, 61,
	57, 57, 57, 8, 17, 17, 11, 11, 11, 11,
	75, 75, 66, 66, 58, 58, 24, 24, 25, 26,
	26, 28, 28, 28, 27, 27, 27, 12, 42, 42,
	42, 65, 65, 65, 65, 65, 43, 43, 43, 43,
	43, 44, 44, 44, 44, 40, 39, 10, 38, 38,
	38, 38, 37, 37, 4,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 4, 5, 1, 4, 4, 2, 3,
	3, 4, 4, 5, 3, 4, 5, 2, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	6, 7, 6, 6, 4, 3, 7, 1, 5, 1,
	3, 0, 1, 1, 2, 4, 4, 5, 1, 1,
	4, 2, 5, 1, 3, 3, 5, 6, 7, 8,
	5, 6, 1, 3, 0, 1, 3, 1, 2, 3,
	2, 4, 6, 5, 4, 1, 2, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 9, 6, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 4, 3, 3, 3, 4,
	3, 3, 3, 4, 3, 3, 3, 4, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 1, 1,
	5, 0, 1, 1, 2, 4, 4, 5, 3, 5,
	5, 5, 3, 7, 3, 7, 8, 3, 4, 5,
	5, 3, 0, 1, 3, 4, 5, 3, 3, 3,
	3, 3, 5, 6, 5, 3, 4, 3, 3, 2,
	0, 2, 2, 3, 4, 6, 2, 3, 5, 4,
	1, 3, 0, 2, 1, 2, 2, 1, 1, 2,
	1, 1, 3, 3, 1, 3, 3, 5, 5, 5,
	3, 0, 2, 2, 2, 2, 5, 6, 5, 6,
	5, 4, 3, 3, 2, 4, 4, 2, 5, 7,
	4, 6, 4, 5, 3,
}
var RubyChk = []int{

	-1000, -62, 54, 55, 71, -1, 54, 55, 71, -18,
	-23, -30, -34, -31, -15, -16, -35, -13, -17, -24,
	-42, -38, -26, -27, -28, -41, -4, -25, -12, -19,
	-7, -3, -36, -21, -22, -8, -10, -46, -47, -48,
	-49, -14, -40, -39, -29, 14, 20, 21, 6, 8,
	-33, -20, -9, -45, -72, 16, 19, 25, 33, 23,
	24, 37, 32, 28, 29, 31, 5, -2, -6, 70,
	69, 63, 65, 12, 7, 9, 36, 44, 45, 47,
	49, 50, -50, -51, -52, -53, -54, -55, 68, 67,
	39, 40, 55, 54, 71, 16, 19, 23, 26, 57,
	41, 42, 4, 46, 48, 50, 59, 60, 58, 19,
	61, 34, 35, 51, 19, 41, 63, 52, 16, 19,
	57, 6, 4, -36, 4, 8, -36, 9, -59, -73,
	63, 43, 52, 11, -71, -18, -5, -21, 13, 65,
	6, 8, -33, -20, -9, 9, 63, 12, 43, 52,
	63, 43, 52, 11, 43, 52, 11, 43, 52, 43,
	11, 43, 11, -1, -1, -56, -69, -18, -1, -1,
	-18, -78, -69, 16, 19, 16, 19, -78, -78, 9,
	-57, -5, 65, -1, -1, -18, -18, -18, 6, 8,
	68, 6, 8, -1, -1, -1, -18, 6, -18, -18,
	-78, -18, -1, -18, -18, -18, -18, -1, -18, -78,
	-78, -18, -1, -18, -71, -18, -1, -1, -1, 6,
	-63, 57, -74, 9, -32, 6, 50, 60, -63, -56,
	41, -18, -56, -67, -18, -15, 60, 6, 8, -33,
	-20, -9, -5, 11, -5, -18, -4, -71, -18, -41,
	-12, -18, -12, 6, -33, -20, 50, 11, -56, -60,
	58, -78, 63, -67, -18, -4, -71, -1, -1, -18,
	-1, -1, 6, -33, -20, 50, -1, -1, 6, -33,
	-20, 50, -1, -1, -1, 6, -33, -20, 50, -72,
	6, 6, -56, 54, 55, 54, 55, -1, -66, 11,
	54, 54, -78, 54, -37, 38, -1, -1, -1, -1,
	-76, -18, -15, 60, 66, -64, -70, -21, -18, 6,
	-67, -1, 55, 10, -78, 6, 8, -73, -59, 43,
	9, -18, 56, -18, -18, 64, 11, 64, -5, -56,
	6, 11, -74, 43, 6, 6, -56, 15, -36, -56,
	15, 10, 11, -18, -78, 64, 64, 64, 6, -78,
	-18, -5, 15, -56, -68, 6, -60, -56, -18, 10,
	11, 64, 64, 64, 64, 6, 6, 6, 63, 63,
	15, -61, 18, 17, -56, -56, 15, 17, -11, 26,
	-18, -65, -65, -37, 15, 17, 38, -69, -78, 11,
	-18, -78, 11, -78, 11, -78, 4, 56, 10, -5,
	-1, -67, -18, 43, 15, -58, -11, -63, -32, 10,
	-18, 15, -58, -56, 15, -5, -78, -18, 60, 43,
	11, 60, 15, 58, 11, -56, -78, 64, -78, 43,
	43, -18, -18, 15, 18, 17, -1, -56, 15, -61,
	15, -56, -56, -75, 4, -36, 15, 54, 55, -1,
	-43, 16, 19, 15, 15, 17, -56, -69, -56, 64,
	-78, 66, -78, 66, -78, 66, -1, -18, 10, -1,
	15, -11, -56, 15, 15, 60, -18, -15, 6, -1,
	6, 6, 6, 66, 66, 60, -78, -1, 64, 64,
	-1, -56, -56, 15, 15, -56, 4, 11, 6, -1,
	-1, -56, 15, -56, -78, -18, -15, 60, -18, 6,
	15, -58, 6, -18, 63, -1, -56, 6, -36, -56,
	54, 54, 55, 15, -78, -18, 4, 56, 15, 10,
	-18, -56, -65, -65, -65, -1, -18, 64, 15, -44,
	18, 17, 15, -44, 15, -77, 11, -78, 11, 15,
	18, 17, -1, -65, 15, -78, -1, -65, -65, -65,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 0, 0, 0, 20, 21,
	22, 23, 24, 0, 0, 0, 0, 15, 257, 0,
	0, 13, 260, 264, 261, 258, 19, 25, 26, 27,
	28, 13, 13, 147, 75, 240, 0, 0, 0, 0,
	0, 0, 45, 46, 47, 48, 49, 50, 0, 0,
	198, 199, 5, 6, 7, 0, 0, 0, 0, 0,
	0, 0, 13, 0, 0, 0, 0, 0, 0, 0,
	0, 13, 13, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 134, 15, 0, 145, 15, -2, 78, 87,
	13, 0, 0, 0, 107, 118, 119, 33, 15, 13,
	20, 21, 22, 23, 24, 111, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 15, 0, 252, 256, 109, 0, 0,
	13, 0, 259, 0, 0, 0, 0, 201, 0, 111,
	0, 287, 13, 188, 189, 190, 191, 72, 168, 169,
	0, 166, 167, 227, 235, 270, 71, 80, 88, 90,
	0, 192, 193, 194, 195, 196, 197, 229, 0, 0,
	0, 294, 231, 89, 0, 123, 165, 228, 230, 84,
	15, 0, 132, 134, 135, 137, 0, 0, 15, 0,
	0, 15, 0, 0, 112, 113, 0, 20, 21, 22,
	23, 24, 79, 13, 121, 123, 0, 0, 148, 149,
	150, 159, 160, 172, 173, 174, 0, 13, 0, 15,
	222, 15, 13, 0, 123, 0, 0, 151, 161, 0,
	152, 162, 176, 177, 178, 0, 153, 163, 180, 181,
	182, 0, 154, 164, 155, 184, 185, 186, 0, 156,
	0, 0, 0, 15, 15, 16, 17, 18, 0, 0,
	271, 271, 0, 14, 0, 0, 265, 266, 262, 263,
	13, 202, 203, 0, 208, 13, 13, -2, 0, 20,
	0, 241, 242, 243, 15, 170, 171, 81, 82, 0,
	-2, 104, 0, 285, 286, 98, 0, 99, 85, 0,
	134, 0, 0, 0, 138, 140, 0, 141, 15, 0,
	144, 73, 13, 114, 0, 91, 94, 96, 175, 0,
	124, 125, 217, 0, 0, 223, 15, 13, 123, 77,
	13, 92, 95, 97, 93, 179, 183, 187, 0, 0,
	225, 0, 0, 15, 0, 0, 244, 15, 253, 15,
	110, 0, 0, 0, 290, 15, 0, 15, 0, 13,
	204, 0, 13, 0, 13, 0, 13, 0, 76, 83,
	86, 0, 267, 0, 126, 0, 254, 15, 136, 133,
	139, 130, 0, 0, 143, 74, 0, 120, 0, 0,
	0, 0, 218, 221, 0, 0, 0, 91, 0, 13,
	0, 0, 0, 226, 0, 15, 15, 239, 232, 0,
	234, 0, 246, 15, 0, 250, 268, 272, 273, 274,
	275, 0, 0, 269, 288, 15, 0, 15, 13, 200,
	0, 209, 0, 210, 0, 211, 212, 214, 105, 103,
	127, 255, 0, 131, 142, 0, 115, 116, 122, 100,
	0, 108, 224, 219, 220, 0, 0, 102, 0, 158,
	15, 237, 238, 233, 245, 247, 0, 0, 15, 15,
	0, 0, 291, 13, 292, 205, 206, 0, 0, 0,
	128, 0, 20, 117, 0, 101, 236, 15, 251, 249,
	271, 15, 15, 289, 293, 207, 13, 0, 129, 106,
	0, 248, 0, 0, 0, 11, 13, 157, 276, 0,
	0, 271, 278, 0, 280, 213, 12, 215, 13, 277,
	0, 271, 271, 284, 279, 216, 271, 282, 283, 281,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:214
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:216
		{
		}
	case 3:
		//line parser.y:218
		{
		}
	case 4:
		//line parser.y:220
		{
		}
	case 5:
		//line parser.y:222
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:224
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:226
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:232
		{
		}
	case 11:
		//line parser.y:234
		{
		}
	case 12:
		//line parser.y:235
		{
		}
	case 13:
		//line parser.y:237
		{
		}
	case 14:
		//line parser.y:238
		{
		}
	case 15:
		//line parser.y:241
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:243
		{
		}
	case 17:
		//line parser.y:245
		{
		}
	case 18:
		//line parser.y:247
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		//line parser.y:259
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 72:
		//line parser.y:262
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 73:
		//line parser.y:265
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 74:
		//line parser.y:272
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 75:
		//line parser.y:279
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 76:
		//line parser.y:283
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 77:
		//line parser.y:290
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 78:
		//line parser.y:297
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 79:
		//line parser.y:304
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 80:
		//line parser.y:311
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 81:
		//line parser.y:318
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 82:
		//line parser.y:326
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 83:
		//line parser.y:334
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 84:
		//line parser.y:342
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 85:
		//line parser.y:350
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 86:
		//line parser.y:358
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 87:
		//line parser.y:369
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 88:
		//line parser.y:376
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 89:
		//line parser.y:384
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 90:
		//line parser.y:392
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 91:
		//line parser.y:402
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 92:
		//line parser.y:410
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 93:
		//line parser.y:418
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 94:
		//line parser.y:426
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 95:
		//line parser.y:434
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 96:
		//line parser.y:442
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 97:
		//line parser.y:450
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 98:
		//line parser.y:458
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 99:
		//line parser.y:466
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:476
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 101:
		//line parser.y:484
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 102:
		//line parser.y:495
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 103:
		//line parser.y:503
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 104:
		//line parser.y:513
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 105:
		//line parser.y:523
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 106:
		//line parser.y:525
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 107:
		//line parser.y:527
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 108:
		//line parser.y:529
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 109:
		//line parser.y:532
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 110:
		//line parser.y:534
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 111:
		//line parser.y:536
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 112:
		//line parser.y:538
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:540
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:542
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 115:
		//line parser.y:549
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:551
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:553
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 118:
		//line parser.y:562
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:564
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:566
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:568
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:570
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 123:
		//line parser.y:573
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:575
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:577
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:581
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 127:
		//line parser.y:589
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 128:
		//line parser.y:598
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:607
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:617
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:625
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 132:
		//line parser.y:636
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 133:
		//line parser.y:638
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 134:
		//line parser.y:640
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 135:
		//line parser.y:642
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:644
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:647
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 138:
		//line parser.y:649
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 139:
		//line parser.y:651
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 140:
		//line parser.y:653
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 141:
		//line parser.y:657
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name: RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 142:
		//line parser.y:664
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 143:
		//line parser.y:674
		{
			if RubyS[Rubypt-3].operator != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + RubyS[Rubypt-3].operator + ")")
			}

			RubyVAL.genericValue = ast.EigenClass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 144:
		//line parser.y:686
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 145:
		//line parser.y:695
		{
			RubyVAL.genericValue = ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
		}
	case 146:
		//line parser.y:702
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(string)}, "")
			pieces := strings.Split(fullName, "::")

			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.Join(pieces[:len(pieces)-1], "::"),
				IsGlobalNamespace: false,
			}
		}
	case 147:
		//line parser.y:714
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(string), "::")
			namespace := strings.Join(pieces[:len(pieces)-1], "::")
			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.TrimPrefix(namespace, "::"),
				IsGlobalNamespace: true,
			}
		}
	case 148:
		//line parser.y:725
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 149:
		//line parser.y:732
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 150:
		//line parser.y:736
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 151:
		//line parser.y:740
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 152:
		//line parser.y:747
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 153:
		//line parser.y:754
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 154:
		//line parser.y:761
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 155:
		//line parser.y:769
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 156:
		//line parser.y:776
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 157:
		//line parser.y:784
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 158:
		//line parser.y:799
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 159:
		//line parser.y:805
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 160:
		//line parser.y:812
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 161:
		//line parser.y:816
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:823
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 163:
		//line parser.y:830
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 164:
		//line parser.y:837
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 165:
		//line parser.y:844
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 166:
		//line parser.y:847
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 167:
		//line parser.y:849
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 168:
		//line parser.y:852
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:854
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:857
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 171:
		//line parser.y:859
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 172:
		//line parser.y:862
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 173:
		//line parser.y:864
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 174:
		//line parser.y:866
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 175:
		//line parser.y:868
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 176:
		//line parser.y:871
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:873
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 178:
		//line parser.y:875
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 179:
		//line parser.y:877
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 180:
		//line parser.y:880
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:882
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 182:
		//line parser.y:884
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 183:
		//line parser.y:886
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 184:
		//line parser.y:889
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 185:
		//line parser.y:891
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 186:
		//line parser.y:893
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 187:
		//line parser.y:895
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 188:
		//line parser.y:898
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:899
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:900
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 191:
		//line parser.y:901
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 192:
		//line parser.y:904
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 193:
		//line parser.y:913
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 194:
		//line parser.y:922
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 195:
		//line parser.y:931
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:940
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 197:
		//line parser.y:949
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 198:
		//line parser.y:957
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 199:
		//line parser.y:958
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 200:
		//line parser.y:960
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 201:
		//line parser.y:962
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 202:
		//line parser.y:964
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 203:
		//line parser.y:966
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 204:
		//line parser.y:968
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 205:
		//line parser.y:975
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 206:
		//line parser.y:977
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:979
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 208:
		//line parser.y:987
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 209:
		//line parser.y:989
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 210:
		//line parser.y:997
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 211:
		//line parser.y:1005
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 212:
		//line parser.y:1008
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 213:
		//line parser.y:1015
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 214:
		//line parser.y:1023
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 215:
		//line parser.y:1030
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 216:
		//line parser.y:1037
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 217:
		//line parser.y:1045
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 218:
		//line parser.y:1047
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 219:
		//line parser.y:1054
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 220:
		//line parser.y:1058
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 221:
		//line parser.y:1061
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 222:
		//line parser.y:1063
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 223:
		//line parser.y:1065
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1067
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1070
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 226:
		//line parser.y:1077
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 227:
		//line parser.y:1085
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 228:
		//line parser.y:1092
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 229:
		//line parser.y:1099
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 230:
		//line parser.y:1106
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 231:
		//line parser.y:1113
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 232:
		//line parser.y:1120
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 233:
		//line parser.y:1127
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 234:
		//line parser.y:1135
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 235:
		//line parser.y:1142
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 236:
		//line parser.y:1151
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 237:
		//line parser.y:1158
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 238:
		//line parser.y:1165
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 239:
		//line parser.y:1172
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 240:
		//line parser.y:1179
		{
		}
	case 241:
		//line parser.y:1180
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 242:
		//line parser.y:1181
		{
		}
	case 243:
		//line parser.y:1184
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 244:
		//line parser.y:1187
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 245:
		//line parser.y:1194
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 246:
		//line parser.y:1203
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 247:
		//line parser.y:1205
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 248:
		//line parser.y:1218
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 249:
		//line parser.y:1237
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 250:
		//line parser.y:1251
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 251:
		//line parser.y:1253
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 252:
		//line parser.y:1256
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 253:
		//line parser.y:1258
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1261
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 255:
		//line parser.y:1263
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 256:
		//line parser.y:1266
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 257:
		//line parser.y:1273
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 258:
		//line parser.y:1275
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 259:
		//line parser.y:1278
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 260:
		//line parser.y:1286
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 261:
		//line parser.y:1290
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 262:
		//line parser.y:1292
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 263:
		//line parser.y:1294
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 264:
		//line parser.y:1298
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 265:
		//line parser.y:1300
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 266:
		//line parser.y:1302
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 267:
		//line parser.y:1306
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 268:
		//line parser.y:1315
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 269:
		//line parser.y:1317
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 270:
		//line parser.y:1319
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 271:
		//line parser.y:1322
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 272:
		//line parser.y:1324
		{
		}
	case 273:
		//line parser.y:1326
		{
		}
	case 274:
		//line parser.y:1328
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 275:
		//line parser.y:1330
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 276:
		//line parser.y:1333
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 277:
		//line parser.y:1340
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 278:
		//line parser.y:1348
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 279:
		//line parser.y:1355
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 280:
		//line parser.y:1363
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 281:
		//line parser.y:1371
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 282:
		//line parser.y:1378
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 283:
		//line parser.y:1385
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 284:
		//line parser.y:1392
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 285:
		//line parser.y:1400
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 286:
		//line parser.y:1403
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 287:
		//line parser.y:1405
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 288:
		//line parser.y:1408
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 289:
		//line parser.y:1410
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 290:
		//line parser.y:1412
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 291:
		//line parser.y:1414
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 292:
		//line parser.y:1417
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 293:
		//line parser.y:1419
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 294:
		//line parser.y:1421
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

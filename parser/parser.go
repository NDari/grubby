//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	symbolSlice     []ast.Symbol
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CONSTANT = 57351
const NAMESPACED_CAPITAL_REF = 57352
const LPAREN = 57353
const RPAREN = 57354
const COMMA = 57355
const NamespacedModule = 57356
const ProcArg = 57357
const DO = 57358
const DEF = 57359
const END = 57360
const IF = 57361
const ELSE = 57362
const ELSIF = 57363
const UNLESS = 57364
const CLASS = 57365
const MODULE = 57366
const FOR = 57367
const WHILE = 57368
const UNTIL = 57369
const BEGIN = 57370
const RESCUE = 57371
const ENSURE = 57372
const BREAK = 57373
const NEXT = 57374
const REDO = 57375
const RETRY = 57376
const RETURN = 57377
const YIELD = 57378
const AND = 57379
const OR = 57380
const LAMBDA = 57381
const CASE = 57382
const WHEN = 57383
const ALIAS = 57384
const SELF = 57385
const NIL = 57386
const PUBLIC = 57387
const PROTECTED = 57388
const PRIVATE = 57389
const LESSTHAN = 57390
const GREATERTHAN = 57391
const EQUALTO = 57392
const BANG = 57393
const COMPLEMENT = 57394
const BINARY_PLUS = 57395
const UNARY_PLUS = 57396
const BINARY_MINUS = 57397
const UNARY_MINUS = 57398
const STAR = 57399
const RANGE = 57400
const OR_EQUALS = 57401
const WHITESPACE = 57402
const NEWLINE = 57403
const SEMICOLON = 57404
const COLON = 57405
const DOT = 57406
const PIPE = 57407
const SLASH = 57408
const AMPERSAND = 57409
const QUESTIONMARK = 57410
const CARET = 57411
const LBRACKET = 57412
const RBRACKET = 57413
const LBRACE = 57414
const RBRACE = 57415
const DOLLARSIGN = 57416
const ATSIGN = 57417
const FILE_CONST_REF = 57418
const LINE_CONST_REF = 57419
const EOF = 57420

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"PUBLIC",
	"PROTECTED",
	"PRIVATE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1762

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 138,
	12, 118,
	13, 118,
	-2, 247,
	-1, 341,
	4, 21,
	37, 21,
	38, 21,
	48, 21,
	49, 21,
	53, 21,
	55, 21,
	64, 21,
	65, 21,
	66, 21,
	67, 21,
	-2, 118,
	-1, 352,
	12, 118,
	13, 118,
	-2, 247,
	-1, 391,
	4, 34,
	37, 34,
	38, 34,
	49, 34,
	53, 34,
	55, 34,
	61, 13,
	64, 34,
	65, 34,
	66, 34,
	67, 34,
	73, 13,
	-2, 15,
}

const RubyNprod = 311
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4385

var RubyAct = []int{

	318, 438, 5, 574, 180, 439, 404, 246, 325, 140,
	151, 250, 58, 25, 248, 141, 139, 146, 147, 26,
	390, 2, 3, 395, 104, 306, 359, 105, 125, 380,
	299, 106, 28, 324, 324, 293, 324, 324, 4, 198,
	273, 213, 280, 359, 214, 550, 518, 324, 516, 500,
	126, 75, 183, 74, 83, 184, 82, 352, 324, 498,
	177, 178, 147, 549, 188, 189, 102, 101, 496, 359,
	402, 192, 264, 165, 207, 147, 309, 161, 159, 161,
	159, 302, 414, 103, 396, 85, 296, 208, 209, 99,
	100, 276, 54, 164, 97, 206, 351, 86, 87, 97,
	88, 381, 89, 90, 97, 218, 219, 220, 14, 97,
	215, 401, 200, 201, 227, 164, 80, 162, 148, 232,
	98, 97, 77, 76, 237, 238, 163, 358, 242, 243,
	244, 207, 254, 562, 460, 130, 543, 160, 324, 160,
	455, 255, 467, 158, 240, 155, 466, 251, 436, 262,
	128, 263, 249, 129, 260, 185, 253, 269, 185, 185,
	267, 150, 266, 288, 289, 367, 291, 292, 279, 297,
	298, 257, 303, 304, 305, 284, 270, 272, 287, 125,
	286, 185, 185, 185, 161, 159, 459, 171, 310, 324,
	127, 324, 456, 168, 327, 328, 329, 330, 252, 124,
	185, 126, 185, 185, 167, 185, 343, 185, 185, 185,
	185, 176, 185, 336, 326, 185, 171, 174, 185, 185,
	342, 251, 123, 456, 162, 172, 249, 320, 185, 455,
	253, 155, 349, 427, 324, 185, 185, 185, 274, 350,
	425, 165, 104, 78, 160, 105, 155, 150, 175, 106,
	166, 185, 155, 185, 173, 361, 251, 185, 423, 564,
	294, 164, 150, 300, 365, 253, 104, 307, 150, 105,
	412, 176, 252, 106, 104, 104, 155, 105, 105, 247,
	104, 106, 106, 105, 557, 558, 364, 106, 332, 170,
	251, 104, 150, 132, 105, 155, 185, 155, 106, 253,
	267, 133, 266, 131, 277, 504, 377, 252, 314, 315,
	491, 335, 492, 150, 530, 185, 556, 322, 185, 417,
	548, 418, 321, 531, 204, 411, 168, 185, 185, 442,
	364, 420, 416, 419, 409, 169, 410, 563, 510, 506,
	99, 366, 419, 195, 161, 412, 196, 111, 412, 412,
	412, 421, 433, 581, 589, 331, 586, 585, 193, 104,
	432, 194, 105, 430, 264, 118, 106, 199, 434, 197,
	185, 440, 107, 447, 185, 185, 441, 368, 445, 553,
	120, 121, 584, 443, 586, 585, 450, 393, 264, 454,
	347, 109, 110, 348, 457, 532, 112, 515, 113, 514,
	114, 122, 376, 377, 400, 415, 473, 108, 117, 115,
	116, 119, 399, 185, 476, 486, 486, 481, 527, 185,
	472, 471, 136, 82, 494, 202, 398, 135, 470, 502,
	472, 471, 136, 82, 155, 136, 82, 505, 216, 185,
	388, 217, 382, 370, 507, 155, 369, 368, 185, 363,
	150, 312, 185, 507, 311, 245, 513, 222, 580, 333,
	185, 150, 512, 480, 339, 387, 319, 338, 521, 1,
	205, 155, 524, 96, 95, 94, 93, 92, 91, 44,
	111, 43, 42, 41, 57, 487, 20, 453, 46, 533,
	534, 191, 55, 47, 185, 185, 21, 16, 12, 13,
	11, 48, 24, 23, 22, 27, 19, 203, 541, 10,
	545, 547, 185, 120, 121, 38, 33, 18, 15, 45,
	32, 551, 185, 17, 109, 110, 31, 30, 40, 112,
	39, 113, 34, 114, 29, 35, 79, 225, 0, 355,
	108, 117, 115, 116, 155, 156, 234, 235, 0, 0,
	0, 507, 0, 507, 0, 186, 0, 0, 186, 186,
	453, 0, 570, 0, 0, 0, 0, 0, 486, 486,
	486, 0, 578, 0, 281, 0, 587, 0, 0, 0,
	0, 186, 186, 186, 0, 0, 591, 0, 0, 486,
	155, 0, 185, 486, 486, 486, 0, 0, 0, 0,
	186, 0, 186, 186, 0, 186, 540, 186, 186, 186,
	186, 0, 186, 0, 0, 186, 323, 0, 186, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 156, 0, 346, 0, 186, 186, 186, 275, 567,
	568, 569, 185, 0, 0, 0, 156, 0, 0, 0,
	0, 186, 156, 186, 0, 185, 0, 186, 0, 588,
	295, 0, 0, 301, 0, 0, 0, 308, 0, 592,
	593, 0, 0, 0, 594, 0, 156, 0, 0, 0,
	0, 0, 0, 75, 153, 74, 83, 154, 82, 138,
	378, 0, 0, 158, 147, 156, 186, 156, 0, 0,
	0, 0, 0, 383, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 85, 186, 0,
	37, 99, 100, 0, 0, 0, 0, 186, 186, 86,
	87, 0, 88, 0, 89, 90, 0, 0, 0, 0,
	0, 429, 0, 0, 0, 111, 0, 0, 282, 0,
	148, 0, 98, 97, 77, 76, 0, 0, 0, 422,
	0, 0, 0, 0, 424, 426, 0, 0, 0, 0,
	186, 0, 0, 152, 186, 186, 0, 0, 120, 121,
	0, 0, 0, 152, 0, 0, 152, 152, 0, 109,
	110, 0, 0, 0, 112, 0, 113, 0, 114, 122,
	0, 0, 0, 451, 0, 108, 117, 115, 116, 152,
	152, 152, 465, 186, 0, 461, 0, 463, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	152, 152, 0, 152, 156, 152, 152, 152, 152, 186,
	152, 0, 0, 152, 0, 156, 152, 152, 186, 497,
	0, 499, 186, 501, 225, 0, 152, 0, 0, 152,
	186, 0, 0, 152, 152, 152, 0, 0, 0, 0,
	0, 156, 0, 0, 152, 0, 0, 0, 0, 152,
	152, 152, 0, 0, 0, 152, 0, 0, 0, 0,
	519, 0, 520, 0, 186, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 0, 0,
	0, 0, 186, 75, 341, 74, 83, 184, 82, 84,
	0, 538, 186, 152, 152, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 156, 0, 152, 85, 9, 0,
	0, 99, 100, 0, 0, 152, 152, 0, 0, 86,
	87, 0, 88, 560, 89, 90, 0, 0, 0, 324,
	0, 0, 111, 280, 0, 0, 0, 0, 80, 0,
	81, 337, 98, 97, 77, 76, 0, 225, 0, 0,
	156, 0, 186, 0, 0, 0, 0, 582, 152, 0,
	0, 149, 391, 152, 0, 120, 121, 0, 0, 590,
	0, 181, 0, 0, 190, 181, 109, 110, 0, 0,
	0, 112, 0, 113, 0, 114, 0, 0, 0, 0,
	0, 0, 108, 117, 115, 116, 119, 210, 211, 212,
	0, 152, 186, 0, 0, 0, 0, 152, 0, 0,
	0, 0, 0, 0, 0, 186, 221, 0, 223, 224,
	0, 226, 152, 228, 229, 230, 231, 391, 233, 0,
	0, 236, 0, 152, 239, 241, 152, 0, 0, 0,
	152, 0, 111, 0, 258, 0, 0, 261, 152, 0,
	0, 265, 268, 271, 0, 0, 0, 0, 0, 152,
	0, 0, 149, 0, 0, 0, 0, 283, 261, 285,
	0, 0, 0, 290, 0, 120, 121, 0, 0, 0,
	0, 0, 152, 152, 0, 0, 109, 110, 0, 0,
	0, 112, 149, 113, 0, 114, 122, 0, 0, 0,
	152, 0, 108, 117, 115, 116, 0, 0, 0, 394,
	152, 334, 340, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 353, 152, 0, 354, 0, 56, 0, 0, 0,
	0, 0, 0, 356, 357, 0, 0, 0, 0, 75,
	153, 74, 83, 154, 82, 138, 0, 0, 0, 158,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	152, 0, 0, 85, 0, 0, 384, 99, 100, 157,
	340, 392, 0, 0, 143, 86, 87, 0, 88, 187,
	89, 90, 187, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 0, 148, 0, 98, 97,
	77, 76, 0, 0, 0, 187, 187, 187, 0, 413,
	152, 0, 0, 0, 0, 181, 0, 0, 0, 0,
	0, 0, 0, 152, 187, 0, 187, 187, 0, 187,
	149, 187, 187, 187, 187, 431, 187, 0, 0, 187,
	0, 261, 187, 187, 435, 0, 0, 0, 384, 0,
	0, 0, 187, 0, 0, 157, 444, 0, 0, 187,
	187, 187, 0, 0, 0, 0, 0, 452, 0, 0,
	157, 0, 0, 0, 0, 187, 157, 187, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	468, 469, 0, 0, 313, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 181, 0,
	0, 75, 183, 74, 83, 184, 82, 84, 503, 157,
	187, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	452, 0, 187, 0, 36, 85, 0, 0, 0, 99,
	100, 187, 187, 0, 0, 0, 179, 86, 87, 0,
	88, 0, 89, 90, 0, 0, 0, 324, 0, 0,
	0, 280, 0, 0, 0, 0, 80, 0, 81, 0,
	98, 97, 77, 76, 0, 0, 539, 0, 542, 0,
	0, 0, 0, 0, 187, 134, 137, 0, 187, 187,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	182, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 0, 259, 182, 182, 182, 0, 187, 565, 0,
	0, 0, 278, 187, 0, 0, 0, 0, 0, 0,
	0, 571, 182, 0, 182, 182, 0, 182, 157, 182,
	182, 182, 182, 187, 182, 0, 0, 182, 0, 157,
	182, 182, 187, 0, 0, 0, 187, 111, 0, 0,
	182, 0, 0, 0, 187, 0, 0, 182, 182, 182,
	0, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 182, 0, 0, 0, 182,
	120, 121, 0, 0, 0, 0, 0, 0, 187, 187,
	0, 109, 110, 0, 0, 0, 112, 0, 113, 0,
	114, 122, 0, 0, 0, 0, 187, 108, 117, 115,
	116, 362, 0, 0, 379, 0, 187, 0, 182, 0,
	371, 0, 0, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 157, 0,
	182, 0, 0, 0, 386, 0, 389, 0, 0, 182,
	182, 0, 0, 0, 0, 75, 153, 74, 83, 154,
	82, 138, 0, 145, 0, 158, 147, 0, 0, 0,
	0, 0, 373, 0, 0, 0, 0, 0, 0, 407,
	408, 0, 0, 0, 157, 0, 187, 0, 0, 85,
	0, 0, 182, 99, 100, 0, 182, 182, 0, 0,
	143, 86, 87, 0, 88, 0, 89, 90, 0, 144,
	0, 389, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 148, 0, 98, 97, 77, 76, 0, 0,
	0, 0, 0, 0, 0, 182, 187, 0, 448, 0,
	0, 182, 75, 153, 74, 83, 154, 82, 84, 187,
	0, 0, 158, 0, 0, 462, 464, 0, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 474, 0, 0, 182, 478, 85, 479, 0, 0,
	99, 100, 182, 493, 0, 495, 0, 0, 86, 87,
	0, 88, 0, 89, 90, 0, 0, 0, 324, 0,
	0, 0, 0, 0, 0, 508, 0, 80, 0, 81,
	509, 98, 97, 77, 76, 0, 182, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 482, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 525, 526, 0,
	0, 0, 0, 0, 182, 529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 535, 0, 537,
	0, 0, 0, 0, 75, 52, 74, 83, 53, 82,
	84, 0, 0, 0, 0, 0, 49, 577, 488, 576,
	575, 489, 50, 51, 0, 63, 64, 61, 0, 552,
	67, 68, 0, 69, 66, 62, 0, 555, 85, 65,
	0, 70, 99, 100, 71, 73, 72, 0, 0, 0,
	86, 87, 0, 88, 182, 89, 90, 0, 566, 0,
	484, 485, 407, 408, 0, 0, 0, 0, 0, 80,
	0, 81, 0, 98, 97, 77, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 0, 0, 0,
	0, 0, 0, 75, 52, 74, 83, 53, 82, 84,
	0, 0, 0, 0, 182, 49, 573, 488, 576, 575,
	489, 50, 51, 0, 63, 64, 61, 182, 0, 67,
	68, 0, 69, 66, 62, 0, 0, 85, 65, 0,
	70, 99, 100, 71, 73, 72, 0, 0, 0, 86,
	87, 0, 88, 0, 89, 90, 0, 0, 0, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	81, 0, 98, 97, 77, 76, 75, 52, 74, 83,
	53, 82, 84, 0, 0, 0, 0, 0, 49, 475,
	59, 406, 405, 60, 50, 51, 0, 63, 64, 61,
	0, 0, 67, 68, 0, 69, 66, 62, 0, 0,
	85, 65, 0, 70, 99, 100, 71, 73, 72, 0,
	0, 0, 86, 87, 0, 88, 0, 89, 90, 0,
	0, 0, 316, 317, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 81, 0, 98, 97, 77, 76, 75,
	52, 74, 83, 53, 82, 84, 0, 0, 0, 0,
	0, 49, 403, 59, 406, 405, 60, 50, 51, 0,
	63, 64, 61, 0, 0, 67, 68, 0, 69, 66,
	62, 0, 0, 85, 65, 0, 70, 99, 100, 71,
	73, 72, 0, 0, 0, 86, 87, 0, 88, 0,
	89, 90, 0, 0, 0, 316, 317, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 81, 0, 98, 97,
	77, 76, 75, 52, 74, 83, 53, 82, 84, 0,
	0, 0, 0, 0, 49, 546, 59, 0, 0, 60,
	50, 51, 0, 63, 64, 61, 412, 0, 67, 68,
	0, 69, 66, 62, 0, 0, 85, 65, 0, 70,
	99, 100, 71, 73, 72, 0, 0, 0, 86, 87,
	0, 88, 0, 89, 90, 0, 0, 0, 316, 317,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 81,
	0, 98, 97, 77, 76, 75, 52, 74, 83, 53,
	82, 84, 0, 0, 0, 0, 0, 49, 544, 59,
	0, 0, 60, 50, 51, 0, 63, 64, 61, 412,
	0, 67, 68, 0, 69, 66, 62, 0, 0, 85,
	65, 0, 70, 99, 100, 71, 73, 72, 0, 0,
	0, 86, 87, 0, 88, 0, 89, 90, 0, 0,
	0, 316, 317, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 81, 0, 98, 97, 77, 76, 75, 52,
	74, 83, 53, 82, 84, 0, 0, 0, 0, 0,
	49, 446, 59, 0, 0, 60, 50, 51, 0, 63,
	64, 61, 412, 0, 67, 68, 0, 69, 66, 62,
	0, 0, 85, 65, 0, 70, 99, 100, 71, 73,
	72, 0, 0, 0, 86, 87, 0, 88, 0, 89,
	90, 0, 0, 0, 316, 317, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 81, 0, 98, 97, 77,
	76, 75, 52, 74, 83, 53, 82, 84, 0, 0,
	0, 0, 0, 49, 437, 59, 0, 0, 60, 50,
	51, 0, 63, 64, 61, 412, 0, 67, 68, 0,
	69, 66, 62, 0, 0, 85, 65, 0, 70, 99,
	100, 71, 73, 72, 0, 0, 0, 86, 87, 0,
	88, 0, 89, 90, 0, 0, 0, 316, 317, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 81, 0,
	98, 97, 77, 76, 75, 52, 74, 83, 53, 82,
	84, 0, 0, 0, 0, 0, 49, 0, 59, 0,
	0, 60, 50, 51, 0, 63, 64, 61, 0, 0,
	67, 68, 0, 69, 66, 62, 0, 0, 85, 65,
	0, 70, 99, 100, 71, 73, 72, 0, 0, 0,
	86, 87, 0, 88, 0, 89, 90, 0, 0, 0,
	6, 7, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 81, 0, 98, 97, 77, 76, 8, 75, 52,
	74, 83, 53, 82, 84, 0, 0, 0, 0, 0,
	49, 579, 488, 0, 0, 489, 50, 51, 0, 63,
	64, 61, 0, 0, 67, 68, 0, 69, 66, 62,
	0, 0, 85, 65, 0, 70, 99, 100, 71, 73,
	72, 0, 0, 0, 86, 87, 0, 88, 0, 89,
	90, 0, 0, 0, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 81, 0, 98, 97, 77,
	76, 75, 52, 74, 83, 53, 82, 84, 0, 0,
	0, 0, 0, 49, 559, 59, 0, 0, 60, 50,
	51, 0, 63, 64, 61, 0, 0, 67, 68, 0,
	69, 66, 62, 0, 0, 85, 65, 0, 70, 99,
	100, 71, 73, 72, 0, 0, 0, 86, 87, 0,
	88, 0, 89, 90, 0, 0, 0, 316, 317, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 81, 0,
	98, 97, 77, 76, 75, 52, 74, 83, 53, 82,
	84, 0, 0, 0, 0, 0, 49, 536, 59, 0,
	0, 60, 50, 51, 0, 63, 64, 61, 0, 0,
	67, 68, 0, 69, 66, 62, 0, 0, 85, 65,
	0, 70, 99, 100, 71, 73, 72, 0, 0, 0,
	86, 87, 0, 88, 0, 89, 90, 0, 0, 0,
	316, 317, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 81, 0, 98, 97, 77, 76, 75, 52, 74,
	83, 53, 82, 84, 0, 0, 0, 0, 0, 49,
	528, 59, 0, 0, 60, 50, 51, 0, 63, 64,
	61, 0, 0, 67, 68, 0, 69, 66, 62, 0,
	0, 85, 65, 0, 70, 99, 100, 71, 73, 72,
	0, 0, 0, 86, 87, 0, 88, 0, 89, 90,
	0, 0, 0, 316, 317, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 81, 0, 98, 97, 77, 76,
	75, 52, 74, 83, 53, 82, 84, 0, 0, 0,
	0, 0, 49, 0, 59, 0, 0, 60, 50, 51,
	0, 63, 64, 61, 0, 0, 67, 68, 0, 69,
	66, 62, 0, 0, 85, 65, 0, 70, 99, 100,
	71, 73, 72, 0, 0, 0, 86, 87, 0, 88,
	0, 89, 90, 0, 0, 0, 316, 317, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 81, 517, 98,
	97, 77, 76, 75, 52, 74, 83, 53, 82, 84,
	0, 0, 0, 0, 0, 49, 511, 59, 0, 0,
	60, 50, 51, 0, 63, 64, 61, 0, 0, 67,
	68, 0, 69, 66, 62, 0, 0, 85, 65, 0,
	70, 99, 100, 71, 73, 72, 0, 0, 0, 86,
	87, 0, 88, 0, 89, 90, 0, 0, 0, 316,
	317, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	81, 0, 98, 97, 77, 76, 75, 52, 74, 83,
	53, 82, 84, 0, 0, 0, 0, 0, 49, 490,
	488, 0, 0, 489, 50, 51, 0, 63, 64, 61,
	0, 0, 67, 68, 0, 69, 66, 62, 0, 0,
	85, 65, 0, 70, 99, 100, 71, 73, 72, 0,
	0, 0, 86, 87, 0, 88, 0, 89, 90, 0,
	0, 0, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 81, 0, 98, 97, 77, 76, 75,
	52, 74, 83, 53, 82, 84, 0, 0, 0, 0,
	0, 49, 483, 488, 0, 0, 489, 50, 51, 0,
	63, 64, 61, 0, 0, 67, 68, 0, 69, 66,
	62, 0, 0, 85, 65, 0, 70, 99, 100, 71,
	73, 72, 0, 0, 0, 86, 87, 0, 88, 0,
	89, 90, 0, 0, 0, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 81, 0, 98, 97,
	77, 76, 75, 52, 74, 83, 53, 82, 84, 0,
	0, 0, 0, 0, 49, 477, 59, 0, 0, 60,
	50, 51, 0, 63, 64, 61, 0, 0, 67, 68,
	0, 69, 66, 62, 0, 0, 85, 65, 0, 70,
	99, 100, 71, 73, 72, 0, 0, 0, 86, 87,
	0, 88, 0, 89, 90, 0, 0, 0, 316, 317,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 81,
	0, 98, 97, 77, 76, 75, 52, 74, 83, 53,
	82, 84, 0, 0, 0, 0, 0, 49, 458, 59,
	0, 0, 60, 50, 51, 0, 63, 64, 61, 0,
	0, 67, 68, 0, 69, 66, 62, 0, 0, 85,
	65, 0, 70, 99, 100, 71, 73, 72, 0, 0,
	0, 86, 87, 0, 88, 0, 89, 90, 0, 0,
	0, 316, 317, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 81, 0, 98, 97, 77, 76, 75, 52,
	74, 83, 53, 82, 84, 0, 0, 0, 0, 0,
	49, 449, 59, 0, 0, 60, 50, 51, 0, 63,
	64, 61, 0, 0, 67, 68, 0, 69, 66, 62,
	0, 0, 85, 65, 0, 70, 99, 100, 71, 73,
	72, 0, 0, 0, 86, 87, 0, 88, 0, 89,
	90, 0, 0, 0, 316, 317, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 81, 0, 98, 97, 77,
	76, 75, 52, 74, 83, 53, 82, 84, 0, 0,
	0, 0, 0, 49, 385, 59, 0, 0, 60, 50,
	51, 0, 63, 64, 61, 0, 0, 67, 68, 0,
	69, 66, 62, 0, 0, 85, 65, 0, 70, 99,
	100, 71, 73, 72, 0, 0, 0, 86, 87, 0,
	88, 0, 89, 90, 0, 0, 0, 316, 317, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 81, 0,
	98, 97, 77, 76, 75, 52, 74, 83, 53, 82,
	84, 0, 0, 0, 0, 0, 49, 375, 59, 0,
	0, 60, 50, 51, 0, 63, 64, 61, 0, 0,
	67, 68, 0, 69, 66, 62, 0, 0, 85, 65,
	0, 70, 99, 100, 71, 73, 72, 0, 0, 0,
	86, 87, 0, 88, 0, 89, 90, 0, 0, 0,
	316, 317, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 81, 0, 98, 97, 77, 76, 75, 52, 74,
	83, 53, 82, 84, 0, 0, 0, 0, 0, 49,
	372, 59, 0, 0, 60, 50, 51, 0, 63, 64,
	61, 0, 0, 67, 68, 0, 69, 66, 62, 0,
	0, 85, 65, 0, 70, 99, 100, 71, 73, 72,
	0, 0, 0, 86, 87, 0, 88, 0, 89, 90,
	0, 0, 0, 316, 317, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 81, 0, 98, 97, 77, 76,
	75, 52, 74, 83, 53, 82, 84, 0, 0, 0,
	0, 0, 49, 0, 488, 0, 0, 489, 50, 51,
	0, 63, 64, 61, 0, 0, 67, 68, 0, 69,
	66, 62, 0, 0, 85, 65, 0, 70, 99, 100,
	71, 73, 72, 0, 0, 0, 86, 87, 0, 88,
	0, 89, 90, 0, 0, 0, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 81, 0, 98,
	97, 77, 76, 75, 52, 74, 83, 53, 82, 84,
	0, 0, 0, 0, 0, 49, 0, 59, 0, 0,
	60, 50, 51, 0, 63, 64, 61, 0, 0, 67,
	68, 0, 69, 66, 62, 0, 0, 85, 65, 0,
	70, 99, 100, 71, 73, 72, 0, 0, 0, 86,
	87, 0, 88, 0, 89, 90, 0, 0, 0, 316,
	317, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	81, 0, 98, 97, 77, 76, 75, 52, 74, 83,
	53, 82, 84, 345, 0, 0, 0, 0, 49, 0,
	59, 0, 0, 60, 50, 51, 0, 63, 64, 61,
	0, 0, 67, 68, 0, 69, 66, 62, 0, 0,
	85, 65, 0, 70, 99, 100, 71, 73, 72, 0,
	0, 0, 86, 87, 0, 88, 0, 89, 90, 0,
	0, 0, 0, 344, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 81, 0, 98, 97, 77, 76, 75,
	52, 74, 83, 53, 82, 84, 0, 0, 0, 0,
	0, 49, 0, 59, 0, 0, 60, 50, 51, 0,
	63, 64, 61, 0, 0, 67, 68, 0, 69, 66,
	62, 0, 0, 85, 65, 0, 70, 99, 100, 71,
	73, 72, 0, 0, 0, 86, 87, 0, 88, 0,
	89, 90, 0, 0, 0, 324, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 81, 0, 98, 97,
	77, 76, 75, 52, 74, 83, 53, 82, 84, 0,
	0, 0, 0, 0, 49, 0, 59, 0, 0, 60,
	50, 51, 0, 63, 64, 61, 0, 0, 67, 68,
	0, 69, 66, 62, 0, 0, 85, 65, 0, 70,
	99, 100, 71, 73, 72, 0, 0, 0, 86, 87,
	0, 88, 0, 89, 90, 75, 341, 74, 83, 184,
	82, 84, 0, 0, 0, 0, 0, 80, 0, 81,
	0, 98, 97, 77, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 89, 90, 111, 0,
	0, 324, 0, 0, 0, 0, 0, 583, 0, 0,
	80, 0, 81, 337, 98, 97, 77, 76, 75, 153,
	74, 83, 154, 82, 138, 0, 0, 0, 158, 147,
	0, 120, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 110, 0, 0, 0, 112, 0, 113,
	0, 114, 85, 0, 0, 0, 99, 100, 108, 117,
	115, 116, 0, 0, 86, 87, 0, 88, 0, 89,
	90, 75, 183, 74, 83, 184, 82, 84, 0, 0,
	0, 0, 0, 282, 0, 148, 0, 98, 97, 77,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 99,
	100, 561, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 89, 90, 0, 0, 0, 324, 0, 75,
	153, 74, 83, 154, 82, 84, 80, 0, 81, 158,
	98, 97, 77, 76, 120, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 110, 0, 0, 0,
	112, 0, 113, 85, 114, 0, 0, 99, 100, 0,
	0, 108, 117, 115, 116, 86, 87, 0, 88, 0,
	89, 90, 75, 183, 74, 83, 184, 82, 84, 0,
	0, 0, 0, 0, 80, 0, 81, 0, 98, 97,
	77, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 85, 0, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 111, 89, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 121, 0, 80, 0, 81,
	0, 98, 97, 77, 76, 109, 110, 111, 0, 0,
	112, 0, 113, 0, 114, 120, 121, 0, 0, 0,
	0, 108, 117, 115, 116, 0, 109, 110, 572, 0,
	0, 112, 111, 113, 0, 114, 0, 0, 0, 0,
	120, 121, 108, 117, 115, 116, 0, 0, 0, 523,
	0, 109, 110, 111, 0, 0, 112, 0, 113, 0,
	114, 0, 0, 0, 0, 120, 121, 108, 117, 115,
	116, 0, 0, 0, 522, 0, 109, 110, 111, 0,
	0, 112, 0, 113, 0, 114, 120, 121, 0, 0,
	0, 0, 108, 117, 115, 116, 0, 109, 110, 397,
	111, 0, 112, 107, 113, 0, 114, 0, 0, 0,
	0, 120, 121, 108, 117, 115, 116, 0, 0, 0,
	360, 428, 109, 110, 0, 0, 0, 112, 0, 113,
	0, 114, 0, 120, 121, 0, 0, 0, 108, 117,
	115, 116, 119, 0, 109, 110, 0, 0, 0, 112,
	0, 113, 0, 114, 120, 121, 0, 0, 0, 0,
	108, 117, 115, 116, 0, 109, 110, 0, 0, 0,
	112, 0, 113, 0, 114, 0, 0, 0, 0, 0,
	0, 108, 117, 115, 116,
}
var RubyPact = []int{

	-40, 2449, -1000, -1000, -1000, 5, -1000, -1000, -1000, 343,
	-1000, -1000, -1000, -1000, 200, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 149, 131, -1000, 71,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 297,
	423, 426, 1640, 67, 191, 276, 166, 204, 198, 3837,
	3837, -1000, 4127, 3837, 3837, 4127, 4127, 339, 324, -1000,
	362, 360, 360, 360, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 313, -1000, 2, 3837, 3837, 4127, 4127,
	4127, -1000, -1000, -1000, -1000, -1000, -1000, 35, 432, -1000,
	-1000, -1000, -1000, -1000, 3837, 3837, 3837, 4127, 451, 4127,
	4127, -1000, 4127, 3837, 4127, 4127, 4127, 4127, 3837, 4127,
	-1000, -1000, 4127, 3837, 3837, 4127, 4127, 3837, 3837, 3837,
	449, 215, 68, 141, 123, 4127, 334, -1000, 4074, 2,
	-1000, 59, 4127, 4127, 4127, 34, 291, -23, -1000, 4296,
	-1000, -1000, -20, 1184, 174, 23, 143, 137, 4127, 4074,
	4127, -1000, 3837, 3837, 4127, 3837, 3837, 29, 3837, 3837,
	24, 3837, 3837, 3837, 19, 448, 445, 272, 247, 3618,
	214, 4296, -1000, 3963, 69, 45, -1000, -1000, 261, 256,
	4296, 173, 214, 3837, 3837, 3837, 3837, 348, 275, -1000,
	275, 275, 1727, 3890, 4074, 3691, -1000, -1000, 272, 272,
	4296, 4296, 4296, -1000, -1000, 384, -1000, -1000, 272, 272,
	272, 4296, 46, 4296, 4296, 4016, 4296, 272, 4296, 4296,
	4296, 4296, 272, 476, 4016, 4016, 4296, 272, 272, 4296,
	56, 4249, 272, 272, 272, 2, -1000, 443, 273, 284,
	-1000, 115, 441, 440, 437, -1000, 3472, 426, 4296, 3399,
	390, 4296, -1000, -1000, -1000, 1533, -42, 30, 4274, -1000,
	-1000, 968, -1000, -1000, -1000, -1000, 436, 4127, 3326, -1000,
	434, 908, 4127, 4296, 375, 1078, -48, 13, 272, 272,
	4228, 272, 272, -1000, -1000, -1000, 420, 272, 272, -1000,
	-1000, -1000, 406, 272, 272, 272, -1000, -1000, -1000, 398,
	258, 41, 0, 2084, -1000, -1000, -1000, -1000, 272, 316,
	4127, -1000, -1000, 173, -1000, 301, 4127, 272, 272, 272,
	272, -1000, 344, 245, 4296, -1000, -1000, -1000, 227, 220,
	4317, 678, 351, 272, -1000, -1000, 1366, -1000, -1000, -1000,
	2, 3837, 4074, 4296, 4296, 4127, 4296, 4296, -1000, 4127,
	98, -1000, 2376, 141, 250, 317, 371, 4127, -1000, -1000,
	141, 2303, -1000, -1000, 3253, -1000, 2, -1000, 1727, 179,
	-1000, -1000, -1000, 128, 4296, -1000, 3180, 121, -1000, 3618,
	-1000, -20, 741, -1000, 96, -1000, -1000, 92, -1000, -1000,
	-1000, 4127, 4127, -1000, 410, 3837, -1000, 2011, 3107, -1000,
	-1000, -1000, 413, 4296, 3034, 2961, 292, -1000, -1000, 4127,
	214, -1000, -3, -1000, -14, -1000, -24, -1000, 3837, 4127,
	-1000, 4296, -1000, 272, 293, 4296, 3837, -1000, 321, -1000,
	-1000, -1000, -1000, -1000, 4296, -1000, -1000, 320, 2888, -1000,
	-1000, 1727, 4296, -1000, -1000, 3837, 393, -1000, -1000, -1000,
	391, -25, 2815, -27, 3618, 90, -1000, 3837, 4203, 4178,
	-1000, 3837, -1000, 272, 3618, -1000, 400, -1000, 2742, 3618,
	310, 389, -1000, -1000, -1000, -1000, 272, -1000, 3837, 3837,
	-1000, -1000, -1000, 2669, 214, 3618, -1000, 1727, -1000, 4016,
	-1000, 130, 272, 4296, -1000, 272, -1000, -1000, 2230, 2157,
	-1000, -1000, 308, 272, -7, -1000, -1000, -1000, -1000, -28,
	3764, 272, 210, -1000, 272, 3618, 3618, -1000, -1000, 3618,
	373, 426, -1000, 255, 223, 2596, -1000, 3618, 77, 4296,
	-1000, -1000, 4057, 70, -1000, 319, -1000, 241, -1000, 4127,
	-1000, 272, 3618, -1000, -1000, 3618, -1000, -1000, -1000, -1000,
	77, 3837, 4127, -1000, -1000, 4157, 3618, 1938, 1849, 2523,
	340, 3944, -1000, -1000, 364, 3837, -1000, -1000, 336, -1000,
	-1000, -1000, 77, -1000, -1000, 3837, -1000, 272, 3545, -1000,
	77, 272, 3545, 3545, 3545,
}
var RubyPgo = []int{

	0, 536, 0, 243, 535, 19, 9, 534, 532, 530,
	1176, 528, 5, 527, 526, 32, 523, 10, 520, 519,
	108, 518, 517, 948, 516, 492, 720, 515, 509, 506,
	505, 504, 503, 502, 501, 500, 499, 11, 92, 498,
	497, 1404, 8, 496, 39, 493, 488, 13, 486, 485,
	3, 484, 483, 482, 481, 479, 478, 477, 476, 475,
	474, 473, 1354, 470, 1, 16, 20, 6, 469, 7,
	467, 82, 466, 15, 465, 4, 464, 17, 12, 14,
	463, 459, 458, 425,
}
var RubyR1 = []int{

	0, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 82, 82, 83, 83, 62, 62, 62, 62, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 34, 34, 34, 34,
	34, 34, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 47, 19, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 27, 65, 65, 65, 65, 75, 75, 73, 73,
	73, 73, 73, 73, 73, 17, 77, 77, 28, 28,
	28, 28, 28, 28, 28, 28, 69, 69, 69, 79,
	79, 79, 37, 37, 37, 37, 35, 35, 36, 39,
	41, 41, 41, 20, 20, 20, 20, 20, 20, 20,
	20, 21, 21, 78, 78, 40, 40, 40, 40, 40,
	40, 40, 10, 10, 38, 38, 25, 25, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 8, 3, 1, 81, 81, 81,
	81, 81, 81, 81, 4, 4, 4, 70, 70, 76,
	76, 76, 6, 6, 6, 6, 6, 6, 66, 74,
	74, 74, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 67, 67, 67, 67, 63, 63, 63,
	9, 22, 22, 12, 12, 12, 12, 80, 80, 72,
	72, 64, 64, 29, 29, 30, 31, 31, 33, 33,
	33, 32, 32, 32, 15, 48, 48, 48, 71, 71,
	71, 71, 71, 49, 49, 49, 49, 49, 50, 50,
	50, 50, 46, 45, 11, 43, 43, 43, 43, 42,
	42, 5, 7, 13, 13, 14, 14, 18, 18, 44,
	44,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 4, 5,
	1, 4, 4, 2, 3, 2, 3, 4, 5, 4,
	3, 4, 5, 2, 3, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 6, 7, 6,
	6, 4, 3, 6, 1, 4, 1, 3, 0, 1,
	1, 1, 4, 4, 4, 2, 1, 3, 5, 6,
	7, 7, 8, 8, 5, 6, 1, 3, 3, 0,
	1, 3, 1, 2, 3, 2, 4, 6, 5, 4,
	1, 2, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 9, 6, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 3, 3, 3, 3,
	3, 4, 3, 3, 3, 4, 3, 3, 3, 4,
	3, 3, 3, 4, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 5, 1, 1, 0, 1, 1,
	1, 4, 4, 4, 3, 5, 5, 3, 7, 3,
	7, 8, 3, 4, 5, 5, 5, 6, 3, 0,
	1, 3, 4, 5, 3, 3, 3, 3, 3, 5,
	6, 5, 3, 4, 3, 3, 2, 0, 2, 2,
	3, 4, 6, 2, 3, 5, 4, 1, 3, 0,
	2, 1, 2, 2, 1, 1, 2, 1, 1, 3,
	3, 1, 3, 3, 5, 5, 5, 3, 0, 2,
	2, 2, 2, 5, 6, 5, 6, 5, 4, 3,
	3, 2, 4, 4, 2, 5, 7, 4, 6, 4,
	5, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	3,
}
var RubyChk = []int{

	-1000, -68, 61, 62, 78, -2, 61, 62, 78, -23,
	-28, -35, -39, -36, -20, -21, -40, -16, -22, -29,
	-48, -43, -31, -32, -33, -47, -5, -30, -15, -7,
	-13, -14, -18, -24, -8, -4, -41, -26, -27, -9,
	-11, -52, -53, -54, -55, -19, -46, -45, -34, 17,
	23, 24, 6, 9, -38, -25, -10, -51, -78, 19,
	22, 28, 36, 26, 27, 40, 35, 31, 32, 34,
	42, 45, 47, 46, 7, 5, 77, 76, -3, -1,
	70, 72, 10, 8, 11, 39, 51, 52, 54, 56,
	57, -56, -57, -58, -59, -60, -61, 75, 74, 43,
	44, 62, 61, 78, 19, 22, 26, 29, 64, 48,
	49, 4, 53, 55, 57, 66, 67, 65, 22, 68,
	37, 38, 58, 22, 50, 48, 70, 59, 19, 22,
	64, 6, -3, 4, -41, 4, 9, -41, 11, -65,
	-6, -73, 70, 50, 59, 13, -77, 16, 72, -23,
	-20, -17, -26, 6, 9, -38, -25, -10, 15, 11,
	70, 10, 50, 59, 70, 50, 59, 13, 50, 59,
	13, 50, 59, 50, 13, 50, 13, -2, -2, -62,
	-75, -23, -41, 6, 9, -38, -25, -10, -2, -2,
	-23, -83, -75, 19, 22, 19, 22, 7, -44, 7,
	-44, -44, -83, -83, 11, -63, -6, 72, -2, -2,
	-23, -23, -23, 6, 9, 75, 6, 9, -2, -2,
	-2, -23, 6, -23, -23, -83, -23, -2, -23, -23,
	-23, -23, -2, -23, -83, -83, -23, -2, -2, -23,
	-77, -23, -2, -2, -2, 6, -69, 64, -79, 11,
	-37, 6, 57, 15, 64, -69, -62, 48, -23, -62,
	-73, -23, -6, -6, 13, -23, -5, -77, -23, -47,
	-15, -23, -15, 6, -38, -25, 57, 13, -62, -66,
	65, -83, 70, -23, -73, -23, -5, -77, -2, -2,
	-23, -2, -2, 6, -38, -25, 57, -2, -2, 6,
	-38, -25, 57, -2, -2, -2, 6, -38, -25, 57,
	-78, 6, 6, -62, 61, 62, 61, 62, -2, -72,
	13, 61, 61, -83, 61, -42, 41, -2, -2, -2,
	-2, 7, 13, -81, -23, -20, -17, 73, -70, -76,
	-23, 6, -73, -2, 62, 12, -83, 6, 9, -6,
	-65, 50, 11, -23, -23, 63, -23, -23, 71, 13,
	71, -6, -62, 6, 13, -79, 57, 50, 6, 6,
	6, -62, 18, -41, -62, 18, 12, 13, -83, 71,
	71, 71, 6, -83, -23, 18, -62, -74, 6, -62,
	-66, -26, -23, 12, 71, 71, 71, 71, 6, 6,
	6, 70, 70, 18, -67, 21, 20, -62, -62, 18,
	20, -12, 29, -23, -71, -71, -42, 18, 20, 41,
	-75, 7, -83, 13, -83, 13, -83, 13, 4, 63,
	12, -23, -6, -2, -73, -23, 50, 18, -64, -12,
	-69, -37, 12, 12, -23, -69, 18, -64, -62, 18,
	-6, -83, -23, -20, -17, 50, 13, -17, 18, 65,
	13, -83, -62, -83, -62, 71, 50, 50, -23, -23,
	18, 21, 20, -2, -62, 18, -67, 18, -62, -62,
	-80, 4, -41, 18, 61, 62, -2, -49, 19, 22,
	18, 18, 20, -62, -75, -62, 71, -83, 73, -83,
	73, -83, -2, -23, 12, -2, 18, -12, -62, -62,
	18, 18, -17, -2, 6, 6, 73, 73, 73, -83,
	-83, -2, 71, 71, -2, -62, -62, 18, 18, -62,
	4, 13, 6, -2, -2, -62, 18, -62, -83, -23,
	-20, -17, -23, 6, 18, -64, 18, -64, 12, 70,
	73, -2, -62, 6, -41, -62, 61, 61, 62, 18,
	-83, 4, 63, 18, 18, -23, -62, -71, -71, -71,
	-2, -23, 71, 18, -50, 21, 20, 18, -50, 18,
	-82, 13, -83, 13, 18, 21, 20, -2, -71, 18,
	-83, -2, -71, -71, -71,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 0,
	0, 0, 21, 22, 23, 24, 25, 0, 0, 0,
	0, 15, 264, 0, 0, 13, 267, 271, 268, 265,
	0, 303, 305, 307, 19, 20, 26, 27, 28, 29,
	13, 13, 152, 80, 247, 0, 0, 0, 0, 0,
	0, 46, 47, 48, 49, 50, 51, 0, 0, 205,
	206, 5, 6, 7, 0, 0, 0, 0, 0, 0,
	0, 13, 0, 0, 0, 0, 0, 0, 0, 0,
	13, 13, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 139, 15, 0, 150, 15, -2, 83,
	85, 93, 13, 0, 0, 0, 114, 15, 13, 119,
	120, 121, 34, 21, 22, 23, 24, 25, 0, 118,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 15, 0, 259,
	263, 116, 33, 21, 22, 23, 24, 25, 0, 0,
	13, 0, 266, 0, 0, 0, 0, 0, 304, 309,
	306, 308, 207, 0, 118, 0, 294, 13, 194, 195,
	196, 197, 77, 174, 175, 0, 172, 173, 234, 242,
	277, 76, 86, 95, 97, 0, 198, 199, 200, 201,
	202, 203, 236, 0, 0, 0, 301, 238, 160, 96,
	0, 126, 171, 235, 237, 90, 15, 0, 136, 139,
	140, 142, 0, 0, 0, 15, 0, 0, 15, 0,
	0, 119, 84, 94, 13, 126, 0, 0, 153, 154,
	155, 165, 166, 178, 179, 180, 0, 13, 0, 15,
	229, 15, 13, 125, 0, 126, 0, 0, 156, 167,
	0, 157, 168, 182, 183, 184, 0, 158, 169, 186,
	187, 188, 0, 159, 170, 161, 190, 191, 192, 0,
	162, 0, 0, 0, 15, 15, 16, 17, 18, 0,
	0, 278, 278, 0, 14, 0, 0, 272, 273, 269,
	270, 302, 0, 13, 208, 209, 210, 214, 13, 13,
	0, -2, 0, 248, 249, 250, 15, 176, 177, 87,
	89, 0, -2, 126, 111, 0, 292, 293, 105, 0,
	106, 91, 0, 139, 0, 0, 0, 0, 143, 145,
	139, 0, 146, 15, 0, 149, 78, 13, 0, 98,
	101, 103, 181, 0, 127, 222, 0, 0, 230, 13,
	15, -2, 126, 82, 99, 102, 104, 100, 185, 189,
	193, 0, 0, 232, 0, 0, 15, 0, 0, 251,
	15, 260, 15, 117, 0, 0, 0, 297, 15, 0,
	15, 310, 0, 13, 0, 13, 0, 13, 13, 0,
	81, 0, 88, 92, 0, 274, 0, 128, 0, 261,
	15, 141, 137, 138, 144, 15, 134, 0, 0, 148,
	79, 0, 122, 123, 124, 0, 0, 115, 223, 228,
	0, 0, 0, 0, 13, 98, 13, 0, 0, 0,
	233, 0, 15, 15, 246, 239, 0, 241, 0, 253,
	15, 0, 257, 275, 279, 280, 281, 282, 0, 0,
	276, 295, 15, 0, 15, 13, 204, 0, 215, 0,
	216, 0, 217, 219, 112, 110, 129, 262, 0, 0,
	135, 147, 124, 107, 0, 231, 224, 225, 226, 0,
	0, 109, 0, 164, 15, 244, 245, 240, 252, 254,
	0, 0, 15, 15, 0, 0, 298, 13, 299, 211,
	212, 213, 0, 0, 130, 0, 131, 0, 113, 0,
	227, 108, 243, 15, 258, 256, 278, 15, 15, 296,
	300, 13, 0, 132, 133, 0, 255, 0, 0, 0,
	11, 13, 163, 283, 0, 0, 278, 285, 0, 287,
	218, 12, 220, 13, 284, 0, 278, 278, 291, 286,
	221, 278, 289, 290, 288,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:228
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:230
		{
		}
	case 3:
		//line parser.y:232
		{
		}
	case 4:
		//line parser.y:234
		{
		}
	case 5:
		//line parser.y:236
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:238
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:240
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:246
		{
		}
	case 11:
		//line parser.y:248
		{
		}
	case 12:
		//line parser.y:249
		{
		}
	case 13:
		//line parser.y:251
		{
		}
	case 14:
		//line parser.y:252
		{
		}
	case 15:
		//line parser.y:255
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:257
		{
		}
	case 17:
		//line parser.y:259
		{
		}
	case 18:
		//line parser.y:261
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 75:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 76:
		//line parser.y:272
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:275
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 78:
		//line parser.y:278
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:287
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-2].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:297
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:303
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:312
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-3].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-3].genericValue.LineNumber()},
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:321
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:330
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:340
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:350
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:359
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:370
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:381
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:391
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:401
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:412
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:425
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:434
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:444
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:454
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:464
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:476
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:486
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:496
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:506
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:516
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:526
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:536
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:546
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:556
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:568
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:578
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 109:
		//line parser.y:588
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 110:
		//line parser.y:598
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 111:
		//line parser.y:610
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 112:
		//line parser.y:622
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 113:
		//line parser.y:624
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-1].genericValue)
		}
	case 114:
		//line parser.y:626
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 115:
		//line parser.y:628
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:631
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:633
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:635
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 119:
		//line parser.y:637
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:639
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:641
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:643
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:645
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:647
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:650
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 126:
		//line parser.y:660
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:662
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:666
		{
			method := ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 129:
		//line parser.y:676
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 130:
		//line parser.y:687
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 131:
		//line parser.y:698
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 132:
		//line parser.y:709
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 133:
		//line parser.y:721
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 134:
		//line parser.y:733
		{
			method := ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 135:
		//line parser.y:743
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 136:
		//line parser.y:756
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 137:
		//line parser.y:758
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 138:
		//line parser.y:760
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 139:
		//line parser.y:762
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 140:
		//line parser.y:764
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 141:
		//line parser.y:766
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 142:
		//line parser.y:769
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 143:
		//line parser.y:771
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 144:
		//line parser.y:773
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 145:
		//line parser.y:775
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 146:
		//line parser.y:779
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 147:
		//line parser.y:789
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 148:
		//line parser.y:801
		{
			name := RubyS[Rubypt-3].genericValue.(ast.BareReference).Name
			if name != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + name + ")")
			}

			class := ast.Eigenclass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 149:
		//line parser.y:816
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 150:
		//line parser.y:827
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 151:
		//line parser.y:836
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 152:
		//line parser.y:855
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 153:
		//line parser.y:873
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 154:
		//line parser.y:882
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 155:
		//line parser.y:888
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 156:
		//line parser.y:894
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 157:
		//line parser.y:903
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 158:
		//line parser.y:912
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 159:
		//line parser.y:921
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 160:
		//line parser.y:930
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 161:
		//line parser.y:933
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 162:
		//line parser.y:942
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 163:
		//line parser.y:952
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 164:
		//line parser.y:967
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 165:
		//line parser.y:973
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:982
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:988
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:997
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 169:
		//line parser.y:1006
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 170:
		//line parser.y:1015
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1024
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1031
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 173:
		//line parser.y:1033
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
		}
	case 174:
		//line parser.y:1036
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 175:
		//line parser.y:1042
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 176:
		//line parser.y:1049
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 177:
		//line parser.y:1055
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 178:
		//line parser.y:1062
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 179:
		//line parser.y:1064
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 180:
		//line parser.y:1066
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 181:
		//line parser.y:1068
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 182:
		//line parser.y:1071
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 183:
		//line parser.y:1073
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 184:
		//line parser.y:1075
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 185:
		//line parser.y:1077
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 186:
		//line parser.y:1080
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 187:
		//line parser.y:1082
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 188:
		//line parser.y:1084
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 189:
		//line parser.y:1086
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 190:
		//line parser.y:1089
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 191:
		//line parser.y:1091
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 192:
		//line parser.y:1093
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 193:
		//line parser.y:1095
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 194:
		//line parser.y:1099
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 195:
		//line parser.y:1101
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 196:
		//line parser.y:1103
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 197:
		//line parser.y:1105
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 198:
		//line parser.y:1108
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 199:
		//line parser.y:1119
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 200:
		//line parser.y:1130
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 201:
		//line parser.y:1141
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 202:
		//line parser.y:1152
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 203:
		//line parser.y:1163
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 204:
		//line parser.y:1174
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 205:
		//line parser.y:1176
		{
		}
	case 206:
		//line parser.y:1177
		{
		}
	case 207:
		//line parser.y:1179
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 208:
		//line parser.y:1181
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 209:
		//line parser.y:1183
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 210:
		//line parser.y:1185
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 211:
		//line parser.y:1187
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 212:
		//line parser.y:1189
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 213:
		//line parser.y:1191
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 214:
		//line parser.y:1194
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 215:
		//line parser.y:1196
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 216:
		//line parser.y:1204
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 217:
		//line parser.y:1213
		{
			name := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 218:
		//line parser.y:1221
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 219:
		//line parser.y:1230
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 220:
		//line parser.y:1237
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 221:
		//line parser.y:1244
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 222:
		//line parser.y:1252
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 223:
		//line parser.y:1257
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 224:
		//line parser.y:1262
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 225:
		//line parser.y:1267
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 226:
		//line parser.y:1272
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 227:
		//line parser.y:1277
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 228:
		//line parser.y:1286
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 229:
		//line parser.y:1288
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 230:
		//line parser.y:1290
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 231:
		//line parser.y:1292
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 232:
		//line parser.y:1295
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 233:
		//line parser.y:1304
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 234:
		//line parser.y:1314
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 235:
		//line parser.y:1323
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 236:
		//line parser.y:1332
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 237:
		//line parser.y:1341
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 238:
		//line parser.y:1350
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 239:
		//line parser.y:1359
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 240:
		//line parser.y:1368
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 241:
		//line parser.y:1378
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 242:
		//line parser.y:1387
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 243:
		//line parser.y:1398
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 244:
		//line parser.y:1407
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 245:
		//line parser.y:1415
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 246:
		//line parser.y:1423
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 247:
		//line parser.y:1431
		{
		}
	case 248:
		//line parser.y:1432
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 249:
		//line parser.y:1433
		{
		}
	case 250:
		//line parser.y:1436
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 251:
		//line parser.y:1439
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 252:
		//line parser.y:1448
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 253:
		//line parser.y:1459
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 254:
		//line parser.y:1461
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 255:
		//line parser.y:1475
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 256:
		//line parser.y:1496
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 257:
		//line parser.y:1512
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 258:
		//line parser.y:1514
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 259:
		//line parser.y:1517
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 260:
		//line parser.y:1519
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 261:
		//line parser.y:1522
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 262:
		//line parser.y:1524
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 263:
		//line parser.y:1527
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 264:
		//line parser.y:1534
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 265:
		//line parser.y:1536
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 266:
		//line parser.y:1539
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 267:
		//line parser.y:1547
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 268:
		//line parser.y:1551
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 269:
		//line parser.y:1553
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 270:
		//line parser.y:1555
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 271:
		//line parser.y:1559
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 272:
		//line parser.y:1561
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 273:
		//line parser.y:1563
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 274:
		//line parser.y:1567
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 275:
		//line parser.y:1578
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 276:
		//line parser.y:1584
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 277:
		//line parser.y:1591
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 278:
		//line parser.y:1598
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 279:
		//line parser.y:1600
		{
		}
	case 280:
		//line parser.y:1602
		{
		}
	case 281:
		//line parser.y:1604
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 282:
		//line parser.y:1606
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 283:
		//line parser.y:1609
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 284:
		//line parser.y:1617
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 285:
		//line parser.y:1626
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 286:
		//line parser.y:1634
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 287:
		//line parser.y:1643
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 288:
		//line parser.y:1652
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 289:
		//line parser.y:1660
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 290:
		//line parser.y:1668
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 291:
		//line parser.y:1676
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 292:
		//line parser.y:1685
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 293:
		//line parser.y:1688
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 294:
		//line parser.y:1691
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 295:
		//line parser.y:1698
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 296:
		//line parser.y:1704
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 297:
		//line parser.y:1710
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 298:
		//line parser.y:1716
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 299:
		//line parser.y:1723
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 300:
		//line parser.y:1725
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 301:
		//line parser.y:1728
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 302:
		//line parser.y:1735
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 303:
		//line parser.y:1742
		{
			RubyVAL.genericValue = ast.Public{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 304:
		//line parser.y:1744
		{
			RubyVAL.genericValue = ast.Public{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Methods: RubyS[Rubypt-0].symbolSlice}
		}
	case 305:
		//line parser.y:1747
		{
			RubyVAL.genericValue = ast.Private{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 306:
		//line parser.y:1749
		{
			RubyVAL.genericValue = ast.Private{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Methods: RubyS[Rubypt-0].symbolSlice}
		}
	case 307:
		//line parser.y:1752
		{
			RubyVAL.genericValue = ast.Protected{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 308:
		//line parser.y:1754
		{
			RubyVAL.genericValue = ast.Protected{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Methods: RubyS[Rubypt-0].symbolSlice}
		}
	case 309:
		//line parser.y:1758
		{
			RubyVAL.symbolSlice = append(RubyVAL.symbolSlice, RubyS[Rubypt-0].genericValue.(ast.Symbol))
		}
	case 310:
		//line parser.y:1760
		{
			RubyVAL.symbolSlice = append(RubyVAL.symbolSlice, RubyS[Rubypt-0].genericValue.(ast.Symbol))
		}
	}
	goto Rubystack /* stack new state and value */
}

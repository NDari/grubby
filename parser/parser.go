//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SPECIAL_CHAR_REF = 57349
const CAPITAL_REF = 57350
const LPAREN = 57351
const RPAREN = 57352
const COMMA = 57353
const NamespacedModule = 57354
const DO = 57355
const DEF = 57356
const END = 57357
const IF = 57358
const ELSE = 57359
const ELSIF = 57360
const UNLESS = 57361
const CLASS = 57362
const MODULE = 57363
const FOR = 57364
const WHILE = 57365
const UNTIL = 57366
const BEGIN = 57367
const RESCUE = 57368
const ENSURE = 57369
const BREAK = 57370
const NEXT = 57371
const REDO = 57372
const RETRY = 57373
const RETURN = 57374
const YIELD = 57375
const AND = 57376
const OR = 57377
const LAMBDA = 57378
const CASE = 57379
const WHEN = 57380
const TRUE = 57381
const FALSE = 57382
const LESSTHAN = 57383
const GREATERTHAN = 57384
const EQUALTO = 57385
const BANG = 57386
const COMPLEMENT = 57387
const BINARY_PLUS = 57388
const UNARY_PLUS = 57389
const BINARY_MINUS = 57390
const UNARY_MINUS = 57391
const STAR = 57392
const RANGE = 57393
const OR_EQUALS = 57394
const WHITESPACE = 57395
const NEWLINE = 57396
const SEMICOLON = 57397
const COLON = 57398
const DOT = 57399
const PIPE = 57400
const SLASH = 57401
const AMPERSAND = 57402
const QUESTIONMARK = 57403
const CARET = 57404
const LBRACKET = 57405
const RBRACKET = 57406
const LBRACE = 57407
const RBRACE = 57408
const DOLLARSIGN = 57409
const ATSIGN = 57410
const FILE_CONST_REF = 57411
const LINE_CONST_REF = 57412
const EOF = 57413

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1408

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 124,
	10, 110,
	11, 110,
	-2, 238,
	-1, 312,
	54, 13,
	66, 13,
	-2, 33,
	-1, 325,
	10, 110,
	11, 110,
	-2, 238,
}

const RubyNprod = 292
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4186

var RubyAct = []int{

	292, 410, 5, 542, 31, 409, 163, 216, 220, 218,
	375, 13, 299, 126, 125, 131, 53, 280, 133, 24,
	228, 298, 360, 25, 385, 2, 3, 100, 273, 298,
	238, 27, 135, 487, 298, 298, 185, 94, 186, 135,
	95, 468, 4, 298, 267, 248, 466, 464, 331, 366,
	121, 123, 331, 462, 350, 160, 161, 109, 110, 165,
	166, 283, 331, 517, 98, 99, 373, 372, 169, 101,
	150, 102, 276, 103, 111, 92, 91, 180, 181, 87,
	97, 106, 104, 105, 179, 221, 427, 430, 270, 251,
	87, 179, 93, 255, 178, 190, 191, 113, 187, 147,
	148, 367, 148, 198, 298, 351, 87, 87, 203, 118,
	424, 149, 422, 208, 530, 330, 212, 213, 214, 114,
	147, 49, 147, 142, 298, 154, 144, 298, 224, 222,
	210, 255, 94, 426, 155, 95, 230, 221, 94, 223,
	219, 95, 512, 242, 237, 239, 262, 263, 244, 265,
	266, 241, 271, 272, 230, 277, 278, 279, 254, 261,
	245, 247, 142, 258, 300, 144, 423, 260, 433, 139,
	523, 301, 302, 303, 304, 284, 296, 143, 316, 139,
	298, 222, 139, 139, 432, 159, 307, 407, 230, 154,
	298, 223, 157, 151, 338, 226, 145, 315, 422, 531,
	139, 139, 139, 142, 476, 146, 144, 322, 323, 94,
	383, 172, 95, 153, 173, 383, 143, 158, 139, 116,
	139, 139, 117, 139, 156, 139, 139, 139, 139, 337,
	139, 343, 473, 139, 333, 139, 139, 145, 94, 112,
	457, 95, 458, 383, 113, 151, 234, 100, 549, 139,
	139, 139, 249, 94, 152, 115, 95, 143, 170, 139,
	144, 171, 176, 390, 234, 139, 114, 94, 423, 139,
	95, 355, 268, 242, 294, 274, 295, 109, 110, 281,
	221, 241, 548, 219, 98, 99, 388, 398, 389, 101,
	122, 102, 499, 103, 72, 382, 234, 139, 234, 500,
	97, 106, 104, 105, 108, 524, 525, 391, 305, 390,
	387, 471, 346, 94, 396, 139, 95, 557, 139, 554,
	553, 386, 413, 336, 222, 404, 393, 139, 139, 402,
	364, 217, 447, 380, 223, 381, 122, 230, 100, 520,
	72, 239, 403, 411, 383, 412, 405, 416, 363, 364,
	355, 288, 289, 139, 139, 552, 159, 554, 553, 496,
	336, 438, 437, 436, 418, 438, 437, 252, 109, 110,
	345, 346, 501, 485, 139, 98, 99, 439, 139, 139,
	101, 320, 102, 321, 103, 111, 452, 452, 448, 442,
	484, 97, 106, 104, 105, 483, 481, 460, 365, 371,
	188, 469, 189, 120, 370, 119, 369, 359, 472, 352,
	340, 474, 339, 335, 286, 285, 139, 215, 474, 193,
	446, 311, 139, 482, 358, 293, 310, 1, 177, 86,
	139, 480, 85, 84, 490, 83, 139, 82, 493, 81,
	39, 38, 37, 480, 36, 52, 453, 234, 19, 139,
	41, 42, 20, 139, 100, 502, 503, 15, 12, 11,
	139, 43, 23, 22, 21, 26, 18, 10, 33, 28,
	139, 17, 14, 40, 16, 509, 35, 34, 29, 67,
	30, 514, 66, 0, 109, 110, 0, 0, 0, 0,
	518, 98, 99, 0, 139, 139, 101, 50, 102, 0,
	103, 111, 0, 0, 0, 521, 0, 97, 106, 104,
	105, 0, 139, 0, 349, 0, 474, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	538, 0, 0, 0, 0, 0, 452, 452, 452, 0,
	546, 234, 0, 0, 555, 140, 0, 0, 535, 536,
	537, 0, 0, 234, 559, 140, 0, 452, 140, 140,
	0, 452, 452, 452, 0, 0, 0, 0, 0, 556,
	0, 0, 0, 0, 0, 0, 140, 140, 140, 560,
	561, 0, 0, 0, 562, 234, 0, 139, 0, 0,
	0, 0, 0, 0, 140, 0, 140, 140, 0, 140,
	139, 140, 140, 140, 140, 0, 140, 0, 0, 140,
	139, 140, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 235, 100, 0, 140, 140, 140, 250, 0,
	0, 0, 139, 0, 0, 140, 0, 139, 0, 139,
	235, 140, 0, 0, 0, 140, 0, 0, 269, 0,
	0, 275, 139, 109, 110, 282, 0, 0, 0, 0,
	98, 99, 0, 0, 0, 101, 0, 102, 0, 103,
	0, 0, 235, 140, 235, 0, 97, 106, 104, 105,
	0, 0, 0, 540, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 47, 73,
	48, 74, 0, 0, 72, 0, 44, 0, 54, 140,
	140, 55, 45, 46, 0, 58, 59, 56, 32, 0,
	62, 63, 0, 64, 61, 57, 0, 0, 75, 60,
	140, 89, 90, 0, 140, 140, 76, 77, 0, 78,
	0, 79, 80, 0, 0, 0, 6, 7, 0, 0,
	0, 0, 0, 0, 0, 70, 0, 71, 100, 88,
	87, 69, 68, 8, 0, 551, 134, 0, 0, 0,
	0, 0, 140, 0, 0, 0, 134, 0, 140, 134,
	134, 0, 0, 0, 0, 0, 140, 0, 109, 110,
	0, 0, 140, 0, 0, 98, 99, 134, 134, 134,
	101, 0, 102, 235, 103, 140, 0, 0, 0, 140,
	0, 97, 106, 104, 105, 134, 140, 134, 134, 0,
	134, 0, 134, 134, 134, 134, 140, 134, 0, 0,
	134, 0, 134, 134, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 134, 134, 134, 0,
	140, 140, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 134, 134, 0, 109, 110, 134, 0, 140, 0,
	0, 98, 99, 0, 0, 0, 101, 0, 102, 140,
	103, 0, 0, 0, 0, 0, 327, 97, 106, 104,
	105, 0, 0, 134, 312, 134, 0, 235, 0, 0,
	65, 137, 73, 138, 124, 0, 130, 72, 135, 235,
	0, 0, 134, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 134, 0, 0, 0, 0,
	0, 75, 0, 0, 89, 90, 0, 0, 128, 76,
	77, 235, 78, 140, 79, 80, 0, 129, 100, 0,
	134, 134, 0, 0, 0, 0, 140, 0, 127, 9,
	136, 0, 88, 87, 69, 68, 140, 0, 0, 0,
	96, 134, 0, 0, 0, 312, 134, 0, 109, 110,
	0, 0, 0, 0, 0, 98, 99, 0, 140, 0,
	101, 0, 102, 140, 103, 140, 0, 0, 0, 100,
	0, 97, 106, 104, 105, 108, 0, 132, 140, 0,
	0, 0, 0, 134, 0, 0, 0, 164, 0, 134,
	167, 164, 0, 0, 0, 0, 0, 134, 0, 109,
	110, 0, 0, 134, 0, 0, 98, 99, 182, 183,
	184, 101, 0, 102, 134, 103, 134, 0, 0, 0,
	134, 0, 97, 106, 104, 105, 192, 134, 194, 195,
	0, 197, 0, 199, 200, 201, 202, 134, 204, 0,
	0, 207, 0, 209, 211, 0, 0, 0, 0, 65,
	314, 73, 138, 74, 229, 0, 72, 240, 243, 246,
	0, 134, 134, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 229, 259, 0, 0, 0, 264, 0, 134,
	75, 0, 0, 89, 90, 0, 0, 100, 76, 77,
	134, 78, 0, 79, 80, 0, 0, 0, 298, 0,
	0, 0, 255, 0, 306, 313, 229, 70, 134, 71,
	309, 88, 87, 69, 68, 0, 0, 109, 110, 0,
	134, 0, 0, 132, 98, 99, 326, 0, 0, 101,
	0, 102, 0, 103, 0, 328, 329, 0, 0, 0,
	97, 106, 104, 105, 0, 0, 0, 492, 0, 0,
	0, 0, 134, 0, 134, 0, 0, 0, 0, 529,
	0, 347, 132, 0, 0, 0, 0, 134, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	174, 0, 354, 0, 0, 0, 313, 362, 0, 109,
	110, 0, 0, 0, 0, 0, 98, 99, 0, 134,
	0, 101, 0, 102, 134, 103, 134, 0, 0, 0,
	0, 0, 97, 106, 104, 105, 0, 0, 141, 134,
	0, 0, 0, 0, 384, 0, 0, 0, 141, 0,
	164, 141, 141, 0, 0, 0, 0, 0, 394, 0,
	0, 168, 0, 0, 132, 0, 0, 0, 0, 141,
	141, 141, 175, 0, 0, 229, 0, 406, 0, 0,
	0, 354, 0, 0, 0, 0, 0, 141, 414, 141,
	141, 0, 141, 0, 141, 141, 141, 141, 420, 141,
	0, 196, 141, 0, 141, 141, 0, 0, 0, 0,
	205, 206, 0, 0, 0, 236, 0, 0, 141, 141,
	141, 0, 434, 435, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 236, 141, 0, 0, 256, 141, 0,
	164, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	0, 470, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 141, 236, 297, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 110,
	319, 479, 0, 0, 141, 98, 99, 141, 0, 0,
	101, 0, 102, 0, 103, 0, 141, 141, 0, 0,
	0, 97, 106, 104, 105, 0, 0, 0, 491, 0,
	0, 162, 0, 508, 0, 511, 0, 0, 0, 0,
	0, 0, 141, 141, 0, 0, 0, 0, 516, 0,
	0, 0, 0, 400, 0, 0, 0, 0, 516, 348,
	0, 0, 0, 141, 0, 0, 0, 141, 141, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 0, 0,
	528, 0, 0, 109, 110, 132, 0, 533, 0, 0,
	98, 99, 0, 0, 0, 101, 225, 102, 227, 103,
	539, 0, 0, 0, 0, 141, 97, 106, 104, 105,
	253, 141, 0, 65, 137, 73, 138, 124, 532, 141,
	72, 135, 0, 0, 0, 141, 392, 0, 0, 0,
	0, 395, 397, 399, 0, 0, 236, 0, 141, 0,
	0, 0, 141, 0, 75, 0, 0, 89, 90, 141,
	100, 0, 76, 77, 0, 78, 0, 79, 80, 141,
	0, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	0, 257, 0, 136, 0, 88, 87, 69, 68, 0,
	109, 110, 429, 141, 141, 431, 0, 98, 99, 0,
	0, 334, 101, 0, 102, 100, 103, 0, 0, 341,
	0, 141, 0, 97, 106, 104, 105, 0, 0, 0,
	368, 0, 141, 0, 463, 0, 0, 465, 0, 467,
	0, 196, 0, 0, 0, 109, 110, 0, 0, 357,
	236, 361, 98, 99, 0, 0, 0, 101, 0, 102,
	0, 103, 236, 0, 0, 0, 0, 0, 97, 106,
	104, 105, 0, 489, 0, 332, 0, 0, 0, 0,
	0, 0, 0, 378, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 236, 0, 141, 0, 0, 0,
	0, 0, 507, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 100, 0, 361, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 417, 0,
	0, 141, 109, 110, 0, 0, 141, 527, 141, 98,
	99, 0, 0, 0, 101, 428, 102, 0, 103, 111,
	0, 141, 0, 0, 0, 97, 106, 104, 105, 108,
	196, 0, 440, 0, 0, 0, 444, 0, 445, 0,
	550, 0, 0, 0, 459, 0, 461, 0, 0, 0,
	0, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 0, 65, 47, 73, 48, 74, 0, 0, 72,
	0, 44, 545, 454, 544, 543, 455, 45, 46, 0,
	58, 59, 56, 494, 495, 62, 63, 0, 64, 61,
	57, 498, 0, 75, 60, 0, 89, 90, 0, 0,
	0, 76, 77, 504, 78, 506, 79, 80, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 71, 0, 88, 87, 69, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 0,
	65, 47, 73, 48, 74, 0, 522, 72, 0, 44,
	541, 454, 544, 543, 455, 45, 46, 0, 58, 59,
	56, 0, 0, 62, 63, 534, 64, 61, 57, 378,
	379, 75, 60, 0, 89, 90, 0, 0, 0, 76,
	77, 0, 78, 0, 79, 80, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	71, 0, 88, 87, 69, 68, 65, 47, 73, 48,
	74, 0, 0, 72, 0, 44, 441, 54, 377, 376,
	55, 45, 46, 0, 58, 59, 56, 0, 0, 62,
	63, 0, 64, 61, 57, 0, 0, 75, 60, 0,
	89, 90, 0, 0, 0, 76, 77, 0, 78, 0,
	79, 80, 0, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 71, 0, 88, 87,
	69, 68, 65, 47, 73, 48, 74, 0, 0, 72,
	0, 44, 374, 54, 377, 376, 55, 45, 46, 0,
	58, 59, 56, 0, 0, 62, 63, 0, 64, 61,
	57, 0, 0, 75, 60, 0, 89, 90, 0, 0,
	0, 76, 77, 0, 78, 0, 79, 80, 0, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 71, 0, 88, 87, 69, 68, 65, 47,
	73, 48, 74, 0, 0, 72, 0, 44, 513, 54,
	0, 0, 55, 45, 46, 0, 58, 59, 56, 383,
	0, 62, 63, 0, 64, 61, 57, 0, 0, 75,
	60, 0, 89, 90, 0, 0, 0, 76, 77, 0,
	78, 0, 79, 80, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 71, 0,
	88, 87, 69, 68, 65, 47, 73, 48, 74, 0,
	0, 72, 0, 44, 415, 54, 0, 0, 55, 45,
	46, 0, 58, 59, 56, 383, 0, 62, 63, 0,
	64, 61, 57, 0, 0, 75, 60, 0, 89, 90,
	0, 0, 0, 76, 77, 0, 78, 0, 79, 80,
	0, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 71, 0, 88, 87, 69, 68,
	65, 47, 73, 48, 74, 0, 0, 72, 0, 44,
	408, 54, 0, 0, 55, 45, 46, 0, 58, 59,
	56, 383, 0, 62, 63, 0, 64, 61, 57, 0,
	0, 75, 60, 0, 89, 90, 0, 0, 0, 76,
	77, 0, 78, 0, 79, 80, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	71, 0, 88, 87, 69, 68, 65, 47, 73, 48,
	74, 0, 0, 72, 0, 44, 547, 454, 0, 0,
	455, 45, 46, 0, 58, 59, 56, 0, 0, 62,
	63, 0, 64, 61, 57, 0, 0, 75, 60, 0,
	89, 90, 0, 0, 0, 76, 77, 0, 78, 0,
	79, 80, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 71, 0, 88, 87,
	69, 68, 65, 47, 73, 48, 74, 0, 0, 72,
	0, 44, 526, 54, 0, 0, 55, 45, 46, 0,
	58, 59, 56, 0, 0, 62, 63, 0, 64, 61,
	57, 0, 0, 75, 60, 0, 89, 90, 0, 0,
	0, 76, 77, 0, 78, 0, 79, 80, 0, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 71, 0, 88, 87, 69, 68, 65, 47,
	73, 48, 74, 0, 0, 72, 0, 44, 505, 54,
	0, 0, 55, 45, 46, 0, 58, 59, 56, 0,
	0, 62, 63, 0, 64, 61, 57, 0, 0, 75,
	60, 0, 89, 90, 0, 0, 0, 76, 77, 0,
	78, 0, 79, 80, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 71, 0,
	88, 87, 69, 68, 65, 47, 73, 48, 74, 0,
	0, 72, 0, 44, 497, 54, 0, 0, 55, 45,
	46, 0, 58, 59, 56, 0, 0, 62, 63, 0,
	64, 61, 57, 0, 0, 75, 60, 0, 89, 90,
	0, 0, 0, 76, 77, 0, 78, 0, 79, 80,
	0, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 71, 0, 88, 87, 69, 68,
	65, 47, 73, 48, 74, 0, 0, 72, 0, 44,
	0, 54, 0, 0, 55, 45, 46, 0, 58, 59,
	56, 0, 0, 62, 63, 0, 64, 61, 57, 0,
	0, 75, 60, 0, 89, 90, 0, 0, 0, 76,
	77, 0, 78, 0, 79, 80, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	71, 486, 88, 87, 69, 68, 65, 47, 73, 48,
	74, 0, 0, 72, 0, 44, 477, 54, 0, 0,
	55, 45, 46, 0, 58, 59, 56, 0, 0, 62,
	63, 0, 64, 61, 57, 0, 0, 75, 60, 0,
	89, 90, 0, 0, 0, 76, 77, 0, 78, 0,
	79, 80, 0, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 71, 0, 88, 87,
	69, 68, 65, 47, 73, 48, 74, 0, 0, 72,
	0, 44, 456, 454, 0, 0, 455, 45, 46, 0,
	58, 59, 56, 0, 0, 62, 63, 0, 64, 61,
	57, 0, 0, 75, 60, 0, 89, 90, 0, 0,
	0, 76, 77, 0, 78, 0, 79, 80, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 71, 0, 88, 87, 69, 68, 65, 47,
	73, 48, 74, 0, 0, 72, 0, 44, 449, 454,
	0, 0, 455, 45, 46, 0, 58, 59, 56, 0,
	0, 62, 63, 0, 64, 61, 57, 0, 0, 75,
	60, 0, 89, 90, 0, 0, 0, 76, 77, 0,
	78, 0, 79, 80, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 71, 0,
	88, 87, 69, 68, 65, 47, 73, 48, 74, 0,
	0, 72, 0, 44, 443, 54, 0, 0, 55, 45,
	46, 0, 58, 59, 56, 0, 0, 62, 63, 0,
	64, 61, 57, 0, 0, 75, 60, 0, 89, 90,
	0, 0, 0, 76, 77, 0, 78, 0, 79, 80,
	0, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 71, 0, 88, 87, 69, 68,
	65, 47, 73, 48, 74, 0, 0, 72, 0, 44,
	425, 54, 0, 0, 55, 45, 46, 0, 58, 59,
	56, 0, 0, 62, 63, 0, 64, 61, 57, 0,
	0, 75, 60, 0, 89, 90, 0, 0, 0, 76,
	77, 0, 78, 0, 79, 80, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	71, 0, 88, 87, 69, 68, 65, 47, 73, 48,
	74, 0, 0, 72, 0, 44, 356, 54, 0, 0,
	55, 45, 46, 0, 58, 59, 56, 0, 0, 62,
	63, 0, 64, 61, 57, 0, 0, 75, 60, 0,
	89, 90, 0, 0, 0, 76, 77, 0, 78, 0,
	79, 80, 0, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 71, 0, 88, 87,
	69, 68, 65, 47, 73, 48, 74, 0, 0, 72,
	0, 44, 344, 54, 0, 0, 55, 45, 46, 0,
	58, 59, 56, 0, 0, 62, 63, 0, 64, 61,
	57, 0, 0, 75, 60, 0, 89, 90, 0, 0,
	0, 76, 77, 0, 78, 0, 79, 80, 0, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 71, 0, 88, 87, 69, 68, 65, 47,
	73, 48, 74, 0, 0, 72, 0, 44, 342, 54,
	0, 0, 55, 45, 46, 0, 58, 59, 56, 0,
	0, 62, 63, 0, 64, 61, 57, 0, 0, 75,
	60, 0, 89, 90, 0, 0, 0, 76, 77, 0,
	78, 0, 79, 80, 0, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 71, 0,
	88, 87, 69, 68, 65, 47, 73, 48, 74, 0,
	0, 72, 0, 44, 0, 454, 0, 0, 455, 45,
	46, 0, 58, 59, 56, 0, 0, 62, 63, 0,
	64, 61, 57, 0, 0, 75, 60, 0, 89, 90,
	0, 0, 0, 76, 77, 0, 78, 0, 79, 80,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 71, 0, 88, 87, 69, 68,
	65, 47, 73, 48, 74, 0, 0, 72, 0, 44,
	0, 54, 0, 0, 55, 45, 46, 0, 58, 59,
	56, 0, 0, 62, 63, 0, 64, 61, 57, 0,
	0, 75, 60, 0, 89, 90, 0, 0, 0, 76,
	77, 0, 78, 0, 79, 80, 0, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	71, 0, 88, 87, 69, 68, 65, 47, 73, 48,
	74, 318, 0, 72, 0, 44, 0, 54, 0, 0,
	55, 45, 46, 0, 58, 59, 56, 0, 0, 62,
	63, 0, 64, 61, 57, 0, 0, 75, 60, 0,
	89, 90, 0, 0, 0, 76, 77, 0, 78, 0,
	79, 80, 0, 0, 0, 0, 317, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 71, 0, 88, 87,
	69, 68, 65, 47, 73, 48, 74, 0, 0, 72,
	0, 44, 0, 54, 0, 0, 55, 45, 46, 0,
	58, 59, 56, 0, 0, 62, 63, 0, 64, 61,
	57, 0, 0, 75, 60, 0, 89, 90, 0, 0,
	0, 76, 77, 0, 78, 0, 79, 80, 0, 0,
	0, 298, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 71, 0, 88, 87, 69, 68, 65, 47,
	73, 48, 74, 0, 0, 72, 0, 44, 0, 54,
	0, 0, 55, 45, 46, 0, 58, 59, 56, 0,
	0, 62, 63, 0, 64, 61, 57, 0, 0, 75,
	60, 0, 89, 90, 0, 0, 0, 76, 77, 0,
	78, 0, 79, 80, 65, 232, 73, 233, 74, 0,
	0, 72, 0, 0, 0, 0, 70, 0, 71, 0,
	88, 87, 69, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 89, 90,
	0, 0, 0, 76, 77, 0, 78, 0, 79, 80,
	0, 0, 0, 298, 65, 232, 73, 233, 74, 510,
	0, 72, 70, 0, 71, 0, 88, 87, 69, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 89, 90,
	0, 0, 0, 76, 77, 0, 78, 0, 79, 80,
	0, 0, 0, 298, 65, 232, 73, 233, 74, 488,
	0, 72, 70, 0, 71, 0, 88, 87, 69, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 89, 90,
	0, 0, 0, 76, 77, 0, 78, 0, 79, 80,
	0, 0, 0, 298, 65, 137, 73, 138, 74, 478,
	0, 72, 70, 0, 71, 0, 88, 87, 69, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 89, 90,
	0, 0, 0, 76, 77, 0, 78, 0, 79, 80,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 421,
	0, 0, 70, 0, 71, 0, 88, 87, 69, 68,
	65, 137, 73, 138, 124, 0, 0, 72, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 89, 90, 0, 0, 0, 76,
	77, 0, 78, 0, 79, 80, 65, 137, 73, 138,
	124, 401, 0, 72, 135, 0, 0, 0, 257, 0,
	136, 0, 88, 87, 69, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	89, 90, 0, 0, 128, 76, 77, 0, 78, 0,
	79, 80, 65, 137, 73, 138, 325, 0, 0, 72,
	135, 0, 0, 0, 257, 0, 136, 0, 88, 87,
	69, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 0, 89, 90, 0, 0,
	324, 76, 77, 0, 78, 0, 79, 80, 65, 314,
	73, 138, 74, 0, 0, 72, 0, 0, 0, 0,
	70, 0, 136, 0, 88, 87, 69, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 89, 90, 0, 0, 0, 76, 77, 0,
	78, 0, 79, 80, 0, 0, 0, 298, 65, 232,
	73, 233, 74, 0, 0, 72, 70, 0, 71, 309,
	88, 87, 69, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 89, 90, 0, 0, 0, 76, 77, 0,
	78, 0, 79, 80, 0, 0, 0, 298, 65, 137,
	73, 138, 74, 308, 0, 72, 70, 0, 71, 0,
	88, 87, 69, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 89, 90, 0, 0, 0, 76, 77, 0,
	78, 0, 79, 80, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 71, 0,
	88, 87, 69, 68, 65, 137, 73, 138, 74, 0,
	0, 72, 135, 0, 0, 0, 65, 232, 73, 233,
	74, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 89, 90,
	0, 0, 0, 76, 77, 0, 78, 75, 79, 80,
	89, 90, 0, 0, 0, 76, 77, 0, 78, 0,
	79, 80, 70, 0, 136, 0, 88, 87, 69, 68,
	0, 231, 0, 0, 70, 0, 71, 0, 88, 87,
	69, 68, 65, 137, 73, 138, 124, 0, 0, 72,
	135, 0, 0, 0, 65, 137, 73, 138, 74, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 0, 89, 90, 0, 0,
	0, 76, 77, 0, 78, 75, 79, 80, 89, 90,
	0, 0, 0, 76, 77, 0, 78, 0, 79, 80,
	257, 0, 136, 0, 88, 87, 69, 68, 0, 0,
	0, 0, 70, 0, 71, 0, 88, 87, 69, 68,
	65, 515, 73, 138, 74, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 89, 90, 0, 0, 0, 76,
	77, 0, 78, 0, 79, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	71, 0, 88, 87, 69, 68,
}
var RubyPact = []int{

	-29, 712, -1000, -1000, -1000, 21, -1000, -1000, -1000, 1698,
	-1000, -1000, -1000, 220, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 203, -1000, 52, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 399, 282, 282, 915, 153, 59,
	202, 82, 181, 174, 3393, 3393, -1000, 4049, 3393, 3393,
	4049, 4049, 242, 195, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 253, -1000, 26, 3393, 3393, 4049, 4049,
	4049, -1000, -1000, -1000, -1000, -1000, -1000, 30, 394, -1000,
	-1000, -1000, -1000, -1000, 3393, 3393, 4049, 413, 4049, 4049,
	-1000, 4049, 3393, 4049, 4049, 4049, 4049, 3393, 4049, -1000,
	-1000, 4049, 3393, 4049, 4049, 3393, 3393, 3393, 411, 274,
	131, 154, 248, -1000, 3971, 26, 19, 4049, 4049, 4049,
	39, 356, 1015, -1000, 56, 35, -1000, 4037, 114, 36,
	-1000, -1000, 3971, 4049, -1000, 3393, 3393, 4049, 3393, 3393,
	38, 3393, 3393, 22, 3393, 3393, 3393, 11, 409, 408,
	193, 297, 3195, 263, 1015, 222, 122, 1015, 126, 263,
	3393, 3393, 3393, 3393, 3843, 3793, 3971, 3261, -1000, -1000,
	193, 193, 1015, 1015, 1015, -1000, -1000, 375, -1000, -1000,
	193, 193, 1015, 3747, 1015, 1015, 3893, 1015, 193, 1015,
	1015, 1015, 1015, 193, 850, 3893, 3893, 1015, 193, 1015,
	51, 1601, 193, 193, 193, 26, -1000, 407, 349, 79,
	-1000, 151, 406, 404, -1000, 3063, 282, 2997, 360, 1015,
	-1000, 4049, 3701, 194, 57, 150, 146, -1000, -1000, -1000,
	450, -10, 41, 964, -1000, -1000, 243, -1000, -1000, -1000,
	-1000, 403, 3959, 2931, -1000, 401, 1094, 4049, 338, 334,
	-15, 37, 193, 193, 1556, 193, 193, -1000, -1000, -1000,
	400, 193, 193, -1000, -1000, -1000, 398, 193, 193, 193,
	-1000, -1000, -1000, 393, 345, 4, 3, 2007, -1000, -1000,
	-1000, -1000, 193, 318, 4049, -1000, -1000, 126, -1000, 271,
	4049, 193, 193, 193, 193, 315, 1015, -1000, 4049, -1000,
	303, 276, 56, 1459, 3655, 319, 193, -1000, -1000, 73,
	-1000, -1000, 19, 26, 3393, 3971, 1015, 4049, 1015, 1015,
	-1000, 3959, 144, -1000, 2205, 131, 79, 312, 4049, -1000,
	-1000, 2139, -1000, -1000, -1000, 26, -1000, 1015, 3589, 155,
	-1000, -1000, -1000, 50, 1015, -1000, -1000, 2865, 75, -1000,
	-1000, 3195, 23, -1000, -1000, 141, -1000, -1000, 125, -1000,
	-1000, -1000, 4049, 4049, -1000, 348, 3393, -1000, 1941, 2799,
	-1000, -1000, -1000, 328, 1015, 2733, 2667, 225, -1000, -1000,
	4049, 263, -11, -1000, 1015, -19, -1000, -20, -1000, -25,
	3393, 4049, -1000, -1000, 193, 301, 1015, 3393, -1000, 217,
	-1000, -1000, -1000, -1000, 1015, -1000, 189, 2601, -1000, 3539,
	1015, 390, 3393, 389, 384, -1000, -1000, 367, 2535, -33,
	69, 3489, -1000, 3393, 1374, 1133, -1000, 3393, -1000, 193,
	3195, -1000, 344, -1000, 2469, 3195, 288, 366, -1000, -1000,
	-1000, -1000, 193, -1000, 3393, 3393, -1000, -1000, -1000, 2403,
	263, 3195, -1000, 3439, -1000, 3893, -1000, 136, -1000, 193,
	1015, -1000, 193, -1000, -1000, 2073, -1000, -1000, 4115, 1015,
	-1000, -1000, 193, 0, -1000, -1000, -1000, -1000, 4049, 3327,
	193, 257, -1000, 193, 3195, 3195, -1000, -1000, 3195, 333,
	282, -1000, 116, 251, 2337, -1000, 3195, 70, 1015, -1000,
	4049, 1205, 58, -1000, 184, 1518, 1015, 4049, 193, 3195,
	-1000, -1000, 3195, -1000, -1000, -1000, -1000, 70, 1015, 3393,
	4049, -1000, -1000, 619, 3195, 1875, 1797, 2271, 237, 774,
	-1000, -1000, 340, 3393, -1000, -1000, 302, -1000, -1000, -1000,
	70, -1000, -1000, 3393, -1000, 193, 3129, -1000, 70, 193,
	3129, 3129, 3129,
}
var RubyPgo = []int{

	0, 0, 482, 480, 23, 18, 479, 478, 477, 1220,
	476, 1, 31, 474, 473, 11, 472, 471, 979, 469,
	497, 738, 468, 467, 466, 465, 464, 463, 462, 461,
	459, 8, 121, 458, 457, 4, 12, 452, 451, 450,
	19, 448, 446, 3, 445, 444, 442, 441, 440, 439,
	437, 435, 433, 432, 429, 1384, 428, 5, 14, 22,
	10, 427, 7, 426, 24, 425, 20, 424, 6, 421,
	15, 16, 13, 9, 420, 308, 282, 1230,
}
var RubyR1 = []int{

	0, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 76, 76, 77, 77, 55, 55, 55, 55, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 29, 29, 29, 29, 29,
	29, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	40, 14, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 22, 58, 58, 58, 58, 68, 68,
	66, 66, 66, 66, 66, 66, 66, 72, 72, 72,
	72, 72, 70, 70, 70, 23, 23, 23, 23, 23,
	23, 62, 62, 73, 73, 73, 31, 31, 31, 31,
	30, 30, 33, 35, 35, 35, 15, 15, 15, 15,
	15, 15, 15, 16, 16, 71, 71, 34, 34, 34,
	34, 34, 34, 34, 9, 9, 32, 32, 20, 20,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 2, 6, 7, 75,
	75, 75, 75, 75, 75, 75, 3, 3, 3, 3,
	63, 63, 69, 69, 69, 5, 5, 5, 5, 59,
	67, 67, 67, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 60, 60, 60, 60, 56, 56,
	56, 8, 17, 17, 11, 11, 11, 11, 74, 74,
	65, 65, 57, 57, 24, 24, 25, 26, 26, 28,
	28, 28, 27, 27, 27, 12, 41, 41, 64, 64,
	64, 64, 64, 42, 42, 42, 42, 42, 43, 43,
	43, 43, 39, 38, 10, 37, 37, 37, 37, 36,
	36, 4,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 4, 5, 1, 4, 4, 2, 3, 3,
	4, 4, 5, 3, 4, 5, 2, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 6,
	7, 6, 6, 4, 3, 7, 1, 5, 1, 3,
	0, 1, 1, 2, 4, 4, 5, 1, 1, 4,
	2, 5, 1, 3, 3, 5, 6, 7, 8, 5,
	6, 1, 3, 0, 1, 3, 1, 2, 3, 2,
	4, 6, 4, 1, 2, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 9, 6, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 4, 3, 3, 3, 4, 3, 3,
	3, 4, 3, 3, 3, 4, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 1, 1, 5, 0,
	1, 1, 2, 4, 4, 5, 3, 5, 5, 5,
	3, 7, 3, 7, 8, 3, 4, 5, 5, 3,
	0, 1, 3, 4, 5, 3, 3, 3, 3, 3,
	5, 6, 5, 3, 4, 3, 3, 2, 0, 2,
	2, 3, 4, 6, 2, 3, 5, 4, 1, 3,
	0, 2, 1, 2, 2, 1, 1, 2, 1, 1,
	3, 3, 1, 3, 3, 5, 5, 5, 0, 2,
	2, 2, 2, 5, 6, 5, 6, 5, 4, 3,
	3, 2, 4, 4, 2, 5, 7, 4, 6, 4,
	5, 3,
}
var RubyChk = []int{

	-1000, -61, 54, 55, 71, -1, 54, 55, 71, -18,
	-23, -30, -33, -15, -16, -34, -13, -17, -24, -41,
	-37, -26, -27, -28, -40, -4, -25, -12, -19, -7,
	-3, -35, -21, -22, -8, -10, -45, -46, -47, -48,
	-14, -39, -38, -29, 14, 20, 21, 6, 8, -32,
	-20, -9, -44, -71, 16, 19, 25, 33, 23, 24,
	37, 32, 28, 29, 31, 5, -2, -6, 70, 69,
	63, 65, 12, 7, 9, 36, 44, 45, 47, 49,
	50, -49, -50, -51, -52, -53, -54, 68, 67, 39,
	40, 55, 54, 71, 16, 19, 26, 57, 41, 42,
	4, 46, 48, 50, 59, 60, 58, 19, 61, 34,
	35, 51, 19, 41, 63, 52, 16, 19, 57, 6,
	4, -35, 8, -35, 9, -58, -72, 63, 43, 52,
	11, -70, -18, -5, -21, 13, 65, 6, 8, -32,
	-20, -9, 9, 63, 12, 43, 52, 63, 43, 52,
	11, 43, 52, 11, 43, 52, 43, 11, 43, 11,
	-1, -1, -55, -68, -18, -1, -1, -18, -77, -68,
	16, 19, 16, 19, -77, -77, 9, -56, -5, 65,
	-1, -1, -18, -18, -18, 6, 8, 68, 6, 8,
	-1, -1, -18, 6, -18, -18, -77, -18, -1, -18,
	-18, -18, -18, -1, -18, -77, -77, -18, -1, -18,
	-70, -18, -1, -1, -1, 6, -62, 57, -73, 9,
	-31, 6, 50, 60, -62, -55, 41, -55, -66, -18,
	-15, 60, 6, 8, -32, -20, -9, -5, 11, -5,
	-18, -4, -70, -18, -40, -12, -18, -12, 6, -32,
	-20, 50, 11, -55, -59, 58, -77, 63, -66, -18,
	-4, -70, -1, -1, -18, -1, -1, 6, -32, -20,
	50, -1, -1, 6, -32, -20, 50, -1, -1, -1,
	6, -32, -20, 50, -71, 6, 6, -55, 54, 55,
	54, 55, -1, -65, 11, 54, 54, -77, 54, -36,
	38, -1, -1, -1, -1, -75, -18, -15, 60, 66,
	-63, -69, -21, -18, 6, -66, -1, 55, 10, -77,
	6, 8, -72, -58, 43, 9, -18, 56, -18, -18,
	64, 11, 64, -5, -55, 6, 11, -73, 43, 6,
	6, -55, 15, -35, 15, 10, 11, -18, -77, 64,
	64, 64, 6, -77, -18, -5, 15, -55, -67, 6,
	-59, -55, -18, 10, 11, 64, 64, 64, 64, 6,
	6, 6, 63, 63, 15, -60, 18, 17, -55, -55,
	15, 17, -11, 26, -18, -64, -64, -36, 15, 17,
	38, -68, -77, 11, -18, -77, 11, -77, 11, -77,
	4, 56, 10, -5, -1, -66, -18, 43, 15, -57,
	-11, -62, -31, 10, -18, 15, -57, -55, -5, -77,
	-18, 60, 43, 11, 60, 15, 58, 11, -55, -77,
	64, -77, 43, 43, -18, -18, 15, 18, 17, -1,
	-55, 15, -60, 15, -55, -55, -74, 4, -35, 15,
	54, 55, -1, -42, 16, 19, 15, 15, 17, -55,
	-68, -55, 64, -77, 66, -77, 66, -77, 66, -1,
	-18, 10, -1, 15, -11, -55, 15, 15, 60, -18,
	-15, 6, -1, 6, 6, 6, 66, 66, 60, -77,
	-1, 64, 64, -1, -55, -55, 15, 15, -55, 4,
	11, 6, -1, -1, -55, 15, -55, -77, -18, -15,
	60, -18, 6, 15, -57, 6, -18, 63, -1, -55,
	6, -35, -55, 54, 54, 55, 15, -77, -18, 4,
	56, 15, 10, -18, -55, -64, -64, -64, -1, -18,
	64, 15, -43, 18, 17, 15, -43, 15, -76, 11,
	-77, 11, 15, 18, 17, -1, -64, 15, -77, -1,
	-64, -64, -64,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 0, 0, 0, 20, 21, 22,
	23, 24, 0, 0, 0, 0, 15, 255, 0, 0,
	13, 258, 262, 259, 256, 19, 25, 26, 27, 28,
	13, 13, 145, 74, 238, 0, 0, 0, 0, 0,
	0, 45, 46, 47, 48, 49, 50, 0, 0, 196,
	197, 5, 6, 7, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 0, 0, 0, 0, 0, 13,
	13, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	133, 15, 143, 15, -2, 77, 86, 13, 0, 0,
	0, 106, 117, 118, 33, 15, 13, 20, 21, 22,
	23, 24, 110, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	15, 0, 250, 254, 108, 0, 0, 13, 0, 257,
	0, 0, 0, 0, 199, 0, 110, 0, 284, 13,
	186, 187, 188, 189, 71, 166, 167, 0, 164, 165,
	225, 233, 70, 79, 87, 89, 0, 190, 191, 192,
	193, 194, 195, 227, 0, 0, 0, 291, 229, 88,
	0, 122, 163, 226, 228, 83, 15, 0, 131, 133,
	134, 136, 0, 0, 15, 0, 0, 0, 0, 111,
	112, 0, 20, 21, 22, 23, 24, 78, 13, 120,
	122, 0, 0, 146, 147, 148, 157, 158, 170, 171,
	172, 0, 13, 0, 15, 220, 15, 13, 0, 122,
	0, 0, 149, 159, 0, 150, 160, 174, 175, 176,
	0, 151, 161, 178, 179, 180, 0, 152, 162, 153,
	182, 183, 184, 0, 154, 0, 0, 0, 15, 15,
	16, 17, 18, 0, 0, 268, 268, 0, 14, 0,
	0, 263, 264, 260, 261, 13, 200, 201, 0, 206,
	13, 13, -2, 0, 20, 0, 239, 240, 241, 15,
	168, 169, 80, 81, 0, -2, 103, 0, 282, 283,
	97, 0, 98, 84, 0, 133, 0, 0, 0, 137,
	139, 0, 140, 15, 142, 72, 13, 113, 0, 90,
	93, 95, 173, 0, 123, 124, 215, 0, 0, 221,
	15, 13, 122, 76, 13, 91, 94, 96, 92, 177,
	181, 185, 0, 0, 223, 0, 0, 15, 0, 0,
	242, 15, 251, 15, 109, 0, 0, 0, 287, 15,
	0, 15, 0, 13, 202, 0, 13, 0, 13, 0,
	13, 0, 75, 82, 85, 0, 265, 0, 125, 0,
	252, 15, 135, 132, 138, 129, 0, 0, 73, 0,
	119, 0, 0, 0, 0, 216, 219, 0, 0, 0,
	90, 0, 13, 0, 0, 0, 224, 0, 15, 15,
	237, 230, 0, 232, 0, 244, 15, 0, 248, 266,
	269, 270, 271, 272, 0, 0, 267, 285, 15, 0,
	15, 13, 198, 0, 207, 0, 208, 0, 209, 210,
	212, 104, 102, 126, 253, 0, 130, 141, 0, 114,
	115, 121, 99, 0, 107, 222, 217, 218, 0, 0,
	101, 0, 156, 15, 235, 236, 231, 243, 245, 0,
	0, 15, 15, 0, 0, 288, 13, 289, 203, 204,
	0, 0, 0, 127, 0, 20, 116, 0, 100, 234,
	15, 249, 247, 268, 15, 15, 286, 290, 205, 13,
	0, 128, 105, 0, 246, 0, 0, 0, 11, 13,
	155, 273, 0, 0, 268, 275, 0, 277, 211, 12,
	213, 13, 274, 0, 268, 268, 281, 276, 214, 268,
	279, 280, 278,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:213
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:215
		{
		}
	case 3:
		//line parser.y:217
		{
		}
	case 4:
		//line parser.y:219
		{
		}
	case 5:
		//line parser.y:221
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:223
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:225
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:231
		{
		}
	case 11:
		//line parser.y:233
		{
		}
	case 12:
		//line parser.y:234
		{
		}
	case 13:
		//line parser.y:236
		{
		}
	case 14:
		//line parser.y:237
		{
		}
	case 15:
		//line parser.y:240
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:242
		{
		}
	case 17:
		//line parser.y:244
		{
		}
	case 18:
		//line parser.y:246
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		//line parser.y:258
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 71:
		//line parser.y:261
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 72:
		//line parser.y:264
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 73:
		//line parser.y:271
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 74:
		//line parser.y:278
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 75:
		//line parser.y:282
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 76:
		//line parser.y:289
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 77:
		//line parser.y:296
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 78:
		//line parser.y:303
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 79:
		//line parser.y:310
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 80:
		//line parser.y:317
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 81:
		//line parser.y:325
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 82:
		//line parser.y:333
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 83:
		//line parser.y:341
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 84:
		//line parser.y:349
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 85:
		//line parser.y:357
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 86:
		//line parser.y:368
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 87:
		//line parser.y:375
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 88:
		//line parser.y:383
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 89:
		//line parser.y:391
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 90:
		//line parser.y:401
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 91:
		//line parser.y:409
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 92:
		//line parser.y:417
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 93:
		//line parser.y:425
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 94:
		//line parser.y:433
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 95:
		//line parser.y:441
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 96:
		//line parser.y:449
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 97:
		//line parser.y:457
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 98:
		//line parser.y:465
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 99:
		//line parser.y:475
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 100:
		//line parser.y:483
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 101:
		//line parser.y:494
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 102:
		//line parser.y:502
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 103:
		//line parser.y:512
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 104:
		//line parser.y:522
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 105:
		//line parser.y:524
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 106:
		//line parser.y:526
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 107:
		//line parser.y:528
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 108:
		//line parser.y:531
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 109:
		//line parser.y:533
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 110:
		//line parser.y:535
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 111:
		//line parser.y:537
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 112:
		//line parser.y:539
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:541
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 114:
		//line parser.y:548
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:550
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:552
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 117:
		//line parser.y:561
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:563
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:565
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:567
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:569
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 122:
		//line parser.y:572
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:574
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:576
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:580
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 126:
		//line parser.y:588
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 127:
		//line parser.y:597
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 128:
		//line parser.y:606
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:616
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:624
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:635
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 132:
		//line parser.y:637
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 133:
		//line parser.y:639
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 134:
		//line parser.y:641
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:643
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:646
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 137:
		//line parser.y:648
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 138:
		//line parser.y:650
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 139:
		//line parser.y:652
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 140:
		//line parser.y:656
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name: RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 141:
		//line parser.y:663
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 142:
		//line parser.y:673
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 143:
		//line parser.y:682
		{
			RubyVAL.genericValue = ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
		}
	case 144:
		//line parser.y:689
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(string)}, "")
			pieces := strings.Split(fullName, "::")

			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.Join(pieces[:len(pieces)-1], "::"),
				IsGlobalNamespace: false,
			}
		}
	case 145:
		//line parser.y:701
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(string), "::")
			namespace := strings.Join(pieces[:len(pieces)-1], "::")
			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.TrimPrefix(namespace, "::"),
				IsGlobalNamespace: true,
			}
		}
	case 146:
		//line parser.y:712
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 147:
		//line parser.y:719
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 148:
		//line parser.y:723
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 149:
		//line parser.y:727
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 150:
		//line parser.y:734
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 151:
		//line parser.y:741
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 152:
		//line parser.y:748
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 153:
		//line parser.y:756
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 154:
		//line parser.y:763
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 155:
		//line parser.y:771
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 156:
		//line parser.y:786
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 157:
		//line parser.y:792
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 158:
		//line parser.y:799
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 159:
		//line parser.y:803
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 160:
		//line parser.y:810
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 161:
		//line parser.y:817
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:824
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 163:
		//line parser.y:831
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 164:
		//line parser.y:834
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 165:
		//line parser.y:836
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 166:
		//line parser.y:839
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 167:
		//line parser.y:841
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 168:
		//line parser.y:844
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:846
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:849
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 171:
		//line parser.y:851
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 172:
		//line parser.y:853
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 173:
		//line parser.y:855
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 174:
		//line parser.y:858
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 175:
		//line parser.y:860
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 176:
		//line parser.y:862
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:864
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 178:
		//line parser.y:867
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 179:
		//line parser.y:869
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 180:
		//line parser.y:871
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:873
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 182:
		//line parser.y:876
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 183:
		//line parser.y:878
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 184:
		//line parser.y:880
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 185:
		//line parser.y:882
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 186:
		//line parser.y:885
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 187:
		//line parser.y:886
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 188:
		//line parser.y:887
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:888
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:891
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 191:
		//line parser.y:900
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 192:
		//line parser.y:909
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 193:
		//line parser.y:918
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 194:
		//line parser.y:927
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 195:
		//line parser.y:936
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:944
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 197:
		//line parser.y:945
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 198:
		//line parser.y:947
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 199:
		//line parser.y:949
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 200:
		//line parser.y:951
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 201:
		//line parser.y:953
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 202:
		//line parser.y:955
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 203:
		//line parser.y:962
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 204:
		//line parser.y:964
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 205:
		//line parser.y:966
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 206:
		//line parser.y:974
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 207:
		//line parser.y:976
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 208:
		//line parser.y:984
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 209:
		//line parser.y:992
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 210:
		//line parser.y:995
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 211:
		//line parser.y:1002
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 212:
		//line parser.y:1010
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 213:
		//line parser.y:1017
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 214:
		//line parser.y:1024
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 215:
		//line parser.y:1032
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 216:
		//line parser.y:1034
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 217:
		//line parser.y:1041
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 218:
		//line parser.y:1045
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 219:
		//line parser.y:1048
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 220:
		//line parser.y:1050
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 221:
		//line parser.y:1052
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 222:
		//line parser.y:1054
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 223:
		//line parser.y:1057
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 224:
		//line parser.y:1064
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 225:
		//line parser.y:1072
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 226:
		//line parser.y:1079
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 227:
		//line parser.y:1086
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 228:
		//line parser.y:1093
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 229:
		//line parser.y:1100
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 230:
		//line parser.y:1107
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 231:
		//line parser.y:1114
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 232:
		//line parser.y:1122
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 233:
		//line parser.y:1129
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 234:
		//line parser.y:1138
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 235:
		//line parser.y:1145
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 236:
		//line parser.y:1152
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 237:
		//line parser.y:1159
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 238:
		//line parser.y:1166
		{
		}
	case 239:
		//line parser.y:1167
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 240:
		//line parser.y:1168
		{
		}
	case 241:
		//line parser.y:1171
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 242:
		//line parser.y:1174
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 243:
		//line parser.y:1181
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 244:
		//line parser.y:1190
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 245:
		//line parser.y:1192
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 246:
		//line parser.y:1205
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 247:
		//line parser.y:1224
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 248:
		//line parser.y:1238
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 249:
		//line parser.y:1240
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 250:
		//line parser.y:1243
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 251:
		//line parser.y:1245
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 252:
		//line parser.y:1248
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 253:
		//line parser.y:1250
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1253
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 255:
		//line parser.y:1260
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 256:
		//line parser.y:1262
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 257:
		//line parser.y:1265
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 258:
		//line parser.y:1273
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 259:
		//line parser.y:1277
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 260:
		//line parser.y:1279
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 261:
		//line parser.y:1281
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 262:
		//line parser.y:1285
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 263:
		//line parser.y:1287
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 264:
		//line parser.y:1289
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 265:
		//line parser.y:1293
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 266:
		//line parser.y:1302
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 267:
		//line parser.y:1304
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 268:
		//line parser.y:1307
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 269:
		//line parser.y:1309
		{
		}
	case 270:
		//line parser.y:1311
		{
		}
	case 271:
		//line parser.y:1313
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 272:
		//line parser.y:1315
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 273:
		//line parser.y:1318
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 274:
		//line parser.y:1325
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 275:
		//line parser.y:1333
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 276:
		//line parser.y:1340
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 277:
		//line parser.y:1348
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 278:
		//line parser.y:1356
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 279:
		//line parser.y:1363
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 280:
		//line parser.y:1370
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 281:
		//line parser.y:1377
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 282:
		//line parser.y:1385
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 283:
		//line parser.y:1388
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 284:
		//line parser.y:1390
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 285:
		//line parser.y:1393
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 286:
		//line parser.y:1395
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 287:
		//line parser.y:1397
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 288:
		//line parser.y:1399
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 289:
		//line parser.y:1402
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 290:
		//line parser.y:1404
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 291:
		//line parser.y:1406
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

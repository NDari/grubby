//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	astString       ast.String
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const LPAREN = 57355
const RPAREN = 57356
const COMMA = 57357
const STRING = 57358
const NamespacedModule = 57359
const ProcArg = 57360
const DO = 57361
const DEF = 57362
const END = 57363
const IF = 57364
const ELSE = 57365
const ELSIF = 57366
const UNLESS = 57367
const CLASS = 57368
const MODULE = 57369
const FOR = 57370
const WHILE = 57371
const UNTIL = 57372
const BEGIN = 57373
const RESCUE = 57374
const ENSURE = 57375
const BREAK = 57376
const NEXT = 57377
const REDO = 57378
const RETRY = 57379
const RETURN = 57380
const YIELD = 57381
const AND = 57382
const OR = 57383
const LAMBDA = 57384
const CASE = 57385
const WHEN = 57386
const ALIAS = 57387
const SELF = 57388
const NIL = 57389
const DEFINED = 57390
const LESSTHAN = 57391
const GREATERTHAN = 57392
const EQUALTO = 57393
const BANG = 57394
const COMPLEMENT = 57395
const BINARY_PLUS = 57396
const UNARY_PLUS = 57397
const BINARY_MINUS = 57398
const UNARY_MINUS = 57399
const STAR = 57400
const RANGE = 57401
const EXCLUSIVE_RANGE = 57402
const OR_EQUALS = 57403
const AND_EQUALS = 57404
const WHITESPACE = 57405
const NEWLINE = 57406
const SEMICOLON = 57407
const COLON = 57408
const DOT = 57409
const PIPE = 57410
const SLASH = 57411
const AMPERSAND = 57412
const QUESTIONMARK = 57413
const CARET = 57414
const LBRACKET = 57415
const RBRACKET = 57416
const LBRACE = 57417
const RBRACE = 57418
const ATSIGN = 57419
const FILE_CONST_REF = 57420
const LINE_CONST_REF = 57421
const EOF = 57422

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"DEFINED",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"EXCLUSIVE_RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1953

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 130,
	67, 22,
	-2, 151,
	-1, 142,
	20, 266,
	22, 266,
	25, 266,
	26, 266,
	27, 266,
	29, 266,
	30, 266,
	31, 266,
	34, 266,
	35, 266,
	37, 266,
	38, 266,
	39, 266,
	43, 266,
	45, 266,
	65, 266,
	-2, 13,
	-1, 215,
	20, 266,
	22, 266,
	25, 266,
	26, 266,
	27, 266,
	29, 266,
	30, 266,
	31, 266,
	34, 266,
	35, 266,
	37, 266,
	38, 266,
	39, 266,
	43, 266,
	45, 266,
	65, 266,
	-2, 13,
	-1, 370,
	4, 22,
	5, 22,
	40, 22,
	41, 22,
	49, 22,
	50, 22,
	54, 22,
	56, 22,
	67, 22,
	68, 22,
	69, 22,
	70, 22,
	-2, 126,
	-1, 382,
	20, 266,
	22, 266,
	25, 266,
	26, 266,
	27, 266,
	29, 266,
	30, 266,
	31, 266,
	34, 266,
	35, 266,
	37, 266,
	38, 266,
	39, 266,
	43, 266,
	45, 266,
	65, 266,
	-2, 13,
	-1, 420,
	4, 35,
	5, 35,
	40, 35,
	41, 35,
	50, 35,
	54, 35,
	56, 35,
	64, 13,
	67, 35,
	68, 35,
	69, 35,
	70, 35,
	76, 13,
	-2, 15,
	-1, 606,
	15, 133,
	-2, 13,
}

const RubyNprod = 333
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4853

var RubyAct = []int{

	348, 473, 5, 649, 448, 472, 475, 144, 156, 157,
	145, 191, 437, 261, 264, 355, 262, 143, 56, 55,
	25, 2, 3, 226, 419, 545, 227, 354, 336, 26,
	14, 323, 133, 21, 70, 130, 69, 4, 134, 608,
	135, 354, 123, 28, 95, 613, 431, 583, 314, 290,
	354, 607, 354, 565, 101, 354, 354, 102, 188, 189,
	537, 103, 198, 199, 563, 278, 124, 540, 539, 152,
	428, 389, 389, 151, 96, 97, 202, 152, 389, 339,
	389, 155, 326, 220, 221, 389, 426, 410, 390, 218,
	214, 389, 435, 228, 297, 204, 99, 98, 94, 317,
	293, 94, 229, 230, 231, 94, 73, 72, 203, 180,
	155, 238, 100, 177, 269, 94, 243, 94, 94, 94,
	172, 127, 250, 251, 128, 219, 256, 257, 258, 259,
	544, 430, 167, 219, 165, 176, 646, 427, 268, 425,
	434, 180, 171, 625, 408, 177, 245, 270, 123, 498,
	388, 276, 52, 277, 254, 178, 179, 167, 176, 165,
	125, 126, 171, 129, 175, 627, 385, 176, 283, 306,
	307, 308, 124, 311, 312, 313, 281, 296, 320, 321,
	322, 285, 327, 328, 329, 596, 354, 595, 164, 354,
	155, 284, 287, 289, 166, 597, 305, 168, 253, 176,
	136, 310, 497, 161, 330, 340, 319, 357, 358, 359,
	360, 568, 493, 196, 507, 354, 196, 161, 372, 166,
	279, 365, 171, 367, 557, 155, 506, 356, 492, 471,
	396, 167, 161, 165, 354, 354, 181, 196, 196, 196,
	304, 378, 181, 364, 354, 309, 196, 354, 272, 175,
	318, 379, 182, 183, 122, 121, 30, 196, 331, 196,
	196, 354, 196, 645, 196, 196, 196, 196, 391, 196,
	644, 168, 196, 196, 354, 494, 196, 196, 630, 265,
	394, 169, 170, 211, 101, 172, 406, 102, 74, 628,
	267, 103, 196, 166, 265, 173, 174, 446, 474, 196,
	196, 196, 196, 291, 131, 267, 155, 171, 367, 604,
	599, 493, 161, 101, 424, 554, 102, 196, 101, 196,
	103, 102, 187, 185, 196, 103, 621, 622, 315, 196,
	266, 281, 101, 324, 155, 102, 132, 333, 337, 103,
	265, 101, 548, 581, 102, 395, 263, 161, 103, 494,
	532, 267, 533, 582, 487, 620, 445, 449, 186, 184,
	344, 345, 451, 155, 452, 161, 196, 208, 454, 450,
	209, 477, 393, 453, 352, 279, 206, 101, 350, 207,
	102, 464, 461, 351, 103, 453, 196, 463, 361, 196,
	300, 266, 278, 442, 662, 443, 659, 658, 459, 196,
	196, 155, 155, 483, 446, 444, 456, 482, 476, 187,
	389, 466, 397, 480, 481, 469, 490, 491, 167, 478,
	657, 495, 659, 658, 576, 185, 512, 511, 161, 510,
	393, 512, 511, 294, 376, 522, 139, 377, 489, 513,
	140, 78, 140, 78, 140, 78, 210, 196, 562, 527,
	527, 196, 196, 516, 196, 465, 161, 561, 433, 432,
	429, 417, 411, 400, 399, 535, 398, 397, 342, 341,
	260, 233, 547, 634, 362, 521, 368, 416, 546, 549,
	550, 349, 1, 217, 92, 161, 91, 90, 89, 555,
	550, 88, 87, 559, 560, 41, 40, 39, 155, 38,
	528, 20, 43, 196, 44, 16, 12, 13, 570, 196,
	11, 45, 573, 24, 23, 22, 27, 19, 10, 35,
	18, 15, 71, 161, 161, 42, 17, 108, 196, 46,
	586, 587, 37, 36, 196, 31, 29, 196, 196, 32,
	75, 0, 196, 0, 0, 0, 0, 594, 0, 196,
	0, 0, 0, 0, 601, 603, 0, 0, 600, 602,
	161, 0, 0, 117, 118, 605, 0, 606, 491, 593,
	610, 0, 106, 107, 0, 196, 0, 109, 0, 110,
	0, 111, 119, 120, 0, 0, 0, 196, 196, 489,
	105, 114, 112, 113, 0, 0, 0, 504, 626, 0,
	0, 0, 0, 0, 0, 0, 196, 629, 550, 631,
	550, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	161, 0, 0, 53, 0, 640, 641, 642, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 527, 527, 0, 653, 0, 0, 0, 0,
	0, 660, 0, 0, 0, 0, 661, 0, 0, 664,
	0, 0, 527, 0, 665, 666, 527, 527, 527, 667,
	0, 137, 0, 0, 162, 584, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 197, 162, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 197, 197,
	197, 161, 0, 0, 0, 0, 0, 197, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	197, 197, 0, 197, 614, 197, 197, 197, 197, 0,
	197, 0, 0, 197, 197, 0, 0, 197, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 108, 0, 197, 0, 0, 0, 0, 0, 0,
	197, 197, 197, 197, 292, 0, 0, 0, 196, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 197, 0,
	197, 0, 0, 0, 0, 197, 0, 117, 118, 316,
	197, 0, 0, 0, 325, 0, 106, 107, 334, 338,
	0, 109, 0, 110, 0, 111, 119, 120, 162, 0,
	0, 0, 0, 0, 105, 114, 112, 113, 0, 0,
	0, 409, 0, 0, 0, 0, 162, 197, 70, 159,
	69, 79, 160, 78, 163, 142, 0, 150, 95, 0,
	164, 152, 0, 0, 0, 0, 0, 197, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 197, 0, 0, 81, 0, 0, 0, 96, 97,
	93, 0, 0, 147, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 148, 149, 0, 108, 0, 0, 162,
	0, 0, 0, 0, 0, 146, 0, 153, 0, 94,
	73, 72, 0, 0, 0, 0, 0, 115, 197, 0,
	0, 0, 197, 197, 104, 197, 0, 162, 0, 0,
	0, 0, 117, 118, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 0, 0, 0, 109, 0, 110, 0,
	111, 119, 120, 0, 0, 0, 162, 0, 0, 105,
	114, 112, 113, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 34, 0, 0, 0, 0,
	197, 70, 194, 69, 79, 195, 78, 135, 80, 0,
	0, 95, 0, 0, 162, 162, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 197, 0, 0, 197, 197,
	0, 0, 0, 197, 0, 0, 0, 81, 63, 0,
	197, 96, 97, 93, 0, 0, 158, 82, 83, 0,
	84, 162, 85, 86, 0, 0, 158, 0, 0, 158,
	158, 0, 0, 0, 0, 0, 197, 0, 76, 0,
	77, 0, 94, 73, 72, 158, 0, 0, 197, 197,
	158, 158, 158, 0, 0, 0, 108, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	158, 0, 158, 158, 197, 158, 0, 158, 158, 158,
	158, 162, 158, 0, 0, 158, 158, 0, 0, 158,
	158, 0, 117, 118, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 0, 158, 109, 0, 110, 0,
	111, 0, 158, 158, 158, 158, 0, 0, 0, 105,
	114, 112, 113, 0, 0, 158, 647, 0, 0, 0,
	158, 0, 158, 0, 0, 0, 585, 158, 0, 117,
	118, 0, 158, 0, 0, 0, 0, 0, 106, 107,
	158, 0, 162, 109, 0, 110, 0, 111, 0, 0,
	158, 0, 0, 0, 0, 0, 105, 114, 112, 113,
	0, 0, 162, 572, 0, 0, 0, 0, 158, 158,
	0, 197, 0, 0, 70, 159, 69, 79, 160, 78,
	163, 142, 0, 0, 95, 615, 164, 152, 0, 158,
	0, 0, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 158, 0, 0, 0, 0, 0, 0,
	81, 197, 0, 0, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 108, 0, 197,
	0, 158, 0, 0, 460, 0, 0, 0, 0, 0,
	0, 301, 0, 153, 0, 94, 73, 72, 0, 0,
	158, 0, 0, 0, 420, 158, 0, 158, 0, 158,
	0, 0, 0, 117, 118, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 0, 0, 0, 109, 0, 110,
	0, 111, 0, 0, 0, 0, 0, 0, 158, 0,
	105, 114, 112, 113, 0, 0, 0, 571, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 9, 0, 0,
	0, 0, 158, 70, 159, 69, 79, 160, 78, 163,
	215, 0, 0, 95, 0, 164, 158, 158, 0, 0,
	0, 420, 0, 212, 0, 0, 0, 158, 0, 0,
	158, 158, 0, 0, 0, 158, 0, 0, 0, 81,
	0, 0, 158, 96, 97, 93, 0, 0, 154, 82,
	83, 0, 84, 158, 85, 86, 0, 0, 192, 0,
	0, 200, 205, 0, 0, 0, 0, 0, 158, 0,
	76, 0, 77, 0, 94, 73, 72, 216, 0, 0,
	158, 158, 222, 223, 224, 0, 0, 201, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 158,
	0, 213, 232, 0, 234, 235, 158, 237, 0, 239,
	240, 241, 242, 158, 244, 0, 0, 248, 249, 0,
	0, 252, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 0, 0, 0, 273, 0, 0,
	0, 246, 247, 0, 280, 282, 286, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 302, 0, 255, 0, 275, 0, 0, 255,
	0, 0, 0, 0, 255, 0, 0, 298, 0, 0,
	0, 0, 335, 0, 158, 0, 0, 0, 0, 303,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 0, 0, 0, 0, 0,
	363, 369, 0, 158, 0, 0, 70, 159, 69, 79,
	160, 78, 163, 142, 353, 150, 95, 0, 164, 152,
	0, 335, 0, 0, 383, 0, 0, 0, 0, 371,
	0, 0, 0, 375, 386, 387, 0, 0, 0, 0,
	0, 0, 81, 158, 0, 0, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 158, 0, 216, 70, 370, 69, 79, 195, 78,
	135, 80, 0, 301, 95, 153, 0, 94, 73, 72,
	0, 0, 413, 0, 0, 0, 369, 421, 0, 423,
	0, 216, 407, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 96, 97, 93, 0, 412, 0,
	82, 83, 0, 84, 422, 85, 86, 0, 0, 0,
	154, 0, 354, 0, 0, 0, 297, 0, 0, 0,
	0, 76, 0, 77, 366, 94, 73, 72, 447, 0,
	0, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 154, 216,
	0, 0, 0, 462, 33, 0, 0, 0, 0, 255,
	0, 0, 468, 470, 0, 0, 455, 413, 0, 0,
	104, 457, 458, 0, 479, 0, 0, 0, 117, 118,
	0, 0, 0, 0, 0, 488, 467, 106, 107, 0,
	0, 0, 109, 0, 110, 0, 111, 0, 0, 0,
	503, 0, 0, 138, 141, 105, 114, 112, 113, 116,
	486, 0, 508, 509, 0, 193, 343, 0, 193, 0,
	0, 0, 499, 0, 501, 0, 0, 0, 505, 0,
	0, 192, 0, 0, 0, 0, 0, 0, 542, 193,
	193, 193, 0, 0, 0, 216, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	538, 193, 193, 541, 193, 543, 193, 193, 193, 193,
	0, 193, 0, 0, 193, 193, 190, 0, 193, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 558, 0, 0, 193, 0, 0, 108, 0, 0,
	0, 193, 193, 193, 193, 0, 566, 0, 0, 0,
	569, 0, 0, 0, 0, 0, 592, 0, 0, 193,
	0, 193, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 193, 0, 117, 118, 0, 488, 0, 0, 193,
	591, 0, 106, 107, 0, 609, 0, 109, 0, 110,
	598, 111, 119, 120, 0, 271, 0, 0, 274, 384,
	105, 114, 112, 113, 0, 0, 0, 0, 193, 295,
	0, 70, 159, 69, 79, 160, 78, 163, 142, 0,
	0, 95, 0, 164, 152, 633, 0, 0, 193, 0,
	0, 193, 0, 0, 624, 0, 0, 0, 0, 0,
	0, 193, 193, 643, 0, 0, 0, 81, 0, 0,
	632, 96, 97, 93, 0, 0, 147, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 403, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	153, 0, 94, 73, 72, 0, 0, 655, 0, 193,
	0, 0, 0, 193, 193, 0, 193, 0, 0, 0,
	663, 0, 108, 0, 0, 117, 118, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 0, 0, 392, 109,
	0, 110, 0, 111, 119, 120, 0, 401, 0, 0,
	404, 0, 105, 114, 112, 113, 0, 0, 117, 118,
	0, 0, 0, 0, 0, 193, 0, 106, 107, 0,
	0, 193, 109, 415, 110, 418, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 114, 112, 113, 116,
	193, 0, 0, 0, 0, 0, 193, 0, 0, 193,
	193, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 70, 159, 69, 79, 160, 78, 163, 80, 193,
	193, 95, 418, 164, 0, 0, 0, 0, 0, 0,
	0, 523, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 0, 0, 193, 0, 81, 0, 0,
	484, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 500, 502, 0, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 0, 514, 0, 0, 0,
	518, 519, 0, 520, 0, 0, 0, 0, 0, 534,
	0, 536, 0, 0, 70, 194, 69, 79, 195, 78,
	135, 80, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 551, 0, 0, 0, 0, 0, 552, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 96, 97, 93, 0, 0, 0,
	82, 83, 193, 84, 0, 85, 86, 0, 0, 574,
	575, 0, 354, 108, 0, 0, 297, 616, 580, 0,
	0, 76, 0, 77, 656, 94, 73, 72, 0, 0,
	588, 0, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 117,
	118, 108, 0, 0, 0, 0, 0, 0, 106, 107,
	193, 0, 635, 109, 0, 110, 0, 111, 0, 0,
	611, 0, 0, 0, 0, 612, 105, 114, 112, 113,
	617, 618, 619, 0, 0, 0, 0, 117, 118, 0,
	0, 0, 0, 0, 0, 0, 106, 107, 0, 0,
	0, 109, 0, 110, 0, 111, 0, 0, 0, 0,
	637, 638, 639, 0, 105, 114, 112, 113, 440, 441,
	70, 50, 69, 79, 51, 78, 54, 80, 0, 0,
	95, 0, 0, 0, 47, 652, 529, 651, 650, 530,
	48, 49, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 50, 69, 79, 51, 78,
	54, 80, 0, 0, 95, 0, 0, 0, 47, 648,
	529, 651, 650, 530, 48, 49, 0, 61, 62, 59,
	0, 0, 65, 66, 0, 67, 64, 60, 0, 0,
	81, 63, 0, 68, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 525, 526, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 70, 50,
	69, 79, 51, 78, 54, 80, 0, 0, 95, 0,
	0, 0, 47, 515, 57, 439, 438, 58, 48, 49,
	0, 61, 62, 59, 0, 0, 65, 66, 0, 67,
	64, 60, 0, 0, 81, 63, 0, 68, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	73, 72, 70, 50, 69, 79, 51, 78, 54, 80,
	0, 0, 95, 0, 0, 0, 47, 436, 57, 439,
	438, 58, 48, 49, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 73, 72, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 0, 57, 0, 0, 58, 48, 49, 0, 61,
	62, 59, 446, 474, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 346, 347, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 50, 69, 79, 51, 78, 54, 80, 0, 0,
	95, 0, 0, 0, 47, 577, 57, 0, 0, 58,
	48, 49, 0, 61, 62, 59, 0, 578, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 50, 69, 79, 51, 78,
	54, 80, 0, 0, 95, 0, 0, 0, 47, 0,
	57, 0, 0, 58, 48, 49, 0, 61, 62, 59,
	0, 0, 65, 66, 0, 67, 64, 60, 0, 0,
	81, 63, 0, 68, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 6, 7, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 8, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 654, 529, 0, 0, 530, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 525, 526, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 636, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 623, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 589, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	579, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 0, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 564,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 556, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 531, 529, 0, 0, 530, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 525, 526, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 524, 529, 0, 0,
	530, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 525,
	526, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	517, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 496, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 485, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 414, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 405, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	402, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 0, 529, 0, 0, 530, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 525, 526, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 0, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 374, 0, 95, 0, 0,
	0, 47, 0, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 0, 373, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 0, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	0, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 70, 194,
	69, 79, 195, 78, 135, 382, 0, 0, 95, 0,
	0, 152, 76, 0, 77, 0, 94, 73, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 96, 97,
	93, 0, 0, 380, 82, 83, 0, 84, 0, 85,
	86, 70, 370, 69, 79, 195, 78, 135, 80, 0,
	0, 95, 0, 0, 0, 381, 0, 153, 0, 94,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 366, 94, 73, 72, 70, 159, 69, 79, 160,
	78, 163, 142, 0, 0, 95, 0, 164, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 70, 194,
	69, 79, 195, 78, 135, 80, 0, 0, 95, 0,
	0, 0, 301, 0, 153, 0, 94, 73, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	73, 72, 70, 194, 69, 79, 195, 78, 135, 80,
	0, 0, 95, 0, 0, 0, 70, 332, 69, 79,
	195, 78, 135, 80, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 81, 85, 86, 0, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 76,
	0, 77, 0, 94, 73, 72, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 159, 69, 79, 160, 78, 163, 80, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	567, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 108, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 118, 76, 0, 77,
	0, 94, 73, 72, 106, 107, 108, 0, 0, 109,
	0, 110, 0, 111, 0, 0, 0, 0, 0, 117,
	118, 0, 105, 114, 112, 113, 0, 0, 106, 107,
	0, 0, 0, 109, 0, 110, 0, 111, 0, 0,
	0, 0, 117, 118, 0, 0, 105, 114, 112, 113,
	0, 106, 107, 0, 0, 0, 109, 0, 110, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	114, 112, 113,
}
var RubyPact = []int{

	-43, 2828, -1000, -1000, -1000, 32, -1000, -1000, -1000, 892,
	-1000, -1000, -1000, -1000, 230, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 203, 99, -1000, 96, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28, 432, 434,
	832, 220, 234, 94, 191, 308, 307, 4309, 4309, -1000,
	4616, 4309, 4309, 4616, 4704, 354, 345, -1000, 438, -1000,
	-1000, 267, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1327,
	-1000, 58, 4309, 4309, 4616, 4616, 4616, -1000, -1000, -1000,
	-1000, -1000, -1000, 4616, 16, -1000, -1000, -1000, -1000, -1000,
	-1000, 4309, 4309, 4309, 4616, 464, 4616, 4616, -1000, 4616,
	4309, 4616, 4616, 4616, 4616, 4309, 4616, -1000, -1000, 4616,
	4616, 4309, 4309, 4616, 4616, 4309, 4309, 4309, 4309, 463,
	333, 71, 47, 333, -1000, -1000, -1000, -1000, 199, 4616,
	407, -1000, -1000, 58, -1000, 50, 4616, 975, 4616, 4616,
	42, 418, 26, -1000, 4759, -1000, -1000, 375, -7, 1915,
	146, 69, 62, 185, 4616, -1000, 4616, -1000, 4309, 4309,
	4309, 4616, 4309, 4309, 4309, 41, 4616, 4309, 4309, 4309,
	24, 4309, 4309, 4309, 4630, 21, 462, 461, 355, 296,
	4087, 363, 4782, -1000, 4489, 121, 89, 85, 319, 310,
	4782, 183, 363, -1000, -1000, 2008, 4309, 4309, 4309, 4309,
	380, -1000, 2125, 4415, 377, -1000, 4759, 4161, -1000, -1000,
	355, 355, 4782, 4782, 4782, 4782, -1000, -1000, 427, 355,
	355, 355, 4782, 4362, 4782, 4782, 4542, 4782, 355, 4782,
	4782, 4782, 4782, 355, 1843, 100, 4542, 4542, 4782, 4782,
	355, 355, 4782, 76, 14, 1975, 355, 355, 355, 355,
	58, -1000, 415, 287, -1000, 179, 460, 459, 457, 456,
	-1000, 3939, 434, 4782, 3865, 2125, -1000, -1000, -1000, 70,
	757, 13, 1688, -1000, -1000, -1000, 2008, -1000, 2008, -1000,
	-1000, -1000, -1000, 455, 4616, 3791, -1000, 454, 1598, 4616,
	-1000, 4616, 4782, 2125, 65, 12, 355, 355, 355, 63,
	-4, 355, 355, 355, -1000, -1000, -1000, 453, 57, -28,
	355, 355, 355, -1000, -1000, -1000, 452, 355, 355, 355,
	410, 395, 1540, 149, 126, 4782, -1000, -1000, -1000, 451,
	394, 67, 19, 2606, -1000, -1000, -1000, -1000, 355, 372,
	4616, -1000, -1000, 183, -1000, 341, 4616, 355, 355, 355,
	355, -1000, 391, 4782, -1000, -1000, -1000, 375, 383, 4759,
	1188, 2125, 355, -1000, -1000, 2218, -1000, -1000, -1000, 58,
	4309, 4616, -1000, 4782, 4616, 4616, 4782, 4782, 178, 4616,
	-1000, -1000, 2680, 272, 357, 405, 4616, -1000, -1000, 333,
	333, 2680, -1000, -1000, 3717, -1000, 339, 2125, 177, 260,
	-1000, -1000, 170, 4782, -1000, 3643, 134, -1000, 4087, -1000,
	-7, 4782, 4542, 523, 377, 175, -1000, 163, -1000, -1000,
	-1000, -1000, -1000, -1000, 4616, 4616, -1000, 408, 4309, -1000,
	2532, 3569, -1000, -1000, -1000, -1000, 430, 4782, 3495, 3421,
	329, -1000, -1000, 4616, 363, -14, -1000, -8, -9, -1000,
	4616, 377, 4782, -1000, 355, 56, -49, 2125, 4782, -1000,
	1975, 4309, 321, 265, -1000, -1000, -1000, -1000, -1000, 4782,
	-1000, -1000, 294, 265, 3347, -1000, 210, -1000, 4759, -1000,
	-1000, 375, 4309, 4309, 450, -1000, -1000, -1000, 441, -12,
	3273, -23, 4087, 4735, 161, 197, -1000, 4309, 1243, 1109,
	-1000, 4309, -1000, 355, 4087, -1000, 403, -1000, 2754, 3199,
	4087, 338, 40, -1000, -1000, -1000, -1000, 355, -1000, 4309,
	4309, -1000, -1000, -1000, 3125, 363, 4087, -1000, 2125, -1000,
	-1000, 180, 4782, 171, 144, -1000, 339, 355, -1000, 289,
	-1000, 4087, 2680, 2680, -1000, 288, -1000, 58, 2125, 355,
	355, -22, -1000, -1000, -1000, -1000, -37, 4616, -1000, 4235,
	355, 334, -1000, 355, 4087, 4087, -1000, -1000, -1000, -1000,
	4087, 38, 434, -1000, -1000, -1000, 291, 262, 3051, -1000,
	4087, 125, 4782, -1000, -1000, 77, -1000, 4309, 151, -1000,
	268, 265, 257, 265, -1000, -1000, -1000, 4616, -1000, 2317,
	355, 4087, 2977, -1000, -1000, -1000, -1000, 4087, 4087, 4087,
	-1000, -1000, -1000, -1000, 125, 4616, 355, -1000, -1000, 249,
	-1000, 242, 122, 1062, -1000, -1000, -1000, 4087, 4087, 4087,
	2458, 2384, 2903, 2279, -1000, -1000, -1000, -1000, -1000, 399,
	4309, -1000, -1000, 373, -1000, 125, -1000, -1000, 4309, -1000,
	355, 4013, -1000, 125, 355, 4013, 4013, 4013,
}
var RubyPgo = []int{

	0, 540, 0, 288, 539, 29, 7, 536, 535, 533,
	532, 6, 529, 43, 526, 8, 525, 30, 522, 521,
	520, 1327, 256, 623, 975, 519, 518, 517, 516, 515,
	514, 513, 511, 510, 507, 14, 152, 506, 505, 1704,
	15, 33, 504, 502, 20, 501, 500, 3, 19, 499,
	497, 496, 495, 492, 491, 488, 487, 486, 484, 1766,
	483, 1, 17, 24, 12, 482, 13, 9, 4, 5,
	481, 10, 477, 11, 476, 73, 18, 16, 475, 474,
	473, 1353,
}
var RubyR1 = []int{

	0, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 80, 80, 81, 81, 59, 59, 59, 59, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 32, 32,
	32, 32, 32, 32, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 18, 18, 44, 16, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
	62, 62, 62, 62, 73, 73, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 15, 75, 75, 69, 69,
	26, 26, 26, 26, 26, 26, 26, 26, 66, 66,
	66, 77, 77, 77, 35, 35, 35, 35, 33, 33,
	34, 37, 39, 39, 39, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 19, 19, 19, 76, 76, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 36, 36, 23, 23, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 8, 3, 1, 79, 79, 79, 79,
	79, 79, 79, 4, 4, 4, 67, 67, 74, 74,
	74, 6, 6, 6, 6, 6, 6, 63, 72, 72,
	72, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 64, 64, 64, 64, 60, 60, 60, 9,
	20, 20, 20, 20, 11, 11, 11, 11, 11, 11,
	11, 11, 78, 78, 70, 70, 61, 61, 27, 27,
	28, 29, 29, 29, 29, 31, 31, 31, 30, 30,
	30, 13, 13, 45, 45, 45, 68, 68, 68, 68,
	68, 46, 46, 46, 46, 46, 47, 47, 47, 47,
	43, 42, 10, 41, 41, 41, 41, 40, 40, 5,
	5, 7, 12,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 6,
	7, 1, 2, 6, 6, 2, 3, 2, 3, 4,
	5, 4, 3, 4, 5, 2, 3, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 6, 6, 6, 6, 7, 6, 6, 8, 4,
	5, 8, 1, 4, 1, 3, 0, 1, 1, 1,
	1, 4, 4, 4, 4, 2, 1, 3, 0, 2,
	6, 7, 8, 8, 9, 9, 6, 7, 1, 3,
	3, 0, 1, 3, 1, 2, 3, 2, 4, 6,
	5, 4, 1, 2, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 9, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 3, 3, 3, 3,
	4, 3, 3, 3, 4, 3, 3, 3, 4, 3,
	3, 3, 4, 2, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 5, 1, 1, 0, 1, 1, 1,
	4, 4, 4, 3, 5, 5, 3, 7, 3, 7,
	8, 3, 4, 5, 5, 5, 6, 3, 0, 1,
	3, 4, 5, 3, 3, 3, 3, 3, 5, 6,
	5, 3, 4, 3, 3, 2, 0, 2, 2, 3,
	4, 6, 8, 6, 2, 3, 5, 5, 5, 4,
	4, 4, 1, 3, 0, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 1, 1, 3, 3, 1, 3,
	3, 5, 5, 5, 5, 3, 0, 2, 2, 2,
	2, 5, 6, 5, 6, 5, 4, 3, 3, 2,
	4, 4, 2, 5, 7, 4, 6, 4, 5, 3,
	3, 3, 2,
}
var RubyChk = []int{

	-1000, -65, 64, 65, 80, -2, 64, 65, 80, -21,
	-26, -33, -37, -34, -17, -19, -38, -14, -20, -27,
	-45, -41, -29, -30, -31, -44, -5, -28, -13, -7,
	-22, -8, -4, -39, -24, -25, -9, -10, -49, -50,
	-51, -52, -16, -43, -42, -32, -12, 20, 26, 27,
	7, 10, -36, -23, 12, -48, -76, 22, 25, 31,
	39, 29, 30, 43, 38, 34, 35, 37, 45, 8,
	6, -18, 79, 78, -3, -1, 73, 75, 11, 9,
	13, 42, 52, 53, 55, 57, 58, -53, -54, -55,
	-56, -57, -58, 48, 77, 16, 46, 47, 65, 64,
	80, 22, 25, 29, 32, 67, 49, 50, 4, 54,
	56, 58, 69, 70, 68, 25, 71, 40, 41, 59,
	60, 25, 51, 49, 73, 61, 62, 22, 25, 67,
	7, -22, -3, 4, 10, 12, -36, -23, -39, 4,
	10, -39, 13, -62, -6, -71, 73, 51, 61, 62,
	15, -75, 19, 75, -21, -17, -15, -67, -24, 7,
	10, -36, -23, 12, 18, 13, 73, 11, 51, 61,
	62, 73, 51, 61, 62, 15, 73, 51, 61, 62,
	15, 51, 61, 62, 51, 15, 51, 15, -2, -2,
	-59, -73, -21, -39, 7, 10, -36, -23, -2, -2,
	-21, -81, -73, -13, -17, -21, 22, 25, 22, 25,
	8, 16, -81, -81, -71, 13, -21, -60, -6, 75,
	-2, -2, -21, -21, -21, -21, 7, 10, 77, -2,
	-2, -2, -21, 7, -21, -21, -81, -21, -2, -21,
	-21, -21, -21, -2, -21, -5, -81, -81, -21, -21,
	-2, -2, -21, -75, -5, -21, -2, -2, -2, -2,
	7, -66, -77, 13, -35, 7, 58, 18, 67, 67,
	-66, -59, 49, -21, -59, -81, -6, -6, 15, -75,
	-21, -5, -21, -44, -13, -41, -21, -13, -21, -13,
	7, -36, -23, 58, 15, -59, -63, 68, -81, 5,
	15, 73, -21, -81, -75, -5, -2, -2, -2, -75,
	-5, -2, -2, -2, 7, -36, -23, 58, -75, -5,
	-2, -2, -2, 7, -36, -23, 58, -2, -2, -2,
	-48, -75, 7, -36, -23, -21, 7, -36, -23, 58,
	-76, 7, 7, -59, 64, 65, 64, 65, -2, -70,
	15, 64, 64, -81, 64, -40, 44, -2, -2, -2,
	-2, 8, -79, -21, -17, -15, 76, -67, -74, -21,
	7, -81, -2, 65, 14, -81, 7, 10, -6, -62,
	51, 73, 13, -21, 66, 66, -21, -21, 74, 15,
	74, -6, -59, 15, -77, 58, 51, 7, 7, 7,
	7, -59, 21, -39, -59, 21, -71, -81, 74, 74,
	74, 7, -81, -21, 21, -59, -72, 7, -59, -63,
	-24, -21, -81, -21, -71, 74, 74, 74, 74, 7,
	74, 74, 7, 7, 73, 73, 21, -64, 24, 23,
	-59, -59, 21, 23, 33, -11, 32, -21, -68, -68,
	-40, 21, 23, 44, -73, -81, 15, -81, -81, 15,
	66, -71, -21, -6, -2, -75, -5, -81, -21, -5,
	-21, 51, -69, -61, 33, -11, -35, 14, 14, -21,
	-66, -66, -69, -61, -59, 21, -81, 15, -21, -17,
	-15, -67, 51, 51, 15, -15, 21, 68, 15, -81,
	-59, -81, -59, -21, 74, -81, 51, 51, -21, -21,
	21, 24, 23, -2, -59, 21, -64, 21, -59, -59,
	-59, -78, 5, -39, 21, 64, 65, -2, -46, 22,
	25, 21, 21, 23, -59, -73, -59, 74, -81, 76,
	76, -81, -21, -81, 74, 74, -71, -2, 21, -69,
	-11, -59, -59, -59, 21, -69, 21, 14, -81, -2,
	-2, 7, 7, 76, 76, 76, -81, 5, 14, -81,
	-2, 74, 74, -2, -59, -59, 21, 21, 33, 21,
	-59, 5, 15, 7, -36, -23, -2, -2, -59, 21,
	-59, -81, -21, -17, -15, 7, 14, 51, -81, 21,
	-69, -61, -69, -61, 21, -6, -15, 73, 76, -21,
	-2, -59, -59, 7, -36, -23, -39, -59, -59, -59,
	64, 64, 65, 21, -81, 66, -2, 14, 21, -69,
	21, -69, -81, -21, -80, 15, 21, -59, -59, -59,
	-68, -68, -68, -21, 21, 21, 14, 74, 21, -47,
	24, 23, 21, -47, 21, -81, 15, 21, 24, 23,
	-2, -68, 21, -81, -2, -68, -68, -68,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 0, 0, 0,
	22, 23, 25, 26, 24, 0, 0, 0, 0, 15,
	289, 0, 0, 13, 294, 298, 295, 290, 0, 19,
	20, 21, 27, 28, 29, 30, 13, 13, 164, 81,
	266, 0, 0, 0, 0, 0, 0, 48, 49, 50,
	51, 52, 53, 0, 0, 75, 224, 225, 5, 6,
	7, 0, 0, 0, 0, 0, 0, 0, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 13, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, 151, 23, 24, 25, 26, 15, 0,
	162, 15, -2, 85, 87, 95, 13, 0, 0, 0,
	0, 122, 15, 13, 127, 128, 129, 130, 35, 22,
	23, 25, 26, 24, 0, 13, 0, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
	284, 288, 124, 34, 22, 23, 25, 26, 0, 0,
	13, 0, 291, 292, 293, 124, 0, 0, 0, 0,
	0, 76, 226, 0, 82, -2, 127, 0, 322, 13,
	213, 214, 215, 216, 78, 332, 193, 194, 0, 253,
	261, 305, 77, 88, 97, 99, 0, 217, 218, 219,
	220, 221, 222, 255, 0, 0, 0, 0, 329, 330,
	257, 173, 98, 0, 0, 136, 185, 192, 254, 256,
	92, 15, 148, 151, 152, 154, 0, 0, 0, 0,
	15, 0, 0, 15, 0, 126, 86, 96, 13, 0,
	136, 0, 165, 166, 167, 168, 179, 180, 186, 187,
	197, 198, 199, 0, 13, 0, 15, 248, 15, 0,
	13, 13, 135, 126, 0, 0, 169, 181, 188, 0,
	0, 170, 182, 189, 201, 202, 203, 0, 0, 0,
	171, 183, 190, 205, 206, 207, 0, 172, 184, 191,
	174, 175, 22, 25, 26, 136, 209, 210, 211, 0,
	176, 0, 0, 0, 15, 15, 16, 17, 18, 0,
	0, 306, 306, 0, 14, 0, 0, 299, 300, 296,
	297, 331, 13, 227, 228, 229, 233, 13, 13, 0,
	-2, 126, 267, 268, 269, 15, 195, 196, 89, 91,
	0, 13, -2, 119, 0, 0, 320, 321, 109, 0,
	110, 93, 138, 0, 0, 0, 0, 155, 157, 151,
	151, 138, 158, 15, 0, 161, 13, 0, 100, 101,
	102, 200, 0, 137, 241, 0, 0, 249, 13, 15,
	-2, 236, 0, 136, 13, 103, 104, 105, 106, 204,
	107, 108, 208, 212, 0, 0, 251, 0, 0, 15,
	0, 0, 270, 15, 15, 285, 15, 125, 0, 0,
	0, 325, 15, 0, 15, 0, 13, 0, 0, 13,
	0, 13, 0, 90, 94, 0, 0, 126, 301, 302,
	0, 0, 0, 138, 15, 286, 153, 149, 150, 156,
	15, 15, 0, 138, 0, 160, 0, 13, 131, 132,
	133, 134, 0, 0, 0, 123, 242, 247, 0, 0,
	0, 0, 13, 0, 101, 0, 13, 0, 0, 0,
	252, 0, 15, 15, 265, 258, 0, 260, 0, 0,
	274, 15, 0, 282, 303, 307, 308, 309, 310, 0,
	0, 304, 323, 15, 0, 15, 13, 223, 0, 234,
	235, 0, 238, 0, 111, 112, 13, 117, 140, 0,
	287, 139, 138, 138, 146, 0, 159, 79, 0, 113,
	114, 0, 250, 243, 244, 245, 0, 0, 84, 0,
	116, 0, 178, 15, 263, 264, 259, 271, 15, 273,
	275, 0, 0, 15, 15, 15, 15, 0, 0, 326,
	13, 327, 230, 231, 232, 0, 83, 0, 0, 141,
	0, 138, 0, 138, 147, 80, -2, 0, 246, 11,
	115, 262, 0, 15, 15, 15, 283, 279, 280, 281,
	306, 15, 15, 324, 328, 0, 118, 120, 142, 0,
	143, 0, 0, 0, 237, 12, 272, 276, 277, 278,
	0, 0, 0, 13, 144, 145, 121, 177, 311, 0,
	0, 306, 313, 0, 315, 239, 13, 312, 0, 306,
	306, 319, 314, 240, 306, 317, 318, 316,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:230
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:232
		{
		}
	case 3:
		//line parser.y:234
		{
		}
	case 4:
		//line parser.y:236
		{
		}
	case 5:
		//line parser.y:238
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:240
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:242
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:248
		{
		}
	case 11:
		//line parser.y:250
		{
		}
	case 12:
		//line parser.y:251
		{
		}
	case 13:
		//line parser.y:253
		{
		}
	case 14:
		//line parser.y:254
		{
		}
	case 15:
		//line parser.y:257
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:259
		{
		}
	case 17:
		//line parser.y:261
		{
		}
	case 18:
		//line parser.y:263
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 75:
		//line parser.y:274
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 76:
		//line parser.y:276
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 77:
		//line parser.y:284
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 78:
		//line parser.y:287
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 79:
		//line parser.y:290
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:299
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:309
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:315
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 83:
		//line parser.y:323
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:332
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:341
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:350
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:360
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:370
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:379
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:390
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:401
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:411
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:421
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:432
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:445
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 96:
		//line parser.y:453
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 97:
		//line parser.y:462
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:471
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 99:
		//line parser.y:480
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 100:
		//line parser.y:491
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 101:
		//line parser.y:500
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 102:
		//line parser.y:509
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 103:
		//line parser.y:518
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 104:
		//line parser.y:527
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 105:
		//line parser.y:536
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 106:
		//line parser.y:545
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 107:
		//line parser.y:554
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 108:
		//line parser.y:563
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 109:
		//line parser.y:572
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 110:
		//line parser.y:581
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 111:
		//line parser.y:590
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 112:
		//line parser.y:603
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 113:
		//line parser.y:619
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 114:
		//line parser.y:628
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:637
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:646
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 117:
		//line parser.y:655
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 118:
		//line parser.y:664
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 119:
		//line parser.y:679
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 120:
		//line parser.y:691
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 121:
		//line parser.y:693
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 122:
		//line parser.y:695
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 123:
		//line parser.y:697
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:700
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:702
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:704
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 127:
		//line parser.y:706
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:708
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:710
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:712
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 131:
		//line parser.y:719
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 132:
		//line parser.y:721
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:723
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 134:
		//line parser.y:725
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 135:
		//line parser.y:735
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 136:
		//line parser.y:746
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:748
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:752
		{
			RubyVAL.genericSlice = nil
		}
	case 139:
		//line parser.y:754
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 140:
		//line parser.y:757
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 141:
		//line parser.y:768
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 142:
		//line parser.y:780
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 143:
		//line parser.y:792
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 144:
		//line parser.y:804
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 145:
		//line parser.y:817
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:830
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 147:
		//line parser.y:841
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 148:
		//line parser.y:855
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 149:
		//line parser.y:857
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 150:
		//line parser.y:859
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 151:
		//line parser.y:861
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 152:
		//line parser.y:863
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 153:
		//line parser.y:865
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 154:
		//line parser.y:868
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 155:
		//line parser.y:870
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 156:
		//line parser.y:872
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 157:
		//line parser.y:874
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 158:
		//line parser.y:878
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 159:
		//line parser.y:888
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 160:
		//line parser.y:900
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 161:
		//line parser.y:913
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 162:
		//line parser.y:924
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 163:
		//line parser.y:933
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 164:
		//line parser.y:952
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 165:
		//line parser.y:970
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:979
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:985
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:991
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 169:
		//line parser.y:993
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 170:
		//line parser.y:1002
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1011
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1020
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 173:
		//line parser.y:1022
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 174:
		//line parser.y:1025
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1034
		{
			var rhs ast.Node = RubyS[Rubypt-0].genericSlice
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				rhs = RubyS[Rubypt-0].genericSlice[0]
			}
			RubyVAL.genericValue = ast.Assignment{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				LHS:  RubyS[Rubypt-2].genericValue,
				RHS:  rhs,
			}
		}
	case 176:
		//line parser.y:1046
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1056
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 178:
		//line parser.y:1071
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 179:
		//line parser.y:1077
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1086
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 181:
		//line parser.y:1092
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1101
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 183:
		//line parser.y:1110
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 184:
		//line parser.y:1119
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 185:
		//line parser.y:1121
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1130
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1139
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 188:
		//line parser.y:1145
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 189:
		//line parser.y:1154
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 190:
		//line parser.y:1163
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 191:
		//line parser.y:1172
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 192:
		//line parser.y:1174
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 193:
		//line parser.y:1181
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 194:
		//line parser.y:1187
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 195:
		//line parser.y:1194
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 196:
		//line parser.y:1200
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 197:
		//line parser.y:1207
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1209
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1211
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1213
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1216
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1218
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1220
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1222
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1225
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1227
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 207:
		//line parser.y:1229
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 208:
		//line parser.y:1231
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 209:
		//line parser.y:1234
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 210:
		//line parser.y:1236
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 211:
		//line parser.y:1238
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 212:
		//line parser.y:1240
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 213:
		//line parser.y:1244
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 214:
		//line parser.y:1246
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 215:
		//line parser.y:1248
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 216:
		//line parser.y:1250
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 217:
		//line parser.y:1253
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 218:
		//line parser.y:1264
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 219:
		//line parser.y:1275
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 220:
		//line parser.y:1286
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 221:
		//line parser.y:1297
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 222:
		//line parser.y:1308
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 223:
		//line parser.y:1319
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 224:
		//line parser.y:1321
		{
		}
	case 225:
		//line parser.y:1322
		{
		}
	case 226:
		//line parser.y:1324
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 227:
		//line parser.y:1326
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 228:
		//line parser.y:1328
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 229:
		//line parser.y:1330
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 230:
		//line parser.y:1332
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 231:
		//line parser.y:1334
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 232:
		//line parser.y:1336
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 233:
		//line parser.y:1339
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 234:
		//line parser.y:1341
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 235:
		//line parser.y:1345
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 236:
		//line parser.y:1354
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 237:
		//line parser.y:1356
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 238:
		//line parser.y:1359
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 239:
		//line parser.y:1366
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 240:
		//line parser.y:1373
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 241:
		//line parser.y:1381
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 242:
		//line parser.y:1386
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 243:
		//line parser.y:1391
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 244:
		//line parser.y:1396
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 245:
		//line parser.y:1401
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 246:
		//line parser.y:1406
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 247:
		//line parser.y:1415
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 248:
		//line parser.y:1417
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 249:
		//line parser.y:1419
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 250:
		//line parser.y:1421
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 251:
		//line parser.y:1424
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1433
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1443
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1452
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1461
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 256:
		//line parser.y:1470
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 257:
		//line parser.y:1479
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 258:
		//line parser.y:1488
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 259:
		//line parser.y:1497
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 260:
		//line parser.y:1507
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 261:
		//line parser.y:1516
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 262:
		//line parser.y:1527
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 263:
		//line parser.y:1536
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 264:
		//line parser.y:1544
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 265:
		//line parser.y:1552
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 266:
		//line parser.y:1560
		{
		}
	case 267:
		//line parser.y:1561
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 268:
		//line parser.y:1562
		{
		}
	case 269:
		//line parser.y:1565
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 270:
		//line parser.y:1568
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 271:
		//line parser.y:1577
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 272:
		//line parser.y:1587
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 273:
		//line parser.y:1597
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 274:
		//line parser.y:1607
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 275:
		//line parser.y:1609
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 276:
		//line parser.y:1623
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 277:
		//line parser.y:1639
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 278:
		//line parser.y:1655
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 279:
		//line parser.y:1671
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 280:
		//line parser.y:1681
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 281:
		//line parser.y:1691
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 282:
		//line parser.y:1703
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 283:
		//line parser.y:1705
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 284:
		//line parser.y:1708
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 285:
		//line parser.y:1710
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 286:
		//line parser.y:1713
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 287:
		//line parser.y:1715
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 288:
		//line parser.y:1718
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 289:
		//line parser.y:1725
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 290:
		//line parser.y:1727
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 291:
		//line parser.y:1730
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 292:
		//line parser.y:1738
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 293:
		//line parser.y:1740
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 294:
		//line parser.y:1742
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 295:
		//line parser.y:1746
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 296:
		//line parser.y:1748
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 297:
		//line parser.y:1750
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 298:
		//line parser.y:1754
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 299:
		//line parser.y:1756
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 300:
		//line parser.y:1758
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 301:
		//line parser.y:1762
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 302:
		//line parser.y:1772
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
			}
		}
	case 303:
		//line parser.y:1782
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 304:
		//line parser.y:1788
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 305:
		//line parser.y:1795
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 306:
		//line parser.y:1802
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 307:
		//line parser.y:1804
		{
		}
	case 308:
		//line parser.y:1806
		{
		}
	case 309:
		//line parser.y:1808
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 310:
		//line parser.y:1810
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 311:
		//line parser.y:1813
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 312:
		//line parser.y:1821
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 313:
		//line parser.y:1830
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 314:
		//line parser.y:1838
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 315:
		//line parser.y:1847
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 316:
		//line parser.y:1856
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 317:
		//line parser.y:1864
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 318:
		//line parser.y:1872
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 319:
		//line parser.y:1880
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 320:
		//line parser.y:1889
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 321:
		//line parser.y:1892
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 322:
		//line parser.y:1895
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 323:
		//line parser.y:1902
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 324:
		//line parser.y:1908
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 325:
		//line parser.y:1914
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 326:
		//line parser.y:1920
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 327:
		//line parser.y:1927
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 328:
		//line parser.y:1929
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 329:
		//line parser.y:1932
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 330:
		//line parser.y:1934
		{
			RubyVAL.genericValue = ast.Range{
				Start:            RubyS[Rubypt-2].genericValue,
				End:              RubyS[Rubypt-0].genericValue,
				Line:             RubyS[Rubypt-2].genericValue.LineNumber(),
				ExcludeLastValue: true,
			}
		}
	case 331:
		//line parser.y:1944
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 332:
		//line parser.y:1951
		{
			RubyVAL.genericValue = ast.Defined{Node: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

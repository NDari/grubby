//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CAPITAL_REF = 57351
const LPAREN = 57352
const RPAREN = 57353
const COMMA = 57354
const NamespacedModule = 57355
const DO = 57356
const DEF = 57357
const END = 57358
const IF = 57359
const ELSE = 57360
const ELSIF = 57361
const UNLESS = 57362
const CLASS = 57363
const MODULE = 57364
const FOR = 57365
const WHILE = 57366
const UNTIL = 57367
const BEGIN = 57368
const RESCUE = 57369
const ENSURE = 57370
const BREAK = 57371
const NEXT = 57372
const REDO = 57373
const RETRY = 57374
const RETURN = 57375
const YIELD = 57376
const AND = 57377
const OR = 57378
const LAMBDA = 57379
const CASE = 57380
const WHEN = 57381
const ALIAS = 57382
const TRUE = 57383
const FALSE = 57384
const LESSTHAN = 57385
const GREATERTHAN = 57386
const EQUALTO = 57387
const BANG = 57388
const COMPLEMENT = 57389
const BINARY_PLUS = 57390
const UNARY_PLUS = 57391
const BINARY_MINUS = 57392
const UNARY_MINUS = 57393
const STAR = 57394
const RANGE = 57395
const OR_EQUALS = 57396
const WHITESPACE = 57397
const NEWLINE = 57398
const SEMICOLON = 57399
const COLON = 57400
const DOT = 57401
const PIPE = 57402
const SLASH = 57403
const AMPERSAND = 57404
const QUESTIONMARK = 57405
const CARET = 57406
const LBRACKET = 57407
const RBRACKET = 57408
const LBRACE = 57409
const RBRACE = 57410
const DOLLARSIGN = 57411
const ATSIGN = 57412
const FILE_CONST_REF = 57413
const LINE_CONST_REF = 57414
const EOF = 57415

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1429

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 130,
	11, 113,
	12, 113,
	-2, 242,
	-1, 322,
	56, 13,
	68, 13,
	-2, 34,
	-1, 335,
	11, 113,
	12, 113,
	-2, 242,
}

const RubyNprod = 298
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4588

var RubyAct = []int{

	301, 421, 5, 420, 169, 554, 33, 224, 139, 386,
	228, 308, 226, 377, 361, 396, 137, 26, 55, 25,
	289, 132, 237, 131, 98, 2, 3, 99, 282, 307,
	371, 100, 307, 14, 192, 307, 341, 193, 28, 307,
	307, 499, 4, 276, 480, 474, 529, 105, 257, 118,
	384, 478, 476, 141, 126, 129, 148, 166, 167, 150,
	341, 171, 172, 96, 95, 247, 292, 141, 175, 229,
	341, 119, 264, 227, 285, 383, 153, 156, 114, 115,
	97, 187, 188, 229, 91, 51, 103, 104, 185, 279,
	378, 106, 91, 107, 260, 108, 116, 154, 194, 197,
	198, 199, 102, 111, 109, 110, 186, 91, 206, 442,
	154, 149, 91, 211, 362, 230, 123, 153, 216, 155,
	186, 220, 221, 222, 340, 231, 307, 439, 307, 230,
	153, 542, 436, 232, 307, 145, 218, 160, 264, 231,
	246, 248, 434, 524, 445, 145, 161, 444, 145, 145,
	251, 250, 271, 272, 253, 274, 275, 418, 280, 281,
	234, 286, 287, 288, 239, 160, 270, 269, 145, 145,
	145, 267, 263, 254, 256, 438, 159, 310, 311, 312,
	313, 157, 239, 293, 348, 326, 117, 145, 150, 145,
	145, 435, 145, 307, 145, 145, 145, 145, 148, 145,
	121, 150, 145, 122, 145, 145, 325, 98, 148, 157,
	99, 150, 435, 145, 100, 317, 243, 239, 158, 145,
	145, 145, 258, 332, 434, 333, 118, 165, 469, 145,
	470, 163, 343, 151, 243, 145, 399, 120, 400, 145,
	347, 353, 277, 151, 309, 283, 536, 537, 119, 290,
	229, 401, 152, 149, 227, 98, 183, 511, 99, 401,
	164, 307, 100, 149, 162, 512, 543, 243, 145, 243,
	366, 98, 98, 303, 99, 99, 105, 394, 100, 100,
	391, 488, 392, 251, 250, 178, 485, 145, 179, 128,
	145, 394, 394, 76, 297, 298, 230, 394, 98, 145,
	145, 99, 409, 225, 393, 100, 231, 114, 115, 176,
	535, 305, 177, 407, 402, 103, 104, 404, 398, 165,
	106, 397, 107, 346, 108, 116, 145, 145, 105, 483,
	357, 102, 111, 109, 110, 415, 98, 304, 376, 99,
	261, 248, 414, 100, 424, 346, 569, 145, 566, 565,
	366, 145, 145, 422, 314, 427, 180, 423, 416, 114,
	115, 564, 532, 566, 565, 430, 513, 103, 104, 239,
	561, 125, 106, 124, 107, 98, 108, 116, 99, 413,
	375, 560, 100, 102, 111, 109, 110, 459, 451, 145,
	360, 508, 128, 450, 449, 145, 76, 464, 464, 454,
	448, 460, 450, 449, 145, 497, 472, 496, 127, 315,
	145, 495, 481, 128, 374, 375, 493, 76, 382, 484,
	381, 243, 486, 145, 356, 357, 380, 145, 330, 486,
	195, 331, 370, 196, 145, 494, 363, 350, 349, 69,
	241, 68, 77, 242, 78, 145, 502, 76, 345, 295,
	505, 294, 223, 201, 458, 321, 369, 302, 320, 1,
	184, 90, 89, 88, 87, 492, 86, 514, 515, 145,
	145, 79, 85, 41, 40, 93, 94, 492, 39, 38,
	80, 81, 54, 82, 465, 83, 84, 145, 20, 43,
	307, 526, 44, 21, 16, 12, 522, 13, 145, 74,
	11, 75, 530, 92, 91, 73, 72, 52, 45, 521,
	24, 23, 22, 27, 19, 10, 35, 243, 30, 533,
	18, 15, 42, 17, 37, 36, 31, 29, 486, 243,
	71, 32, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 550, 0, 0, 0, 0, 0, 464, 464,
	464, 547, 548, 549, 558, 0, 567, 146, 0, 0,
	0, 243, 0, 145, 0, 0, 571, 146, 0, 464,
	146, 146, 568, 464, 464, 464, 145, 0, 0, 0,
	0, 0, 572, 573, 0, 0, 145, 574, 0, 0,
	146, 146, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 146,
	0, 146, 146, 145, 146, 145, 146, 146, 146, 146,
	0, 146, 0, 0, 146, 0, 146, 146, 145, 0,
	0, 0, 0, 0, 0, 146, 0, 105, 244, 0,
	0, 146, 146, 146, 259, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 0, 244, 146, 0, 0,
	0, 146, 0, 0, 278, 0, 0, 284, 114, 115,
	0, 291, 0, 0, 0, 0, 103, 104, 0, 0,
	0, 106, 0, 107, 0, 108, 0, 0, 0, 244,
	146, 244, 102, 111, 109, 110, 0, 0, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 49, 68, 77, 50,
	78, 0, 0, 76, 0, 46, 525, 56, 146, 146,
	57, 47, 48, 0, 60, 61, 58, 394, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 146,
	67, 93, 94, 146, 146, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 299, 300, 0, 0,
	0, 34, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 73, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 244, 0, 146, 0, 0, 0, 146,
	0, 140, 0, 0, 140, 140, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 0, 0, 0, 140, 140, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 146, 140, 0, 140, 140, 0, 140, 0,
	140, 140, 140, 140, 0, 140, 0, 0, 140, 146,
	140, 140, 0, 0, 0, 0, 0, 0, 0, 140,
	146, 0, 140, 0, 105, 140, 140, 140, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 244,
	140, 140, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 244, 0, 0, 0, 114, 115, 0, 0, 0,
	0, 0, 0, 103, 104, 0, 0, 0, 106, 0,
	107, 0, 108, 140, 322, 140, 0, 0, 0, 102,
	111, 109, 110, 244, 0, 146, 504, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 140, 0, 146, 0,
	0, 0, 0, 0, 0, 140, 140, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	143, 68, 77, 144, 130, 0, 136, 76, 141, 0,
	146, 0, 140, 140, 0, 146, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 79, 0, 140, 0, 93, 94, 322, 140, 134,
	80, 81, 0, 82, 0, 83, 84, 0, 135, 0,
	0, 0, 0, 0, 0, 9, 0, 0, 0, 133,
	0, 142, 0, 92, 91, 73, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 140, 0, 140,
	0, 0, 0, 140, 0, 170, 0, 0, 173, 170,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 189, 190,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 140, 200, 0, 202,
	203, 0, 205, 0, 207, 208, 209, 210, 0, 212,
	0, 0, 215, 140, 217, 219, 0, 0, 0, 0,
	0, 0, 0, 235, 140, 0, 238, 0, 105, 249,
	252, 255, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 140, 238, 268, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 114,
	115, 0, 0, 0, 0, 0, 0, 103, 104, 0,
	0, 0, 106, 0, 107, 0, 108, 316, 323, 238,
	0, 0, 181, 102, 111, 109, 110, 140, 0, 140,
	503, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	336, 0, 140, 0, 0, 0, 0, 0, 0, 338,
	339, 0, 140, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 0, 0, 140, 0, 358, 138, 0, 140,
	0, 140, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 114, 115, 0, 140, 0, 0, 365, 182, 103,
	104, 323, 373, 0, 106, 0, 107, 0, 108, 0,
	0, 0, 0, 0, 0, 102, 111, 109, 110, 53,
	0, 0, 379, 0, 0, 0, 0, 0, 204, 0,
	168, 0, 0, 0, 0, 0, 0, 213, 214, 395,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 265, 0, 0, 0, 147,
	0, 238, 0, 417, 0, 0, 0, 365, 0, 147,
	0, 0, 147, 147, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 432, 306, 0, 233, 0,
	0, 236, 147, 147, 147, 0, 0, 0, 0, 329,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 446,
	447, 147, 0, 147, 147, 0, 147, 0, 147, 147,
	147, 147, 0, 147, 0, 0, 147, 170, 147, 147,
	0, 0, 0, 0, 0, 0, 0, 147, 482, 0,
	245, 0, 0, 147, 147, 147, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 491, 245, 147,
	359, 0, 0, 147, 0, 0, 0, 0, 0, 491,
	0, 0, 0, 0, 364, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 344, 0, 0, 0,
	0, 245, 147, 245, 351, 0, 0, 354, 0, 0,
	0, 520, 0, 523, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 147, 0, 528, 0, 0, 0,
	0, 0, 0, 147, 147, 368, 528, 372, 403, 0,
	0, 0, 0, 406, 408, 410, 0, 69, 143, 68,
	77, 144, 130, 544, 0, 76, 141, 0, 540, 0,
	147, 147, 0, 138, 0, 545, 0, 0, 0, 389,
	390, 0, 0, 0, 0, 0, 0, 0, 551, 79,
	431, 147, 0, 93, 94, 147, 147, 0, 80, 81,
	0, 82, 0, 83, 84, 441, 0, 0, 443, 0,
	0, 372, 0, 0, 0, 0, 0, 266, 0, 142,
	0, 92, 91, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 428, 0, 475, 0, 147,
	477, 0, 479, 0, 204, 0, 0, 0, 147, 0,
	0, 0, 0, 440, 147, 0, 69, 324, 68, 77,
	144, 78, 0, 0, 76, 245, 0, 147, 0, 0,
	452, 147, 0, 0, 456, 0, 457, 501, 147, 0,
	0, 0, 471, 0, 473, 0, 0, 0, 79, 147,
	0, 0, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 487, 0, 519, 307, 0, 0,
	0, 264, 0, 147, 147, 0, 74, 0, 75, 319,
	92, 91, 73, 72, 0, 0, 0, 0, 0, 0,
	0, 147, 506, 507, 0, 0, 0, 0, 0, 0,
	510, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 516, 0, 518, 0, 0, 0, 0, 0,
	0, 245, 69, 143, 68, 77, 144, 130, 0, 0,
	76, 141, 0, 245, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 0, 0, 531, 0, 0,
	0, 0, 0, 0, 79, 534, 570, 0, 93, 94,
	0, 0, 0, 80, 81, 245, 82, 147, 83, 84,
	0, 0, 0, 0, 546, 412, 0, 0, 389, 390,
	147, 0, 266, 0, 142, 0, 92, 91, 73, 72,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 147, 0, 147,
	0, 0, 0, 69, 49, 68, 77, 50, 78, 0,
	0, 76, 147, 46, 557, 466, 556, 555, 467, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 73,
	72, 69, 49, 68, 77, 50, 78, 0, 0, 76,
	0, 46, 553, 466, 556, 555, 467, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 79, 62, 0, 67, 93, 94, 0,
	0, 0, 80, 81, 0, 82, 0, 83, 84, 0,
	0, 0, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 92, 91, 73, 72, 69,
	49, 68, 77, 50, 78, 0, 0, 76, 0, 46,
	453, 56, 388, 387, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 79, 62, 0, 67, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 0, 0, 0,
	299, 300, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 92, 91, 73, 72, 69, 49, 68,
	77, 50, 78, 0, 0, 76, 0, 46, 385, 56,
	388, 387, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 79,
	62, 0, 67, 93, 94, 0, 0, 0, 80, 81,
	0, 82, 0, 83, 84, 0, 0, 0, 299, 300,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 92, 91, 73, 72, 69, 49, 68, 77, 50,
	78, 0, 0, 76, 0, 46, 426, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 394, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 299, 300, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 73, 72, 69, 49, 68, 77, 50, 78, 0,
	0, 76, 0, 46, 419, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 394, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 299, 300, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 73,
	72, 69, 49, 68, 77, 50, 78, 0, 0, 76,
	0, 46, 0, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 79, 62, 0, 67, 93, 94, 0,
	0, 0, 80, 81, 0, 82, 0, 83, 84, 0,
	0, 0, 6, 7, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 92, 91, 73, 72, 8,
	69, 49, 68, 77, 50, 78, 0, 0, 76, 0,
	46, 559, 466, 0, 0, 467, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 79, 62, 0, 67, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 73, 72, 69, 49,
	68, 77, 50, 78, 0, 0, 76, 0, 46, 538,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	79, 62, 0, 67, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 299,
	300, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 73, 72, 69, 49, 68, 77,
	50, 78, 0, 0, 76, 0, 46, 517, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 79, 62,
	0, 67, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	92, 91, 73, 72, 69, 49, 68, 77, 50, 78,
	0, 0, 76, 0, 46, 509, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 299, 300, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	73, 72, 69, 49, 68, 77, 50, 78, 0, 0,
	76, 0, 46, 0, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 79, 62, 0, 67, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 299, 300, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 498, 92, 91, 73, 72,
	69, 49, 68, 77, 50, 78, 0, 0, 76, 0,
	46, 489, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 79, 62, 0, 67, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 73, 72, 69, 49,
	68, 77, 50, 78, 0, 0, 76, 0, 46, 468,
	466, 0, 0, 467, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	79, 62, 0, 67, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 73, 72, 69, 49, 68, 77,
	50, 78, 0, 0, 76, 0, 46, 461, 466, 0,
	0, 467, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 79, 62,
	0, 67, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	92, 91, 73, 72, 69, 49, 68, 77, 50, 78,
	0, 0, 76, 0, 46, 455, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 299, 300, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	73, 72, 69, 49, 68, 77, 50, 78, 0, 0,
	76, 0, 46, 437, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 79, 62, 0, 67, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 299, 300, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 92, 91, 73, 72,
	69, 49, 68, 77, 50, 78, 0, 0, 76, 0,
	46, 429, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 79, 62, 0, 67, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 73, 72, 69, 49,
	68, 77, 50, 78, 0, 0, 76, 0, 46, 367,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	79, 62, 0, 67, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 299,
	300, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 73, 72, 69, 49, 68, 77,
	50, 78, 0, 0, 76, 0, 46, 355, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 79, 62,
	0, 67, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 299, 300, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	92, 91, 73, 72, 69, 49, 68, 77, 50, 78,
	0, 0, 76, 0, 46, 352, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 299, 300, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	73, 72, 69, 49, 68, 77, 50, 78, 0, 0,
	76, 0, 46, 0, 466, 0, 0, 467, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 79, 62, 0, 67, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 92, 91, 73, 72,
	69, 49, 68, 77, 50, 78, 0, 0, 76, 0,
	46, 0, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 79, 62, 0, 67, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 299, 300, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 73, 72, 69, 49,
	68, 77, 50, 78, 328, 0, 76, 0, 46, 0,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	79, 62, 0, 67, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 73, 72, 69, 49, 68, 77,
	50, 78, 0, 0, 76, 0, 46, 0, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 79, 62,
	0, 67, 93, 94, 0, 0, 0, 80, 81, 0,
	82, 0, 83, 84, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	92, 91, 73, 72, 69, 49, 68, 77, 50, 78,
	0, 0, 76, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 69, 241, 68, 77, 242, 78, 0, 0,
	76, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 500,
	0, 0, 74, 0, 75, 0, 92, 91, 73, 72,
	69, 241, 68, 77, 242, 78, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 490, 0, 0,
	74, 0, 75, 0, 92, 91, 73, 72, 69, 143,
	68, 77, 144, 78, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 433, 0, 0, 74, 0,
	75, 0, 92, 91, 73, 72, 69, 143, 68, 77,
	144, 130, 0, 0, 76, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 93, 94, 0, 0, 134, 80, 81, 0,
	82, 0, 83, 84, 69, 143, 68, 77, 144, 335,
	0, 0, 76, 141, 0, 0, 266, 0, 142, 0,
	92, 91, 73, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	93, 94, 0, 0, 334, 80, 81, 0, 82, 0,
	83, 84, 69, 324, 68, 77, 144, 78, 0, 0,
	76, 0, 0, 0, 74, 0, 142, 0, 92, 91,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 307, 0, 69, 241, 68, 77, 242,
	78, 0, 74, 76, 75, 319, 92, 91, 73, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 318, 0, 0, 74, 0, 75, 0, 92,
	91, 73, 72, 69, 143, 68, 77, 144, 78, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 73,
	72, 69, 143, 68, 77, 144, 78, 0, 0, 76,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 93, 94, 0,
	0, 0, 80, 81, 0, 82, 0, 83, 84, 69,
	241, 68, 77, 242, 78, 0, 0, 76, 0, 0,
	0, 74, 0, 142, 0, 92, 91, 73, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 0, 0, 69,
	143, 68, 77, 144, 130, 0, 240, 76, 141, 74,
	0, 75, 0, 92, 91, 73, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 69, 143, 68,
	77, 144, 78, 0, 0, 76, 0, 0, 0, 266,
	0, 142, 0, 92, 91, 73, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 93, 94, 0, 0, 0, 80, 81,
	0, 82, 0, 83, 84, 69, 527, 68, 77, 144,
	78, 0, 0, 76, 0, 0, 0, 74, 0, 75,
	0, 92, 91, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 93, 94, 105, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 74, 0, 75, 0, 92,
	91, 73, 72, 0, 114, 115, 0, 0, 0, 112,
	0, 0, 103, 104, 0, 105, 101, 106, 0, 107,
	0, 108, 0, 0, 114, 115, 0, 0, 102, 111,
	109, 110, 103, 104, 0, 342, 105, 106, 101, 107,
	0, 108, 116, 0, 0, 0, 114, 115, 102, 111,
	109, 110, 113, 0, 103, 104, 0, 105, 0, 106,
	0, 107, 0, 108, 0, 563, 0, 114, 115, 0,
	102, 111, 109, 110, 113, 103, 104, 105, 0, 0,
	106, 0, 107, 0, 108, 0, 0, 0, 114, 115,
	0, 102, 111, 109, 110, 113, 103, 104, 105, 0,
	0, 106, 0, 107, 0, 108, 0, 0, 114, 115,
	0, 0, 102, 111, 109, 110, 103, 104, 541, 0,
	0, 106, 0, 107, 0, 108, 0, 0, 0, 114,
	115, 337, 102, 111, 109, 110, 0, 103, 104, 411,
	0, 0, 106, 0, 107, 0, 108, 0, 0, 114,
	115, 0, 0, 102, 111, 109, 110, 103, 104, 0,
	0, 0, 106, 0, 107, 0, 108, 0, 0, 0,
	114, 115, 0, 102, 111, 109, 110, 0, 103, 104,
	0, 0, 0, 106, 0, 107, 0, 108, 0, 0,
	0, 0, 0, 0, 102, 111, 109, 110,
}
var RubyPact = []int{

	-31, 2296, -1000, -1000, -1000, 7, -1000, -1000, -1000, 4379,
	-1000, -1000, -1000, -1000, 166, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 183, -1000, 57, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 367, 404, 280, 1014,
	198, 65, 164, 92, 219, 215, 3589, 3589, -1000, 4272,
	3589, 3589, 4272, 4272, 292, 268, -1000, 349, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 246, -1000, 39,
	3589, 3589, 4272, 4272, 4272, -1000, -1000, -1000, -1000, -1000,
	-1000, 28, 424, -1000, -1000, -1000, -1000, -1000, 3589, 3589,
	3589, 4272, 447, 4272, 4272, -1000, 4272, 3589, 4272, 4272,
	4272, 4272, 3589, 4272, -1000, -1000, 4272, 3589, 4272, 4272,
	3589, 3589, 3589, 446, 244, 63, 117, 4272, 175, -1000,
	4174, 39, 53, 4272, 4272, 4272, 42, 328, 4484, -1000,
	6, 12, -1000, 4224, 46, 11, -1000, -1000, 4174, 4272,
	-1000, 3589, 3589, 4272, 3589, 3589, 37, 3589, 3589, 22,
	3589, 3589, 3589, 14, 445, 443, 319, 238, 3385, 261,
	4484, 281, 255, 4484, 205, 261, 3589, 3589, 3589, 3589,
	347, 3990, 3937, 4174, 3453, -1000, -1000, 319, 319, 4484,
	4484, 4484, -1000, -1000, 422, -1000, -1000, 319, 319, 319,
	4484, 3889, 4484, 4484, 4058, 4484, 319, 4484, 4484, 4484,
	4484, 319, 4463, 4058, 4058, 4484, 319, 4484, 58, 4359,
	319, 319, 319, 39, -1000, 442, 311, 77, -1000, 139,
	432, 431, -1000, 3249, 280, 4484, 3181, 413, 4484, -1000,
	4272, 3841, 188, 52, 136, 120, -1000, -1000, -1000, 324,
	-52, 48, 4401, -1000, -1000, 4422, -1000, -1000, -1000, -1000,
	430, 4126, 3113, -1000, 426, 1681, 4272, 403, 272, -53,
	24, 319, 319, 1296, 319, 319, -1000, -1000, -1000, 420,
	319, 319, -1000, -1000, -1000, 414, 319, 319, 319, -1000,
	-1000, -1000, 412, 307, 10, -15, 2092, -1000, -1000, -1000,
	-1000, 319, 264, 4272, -1000, -1000, 205, -1000, 220, 4272,
	319, 319, 319, 319, -1000, 305, 4484, -1000, 4272, -1000,
	301, 290, 6, 4525, 1787, 368, 319, -1000, -1000, 78,
	-1000, -1000, 53, 39, 3589, 4174, 4484, 4272, 4484, 4484,
	-1000, 4126, 112, -1000, 2228, 63, 77, 333, 4272, -1000,
	-1000, 2160, -1000, -1000, 3045, -1000, 39, -1000, 4484, 3773,
	179, -1000, -1000, -1000, 70, 4484, -1000, -1000, 2977, 115,
	-1000, -1000, 3385, 43, -1000, -1000, 102, -1000, -1000, 99,
	-1000, -1000, -1000, 4272, 4272, -1000, 384, 3589, -1000, 2024,
	2909, -1000, -1000, -1000, 383, 4484, 2841, 2773, 212, -1000,
	-1000, 4272, 261, -21, -1000, 4484, -16, -1000, -17, -1000,
	-24, 3589, 4272, -1000, -1000, 319, 318, 4484, 3589, -1000,
	270, -1000, -1000, -1000, -1000, 4484, -1000, 265, 2705, -1000,
	-1000, 3705, 4484, 410, 3589, 405, 401, -1000, -1000, 399,
	2637, -27, 97, 3637, -1000, 3589, 1204, 920, -1000, 3589,
	-1000, 319, 3385, -1000, 375, -1000, 2569, 3385, 253, 360,
	-1000, -1000, -1000, -1000, 319, -1000, 3589, 3589, -1000, -1000,
	-1000, 2501, 261, 3385, -1000, 434, -1000, 4058, -1000, 137,
	-1000, 319, 4484, -1000, 319, -1000, -1000, 730, -1000, -1000,
	4320, 4484, -1000, -1000, 319, -19, -1000, -1000, -1000, -1000,
	4272, 3521, 319, 200, -1000, 319, 3385, 3385, -1000, -1000,
	3385, 356, 280, -1000, 254, 190, 2433, -1000, 3385, 72,
	4484, -1000, 4272, 4504, 73, -1000, 250, 1582, 4484, 4272,
	319, 3385, -1000, -1000, 3385, -1000, -1000, -1000, -1000, 72,
	4484, 3589, 4272, -1000, -1000, 633, 3385, 1956, 1888, 2365,
	358, 4443, -1000, -1000, 345, 3589, -1000, -1000, 330, -1000,
	-1000, -1000, 72, -1000, -1000, 3589, -1000, 319, 3317, -1000,
	72, 319, 3317, 3317, 3317,
}
var RubyPgo = []int{

	0, 0, 532, 531, 17, 8, 530, 527, 526, 525,
	1359, 524, 1, 38, 523, 522, 33, 521, 520, 1075,
	518, 507, 791, 516, 515, 514, 513, 512, 511, 510,
	508, 500, 497, 10, 85, 495, 494, 6, 11, 493,
	492, 489, 19, 488, 484, 5, 482, 479, 478, 474,
	473, 472, 466, 464, 463, 462, 461, 1311, 460, 3,
	23, 30, 9, 459, 7, 458, 15, 457, 22, 456,
	4, 455, 16, 18, 21, 12, 454, 409, 381, 1262,
}
var RubyR1 = []int{

	0, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 78, 78, 79, 79, 57, 57, 57, 57, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 30, 30, 30, 30,
	30, 30, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 42, 15, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 23, 60, 60, 60,
	60, 70, 70, 68, 68, 68, 68, 68, 68, 68,
	74, 74, 74, 74, 74, 72, 72, 72, 24, 24,
	24, 24, 24, 24, 64, 64, 75, 75, 75, 33,
	33, 33, 33, 31, 31, 32, 35, 37, 37, 37,
	16, 16, 16, 16, 16, 16, 16, 17, 17, 73,
	73, 36, 36, 36, 36, 36, 36, 36, 10, 10,
	34, 34, 21, 21, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	2, 6, 8, 77, 77, 77, 77, 77, 77, 77,
	3, 3, 3, 3, 65, 65, 71, 71, 71, 5,
	5, 5, 5, 61, 69, 69, 69, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 62, 62,
	62, 62, 58, 58, 58, 9, 18, 18, 12, 12,
	12, 12, 76, 76, 67, 67, 59, 59, 25, 25,
	26, 27, 27, 29, 29, 29, 28, 28, 28, 13,
	43, 43, 43, 66, 66, 66, 66, 66, 44, 44,
	44, 44, 44, 45, 45, 45, 45, 41, 40, 11,
	39, 39, 39, 39, 38, 38, 4, 7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 5, 1, 4, 4,
	2, 3, 3, 4, 4, 5, 3, 4, 5, 2,
	3, 3, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 6, 7, 6, 6, 4, 3, 7, 1,
	5, 1, 3, 0, 1, 1, 2, 4, 4, 5,
	1, 1, 4, 2, 5, 1, 3, 3, 5, 6,
	7, 8, 5, 6, 1, 3, 0, 1, 3, 1,
	2, 3, 2, 4, 6, 5, 4, 1, 2, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 9,
	6, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 4, 3, 3,
	3, 4, 3, 3, 3, 4, 3, 3, 3, 4,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	1, 1, 5, 0, 1, 1, 2, 4, 4, 5,
	3, 5, 5, 5, 3, 7, 3, 7, 8, 3,
	4, 5, 5, 3, 0, 1, 3, 4, 5, 3,
	3, 3, 3, 3, 5, 6, 5, 3, 4, 3,
	3, 2, 0, 2, 2, 3, 4, 6, 2, 3,
	5, 4, 1, 3, 0, 2, 1, 2, 2, 1,
	1, 2, 1, 1, 3, 3, 1, 3, 3, 5,
	5, 5, 3, 0, 2, 2, 2, 2, 5, 6,
	5, 6, 5, 4, 3, 3, 2, 4, 4, 2,
	5, 7, 4, 6, 4, 5, 3, 3,
}
var RubyChk = []int{

	-1000, -63, 56, 57, 73, -1, 56, 57, 73, -19,
	-24, -31, -35, -32, -16, -17, -36, -14, -18, -25,
	-43, -39, -27, -28, -29, -42, -4, -26, -13, -7,
	-20, -8, -3, -37, -22, -23, -9, -11, -47, -48,
	-49, -50, -15, -41, -40, -30, 15, 21, 22, 6,
	9, -34, -21, -10, -46, -73, 17, 20, 26, 34,
	24, 25, 38, 33, 29, 30, 32, 40, 7, 5,
	-2, -6, 72, 71, 65, 67, 13, 8, 10, 37,
	46, 47, 49, 51, 52, -51, -52, -53, -54, -55,
	-56, 70, 69, 41, 42, 57, 56, 73, 17, 20,
	24, 27, 59, 43, 44, 4, 48, 50, 52, 61,
	62, 60, 20, 63, 35, 36, 53, 20, 43, 65,
	54, 17, 20, 59, 6, 4, -37, 4, 9, -37,
	10, -60, -74, 65, 45, 54, 12, -72, -19, -5,
	-22, 14, 67, 6, 9, -34, -21, -10, 10, 65,
	13, 45, 54, 65, 45, 54, 12, 45, 54, 12,
	45, 54, 45, 12, 45, 12, -1, -1, -57, -70,
	-19, -1, -1, -19, -79, -70, 17, 20, 17, 20,
	7, -79, -79, 10, -58, -5, 67, -1, -1, -19,
	-19, -19, 6, 9, 70, 6, 9, -1, -1, -1,
	-19, 6, -19, -19, -79, -19, -1, -19, -19, -19,
	-19, -1, -19, -79, -79, -19, -1, -19, -72, -19,
	-1, -1, -1, 6, -64, 59, -75, 10, -33, 6,
	52, 62, -64, -57, 43, -19, -57, -68, -19, -16,
	62, 6, 9, -34, -21, -10, -5, 12, -5, -19,
	-4, -72, -19, -42, -13, -19, -13, 6, -34, -21,
	52, 12, -57, -61, 60, -79, 65, -68, -19, -4,
	-72, -1, -1, -19, -1, -1, 6, -34, -21, 52,
	-1, -1, 6, -34, -21, 52, -1, -1, -1, 6,
	-34, -21, 52, -73, 6, 6, -57, 56, 57, 56,
	57, -1, -67, 12, 56, 56, -79, 56, -38, 39,
	-1, -1, -1, -1, 7, -77, -19, -16, 62, 68,
	-65, -71, -22, -19, 6, -68, -1, 57, 11, -79,
	6, 9, -74, -60, 45, 10, -19, 58, -19, -19,
	66, 12, 66, -5, -57, 6, 12, -75, 45, 6,
	6, -57, 16, -37, -57, 16, 11, 12, -19, -79,
	66, 66, 66, 6, -79, -19, -5, 16, -57, -69,
	6, -61, -57, -19, 11, 12, 66, 66, 66, 66,
	6, 6, 6, 65, 65, 16, -62, 19, 18, -57,
	-57, 16, 18, -12, 27, -19, -66, -66, -38, 16,
	18, 39, -70, -79, 12, -19, -79, 12, -79, 12,
	-79, 4, 58, 11, -5, -1, -68, -19, 45, 16,
	-59, -12, -64, -33, 11, -19, 16, -59, -57, 16,
	-5, -79, -19, 62, 45, 12, 62, 16, 60, 12,
	-57, -79, 66, -79, 45, 45, -19, -19, 16, 19,
	18, -1, -57, 16, -62, 16, -57, -57, -76, 4,
	-37, 16, 56, 57, -1, -44, 17, 20, 16, 16,
	18, -57, -70, -57, 66, -79, 68, -79, 68, -79,
	68, -1, -19, 11, -1, 16, -12, -57, 16, 16,
	62, -19, -16, 6, -1, 6, 6, 6, 68, 68,
	62, -79, -1, 66, 66, -1, -57, -57, 16, 16,
	-57, 4, 12, 6, -1, -1, -57, 16, -57, -79,
	-19, -16, 62, -19, 6, 16, -59, 6, -19, 65,
	-1, -57, 6, -37, -57, 56, 56, 57, 16, -79,
	-19, 4, 58, 16, 11, -19, -57, -66, -66, -66,
	-1, -19, 66, 16, -45, 19, 18, 16, -45, 16,
	-78, 12, -79, 12, 16, 19, 18, -1, -66, 16,
	-79, -1, -66, -66, -66,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 0, 0, 0, 21,
	22, 23, 24, 25, 0, 0, 0, 0, 15, 259,
	0, 0, 13, 262, 266, 263, 260, 0, 19, 20,
	26, 27, 28, 29, 13, 13, 149, 77, 242, 0,
	0, 0, 0, 0, 0, 46, 47, 48, 49, 50,
	51, 0, 0, 200, 201, 5, 6, 7, 0, 0,
	0, 0, 0, 0, 0, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 136, 15, 0, 147, 15,
	-2, 80, 89, 13, 0, 0, 0, 109, 120, 121,
	34, 15, 13, 21, 22, 23, 24, 25, 113, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 15, 0, 254, 258,
	111, 0, 0, 13, 0, 261, 0, 0, 0, 0,
	0, 203, 0, 113, 0, 289, 13, 190, 191, 192,
	193, 74, 170, 171, 0, 168, 169, 229, 237, 272,
	73, 82, 90, 92, 0, 194, 195, 196, 197, 198,
	199, 231, 0, 0, 0, 296, 233, 91, 0, 125,
	167, 230, 232, 86, 15, 0, 134, 136, 137, 139,
	0, 0, 15, 0, 0, 15, 0, 0, 114, 115,
	0, 21, 22, 23, 24, 25, 81, 13, 123, 125,
	0, 0, 150, 151, 152, 161, 162, 174, 175, 176,
	0, 13, 0, 15, 224, 15, 13, 0, 125, 0,
	0, 153, 163, 0, 154, 164, 178, 179, 180, 0,
	155, 165, 182, 183, 184, 0, 156, 166, 157, 186,
	187, 188, 0, 158, 0, 0, 0, 15, 15, 16,
	17, 18, 0, 0, 273, 273, 0, 14, 0, 0,
	267, 268, 264, 265, 297, 13, 204, 205, 0, 210,
	13, 13, -2, 0, 21, 0, 243, 244, 245, 15,
	172, 173, 83, 84, 0, -2, 106, 0, 287, 288,
	100, 0, 101, 87, 0, 136, 0, 0, 0, 140,
	142, 0, 143, 15, 0, 146, 75, 13, 116, 0,
	93, 96, 98, 177, 0, 126, 127, 219, 0, 0,
	225, 15, 13, 125, 79, 13, 94, 97, 99, 95,
	181, 185, 189, 0, 0, 227, 0, 0, 15, 0,
	0, 246, 15, 255, 15, 112, 0, 0, 0, 292,
	15, 0, 15, 0, 13, 206, 0, 13, 0, 13,
	0, 13, 0, 78, 85, 88, 0, 269, 0, 128,
	0, 256, 15, 138, 135, 141, 132, 0, 0, 145,
	76, 0, 122, 0, 0, 0, 0, 220, 223, 0,
	0, 0, 93, 0, 13, 0, 0, 0, 228, 0,
	15, 15, 241, 234, 0, 236, 0, 248, 15, 0,
	252, 270, 274, 275, 276, 277, 0, 0, 271, 290,
	15, 0, 15, 13, 202, 0, 211, 0, 212, 0,
	213, 214, 216, 107, 105, 129, 257, 0, 133, 144,
	0, 117, 118, 124, 102, 0, 110, 226, 221, 222,
	0, 0, 104, 0, 160, 15, 239, 240, 235, 247,
	249, 0, 0, 15, 15, 0, 0, 293, 13, 294,
	207, 208, 0, 0, 0, 130, 0, 21, 119, 0,
	103, 238, 15, 253, 251, 273, 15, 15, 291, 295,
	209, 13, 0, 131, 108, 0, 250, 0, 0, 0,
	11, 13, 159, 278, 0, 0, 273, 280, 0, 282,
	215, 12, 217, 13, 279, 0, 273, 273, 286, 281,
	218, 273, 284, 285, 283,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:217
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:219
		{
		}
	case 3:
		//line parser.y:221
		{
		}
	case 4:
		//line parser.y:223
		{
		}
	case 5:
		//line parser.y:225
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:227
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:229
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:235
		{
		}
	case 11:
		//line parser.y:237
		{
		}
	case 12:
		//line parser.y:238
		{
		}
	case 13:
		//line parser.y:240
		{
		}
	case 14:
		//line parser.y:241
		{
		}
	case 15:
		//line parser.y:244
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:246
		{
		}
	case 17:
		//line parser.y:248
		{
		}
	case 18:
		//line parser.y:250
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:262
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 74:
		//line parser.y:265
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 75:
		//line parser.y:268
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 76:
		//line parser.y:275
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 77:
		//line parser.y:282
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 78:
		//line parser.y:286
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 79:
		//line parser.y:293
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 80:
		//line parser.y:300
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 81:
		//line parser.y:307
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 82:
		//line parser.y:314
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 83:
		//line parser.y:321
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 84:
		//line parser.y:329
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 85:
		//line parser.y:337
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 86:
		//line parser.y:345
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 87:
		//line parser.y:353
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 88:
		//line parser.y:361
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 89:
		//line parser.y:372
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 90:
		//line parser.y:379
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 91:
		//line parser.y:387
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 92:
		//line parser.y:395
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 93:
		//line parser.y:405
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 94:
		//line parser.y:413
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 95:
		//line parser.y:421
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 96:
		//line parser.y:429
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 97:
		//line parser.y:437
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 98:
		//line parser.y:445
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 99:
		//line parser.y:453
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 100:
		//line parser.y:461
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 101:
		//line parser.y:469
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 102:
		//line parser.y:479
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 103:
		//line parser.y:487
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 104:
		//line parser.y:498
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 105:
		//line parser.y:506
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 106:
		//line parser.y:516
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 107:
		//line parser.y:526
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 108:
		//line parser.y:528
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 109:
		//line parser.y:530
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 110:
		//line parser.y:532
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 111:
		//line parser.y:535
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 112:
		//line parser.y:537
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:539
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 114:
		//line parser.y:541
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:543
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:545
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 117:
		//line parser.y:552
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:554
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:556
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 120:
		//line parser.y:565
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:567
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:569
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:571
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:573
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 125:
		//line parser.y:576
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:578
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:580
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:584
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:592
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:601
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:610
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 132:
		//line parser.y:620
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 133:
		//line parser.y:628
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 134:
		//line parser.y:639
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 135:
		//line parser.y:641
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 136:
		//line parser.y:643
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 137:
		//line parser.y:645
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:647
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 139:
		//line parser.y:650
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 140:
		//line parser.y:652
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 141:
		//line parser.y:654
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 142:
		//line parser.y:656
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 143:
		//line parser.y:660
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name: RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 144:
		//line parser.y:667
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 145:
		//line parser.y:677
		{
			if RubyS[Rubypt-3].operator != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + RubyS[Rubypt-3].operator + ")")
			}

			RubyVAL.genericValue = ast.EigenClass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 146:
		//line parser.y:689
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 147:
		//line parser.y:698
		{
			RubyVAL.genericValue = ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
		}
	case 148:
		//line parser.y:705
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(string)}, "")
			pieces := strings.Split(fullName, "::")

			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.Join(pieces[:len(pieces)-1], "::"),
				IsGlobalNamespace: false,
			}
		}
	case 149:
		//line parser.y:717
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(string), "::")
			namespace := strings.Join(pieces[:len(pieces)-1], "::")
			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.TrimPrefix(namespace, "::"),
				IsGlobalNamespace: true,
			}
		}
	case 150:
		//line parser.y:728
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 151:
		//line parser.y:735
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 152:
		//line parser.y:739
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 153:
		//line parser.y:743
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 154:
		//line parser.y:750
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 155:
		//line parser.y:757
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 156:
		//line parser.y:764
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 157:
		//line parser.y:772
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 158:
		//line parser.y:779
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 159:
		//line parser.y:787
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 160:
		//line parser.y:802
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 161:
		//line parser.y:808
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:815
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 163:
		//line parser.y:819
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 164:
		//line parser.y:826
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 165:
		//line parser.y:833
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 166:
		//line parser.y:840
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 167:
		//line parser.y:847
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 168:
		//line parser.y:850
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:852
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:855
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 171:
		//line parser.y:857
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 172:
		//line parser.y:860
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 173:
		//line parser.y:862
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 174:
		//line parser.y:865
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 175:
		//line parser.y:867
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 176:
		//line parser.y:869
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:871
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 178:
		//line parser.y:874
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 179:
		//line parser.y:876
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 180:
		//line parser.y:878
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:880
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 182:
		//line parser.y:883
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 183:
		//line parser.y:885
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 184:
		//line parser.y:887
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 185:
		//line parser.y:889
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 186:
		//line parser.y:892
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 187:
		//line parser.y:894
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 188:
		//line parser.y:896
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 189:
		//line parser.y:898
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 190:
		//line parser.y:901
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 191:
		//line parser.y:902
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 192:
		//line parser.y:903
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 193:
		//line parser.y:904
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 194:
		//line parser.y:907
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 195:
		//line parser.y:916
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:925
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 197:
		//line parser.y:934
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 198:
		//line parser.y:943
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 199:
		//line parser.y:952
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 200:
		//line parser.y:960
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 201:
		//line parser.y:961
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 202:
		//line parser.y:963
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 203:
		//line parser.y:965
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 204:
		//line parser.y:967
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 205:
		//line parser.y:969
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 206:
		//line parser.y:971
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 207:
		//line parser.y:978
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 208:
		//line parser.y:980
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 209:
		//line parser.y:982
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 210:
		//line parser.y:990
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 211:
		//line parser.y:992
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 212:
		//line parser.y:1000
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 213:
		//line parser.y:1008
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 214:
		//line parser.y:1011
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 215:
		//line parser.y:1018
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 216:
		//line parser.y:1026
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 217:
		//line parser.y:1033
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 218:
		//line parser.y:1040
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 219:
		//line parser.y:1048
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 220:
		//line parser.y:1050
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 221:
		//line parser.y:1057
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 222:
		//line parser.y:1061
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 223:
		//line parser.y:1064
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 224:
		//line parser.y:1066
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 225:
		//line parser.y:1068
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1070
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 227:
		//line parser.y:1073
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 228:
		//line parser.y:1080
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 229:
		//line parser.y:1088
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 230:
		//line parser.y:1095
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 231:
		//line parser.y:1102
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 232:
		//line parser.y:1109
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 233:
		//line parser.y:1116
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 234:
		//line parser.y:1123
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 235:
		//line parser.y:1130
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 236:
		//line parser.y:1138
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 237:
		//line parser.y:1145
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 238:
		//line parser.y:1154
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 239:
		//line parser.y:1161
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 240:
		//line parser.y:1168
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 241:
		//line parser.y:1175
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 242:
		//line parser.y:1182
		{
		}
	case 243:
		//line parser.y:1183
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 244:
		//line parser.y:1184
		{
		}
	case 245:
		//line parser.y:1187
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 246:
		//line parser.y:1190
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 247:
		//line parser.y:1197
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 248:
		//line parser.y:1206
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 249:
		//line parser.y:1208
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 250:
		//line parser.y:1221
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 251:
		//line parser.y:1240
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 252:
		//line parser.y:1254
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 253:
		//line parser.y:1256
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1259
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 255:
		//line parser.y:1261
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 256:
		//line parser.y:1264
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 257:
		//line parser.y:1266
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 258:
		//line parser.y:1269
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 259:
		//line parser.y:1276
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 260:
		//line parser.y:1278
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 261:
		//line parser.y:1281
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 262:
		//line parser.y:1289
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 263:
		//line parser.y:1293
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 264:
		//line parser.y:1295
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 265:
		//line parser.y:1297
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 266:
		//line parser.y:1301
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 267:
		//line parser.y:1303
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 268:
		//line parser.y:1305
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 269:
		//line parser.y:1309
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 270:
		//line parser.y:1318
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 271:
		//line parser.y:1320
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 272:
		//line parser.y:1322
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 273:
		//line parser.y:1325
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 274:
		//line parser.y:1327
		{
		}
	case 275:
		//line parser.y:1329
		{
		}
	case 276:
		//line parser.y:1331
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 277:
		//line parser.y:1333
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 278:
		//line parser.y:1336
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 279:
		//line parser.y:1343
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 280:
		//line parser.y:1351
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 281:
		//line parser.y:1358
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 282:
		//line parser.y:1366
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 283:
		//line parser.y:1374
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 284:
		//line parser.y:1381
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 285:
		//line parser.y:1388
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 286:
		//line parser.y:1395
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 287:
		//line parser.y:1403
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 288:
		//line parser.y:1406
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 289:
		//line parser.y:1408
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 290:
		//line parser.y:1411
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 291:
		//line parser.y:1413
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 292:
		//line parser.y:1415
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 293:
		//line parser.y:1417
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 294:
		//line parser.y:1420
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 295:
		//line parser.y:1422
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 296:
		//line parser.y:1424
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	case 297:
		//line parser.y:1427
		{
			RubyVAL.genericValue = ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
		}
	}
	goto Rubystack /* stack new state and value */
}

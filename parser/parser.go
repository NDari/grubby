//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	hashPair        ast.HashKeyValuePair
	astString       ast.String

	methodParam      ast.MethodParam
	methodParamSlice []ast.MethodParam
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const IVAR_OR_CLASS_VARIABLE = 57355
const LPAREN = 57356
const RPAREN = 57357
const COMMA = 57358
const STRING = 57359
const NamespacedModule = 57360
const ProcArg = 57361
const DO = 57362
const DEF = 57363
const END = 57364
const IF = 57365
const ELSE = 57366
const ELSIF = 57367
const UNLESS = 57368
const CLASS = 57369
const MODULE = 57370
const FOR = 57371
const WHILE = 57372
const UNTIL = 57373
const BEGIN = 57374
const RESCUE = 57375
const ENSURE = 57376
const BREAK = 57377
const NEXT = 57378
const REDO = 57379
const RETRY = 57380
const RETURN = 57381
const YIELD = 57382
const AND = 57383
const OR = 57384
const LAMBDA = 57385
const CASE = 57386
const WHEN = 57387
const ALIAS = 57388
const SELF = 57389
const NIL = 57390
const DEFINED = 57391
const LESSTHAN = 57392
const GREATERTHAN = 57393
const EQUALTO = 57394
const BANG = 57395
const COMPLEMENT = 57396
const BINARY_PLUS = 57397
const UNARY_PLUS = 57398
const BINARY_MINUS = 57399
const UNARY_MINUS = 57400
const STAR = 57401
const RANGE = 57402
const EXCLUSIVE_RANGE = 57403
const OR_EQUALS = 57404
const AND_EQUALS = 57405
const WHITESPACE = 57406
const NEWLINE = 57407
const SEMICOLON = 57408
const COLON = 57409
const DOT = 57410
const PIPE = 57411
const SLASH = 57412
const AMPERSAND = 57413
const QUESTIONMARK = 57414
const CARET = 57415
const LBRACKET = 57416
const RBRACKET = 57417
const LBRACE = 57418
const RBRACE = 57419
const FILE_CONST_REF = 57420
const LINE_CONST_REF = 57421
const EOF = 57422

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"IVAR_OR_CLASS_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"DEFINED",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"EXCLUSIVE_RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1905

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 129,
	68, 20,
	-2, 157,
	-1, 140,
	21, 261,
	23, 261,
	26, 261,
	27, 261,
	28, 261,
	30, 261,
	31, 261,
	32, 261,
	35, 261,
	36, 261,
	38, 261,
	39, 261,
	40, 261,
	44, 261,
	46, 261,
	66, 261,
	-2, 11,
	-1, 151,
	21, 13,
	23, 13,
	26, 13,
	27, 13,
	28, 13,
	30, 13,
	31, 13,
	32, 13,
	35, 13,
	36, 13,
	38, 13,
	39, 13,
	40, 13,
	44, 13,
	46, 13,
	66, 13,
	-2, 11,
	-1, 209,
	21, 261,
	23, 261,
	26, 261,
	27, 261,
	28, 261,
	30, 261,
	31, 261,
	32, 261,
	35, 261,
	36, 261,
	38, 261,
	39, 261,
	40, 261,
	44, 261,
	46, 261,
	66, 261,
	-2, 11,
	-1, 213,
	21, 13,
	23, 13,
	26, 13,
	27, 13,
	28, 13,
	30, 13,
	31, 13,
	32, 13,
	35, 13,
	36, 13,
	38, 13,
	39, 13,
	40, 13,
	44, 13,
	46, 13,
	66, 13,
	77, 13,
	-2, 11,
	-1, 353,
	16, 126,
	-2, 20,
	-1, 364,
	21, 261,
	23, 261,
	26, 261,
	27, 261,
	28, 261,
	30, 261,
	31, 261,
	32, 261,
	35, 261,
	36, 261,
	38, 261,
	39, 261,
	40, 261,
	44, 261,
	46, 261,
	66, 261,
	-2, 11,
	-1, 404,
	65, 11,
	77, 11,
	-2, 13,
	-1, 447,
	65, 11,
	77, 11,
	-2, 13,
	-1, 564,
	65, 11,
	77, 11,
	-2, 14,
	-1, 606,
	16, 135,
	-2, 11,
	-1, 610,
	65, 11,
	77, 11,
	-2, 14,
}

const RubyNprod = 326
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4669

var RubyAct = []int{

	332, 460, 5, 651, 142, 461, 154, 164, 463, 143,
	155, 432, 421, 258, 186, 377, 293, 141, 339, 256,
	26, 338, 25, 150, 2, 3, 55, 539, 371, 54,
	21, 255, 132, 649, 69, 129, 68, 338, 133, 4,
	134, 135, 415, 338, 413, 93, 398, 607, 338, 635,
	175, 338, 338, 126, 14, 608, 127, 183, 184, 28,
	562, 192, 193, 534, 532, 338, 175, 375, 373, 272,
	419, 157, 371, 150, 206, 94, 95, 492, 196, 213,
	122, 418, 214, 215, 171, 212, 172, 538, 208, 120,
	371, 167, 124, 125, 165, 172, 173, 174, 371, 157,
	220, 221, 222, 149, 123, 153, 72, 71, 171, 229,
	156, 338, 338, 371, 234, 624, 290, 171, 198, 263,
	241, 530, 245, 197, 171, 250, 251, 252, 253, 213,
	371, 414, 168, 153, 122, 236, 167, 195, 156, 165,
	99, 244, 290, 100, 248, 262, 270, 101, 271, 412,
	367, 207, 99, 128, 166, 100, 294, 396, 123, 101,
	290, 647, 121, 380, 264, 275, 340, 289, 277, 302,
	303, 304, 374, 307, 308, 309, 279, 313, 314, 315,
	157, 227, 97, 96, 120, 626, 338, 301, 338, 370,
	237, 238, 306, 595, 620, 621, 593, 98, 266, 166,
	106, 341, 342, 343, 344, 278, 281, 283, 324, 316,
	157, 338, 356, 349, 153, 269, 489, 484, 351, 156,
	500, 499, 167, 176, 242, 165, 291, 247, 483, 360,
	594, 566, 557, 177, 178, 338, 99, 115, 116, 100,
	299, 646, 361, 101, 153, 458, 104, 105, 273, 156,
	457, 107, 455, 108, 338, 109, 117, 118, 485, 378,
	383, 348, 182, 168, 103, 112, 110, 111, 106, 337,
	300, 497, 376, 169, 170, 305, 176, 381, 619, 394,
	338, 338, 338, 317, 355, 166, 99, 119, 359, 100,
	157, 180, 30, 101, 484, 485, 99, 102, 181, 100,
	259, 99, 351, 101, 100, 115, 116, 257, 101, 411,
	403, 645, 261, 73, 104, 105, 321, 644, 275, 107,
	157, 108, 322, 109, 153, 259, 631, 179, 336, 156,
	430, 462, 103, 112, 110, 111, 114, 261, 335, 157,
	130, 259, 429, 328, 329, 310, 202, 395, 433, 203,
	629, 311, 260, 261, 153, 438, 434, 627, 604, 156,
	205, 131, 400, 449, 597, 446, 448, 405, 323, 407,
	554, 409, 200, 153, 157, 201, 157, 260, 156, 284,
	525, 378, 526, 547, 451, 285, 435, 426, 436, 427,
	476, 471, 459, 382, 464, 472, 334, 312, 430, 428,
	579, 273, 479, 437, 465, 380, 482, 486, 153, 437,
	153, 580, 296, 156, 272, 156, 481, 496, 468, 469,
	470, 439, 99, 506, 495, 100, 441, 443, 384, 101,
	444, 286, 442, 520, 520, 440, 466, 509, 182, 452,
	371, 453, 454, 180, 380, 664, 456, 661, 660, 287,
	478, 659, 528, 661, 660, 480, 544, 167, 545, 546,
	614, 346, 540, 548, 138, 77, 615, 450, 345, 475,
	549, 581, 514, 157, 555, 542, 204, 582, 561, 490,
	574, 549, 505, 504, 559, 560, 498, 503, 515, 505,
	504, 137, 388, 138, 77, 387, 417, 138, 77, 416,
	399, 568, 386, 385, 384, 571, 326, 153, 325, 254,
	224, 352, 156, 333, 1, 531, 211, 533, 91, 535,
	90, 537, 490, 583, 584, 89, 88, 87, 86, 41,
	40, 39, 38, 521, 20, 43, 44, 16, 591, 12,
	13, 496, 11, 45, 24, 23, 22, 27, 19, 10,
	35, 558, 18, 598, 600, 602, 15, 599, 601, 603,
	70, 42, 605, 17, 46, 606, 563, 37, 611, 482,
	36, 31, 29, 32, 567, 74, 0, 0, 0, 481,
	0, 0, 0, 106, 0, 0, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 625, 0, 0, 0,
	0, 628, 0, 630, 588, 632, 0, 0, 549, 0,
	549, 0, 549, 478, 0, 596, 34, 0, 480, 0,
	115, 116, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 640, 641, 642, 107, 0, 108, 0, 109, 609,
	0, 520, 520, 520, 0, 655, 0, 103, 112, 110,
	111, 0, 0, 662, 648, 0, 0, 0, 0, 0,
	0, 666, 623, 0, 520, 663, 0, 158, 520, 520,
	520, 0, 0, 667, 668, 0, 158, 0, 669, 158,
	158, 633, 0, 0, 0, 636, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 0, 0, 0, 0,
	158, 158, 158, 0, 106, 0, 0, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 657, 158,
	0, 158, 158, 0, 158, 0, 158, 158, 158, 158,
	0, 158, 0, 665, 158, 158, 0, 158, 0, 158,
	158, 115, 116, 0, 106, 0, 0, 0, 0, 0,
	104, 105, 0, 0, 158, 107, 0, 108, 0, 109,
	0, 158, 158, 158, 158, 0, 0, 0, 103, 112,
	110, 111, 0, 0, 0, 570, 158, 0, 0, 0,
	158, 115, 116, 158, 0, 0, 0, 0, 158, 0,
	104, 105, 0, 0, 0, 107, 158, 108, 0, 109,
	117, 118, 0, 0, 0, 0, 158, 0, 103, 112,
	110, 111, 0, 0, 0, 397, 0, 0, 0, 0,
	0, 0, 0, 158, 158, 0, 69, 159, 68, 78,
	160, 77, 162, 161, 140, 0, 148, 93, 0, 163,
	150, 158, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 158, 0, 0, 0, 0,
	0, 0, 0, 80, 106, 295, 0, 94, 95, 92,
	0, 158, 145, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 146, 147, 0, 0, 158, 0, 0, 0,
	0, 0, 0, 0, 144, 0, 151, 0, 72, 71,
	0, 115, 116, 0, 0, 0, 0, 0, 158, 0,
	104, 105, 158, 0, 158, 107, 158, 108, 0, 109,
	117, 118, 0, 0, 0, 0, 0, 0, 103, 112,
	110, 111, 114, 0, 9, 158, 69, 159, 68, 78,
	160, 77, 162, 161, 140, 0, 148, 93, 0, 163,
	150, 158, 0, 0, 0, 0, 0, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 0, 158, 80, 0, 0, 158, 94, 95, 92,
	158, 0, 0, 81, 82, 152, 83, 0, 84, 85,
	0, 0, 0, 0, 187, 0, 0, 194, 199, 0,
	158, 0, 0, 0, 297, 0, 151, 0, 72, 71,
	0, 0, 158, 210, 0, 0, 0, 158, 216, 217,
	218, 0, 0, 0, 0, 0, 158, 219, 0, 0,
	0, 0, 0, 0, 0, 158, 158, 223, 0, 225,
	226, 0, 228, 0, 230, 231, 232, 233, 0, 235,
	0, 0, 239, 240, 158, 243, 0, 246, 249, 0,
	0, 0, 158, 0, 0, 0, 0, 0, 0, 158,
	158, 158, 267, 158, 0, 0, 0, 0, 0, 274,
	276, 280, 282, 0, 69, 159, 68, 78, 160, 77,
	162, 161, 79, 0, 152, 93, 0, 163, 298, 0,
	0, 249, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 0, 0, 320, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 152, 94, 95, 92, 0, 0,
	106, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 347, 354, 338, 0, 0, 0, 0, 158, 0,
	158, 0, 75, 0, 76, 0, 72, 71, 0, 320,
	0, 0, 365, 0, 0, 0, 0, 115, 116, 0,
	0, 0, 368, 369, 0, 158, 104, 105, 0, 0,
	0, 107, 0, 108, 0, 109, 117, 118, 0, 320,
	0, 0, 0, 0, 103, 112, 110, 111, 0, 0,
	0, 372, 0, 0, 210, 0, 0, 0, 69, 159,
	68, 78, 160, 77, 162, 161, 140, 0, 0, 93,
	0, 163, 150, 0, 158, 0, 404, 0, 0, 0,
	408, 0, 410, 0, 210, 0, 0, 0, 0, 0,
	0, 158, 0, 0, 0, 80, 0, 0, 0, 94,
	95, 92, 33, 152, 145, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 0, 0, 0, 431,
	0, 0, 0, 0, 0, 187, 297, 0, 151, 0,
	72, 71, 0, 0, 0, 0, 0, 0, 152, 292,
	210, 0, 0, 0, 447, 0, 0, 0, 249, 0,
	0, 136, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 188, 0, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	477, 0, 0, 0, 0, 487, 188, 188, 188, 0,
	0, 0, 0, 0, 354, 188, 0, 0, 185, 0,
	0, 0, 0, 501, 502, 188, 0, 188, 188, 0,
	188, 0, 188, 188, 188, 188, 0, 188, 0, 0,
	188, 188, 187, 188, 0, 188, 188, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 0, 210, 541, 543,
	188, 487, 0, 0, 0, 0, 0, 188, 188, 188,
	188, 0, 69, 189, 68, 78, 190, 77, 134, 191,
	79, 0, 0, 93, 0, 163, 188, 0, 0, 188,
	0, 0, 0, 0, 188, 0, 265, 0, 0, 268,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 80,
	288, 0, 0, 94, 95, 92, 0, 0, 0, 81,
	82, 106, 83, 0, 84, 85, 0, 0, 0, 0,
	188, 338, 0, 0, 0, 0, 589, 0, 354, 0,
	75, 0, 76, 327, 72, 71, 0, 188, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 115, 116,
	188, 188, 0, 477, 0, 0, 0, 104, 105, 0,
	0, 0, 107, 0, 108, 0, 109, 188, 0, 0,
	0, 0, 0, 0, 0, 103, 112, 110, 111, 391,
	0, 0, 569, 0, 69, 159, 68, 78, 160, 77,
	162, 161, 140, 0, 0, 93, 0, 163, 150, 0,
	0, 0, 634, 0, 188, 379, 0, 0, 188, 0,
	188, 0, 0, 0, 389, 0, 0, 392, 0, 643,
	0, 80, 0, 0, 0, 94, 95, 92, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 402,
	0, 0, 0, 406, 106, 445, 0, 188, 0, 0,
	0, 0, 297, 188, 151, 0, 72, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 188, 102, 0, 0, 188, 0, 424, 425,
	0, 115, 116, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 0, 0, 0, 107, 188, 108, 106, 109,
	117, 118, 0, 0, 0, 0, 0, 0, 103, 112,
	110, 111, 114, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 188, 0, 0, 115, 116, 0, 106, 0,
	0, 473, 0, 516, 104, 105, 0, 0, 0, 107,
	188, 108, 0, 109, 491, 0, 0, 494, 188, 0,
	0, 0, 103, 112, 110, 111, 188, 188, 0, 188,
	106, 0, 0, 507, 0, 115, 116, 511, 512, 0,
	513, 0, 0, 0, 104, 105, 527, 0, 529, 107,
	0, 108, 0, 109, 117, 118, 0, 491, 0, 0,
	0, 366, 103, 112, 110, 111, 0, 115, 116, 0,
	0, 0, 550, 0, 0, 0, 104, 105, 551, 552,
	553, 107, 0, 108, 0, 109, 117, 118, 0, 0,
	0, 0, 0, 0, 103, 112, 110, 111, 0, 0,
	0, 0, 0, 0, 0, 565, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 572, 573, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 69, 50, 68, 78,
	51, 77, 53, 52, 79, 0, 585, 93, 587, 0,
	0, 47, 0, 56, 0, 0, 57, 48, 49, 0,
	60, 61, 58, 616, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 92,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	188, 612, 0, 0, 0, 338, 613, 0, 0, 0,
	0, 617, 618, 327, 75, 0, 76, 188, 72, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 639, 0, 0, 0, 0,
	424, 425, 69, 50, 68, 78, 51, 77, 53, 52,
	79, 0, 0, 93, 0, 0, 0, 47, 654, 522,
	653, 652, 523, 48, 49, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 92, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	0, 518, 519, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 72, 71, 69, 50, 68, 78,
	51, 77, 53, 52, 79, 0, 0, 93, 0, 0,
	0, 47, 650, 522, 653, 652, 523, 48, 49, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 92,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 0, 518, 519, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 72, 71,
	69, 50, 68, 78, 51, 77, 53, 52, 79, 0,
	0, 93, 0, 0, 0, 47, 508, 56, 423, 422,
	57, 48, 49, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 80, 62, 0,
	67, 94, 95, 92, 0, 0, 0, 81, 82, 0,
	83, 0, 84, 85, 0, 0, 0, 0, 0, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	76, 0, 72, 71, 69, 50, 68, 78, 51, 77,
	53, 52, 79, 0, 0, 93, 0, 0, 0, 47,
	420, 56, 423, 422, 57, 48, 49, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 80, 62, 0, 67, 94, 95, 92, 0, 0,
	0, 81, 82, 0, 83, 0, 84, 85, 0, 0,
	0, 0, 0, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 76, 0, 72, 71, 69, 50,
	68, 78, 51, 77, 53, 52, 79, 0, 0, 93,
	0, 0, 0, 47, 0, 56, 0, 0, 57, 48,
	49, 0, 60, 61, 58, 430, 462, 64, 65, 0,
	66, 63, 59, 0, 0, 80, 62, 0, 67, 94,
	95, 92, 0, 0, 0, 81, 82, 0, 83, 0,
	84, 85, 0, 0, 0, 0, 0, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 76, 0,
	72, 71, 69, 50, 68, 78, 51, 77, 53, 52,
	79, 0, 0, 93, 0, 0, 0, 47, 575, 56,
	0, 0, 57, 48, 49, 0, 60, 61, 58, 0,
	576, 64, 65, 0, 66, 63, 59, 0, 0, 80,
	62, 0, 67, 94, 95, 92, 0, 0, 0, 81,
	82, 0, 83, 0, 84, 85, 0, 0, 0, 0,
	0, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 76, 0, 72, 71, 69, 50, 68, 78,
	51, 77, 53, 52, 79, 0, 0, 93, 0, 0,
	0, 47, 0, 56, 0, 0, 57, 48, 49, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 80, 62, 0, 67, 94, 95, 92,
	0, 0, 0, 81, 82, 0, 83, 0, 84, 85,
	0, 0, 0, 0, 0, 6, 7, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 76, 0, 72, 71,
	8, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 656, 522, 0,
	0, 523, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	518, 519, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 637, 56, 0, 0, 57, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 622, 56, 0, 0, 57,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 586,
	56, 0, 0, 57, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 577, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 556, 56, 0,
	0, 57, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 524, 522, 0, 0, 523, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 518, 519, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 517, 522, 0, 0, 523,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 518, 519,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 510,
	56, 0, 0, 57, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 0, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 493, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 488, 56, 0,
	0, 57, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 474, 56, 0, 0, 57, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 401, 56, 0, 0, 57,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 393,
	56, 0, 0, 57, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 0, 0, 93, 0,
	0, 0, 47, 390, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 0, 522, 0,
	0, 523, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	518, 519, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 50, 68, 78, 51,
	77, 53, 52, 79, 0, 0, 93, 0, 0, 0,
	47, 0, 56, 0, 0, 57, 48, 49, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 80, 62, 0, 67, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 0, 72, 71, 69,
	50, 68, 78, 51, 77, 53, 52, 79, 0, 0,
	93, 0, 0, 0, 47, 0, 56, 0, 0, 57,
	48, 49, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 80, 62, 0, 67,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 0, 0, 0, 0, 0, 610, 331,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 76,
	0, 72, 71, 69, 50, 68, 78, 51, 77, 53,
	52, 79, 0, 0, 93, 0, 0, 0, 47, 0,
	56, 0, 0, 57, 48, 49, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	80, 62, 0, 67, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 0, 0, 0,
	0, 0, 564, 331, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 76, 0, 72, 71, 69, 50, 68,
	78, 51, 77, 53, 52, 79, 358, 0, 93, 0,
	0, 0, 47, 0, 56, 0, 0, 57, 48, 49,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 80, 62, 0, 67, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 0, 0, 0, 0, 0, 0, 357, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 76, 0, 72,
	71, 69, 50, 68, 78, 51, 77, 53, 52, 79,
	0, 0, 93, 0, 0, 0, 47, 0, 56, 0,
	0, 57, 48, 49, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 80, 62,
	0, 67, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 69, 189, 68, 78, 190,
	77, 134, 191, 79, 0, 0, 93, 0, 0, 75,
	0, 76, 0, 72, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 0,
	0, 0, 0, 0, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 76, 592, 72, 71, 69,
	353, 68, 78, 190, 77, 134, 191, 79, 0, 0,
	93, 0, 0, 69, 189, 68, 78, 190, 77, 134,
	191, 364, 0, 0, 93, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	80, 84, 85, 0, 94, 95, 92, 0, 338, 362,
	81, 82, 0, 83, 0, 84, 85, 75, 0, 76,
	350, 72, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 363, 0, 151, 0, 72, 71, 69, 159, 68,
	78, 160, 77, 162, 161, 140, 0, 0, 93, 0,
	163, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 69, 189, 68, 78, 190, 77, 134, 191, 79,
	0, 0, 93, 0, 0, 297, 0, 151, 0, 72,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 0, 0, 0, 0, 0,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 76, 0, 72, 71, 69, 189, 68, 78, 190,
	77, 134, 191, 364, 0, 0, 93, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 0, 84, 85, 69,
	189, 68, 78, 190, 77, 134, 191, 79, 0, 0,
	93, 0, 0, 75, 0, 151, 0, 72, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 62, 0, 0,
	94, 95, 92, 0, 0, 0, 81, 82, 0, 83,
	0, 84, 85, 69, 159, 68, 78, 160, 77, 162,
	161, 209, 0, 0, 93, 0, 163, 75, 0, 76,
	0, 72, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 94, 95, 92, 0, 0, 0,
	81, 82, 0, 83, 0, 84, 85, 69, 189, 68,
	78, 190, 77, 134, 191, 79, 0, 0, 93, 0,
	0, 75, 0, 76, 0, 72, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 94, 95,
	92, 0, 0, 0, 81, 82, 0, 83, 0, 84,
	85, 69, 318, 68, 78, 190, 77, 134, 319, 79,
	0, 0, 93, 0, 0, 75, 0, 76, 0, 72,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 94, 95, 92, 0, 0, 0, 81, 82,
	0, 83, 0, 84, 85, 69, 159, 68, 78, 160,
	77, 162, 161, 79, 0, 0, 93, 0, 0, 75,
	0, 76, 0, 72, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 94, 95, 92, 0,
	0, 0, 81, 82, 0, 83, 106, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 658, 0,
	115, 116, 0, 75, 0, 76, 0, 72, 71, 104,
	105, 106, 295, 0, 107, 0, 108, 0, 109, 0,
	0, 0, 0, 115, 116, 0, 0, 103, 112, 110,
	111, 114, 104, 105, 0, 0, 0, 107, 0, 108,
	0, 109, 0, 0, 0, 0, 0, 0, 115, 116,
	103, 112, 110, 111, 0, 0, 0, 104, 105, 0,
	0, 0, 107, 0, 108, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 112, 110, 111,
}
var RubyPact = []int{

	-41, 2350, -1000, -1000, -1000, 117, -1000, -1000, -1000, 1580,
	-1000, -1000, -1000, -1000, 261, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 110, 30, -1000, 85, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28, 487, 454,
	820, 211, 34, 171, 275, 246, 3905, 3905, -1000, 4411,
	3905, 3905, 4411, 4519, 349, 323, -1000, 468, -1000, -1000,
	343, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4357, -1000,
	3, 3905, 3905, 4411, 4411, 4411, -1000, -1000, -1000, -1000,
	-1000, -1000, 4411, -1000, -1000, -1000, -1000, -1000, -1000, 3905,
	3905, 3905, 4411, 503, 4411, 4411, -1000, 4411, 3905, 4411,
	4411, 4411, 4411, 3905, 4411, -1000, -1000, 4411, 4411, 3905,
	4411, 3905, 4411, 4411, 3905, 3905, 3905, 3905, 502, 293,
	77, 51, 293, -1000, -1000, -1000, 148, 4411, 446, -1000,
	-1000, 3, -1000, 53, 4411, 4303, 4411, 4411, 372, 433,
	73, 91, 860, -1000, -1000, 396, -1000, -1000, 84, 1202,
	80, 43, 224, 4411, -1000, -1000, 4411, -1000, 3905, 3905,
	3905, 4411, 3905, 3905, 3905, 338, 3905, 3905, 3905, 4465,
	309, 501, 499, 399, 278, 3609, 380, 1634, 15, 4121,
	125, 10, 273, 263, 1634, 121, 380, -1000, -1000, 4549,
	3905, 3905, 3905, 3905, 460, -1000, 1078, 4033, 398, -1000,
	860, 3831, -1000, 91, 399, 399, 1634, 1634, 1634, 1634,
	399, 399, 399, 1634, 4047, 1634, 1634, 4175, 1634, 399,
	1634, 1634, 1634, 1634, 399, 1674, 83, 4175, 4175, 1634,
	1634, 399, 114, 1126, -7, 399, 1634, 97, -8, 1706,
	399, 399, 399, 399, 4249, -1000, 428, 334, -1000, 208,
	497, 496, 495, 488, -1000, 3461, 454, 1634, 3387, 1078,
	-1000, -1000, -1000, 82, 740, -29, 264, -1000, -1000, -1000,
	4549, -1000, 4549, -1000, -1000, -1000, 493, -1000, 3313, -1000,
	318, 4033, 3609, -1000, -1000, 4411, -1000, 4411, 1634, 1078,
	74, -31, 399, 399, 399, 56, -33, 399, 399, 399,
	-1000, -1000, 492, 399, 399, 399, 427, 424, 930, 50,
	1634, -1000, -1000, 489, 422, 7, -4, 2128, -1000, -1000,
	-1000, -1000, 399, 365, 4411, -1000, -1000, 121, -1000, 364,
	4411, 399, 399, 399, 399, -1000, 419, 1634, -1000, -1000,
	-1000, 416, 414, 1518, 4597, 1078, 399, -1000, -1000, 4175,
	-1000, 3, 3905, 4411, -1000, 1634, -1000, -1000, 1634, 1634,
	200, -1000, 198, -1000, 193, -1000, 3, -1000, -1000, 2202,
	318, 389, 421, 4411, -1000, -1000, 293, 293, 293, 2202,
	-1000, -1000, 3239, -1000, 374, 1078, 176, 242, -1000, -1000,
	1396, -1000, 3165, 147, 4597, 0, 3091, 47, 1634, 4175,
	196, 398, 169, -1000, 168, -1000, -1000, -1000, 4411, 4411,
	-1000, 465, 3905, -1000, 2054, 3017, -1000, -1000, -1000, -1000,
	483, 1634, 2943, 2869, 358, -1000, -1000, 4411, 380, 46,
	-1000, -13, -1000, -14, -1000, 4411, 398, 1634, -1000, 399,
	12, -48, 1078, 4175, 4175, 3905, 4175, 3905, 3905, -1000,
	361, 297, -1000, -1000, -1000, -1000, -1000, 1634, -1000, -1000,
	-1000, 348, 297, 2795, -1000, 217, -1000, 860, -1000, -1000,
	-1000, -1000, 396, 3905, 3905, 471, -1000, 1634, -1000, -1000,
	-17, 3609, -1000, -1000, 3757, -1000, -1000, 165, 216, -1000,
	3905, 1447, 700, -1000, 3905, -1000, 399, 3609, -1000, 458,
	-1000, 2276, 2721, 3609, 395, 464, -1000, -1000, -1000, -1000,
	399, -1000, 3905, 3905, -1000, -1000, -1000, 2647, 380, 3609,
	-1000, 1078, -1000, 3959, -1000, 189, 1634, 215, 141, -1000,
	374, 1634, -1000, 1706, 399, 399, 399, -1000, 342, -1000,
	3609, 2202, 2202, 2202, -1000, 336, -1000, 3, 1078, 399,
	399, -27, -1000, -22, -1000, 3683, -1000, 1800, 399, 279,
	-1000, 399, 3609, 3609, -1000, -1000, -1000, -1000, 3609, 453,
	454, -1000, -1000, 213, 129, 2573, -1000, 3609, 123, 1634,
	-1000, -1000, -1000, 48, -1000, 3905, 170, -1000, 335, 297,
	328, 297, 304, 297, -1000, -1000, -1000, 4411, -1000, -28,
	-1000, 399, 3609, 2499, -1000, -1000, -1000, 3609, 3609, -1000,
	-1000, -1000, -1000, 123, 4411, 399, -1000, -1000, 295, -1000,
	289, -1000, 219, 146, 579, -1000, -44, -1000, 3609, 3609,
	1980, 1906, 2425, 4572, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 429, 3905, -1000, -1000, 423, -1000, 123, -1000, -1000,
	3905, -1000, 399, 3535, -1000, 123, 399, 3535, 3535, 3535,
}
var RubyPgo = []int{

	0, 575, 0, 313, 573, 20, 4, 572, 571, 570,
	567, 8, 564, 59, 563, 6, 561, 54, 560, 556,
	552, 934, 292, 15, 616, 550, 549, 548, 547, 546,
	545, 544, 543, 542, 540, 539, 537, 1252, 18, 30,
	536, 535, 22, 534, 533, 3, 29, 532, 531, 530,
	529, 528, 527, 526, 525, 520, 518, 1289, 516, 5,
	17, 12, 514, 11, 1, 513, 9, 14, 511, 103,
	26, 472, 461, 13, 16, 31, 19, 7, 10, 74,
}
var RubyR1 = []int{

	0, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 79, 79, 57, 57, 57, 57, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 32, 32, 32, 32, 32,
	32, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 18, 18, 42, 16, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
	60, 60, 60, 60, 67, 67, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 15,
	69, 69, 64, 64, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 75, 75, 75, 76, 76, 76,
	73, 73, 73, 73, 33, 33, 34, 35, 37, 37,
	37, 17, 17, 17, 17, 17, 17, 17, 17, 19,
	19, 19, 70, 70, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 8, 3, 1, 72, 72,
	72, 72, 72, 72, 72, 4, 4, 4, 4, 77,
	78, 78, 68, 68, 68, 6, 6, 6, 6, 6,
	6, 6, 6, 23, 23, 74, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 61, 61, 61,
	61, 58, 58, 58, 9, 20, 20, 20, 20, 11,
	11, 11, 11, 11, 11, 71, 71, 65, 65, 59,
	59, 27, 27, 28, 29, 29, 29, 29, 31, 31,
	31, 30, 30, 30, 13, 13, 43, 43, 43, 63,
	63, 63, 63, 63, 44, 44, 44, 44, 44, 45,
	45, 45, 45, 41, 40, 10, 39, 39, 39, 39,
	38, 38, 5, 5, 7, 12,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 2, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 6, 7, 1, 2,
	6, 6, 2, 3, 2, 3, 4, 5, 4, 5,
	4, 5, 2, 3, 3, 3, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 6,
	6, 6, 6, 6, 6, 7, 6, 6, 8, 4,
	5, 8, 1, 4, 1, 3, 0, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 4, 2,
	1, 4, 0, 2, 6, 7, 8, 8, 8, 9,
	9, 9, 6, 7, 1, 3, 3, 0, 1, 3,
	1, 2, 3, 2, 4, 6, 5, 4, 1, 2,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 9, 6, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 3, 4, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 5, 1, 1, 0, 1,
	1, 1, 4, 4, 4, 3, 5, 6, 5, 3,
	1, 4, 3, 7, 8, 3, 4, 4, 4, 7,
	8, 5, 6, 0, 1, 3, 4, 5, 3, 3,
	3, 3, 3, 5, 6, 5, 3, 4, 3, 3,
	2, 0, 2, 2, 3, 4, 6, 8, 6, 2,
	3, 5, 5, 4, 4, 1, 3, 0, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 1, 1, 3,
	3, 1, 3, 3, 6, 6, 5, 5, 3, 0,
	2, 2, 2, 2, 5, 6, 5, 6, 5, 4,
	3, 3, 2, 4, 4, 2, 5, 7, 4, 6,
	4, 5, 3, 3, 3, 2,
}
var RubyChk = []int{

	-1000, -62, 65, 66, 80, -2, 65, 66, 80, -21,
	-26, -33, -35, -34, -17, -19, -36, -14, -20, -27,
	-43, -39, -29, -30, -31, -42, -5, -28, -13, -7,
	-22, -8, -4, -37, -24, -25, -9, -10, -47, -48,
	-49, -50, -16, -41, -40, -32, -12, 21, 27, 28,
	7, 10, 13, 12, -46, -70, 23, 26, 32, 40,
	30, 31, 44, 39, 35, 36, 38, 46, 8, 6,
	-18, 79, 78, -3, -1, 74, 76, 11, 9, 14,
	43, 53, 54, 56, 58, 59, -51, -52, -53, -54,
	-55, -56, 49, 17, 47, 48, 66, 65, 80, 23,
	26, 30, 33, 68, 50, 51, 4, 55, 57, 59,
	70, 71, 69, 26, 72, 41, 42, 60, 61, 26,
	74, 52, 50, 74, 62, 63, 23, 26, 68, 7,
	-22, -3, 4, 10, 12, 13, -37, 4, 10, -37,
	14, -60, -6, -66, 74, 52, 62, 63, 16, -69,
	20, 76, -21, -17, -15, -78, -13, -5, -24, 7,
	10, 13, 12, 19, -77, 14, 74, 11, 52, 62,
	63, 74, 52, 62, 63, 16, 52, 62, 63, 52,
	16, 52, 16, -2, -2, -57, -67, -21, -37, 7,
	10, 13, -2, -2, -21, -79, -67, -13, -17, -21,
	23, 26, 23, 26, 8, 17, -79, -79, -66, 14,
	-21, -58, -6, 76, -2, -2, -21, -21, -21, -21,
	-2, -2, -2, -21, 7, -21, -21, -79, -21, -2,
	-21, -21, -21, -21, -2, -21, -5, -79, -79, -21,
	-21, -2, -69, -21, -5, -2, -21, -69, -5, -21,
	-2, -2, -2, -2, 7, -75, -76, 14, -73, 7,
	59, 19, 68, 68, -75, -57, 50, -21, -57, -79,
	-6, -6, 16, -69, -21, -5, -21, -42, -13, -39,
	-21, -13, -21, -13, 7, 13, 59, 16, -57, -74,
	69, -79, -57, -74, 65, 5, 16, 74, -21, -79,
	-69, -5, -2, -2, -2, -69, -5, -2, -2, -2,
	7, 13, 59, -2, -2, -2, -46, -69, 7, 13,
	-21, 7, 13, 59, -70, 7, 7, -57, 65, 66,
	65, 66, -2, -65, 16, 65, 65, -79, 65, -38,
	45, -2, -2, -2, -2, 8, -72, -21, -17, -15,
	77, -78, -68, 7, -21, -79, -2, 66, 15, -79,
	-6, -60, 52, 74, 14, -21, 67, 67, -21, -21,
	75, 16, 75, 75, 75, 75, -60, -23, -6, -57,
	16, -76, 59, 52, 7, 7, 7, 7, 4, -57,
	22, -37, -57, 22, -66, -79, 75, 75, 75, 7,
	-79, 22, -57, -76, -21, -79, -57, -79, -21, -79,
	-21, -66, 75, 75, 75, 75, 7, 7, 74, 74,
	22, -61, 25, 24, -57, -57, 22, 24, 34, -11,
	33, -21, -63, -63, -38, 22, 24, 45, -67, -79,
	16, -79, 16, -79, 16, 67, -66, -21, -6, -2,
	-69, -5, -79, -79, -79, 52, -79, 52, 52, -23,
	-64, -59, 34, -11, -73, 15, 15, -21, -75, -75,
	-75, -64, -59, -57, 22, -79, 16, -21, -17, -15,
	-13, -5, -78, 52, 52, 16, -15, -21, 22, 69,
	-79, -57, 77, 77, -57, -74, -77, 75, -79, 52,
	52, -21, -21, 22, 25, 24, -2, -57, 22, -61,
	22, -57, -57, -57, -71, 5, -37, 22, 65, 66,
	-2, -44, 23, 26, 22, 22, 24, -57, -67, -57,
	75, -79, 77, -79, 77, -79, -21, -79, 75, 75,
	-66, -21, -5, -21, -2, -2, -2, 22, -64, -11,
	-57, -57, -57, -57, 22, -64, 22, 15, -79, -2,
	-2, 7, 77, -79, 65, -57, 15, -79, -2, 75,
	75, -2, -57, -57, 22, 22, 34, 22, -57, 5,
	16, 7, 13, -2, -2, -57, 22, -57, -79, -21,
	-17, -15, 77, 7, 15, 52, -79, 22, -64, -59,
	-64, -59, -64, -59, 22, -6, -15, 74, 77, -79,
	65, -2, -57, -57, 7, 13, -37, -57, -57, 65,
	65, 66, 22, -79, 67, -2, 15, 22, -64, 22,
	-64, 22, -64, -79, -21, 77, -79, 22, -57, -57,
	-63, -63, -63, -21, 22, 22, 22, 15, 75, 77,
	22, -45, 25, 24, 22, -45, 22, -79, 16, 22,
	25, 24, -2, -63, 22, -79, -2, -63, -63, -63,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 0, 0, 0,
	20, 21, 23, 22, 0, 0, 0, 0, 13, 282,
	0, 0, 11, 287, 291, 288, 283, 0, 17, 18,
	19, 24, 25, 26, 27, 11, 11, 170, 78, 261,
	0, 0, 0, 0, 0, 0, 45, 46, 47, 48,
	49, 50, 0, 72, 216, 217, 5, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 11, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, 157, 21, 22, 23, 13, 0, 168, 13,
	-2, 82, 84, 92, 11, 0, 0, 0, 0, 122,
	13, -2, 127, 128, 129, 130, 131, 132, 32, 20,
	21, 23, 22, 0, 230, 11, 0, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 13, 0, 277, 281, 124, 31, 20,
	21, 23, 0, 0, 11, 0, 284, 285, 286, 124,
	0, 0, 0, 0, 0, 73, 218, 0, 79, -2,
	127, 0, 315, -2, 205, 206, 207, 208, 75, 325,
	248, 256, 298, 74, 85, 94, 96, 0, 209, 210,
	211, 212, 213, 214, 250, 0, 0, 0, 0, 322,
	323, 252, 0, 140, 0, 178, 95, 0, 0, 140,
	189, 195, 249, 251, 243, 13, 154, 157, 158, 160,
	0, 0, 0, 0, 13, 0, 0, 13, 0, 126,
	83, 93, 11, 0, 140, 0, 171, 172, 173, 174,
	184, 185, 190, 191, 196, 197, 0, 11, 0, 13,
	157, 0, 11, 13, 11, 0, 11, 11, 139, 126,
	0, 0, 175, 186, 192, 0, 0, 176, 187, 193,
	199, 200, 0, 177, 188, 194, 179, 180, 20, 23,
	140, 202, 203, 0, 181, 0, 0, 0, 13, 13,
	14, 15, 16, 0, 0, 299, 299, 0, 12, 0,
	0, 292, 293, 289, 290, 324, 11, 219, 220, 221,
	225, 11, 11, -2, 0, 126, 262, 263, 264, 0,
	86, 88, 0, 11, -2, 119, 11, 11, 313, 314,
	100, 11, 101, 102, 107, 108, 243, 90, 244, 142,
	0, 0, 0, 0, 161, 163, 157, 157, 157, 142,
	164, 13, 0, 167, 11, 0, 97, 98, 99, 198,
	0, 235, 0, 0, -2, 0, 0, 13, 229, 0,
	140, 11, 103, 104, 105, 106, 201, 204, 0, 0,
	246, 0, 0, 13, 0, 0, 265, 13, 13, 278,
	13, 125, 0, 0, 0, 318, 13, 0, 13, 0,
	11, 0, 11, 0, 11, 0, 11, -2, 87, 91,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 89,
	0, 142, 13, 279, 159, 155, 156, 162, 13, 13,
	13, 0, 142, 0, 166, 0, 11, 133, 134, 135,
	136, 137, 138, 0, 0, 0, 123, 141, 236, 245,
	0, 11, 237, 238, 0, 13, 231, 98, 0, 11,
	0, 0, 0, 247, 0, 13, 13, 260, 253, 0,
	255, 0, 0, 269, 13, 0, 275, 296, 300, 301,
	302, 303, 0, 0, 297, 316, 13, 0, 13, 11,
	215, 0, 226, 0, 228, 0, 232, 0, 109, 110,
	11, 294, 295, 0, 113, 114, 117, 144, 0, 280,
	143, 142, 142, 142, 152, 0, 165, 76, 0, 111,
	112, 0, 241, 0, -2, 0, 81, 0, 116, 0,
	183, 13, 258, 259, 254, 266, 13, 268, 270, 0,
	0, 13, 13, 13, 0, 0, 319, 11, 320, 222,
	223, 224, 227, 0, 80, 0, 0, 145, 0, 142,
	0, 142, 0, 142, 153, 77, -2, 0, 242, 0,
	-2, 115, 257, 0, 13, 13, 276, 273, 274, 299,
	13, 13, 317, 321, 0, 118, 120, 146, 0, 147,
	0, 148, 0, 0, 0, 239, 0, 267, 271, 272,
	0, 0, 0, 11, 149, 150, 151, 121, 182, 240,
	304, 0, 0, 299, 306, 0, 308, 233, 11, 305,
	0, 299, 299, 312, 307, 234, 299, 310, 311, 309,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:237
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:239
		{
		}
	case 3:
		//line parser.y:241
		{
		}
	case 4:
		//line parser.y:243
		{
		}
	case 5:
		//line parser.y:245
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:247
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:249
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:255
		{
		}
	case 11:
		//line parser.y:257
		{
		}
	case 12:
		//line parser.y:258
		{
		}
	case 13:
		//line parser.y:261
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 14:
		//line parser.y:263
		{
		}
	case 15:
		//line parser.y:265
		{
		}
	case 16:
		//line parser.y:267
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 17:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 18:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		//line parser.y:278
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 73:
		//line parser.y:280
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 74:
		//line parser.y:288
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 75:
		//line parser.y:291
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 76:
		//line parser.y:294
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 77:
		//line parser.y:303
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:313
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:319
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 80:
		//line parser.y:327
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:336
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:345
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:354
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:364
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:374
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 86:
		//line parser.y:382
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:393
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:404
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:414
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-4].genericValue.LineNumber(),
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 90:
		//line parser.y:424
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-3].genericValue.LineNumber(),
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 91:
		//line parser.y:434
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:447
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 93:
		//line parser.y:455
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 94:
		//line parser.y:464
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 95:
		//line parser.y:473
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 96:
		//line parser.y:482
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:493
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 98:
		//line parser.y:502
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 99:
		//line parser.y:511
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:520
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 101:
		//line parser.y:529
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 102:
		//line parser.y:538
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 103:
		//line parser.y:547
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 104:
		//line parser.y:556
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 105:
		//line parser.y:565
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 106:
		//line parser.y:574
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 107:
		//line parser.y:583
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 108:
		//line parser.y:592
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 109:
		//line parser.y:601
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 110:
		//line parser.y:614
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 111:
		//line parser.y:630
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 112:
		//line parser.y:639
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 113:
		//line parser.y:648
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 114:
		//line parser.y:657
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:666
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:675
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 117:
		//line parser.y:684
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 118:
		//line parser.y:693
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 119:
		//line parser.y:708
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 120:
		//line parser.y:720
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 121:
		//line parser.y:722
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 122:
		//line parser.y:724
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 123:
		//line parser.y:726
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:729
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:731
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:734
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 127:
		//line parser.y:736
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:738
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:740
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:742
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 131:
		//line parser.y:749
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 132:
		//line parser.y:751
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:753
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 134:
		//line parser.y:755
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:757
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:759
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:761
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:763
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 139:
		//line parser.y:772
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 140:
		//line parser.y:783
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 141:
		//line parser.y:785
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 142:
		//line parser.y:789
		{
			RubyVAL.genericSlice = nil
		}
	case 143:
		//line parser.y:791
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 144:
		//line parser.y:794
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 145:
		//line parser.y:805
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:817
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 147:
		//line parser.y:829
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 148:
		//line parser.y:841
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 149:
		//line parser.y:853
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 150:
		//line parser.y:866
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 151:
		//line parser.y:879
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 152:
		//line parser.y:892
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 153:
		//line parser.y:903
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 154:
		//line parser.y:917
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-0].methodParamSlice
		}
	case 155:
		//line parser.y:919
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 156:
		//line parser.y:921
		{
			RubyVAL.methodParamSlice = []ast.MethodParam{{Name: "", IsSplat: true}}
		}
	case 157:
		//line parser.y:923
		{
		}
	case 158:
		//line parser.y:925
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 159:
		//line parser.y:927
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 160:
		//line parser.y:930
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 161:
		//line parser.y:932
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsSplat: true}
		}
	case 162:
		//line parser.y:934
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name, DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 163:
		//line parser.y:936
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsProc: true}
		}
	case 164:
		//line parser.y:940
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 165:
		//line parser.y:950
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 166:
		//line parser.y:962
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 167:
		//line parser.y:975
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 168:
		//line parser.y:986
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 169:
		//line parser.y:995
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 170:
		//line parser.y:1014
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 171:
		//line parser.y:1032
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1041
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1047
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1053
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 175:
		//line parser.y:1055
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1064
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 177:
		//line parser.y:1066
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 178:
		//line parser.y:1068
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 179:
		//line parser.y:1071
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1080
		{
			var rhs ast.Node = RubyS[Rubypt-0].genericSlice
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				rhs = RubyS[Rubypt-0].genericSlice[0]
			}
			RubyVAL.genericValue = ast.Assignment{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				LHS:  RubyS[Rubypt-2].genericValue,
				RHS:  rhs,
			}
		}
	case 181:
		//line parser.y:1092
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1102
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 183:
		//line parser.y:1117
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 184:
		//line parser.y:1123
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 185:
		//line parser.y:1132
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1138
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1147
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 188:
		//line parser.y:1149
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:1151
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 190:
		//line parser.y:1160
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 191:
		//line parser.y:1169
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 192:
		//line parser.y:1175
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 193:
		//line parser.y:1184
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 194:
		//line parser.y:1186
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 195:
		//line parser.y:1188
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 196:
		//line parser.y:1196
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1198
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 198:
		//line parser.y:1200
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1203
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1205
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 201:
		//line parser.y:1207
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1210
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1212
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1214
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1218
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 206:
		//line parser.y:1220
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 207:
		//line parser.y:1222
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 208:
		//line parser.y:1224
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 209:
		//line parser.y:1227
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 210:
		//line parser.y:1238
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 211:
		//line parser.y:1249
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 212:
		//line parser.y:1260
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 213:
		//line parser.y:1271
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 214:
		//line parser.y:1282
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 215:
		//line parser.y:1293
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 216:
		//line parser.y:1295
		{
		}
	case 217:
		//line parser.y:1296
		{
		}
	case 218:
		//line parser.y:1298
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 219:
		//line parser.y:1300
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 220:
		//line parser.y:1302
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 221:
		//line parser.y:1304
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 222:
		//line parser.y:1306
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 223:
		//line parser.y:1308
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1310
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1313
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 226:
		//line parser.y:1315
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 227:
		//line parser.y:1317
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Pairs: RubyS[Rubypt-3].hashPairSlice}
		}
	case 228:
		//line parser.y:1319
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 229:
		//line parser.y:1328
		{
			RubyVAL.hashPair = ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue}
		}
	case 230:
		//line parser.y:1331
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 231:
		//line parser.y:1333
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 232:
		//line parser.y:1336
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 233:
		//line parser.y:1343
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 234:
		//line parser.y:1350
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 235:
		//line parser.y:1358
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
		}
	case 236:
		//line parser.y:1362
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 237:
		//line parser.y:1366
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
		}
	case 238:
		//line parser.y:1370
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 239:
		//line parser.y:1374
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Body: RubyS[Rubypt-3].genericSlice}
		}
	case 240:
		//line parser.y:1378
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Args: RubyS[Rubypt-4].methodParamSlice, Body: RubyS[Rubypt-3].genericSlice}
		}
	case 241:
		//line parser.y:1382
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 242:
		//line parser.y:1386
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
		}
	case 243:
		//line parser.y:1394
		{
		}
	case 244:
		//line parser.y:1394
		{
			RubyVAL.genericBlock = RubyS[Rubypt-0].genericBlock
		}
	case 245:
		//line parser.y:1398
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 246:
		//line parser.y:1402
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 247:
		//line parser.y:1411
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1421
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1430
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1439
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 251:
		//line parser.y:1448
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1457
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1466
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1475
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1485
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 256:
		//line parser.y:1494
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 257:
		//line parser.y:1505
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 258:
		//line parser.y:1514
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 259:
		//line parser.y:1522
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 260:
		//line parser.y:1530
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 261:
		//line parser.y:1538
		{
		}
	case 262:
		//line parser.y:1539
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 263:
		//line parser.y:1540
		{
		}
	case 264:
		//line parser.y:1543
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 265:
		//line parser.y:1546
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 266:
		//line parser.y:1555
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 267:
		//line parser.y:1565
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 268:
		//line parser.y:1575
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 269:
		//line parser.y:1585
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 270:
		//line parser.y:1587
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 271:
		//line parser.y:1601
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 272:
		//line parser.y:1617
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 273:
		//line parser.y:1633
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 274:
		//line parser.y:1643
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 275:
		//line parser.y:1655
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 276:
		//line parser.y:1657
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 277:
		//line parser.y:1660
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 278:
		//line parser.y:1662
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 279:
		//line parser.y:1665
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 280:
		//line parser.y:1667
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 281:
		//line parser.y:1670
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 282:
		//line parser.y:1677
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 283:
		//line parser.y:1679
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 284:
		//line parser.y:1682
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 285:
		//line parser.y:1690
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 286:
		//line parser.y:1692
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 287:
		//line parser.y:1694
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 288:
		//line parser.y:1698
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 289:
		//line parser.y:1700
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 290:
		//line parser.y:1702
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 291:
		//line parser.y:1706
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 292:
		//line parser.y:1708
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 293:
		//line parser.y:1710
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 294:
		//line parser.y:1714
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-5].genericValue,
				True:      RubyS[Rubypt-3].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 295:
		//line parser.y:1724
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-5].genericValue,
				True:      RubyS[Rubypt-3].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
				Line:      RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 296:
		//line parser.y:1734
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 297:
		//line parser.y:1740
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 298:
		//line parser.y:1747
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 299:
		//line parser.y:1754
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 300:
		//line parser.y:1756
		{
		}
	case 301:
		//line parser.y:1758
		{
		}
	case 302:
		//line parser.y:1760
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 303:
		//line parser.y:1762
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 304:
		//line parser.y:1765
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 305:
		//line parser.y:1773
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 306:
		//line parser.y:1782
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 307:
		//line parser.y:1790
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 308:
		//line parser.y:1799
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 309:
		//line parser.y:1808
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 310:
		//line parser.y:1816
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 311:
		//line parser.y:1824
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 312:
		//line parser.y:1832
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 313:
		//line parser.y:1841
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 314:
		//line parser.y:1844
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 315:
		//line parser.y:1847
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 316:
		//line parser.y:1854
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 317:
		//line parser.y:1860
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 318:
		//line parser.y:1866
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 319:
		//line parser.y:1872
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 320:
		//line parser.y:1879
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 321:
		//line parser.y:1881
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 322:
		//line parser.y:1884
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 323:
		//line parser.y:1886
		{
			RubyVAL.genericValue = ast.Range{
				Start:            RubyS[Rubypt-2].genericValue,
				End:              RubyS[Rubypt-0].genericValue,
				Line:             RubyS[Rubypt-2].genericValue.LineNumber(),
				ExcludeLastValue: true,
			}
		}
	case 324:
		//line parser.y:1896
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 325:
		//line parser.y:1903
		{
			RubyVAL.genericValue = ast.Defined{Node: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

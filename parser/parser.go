//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SPECIAL_CHAR_REF = 57349
const CAPITAL_REF = 57350
const LPAREN = 57351
const RPAREN = 57352
const COMMA = 57353
const DO = 57354
const DEF = 57355
const END = 57356
const IF = 57357
const ELSE = 57358
const ELSIF = 57359
const UNLESS = 57360
const CLASS = 57361
const MODULE = 57362
const FOR = 57363
const WHILE = 57364
const UNTIL = 57365
const BEGIN = 57366
const RESCUE = 57367
const ENSURE = 57368
const BREAK = 57369
const NEXT = 57370
const REDO = 57371
const RETRY = 57372
const RETURN = 57373
const YIELD = 57374
const AND = 57375
const OR = 57376
const LAMBDA = 57377
const CASE = 57378
const WHEN = 57379
const TRUE = 57380
const FALSE = 57381
const LESSTHAN = 57382
const GREATERTHAN = 57383
const EQUALTO = 57384
const BANG = 57385
const COMPLEMENT = 57386
const POSITIVE = 57387
const NEGATIVE = 57388
const STAR = 57389
const RANGE = 57390
const OR_EQUALS = 57391
const WHITESPACE = 57392
const NEWLINE = 57393
const SEMICOLON = 57394
const COLON = 57395
const DOUBLECOLON = 57396
const DOT = 57397
const PIPE = 57398
const SLASH = 57399
const AMPERSAND = 57400
const QUESTIONMARK = 57401
const CARET = 57402
const LBRACKET = 57403
const RBRACKET = 57404
const LBRACE = 57405
const RBRACE = 57406
const DOLLARSIGN = 57407
const ATSIGN = 57408
const FILE_CONST_REF = 57409
const EOF = 57410

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"POSITIVE",
	"NEGATIVE",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOUBLECOLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1379

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	54, 145,
	-2, 21,
	-1, 120,
	54, 145,
	-2, 143,
	-1, 122,
	10, 108,
	11, 108,
	-2, 241,
	-1, 136,
	54, 145,
	-2, 21,
	-1, 231,
	54, 145,
	-2, 21,
	-1, 309,
	51, 13,
	64, 13,
	-2, 31,
	-1, 312,
	54, 146,
	-2, 144,
	-1, 323,
	10, 108,
	11, 108,
	-2, 241,
}

const RubyNprod = 291
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 3842

var RubyAct = []int{

	290, 404, 5, 533, 403, 160, 217, 31, 373, 213,
	18, 124, 123, 25, 225, 26, 129, 215, 52, 382,
	364, 92, 2, 3, 93, 358, 133, 182, 300, 183,
	300, 278, 98, 62, 98, 300, 300, 348, 271, 4,
	300, 479, 507, 459, 329, 265, 253, 246, 457, 455,
	13, 453, 119, 121, 157, 158, 371, 90, 89, 370,
	144, 107, 108, 107, 108, 162, 163, 98, 96, 97,
	96, 97, 281, 165, 91, 329, 131, 176, 109, 274,
	329, 177, 178, 95, 140, 95, 268, 184, 249, 421,
	531, 85, 424, 187, 188, 365, 107, 108, 85, 116,
	172, 195, 111, 96, 97, 85, 200, 85, 99, 100,
	101, 205, 236, 133, 209, 210, 211, 142, 95, 104,
	102, 103, 106, 112, 143, 48, 349, 140, 221, 207,
	300, 328, 300, 227, 420, 520, 141, 418, 140, 416,
	242, 239, 240, 260, 261, 147, 263, 264, 427, 269,
	270, 227, 275, 276, 277, 256, 175, 258, 259, 252,
	243, 245, 92, 218, 176, 93, 145, 296, 297, 298,
	299, 142, 137, 228, 282, 314, 145, 92, 426, 141,
	93, 303, 98, 146, 227, 144, 417, 401, 313, 137,
	141, 228, 137, 137, 300, 144, 151, 502, 512, 253,
	235, 237, 320, 321, 219, 156, 148, 336, 137, 137,
	137, 107, 108, 513, 514, 220, 223, 416, 96, 97,
	137, 304, 137, 137, 228, 137, 109, 137, 137, 137,
	137, 341, 137, 95, 335, 137, 155, 137, 137, 151,
	363, 92, 300, 385, 93, 110, 152, 92, 232, 98,
	93, 137, 137, 137, 247, 292, 114, 300, 98, 115,
	154, 137, 92, 462, 344, 93, 232, 137, 407, 334,
	137, 239, 240, 266, 417, 98, 272, 294, 107, 108,
	279, 111, 173, 286, 287, 96, 97, 107, 108, 331,
	113, 153, 521, 379, 96, 97, 232, 137, 293, 232,
	95, 490, 112, 380, 107, 108, 392, 484, 491, 95,
	98, 96, 97, 106, 383, 390, 137, 218, 218, 137,
	216, 216, 92, 398, 105, 93, 95, 353, 137, 137,
	387, 94, 168, 483, 227, 169, 156, 467, 399, 107,
	108, 406, 98, 405, 410, 334, 96, 97, 380, 464,
	250, 99, 100, 101, 109, 137, 137, 378, 219, 219,
	380, 95, 104, 102, 103, 106, 214, 120, 380, 220,
	220, 107, 108, 150, 228, 433, 137, 312, 96, 97,
	137, 137, 510, 444, 444, 436, 109, 449, 440, 450,
	477, 452, 540, 95, 476, 460, 92, 237, 397, 93,
	347, 318, 463, 319, 148, 465, 353, 396, 362, 98,
	451, 149, 465, 548, 475, 545, 544, 474, 137, 166,
	412, 473, 167, 543, 472, 545, 544, 488, 482, 432,
	431, 137, 485, 361, 362, 369, 472, 137, 107, 108,
	430, 368, 432, 431, 98, 96, 97, 492, 493, 232,
	367, 137, 343, 344, 185, 137, 186, 495, 357, 118,
	95, 117, 137, 350, 471, 499, 338, 366, 337, 333,
	284, 504, 137, 107, 108, 283, 471, 212, 190, 539,
	96, 97, 508, 76, 301, 439, 98, 308, 356, 291,
	307, 1, 174, 61, 60, 95, 137, 137, 59, 511,
	58, 57, 330, 56, 39, 498, 465, 94, 38, 37,
	36, 137, 51, 445, 20, 107, 108, 41, 42, 21,
	529, 137, 96, 97, 384, 49, 444, 444, 444, 15,
	537, 12, 525, 526, 527, 546, 11, 95, 24, 232,
	23, 106, 22, 27, 19, 550, 10, 33, 444, 98,
	28, 232, 444, 444, 444, 547, 542, 17, 14, 40,
	16, 35, 34, 29, 73, 551, 552, 98, 30, 72,
	553, 0, 138, 0, 0, 0, 0, 137, 107, 108,
	232, 0, 137, 0, 0, 96, 97, 0, 0, 138,
	0, 0, 138, 138, 0, 137, 107, 108, 0, 0,
	95, 0, 0, 96, 97, 0, 137, 0, 138, 138,
	138, 0, 0, 98, 0, 0, 325, 0, 95, 0,
	138, 0, 138, 138, 0, 138, 137, 138, 138, 138,
	138, 137, 138, 137, 0, 138, 0, 138, 138, 0,
	0, 0, 107, 108, 0, 0, 137, 0, 233, 96,
	97, 138, 138, 138, 248, 519, 0, 0, 394, 0,
	0, 138, 0, 0, 95, 0, 233, 138, 0, 0,
	138, 0, 0, 267, 0, 0, 273, 0, 0, 0,
	280, 0, 0, 0, 107, 108, 0, 107, 108, 0,
	0, 96, 97, 0, 96, 97, 233, 138, 0, 233,
	0, 71, 135, 77, 136, 122, 95, 128, 133, 95,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 138,
	0, 79, 0, 0, 87, 88, 0, 0, 126, 80,
	81, 82, 83, 84, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 138, 125, 0, 134,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	138, 138, 0, 71, 46, 77, 47, 78, 0, 0,
	0, 43, 536, 446, 535, 534, 447, 44, 45, 0,
	64, 65, 55, 0, 0, 68, 69, 0, 70, 67,
	63, 0, 0, 79, 66, 0, 87, 88, 138, 0,
	32, 80, 81, 82, 83, 84, 0, 0, 0, 442,
	443, 138, 0, 0, 0, 0, 0, 138, 0, 74,
	0, 75, 0, 86, 85, 0, 0, 0, 0, 233,
	0, 138, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 132, 132, 0,
	0, 0, 0, 0, 0, 0, 138, 138, 0, 0,
	0, 0, 0, 132, 132, 132, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 132, 0, 132, 132, 0,
	132, 138, 132, 132, 132, 132, 0, 132, 0, 0,
	132, 0, 132, 132, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 132, 0, 0, 132, 132, 132, 0,
	0, 233, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 132, 132, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	233, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 309, 0, 132, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 132, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 132, 0, 138, 0, 0, 0,
	0, 138, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	132, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 309, 132, 0, 71, 46,
	77, 47, 78, 0, 0, 0, 43, 532, 446, 535,
	534, 447, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 132, 0, 9, 80, 81, 82, 83,
	84, 0, 0, 0, 442, 443, 132, 0, 0, 0,
	0, 0, 132, 0, 74, 0, 75, 0, 86, 85,
	0, 0, 0, 0, 132, 0, 132, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	0, 0, 164, 161, 0, 0, 0, 0, 0, 0,
	0, 132, 132, 0, 0, 0, 0, 0, 179, 180,
	181, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	189, 0, 191, 192, 0, 194, 132, 196, 197, 198,
	199, 0, 201, 0, 0, 204, 0, 206, 208, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 226, 0,
	0, 238, 241, 244, 0, 0, 132, 0, 0, 0,
	0, 130, 0, 0, 0, 170, 226, 257, 0, 0,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 132, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 310, 0, 226,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 130, 0, 0, 324,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 327,
	0, 132, 0, 0, 0, 0, 132, 0, 132, 0,
	0, 171, 0, 0, 0, 71, 311, 77, 136, 78,
	0, 132, 0, 0, 0, 345, 130, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 203, 79, 352, 0, 87, 88,
	310, 360, 0, 80, 81, 82, 83, 84, 0, 0,
	0, 300, 0, 0, 0, 0, 253, 0, 0, 0,
	254, 74, 0, 75, 306, 86, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 381, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 388, 0, 0, 0, 0, 0, 130, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 0, 0, 226,
	0, 400, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 408, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 0, 139, 0, 0, 139, 139, 0,
	0, 0, 0, 0, 0, 0, 428, 429, 0, 0,
	0, 0, 346, 139, 139, 139, 0, 0, 0, 0,
	0, 161, 0, 0, 0, 139, 351, 139, 139, 0,
	139, 461, 139, 139, 139, 139, 0, 139, 0, 0,
	139, 0, 139, 139, 0, 0, 0, 0, 159, 470,
	0, 0, 0, 234, 0, 0, 139, 139, 139, 0,
	0, 470, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 234, 139, 0, 0, 139, 0, 386, 0, 0,
	0, 0, 0, 389, 391, 393, 0, 161, 0, 0,
	497, 0, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 139, 0, 234, 506, 0, 0, 0, 0,
	0, 0, 222, 0, 224, 0, 506, 0, 0, 0,
	413, 139, 0, 0, 139, 0, 251, 0, 0, 0,
	0, 0, 0, 139, 139, 423, 518, 0, 425, 0,
	0, 130, 0, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 0, 0, 0,
	139, 139, 0, 454, 0, 0, 456, 0, 458, 0,
	193, 71, 135, 77, 136, 122, 522, 0, 133, 0,
	0, 139, 0, 0, 0, 139, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 481, 0, 87, 88, 332, 0, 0, 80,
	81, 82, 83, 84, 339, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 255, 0, 134,
	0, 86, 85, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 139, 0, 0, 355, 0, 359, 0, 0,
	0, 0, 0, 0, 234, 0, 139, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 517, 0, 0, 0, 0, 139, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 528, 0, 0, 193, 0, 0, 0, 0,
	0, 139, 139, 0, 0, 0, 541, 0, 0, 0,
	359, 0, 0, 0, 0, 0, 139, 0, 549, 71,
	230, 77, 231, 78, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 234, 0, 0, 0, 0, 79,
	0, 422, 87, 88, 0, 0, 234, 80, 81, 82,
	83, 84, 0, 0, 0, 300, 0, 0, 434, 0,
	0, 0, 500, 438, 0, 74, 0, 75, 0, 86,
	85, 0, 139, 0, 0, 234, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 466, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 71, 230, 77, 231, 78, 0,
	0, 0, 0, 0, 0, 486, 487, 0, 0, 0,
	0, 139, 489, 0, 0, 0, 139, 0, 139, 0,
	0, 0, 0, 494, 79, 496, 0, 87, 88, 0,
	0, 139, 80, 81, 82, 83, 84, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 480, 0, 0,
	74, 0, 75, 0, 86, 85, 0, 0, 509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 524, 0, 0, 376, 377, 71, 46,
	77, 47, 78, 0, 0, 0, 43, 435, 53, 375,
	374, 54, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	71, 46, 77, 47, 78, 0, 0, 0, 43, 372,
	53, 375, 374, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 288, 289, 0, 71,
	46, 77, 47, 78, 0, 0, 74, 43, 75, 53,
	86, 85, 54, 44, 45, 0, 64, 65, 55, 0,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 0, 0, 0, 6, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 0, 8, 71, 46, 77, 47, 78, 0, 0,
	0, 43, 503, 53, 0, 0, 54, 44, 45, 0,
	64, 65, 55, 380, 0, 68, 69, 0, 70, 67,
	63, 0, 0, 79, 66, 0, 87, 88, 0, 0,
	0, 80, 81, 82, 83, 84, 0, 0, 0, 288,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 86, 85, 71, 46, 77, 47, 78,
	0, 0, 0, 43, 409, 53, 0, 0, 54, 44,
	45, 0, 64, 65, 55, 380, 0, 68, 69, 0,
	70, 67, 63, 0, 0, 79, 66, 0, 87, 88,
	0, 0, 0, 80, 81, 82, 83, 84, 0, 0,
	0, 288, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 75, 0, 86, 85, 71, 46, 77,
	47, 78, 0, 0, 0, 43, 402, 53, 0, 0,
	54, 44, 45, 0, 64, 65, 55, 380, 0, 68,
	69, 0, 70, 67, 63, 0, 0, 79, 66, 0,
	87, 88, 0, 0, 0, 80, 81, 82, 83, 84,
	0, 0, 0, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 71,
	46, 77, 47, 78, 0, 0, 0, 43, 538, 446,
	0, 0, 447, 44, 45, 0, 64, 65, 55, 0,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 0, 0, 0, 442, 443, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 86,
	85, 71, 46, 77, 47, 78, 0, 0, 0, 43,
	515, 53, 0, 0, 54, 44, 45, 0, 64, 65,
	55, 0, 0, 68, 69, 0, 70, 67, 63, 0,
	0, 79, 66, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 0, 288, 289, 0,
	71, 46, 77, 47, 78, 0, 0, 74, 43, 75,
	53, 86, 85, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 478,
	86, 85, 71, 46, 77, 47, 78, 0, 0, 0,
	43, 468, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 86, 85, 71, 46, 77, 47, 78, 0,
	0, 0, 43, 448, 446, 0, 0, 447, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	442, 443, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 86, 85, 71, 46, 77, 47,
	78, 0, 0, 0, 43, 441, 446, 0, 0, 447,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 442, 443, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 86, 85, 71, 46,
	77, 47, 78, 0, 0, 0, 43, 437, 53, 0,
	0, 54, 44, 45, 0, 64, 65, 55, 0, 0,
	68, 69, 0, 70, 67, 63, 0, 0, 79, 66,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 0, 0, 0, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	71, 46, 77, 47, 78, 0, 0, 0, 43, 419,
	53, 0, 0, 54, 44, 45, 0, 64, 65, 55,
	0, 0, 68, 69, 0, 70, 67, 63, 0, 0,
	79, 66, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 288, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	86, 85, 71, 46, 77, 47, 78, 0, 0, 0,
	43, 354, 53, 0, 0, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 288, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 86, 85, 71, 46, 77, 47, 78, 0,
	0, 0, 43, 342, 53, 0, 0, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 86, 85, 71, 46, 77, 47,
	78, 0, 0, 0, 43, 340, 53, 0, 0, 54,
	44, 45, 0, 64, 65, 55, 0, 0, 68, 69,
	0, 70, 67, 63, 0, 0, 79, 66, 0, 87,
	88, 0, 0, 0, 80, 81, 82, 83, 84, 0,
	0, 0, 288, 289, 0, 71, 46, 77, 47, 78,
	0, 0, 74, 43, 75, 446, 86, 85, 447, 44,
	45, 0, 64, 65, 55, 0, 0, 68, 69, 0,
	70, 67, 63, 0, 0, 79, 66, 0, 87, 88,
	0, 0, 0, 80, 81, 82, 83, 84, 0, 0,
	0, 442, 443, 0, 71, 46, 77, 47, 78, 0,
	0, 74, 43, 75, 53, 86, 85, 54, 44, 45,
	0, 64, 65, 55, 0, 0, 68, 69, 0, 70,
	67, 63, 0, 0, 79, 66, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	288, 289, 0, 71, 46, 77, 47, 78, 316, 0,
	74, 43, 75, 53, 86, 85, 54, 44, 45, 0,
	64, 65, 55, 0, 0, 68, 69, 0, 70, 67,
	63, 0, 0, 79, 66, 0, 87, 88, 0, 0,
	0, 80, 81, 82, 83, 84, 0, 0, 0, 0,
	315, 0, 71, 46, 77, 47, 78, 0, 0, 74,
	43, 75, 53, 86, 85, 54, 44, 45, 0, 64,
	65, 55, 0, 0, 68, 69, 0, 70, 67, 63,
	0, 0, 79, 66, 0, 87, 88, 0, 0, 0,
	80, 81, 82, 83, 84, 0, 0, 0, 300, 0,
	0, 71, 46, 77, 47, 78, 0, 0, 74, 43,
	75, 53, 86, 85, 54, 44, 45, 0, 64, 65,
	55, 0, 0, 68, 69, 0, 70, 67, 63, 0,
	0, 79, 66, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 71, 230, 77, 231, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 75,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	300, 71, 135, 77, 136, 78, 0, 469, 0, 0,
	74, 0, 75, 0, 86, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 0, 300, 71, 135,
	77, 136, 122, 0, 415, 133, 0, 74, 0, 75,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 71, 135, 77, 136, 122, 395, 0, 133, 0,
	0, 0, 0, 0, 255, 0, 134, 0, 86, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 87, 88, 0, 0, 126, 80,
	81, 82, 83, 84, 71, 135, 77, 136, 323, 0,
	0, 133, 0, 0, 0, 0, 0, 255, 0, 134,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 87, 88, 0,
	0, 322, 80, 81, 82, 83, 84, 71, 311, 77,
	136, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 134, 0, 86, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	87, 88, 0, 0, 0, 80, 81, 82, 83, 84,
	0, 0, 0, 300, 71, 230, 77, 231, 78, 0,
	0, 0, 0, 74, 0, 75, 306, 86, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 0, 0, 0,
	300, 71, 135, 77, 136, 78, 0, 305, 0, 0,
	74, 0, 75, 0, 86, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 0, 300, 71, 135,
	77, 136, 78, 0, 0, 133, 0, 74, 0, 75,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 87, 88, 0, 0, 0, 80, 81, 82, 83,
	84, 71, 230, 77, 231, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 134, 0, 86, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 71, 135, 77, 136, 122, 0,
	0, 133, 0, 0, 229, 0, 0, 74, 0, 75,
	0, 86, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 87, 88, 0,
	0, 0, 80, 81, 82, 83, 84, 71, 135, 77,
	136, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 134, 0, 86, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	87, 88, 0, 0, 0, 80, 81, 82, 83, 84,
	71, 505, 77, 136, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 86, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 87, 88, 0, 0, 0, 80, 81,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	86, 85,
}
var RubyPact = []int{

	-29, 2094, -1000, -1000, -1000, 6, -1000, -1000, -1000, 306,
	-1000, -1000, -1000, 227, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 241, -1000, 44, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 455, 359, 359, 696, 75, 134, 362,
	197, 249, 194, 3196, 3196, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3732, 3196, 3196, 3732, 3732, 404, 317,
	-1000, -1000, -1000, -1000, -1000, -1000, 46, 273, -1000, 14,
	3196, 3196, 3732, 3732, 3732, 21, 448, -1000, -1000, -1000,
	-1000, -1000, 3196, 3196, 3732, 472, 3732, 3732, -1000, 3732,
	3196, 3732, 3732, 3732, 3732, 3196, 3732, -1000, -1000, 3732,
	3196, 3732, 3732, 3196, 3196, 3196, 471, 311, 312, 176,
	-1000, -1000, 3646, 14, 101, 3732, 3732, 3732, 41, 339,
	609, -1000, 62, -10, -1000, 3689, 118, -1, -1000, -1000,
	3646, 3732, 3196, 3196, 3732, 3196, 3196, 39, 3196, 3196,
	32, 3196, 3196, 3196, 25, 469, 464, 307, 232, 3049,
	244, 609, 247, 226, 609, 244, 3196, 3196, 3196, 3196,
	3509, 3462, 369, 3646, 3098, -1000, -1000, 307, 307, 609,
	609, 609, -1000, -1000, 395, -1000, -1000, 307, 307, 609,
	3419, 609, 609, 3556, 609, 307, 609, 609, 609, 609,
	307, 563, 3556, 3556, 609, 307, 609, 69, 440, 307,
	307, 307, 14, -1000, 463, 334, 157, -1000, 165, 462,
	460, -1000, 2951, 359, 2889, 442, 63, -1000, -1000, 3732,
	3376, 129, 124, 164, 154, -1000, -1000, -1000, 338, -25,
	64, 482, -1000, -1000, 254, -1000, -1000, -1000, -1000, 457,
	3603, 2827, -1000, 452, 1330, 3732, 423, 178, -42, 33,
	307, 307, 405, 307, 307, -1000, -1000, -1000, 444, 307,
	307, -1000, -1000, -1000, 435, 307, 307, 307, -1000, -1000,
	-1000, 429, 325, -2, -5, 2045, -1000, -1000, -1000, -1000,
	307, 343, 3732, -1000, -1000, 206, 307, 307, 307, 307,
	-1000, 319, 63, -1000, -1000, 3732, -1000, 304, 295, 62,
	654, 3333, -1000, 397, 307, -1000, -1000, 143, -1000, -1000,
	101, 14, 3196, 3646, 609, 3732, 609, 609, -1000, 3603,
	145, -1000, 2282, 312, 157, 258, 3732, -1000, -1000, 2220,
	-1000, -1000, -1000, 14, -1000, 609, 3286, 175, -1000, -1000,
	-1000, 79, 609, -1000, -1000, 2765, 78, -1000, -1000, 3049,
	30, -1000, -1000, 136, -1000, -1000, 106, -1000, -1000, -1000,
	3732, 3732, -1000, 426, 3196, -1000, 1983, 2703, -1000, -1000,
	359, 609, 2641, 2579, 373, 3732, -11, -1000, 609, -15,
	-1000, -16, -1000, -21, 3196, 3732, -1000, -1000, 307, 253,
	609, 3196, -1000, 335, -1000, -1000, -1000, -1000, 609, -1000,
	323, 2517, -1000, 3239, 609, 415, 3196, 408, 388, -1000,
	-1000, 384, 2455, -23, 97, 1889, -1000, 3196, 271, 245,
	-1000, 3196, -1000, 307, 3049, -1000, 413, -1000, 3049, 297,
	-1000, -1000, -1000, -1000, 307, -1000, 3196, 3196, -1000, -1000,
	-1000, 3732, 244, -1000, 1794, -1000, 3556, -1000, 191, -1000,
	307, 609, -1000, 307, -1000, -1000, 2158, -1000, -1000, 3775,
	63, -1000, -1000, -1000, 307, -19, -1000, -1000, -1000, -1000,
	3732, 3147, 307, 263, -1000, 307, 3049, 3049, -1000, 3049,
	376, 359, 147, 162, 2406, 244, 3049, 63, -1000, -1000,
	3732, 651, 82, -1000, 278, 1646, 609, 3732, 307, 3049,
	-1000, -1000, -1000, -1000, -1000, -1000, 3049, 81, 609, 3196,
	3732, -1000, -1000, 28, 3049, 1073, 778, 2344, 81, 381,
	545, -1000, -1000, 409, 3196, -1000, -1000, 399, -1000, -1000,
	-1000, 81, -1000, -1000, 3196, -1000, 307, 3000, -1000, 81,
	307, 3000, 3000, 3000,
}
var RubyPgo = []int{

	0, 0, 569, 568, 15, 76, 564, 563, 562, 1410,
	561, 1, 33, 560, 559, 50, 558, 557, 1115, 550,
	525, 820, 547, 546, 544, 543, 542, 540, 538, 10,
	536, 6, 125, 531, 529, 7, 524, 519, 518, 517,
	13, 514, 513, 3, 512, 510, 509, 508, 504, 503,
	501, 500, 498, 494, 493, 1472, 492, 4, 12, 25,
	8, 491, 9, 490, 19, 489, 14, 488, 5, 487,
	16, 18, 11, 17, 485, 484, 483, 479, 1255,
}
var RubyR1 = []int{

	0, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 77, 77, 78, 78, 55, 55, 55, 55, 19,
	19, 19, 19, 19, 19, 19, 19, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 29, 29, 29, 29, 29, 29, 29, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 40, 14,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 58, 58, 58, 58, 68, 68, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 72, 72, 72,
	72, 72, 70, 70, 70, 23, 23, 23, 23, 23,
	23, 62, 62, 73, 73, 73, 31, 31, 31, 31,
	30, 30, 33, 35, 35, 76, 76, 15, 15, 15,
	15, 15, 15, 15, 16, 16, 71, 71, 34, 34,
	34, 34, 34, 34, 34, 9, 9, 32, 32, 20,
	20, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 2, 6, 7,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 3,
	3, 3, 3, 63, 63, 69, 69, 69, 5, 5,
	5, 5, 59, 67, 67, 67, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 60, 60, 60,
	60, 56, 56, 56, 8, 17, 11, 11, 11, 74,
	74, 65, 65, 57, 57, 24, 24, 25, 26, 26,
	28, 28, 28, 27, 27, 27, 12, 41, 41, 64,
	64, 64, 64, 64, 42, 42, 42, 42, 42, 43,
	43, 43, 43, 39, 38, 10, 37, 37, 36, 36,
	4,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 5, 1, 4, 4, 2, 3, 3, 4, 4,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 6, 7, 6,
	6, 4, 3, 7, 1, 5, 1, 3, 0, 1,
	1, 1, 2, 4, 4, 4, 5, 1, 1, 4,
	2, 5, 1, 3, 3, 5, 6, 7, 8, 5,
	6, 1, 3, 0, 1, 3, 1, 2, 3, 2,
	4, 6, 4, 1, 3, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 9, 6, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 4, 3, 3, 3, 4, 3,
	3, 3, 4, 3, 3, 3, 4, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 1, 1, 5,
	0, 1, 1, 1, 2, 4, 4, 4, 5, 3,
	5, 5, 5, 3, 7, 3, 7, 8, 3, 4,
	5, 5, 3, 0, 1, 3, 4, 5, 3, 3,
	3, 3, 3, 5, 6, 5, 3, 4, 3, 3,
	2, 0, 2, 2, 3, 4, 2, 3, 5, 1,
	3, 0, 2, 1, 2, 2, 1, 1, 2, 1,
	1, 3, 3, 1, 3, 3, 5, 5, 5, 0,
	2, 2, 2, 2, 5, 6, 5, 6, 5, 4,
	3, 3, 2, 4, 4, 2, 5, 7, 4, 5,
	3,
}
var RubyChk = []int{

	-1000, -61, 51, 52, 68, -1, 51, 52, 68, -18,
	-23, -30, -33, -15, -16, -34, -13, -17, -29, -24,
	-41, -37, -26, -27, -28, -40, -4, -25, -19, -7,
	-3, -35, -21, -22, -8, -10, -45, -46, -47, -48,
	-14, -39, -38, 13, 19, 20, 6, 8, -32, -20,
	-9, -44, -71, 15, 18, 24, -49, -50, -51, -52,
	-53, -54, -12, 32, 22, 23, 36, 31, 27, 28,
	30, 5, -2, -6, 61, 63, -76, 7, 9, 35,
	43, 44, 45, 46, 47, 66, 65, 38, 39, 52,
	51, 68, 15, 18, 25, 55, 40, 41, 4, 45,
	46, 47, 57, 58, 56, 18, 59, 33, 34, 48,
	18, 40, 61, 49, 15, 18, 55, 6, 4, -35,
	8, -35, 9, -58, -72, 61, 42, 49, 11, -70,
	-18, -5, -21, 12, 63, 6, 8, -32, -20, -9,
	9, 61, 42, 49, 61, 42, 49, 11, 42, 49,
	11, 42, 49, 42, 11, 42, 11, -1, -1, -55,
	-68, -18, -1, -1, -18, -68, 15, 18, 15, 18,
	-78, -78, 54, 9, -56, -5, 63, -1, -1, -18,
	-18, -18, 6, 8, 66, 6, 8, -1, -1, -18,
	6, -18, -18, -78, -18, -1, -18, -18, -18, -18,
	-1, -18, -78, -78, -18, -1, -18, -70, -18, -1,
	-1, -1, 6, -62, 55, -73, 9, -31, 6, 47,
	58, -62, -55, 40, -55, -66, -18, -29, -15, 58,
	6, 8, -32, -20, -9, -5, 11, -5, -18, -4,
	-70, -18, -40, -12, -18, -12, 6, -32, -20, 47,
	11, -55, -59, 56, -78, 61, -66, -18, -4, -70,
	-1, -1, -18, -1, -1, 6, -32, -20, 47, -1,
	-1, 6, -32, -20, 47, -1, -1, -1, 6, -32,
	-20, 47, -71, 6, 6, -55, 51, 52, 51, 52,
	-1, -65, 11, 51, 51, -78, -1, -1, -1, -1,
	51, -75, -18, -29, -15, 58, 64, -63, -69, -21,
	-18, 6, 8, -66, -1, 52, 10, -78, 6, 8,
	-72, -58, 42, 9, -18, 53, -18, -18, 62, 11,
	62, -5, -55, 6, 11, -73, 42, 6, 6, -55,
	14, -35, 14, 10, 11, -18, -78, 62, 62, 62,
	6, -78, -18, -5, 14, -55, -67, 6, -59, -55,
	-18, 10, 11, 62, 62, 62, 62, 6, 6, 6,
	61, 61, 14, -60, 17, 16, -55, -55, 14, -11,
	25, -18, -64, -64, -36, 37, -78, 11, -18, -78,
	11, -78, 11, -78, 4, 53, 10, -5, -1, -66,
	-18, 42, 14, -57, -11, -62, -31, 10, -18, 14,
	-57, -55, -5, -78, -18, 58, 42, 11, 58, 14,
	56, 11, -55, -78, 62, -78, 42, 42, -18, -18,
	14, 17, 16, -1, -55, 14, -60, 14, -55, -74,
	-35, 14, 51, 52, -1, -42, 15, 18, 14, 14,
	16, 37, -68, 62, -78, 64, -78, 64, -78, 64,
	-1, -18, 10, -1, 14, -11, -55, 14, 14, 58,
	-18, -15, -29, 6, -1, 6, 6, 6, 64, 64,
	58, -78, -1, 62, 62, -1, -55, -55, 14, -55,
	4, 11, -1, -1, -55, -68, -55, -18, -15, -29,
	58, -18, 6, 14, -57, 6, -18, 61, -1, -55,
	6, -35, 51, 51, 52, 14, -55, -78, -18, 4,
	53, 14, 10, -18, -55, -64, -64, -64, -78, -1,
	-18, 62, 14, -43, 17, 16, 14, -43, 14, -77,
	11, -78, 11, 14, 17, 16, -1, -64, 14, -78,
	-1, -64, -64, -64,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 0, 0, 0, 20, -2, 22, 23,
	24, 0, 0, 0, 0, 15, 42, 43, 44, 45,
	46, 47, 48, 256, 0, 0, 0, 259, 263, 260,
	257, 19, 25, 26, 13, 13, 0, 72, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 5,
	6, 7, 0, 0, 0, 0, 0, 0, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 13, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 133, 15,
	-2, 15, -2, 75, 84, 13, 0, 0, 0, 104,
	117, 118, 31, 15, 13, 20, -2, 22, 23, 24,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 15, 0, 251,
	255, 106, 0, 0, 13, 258, 0, 0, 0, 0,
	200, 0, 0, 108, 0, 285, 13, 187, 188, 189,
	190, 69, 167, 168, 0, 165, 166, 228, 236, 68,
	77, 85, 87, 0, 191, 192, 193, 194, 195, 196,
	230, 0, 0, 0, 290, 232, 86, 0, 122, 164,
	229, 231, 81, 15, 0, 131, 133, 134, 136, 0,
	0, 15, 0, 0, 0, 0, 109, 110, 111, 0,
	20, -2, 22, 23, 24, 76, 13, 120, 122, 0,
	0, 147, 148, 149, 158, 159, 171, 172, 173, 0,
	13, 0, 15, 223, 15, 13, 0, 122, 0, 0,
	150, 160, 0, 151, 161, 175, 176, 177, 0, 152,
	162, 179, 180, 181, 0, 153, 163, 154, 183, 184,
	185, 0, 155, 0, 0, 0, 15, 15, 16, 17,
	18, 0, 0, 269, 269, 0, 264, 265, 261, 262,
	14, 13, 201, 202, 203, 0, 209, 13, 13, -2,
	0, 20, -2, 0, 242, 243, 244, 15, 169, 170,
	78, 79, 0, -2, 101, 0, 283, 284, 95, 0,
	96, 82, 0, 133, 0, 0, 0, 137, 139, 0,
	140, 15, 142, 70, 13, 112, 0, 88, 91, 93,
	174, 0, 123, 124, 218, 0, 0, 224, 15, 13,
	122, 74, 13, 89, 92, 94, 90, 178, 182, 186,
	0, 0, 226, 0, 0, 15, 0, 0, 245, 252,
	15, 107, 0, 0, 0, 0, 0, 13, 204, 0,
	13, 0, 13, 0, 13, 0, 73, 80, 83, 0,
	266, 0, 125, 0, 253, 15, 135, 132, 138, 129,
	0, 0, 71, 0, 119, 0, 0, 0, 0, 219,
	222, 0, 0, 0, 88, 0, 13, 0, 0, 0,
	227, 0, 15, 15, 240, 233, 0, 235, 246, 15,
	249, 267, 270, 271, 272, 273, 0, 0, 268, 286,
	15, 0, 15, 199, 0, 210, 0, 211, 0, 212,
	213, 215, 102, 100, 126, 254, 0, 130, 141, 0,
	113, 114, 115, 121, 97, 0, 105, 225, 220, 221,
	0, 0, 99, 0, 157, 15, 238, 239, 234, 247,
	0, 0, 15, 0, 0, 15, 13, 205, 206, 207,
	0, 0, 0, 127, 0, 20, 116, 0, 98, 237,
	15, 250, 269, 15, 15, 287, 13, 288, 208, 13,
	0, 128, 103, 0, 248, 0, 0, 0, 289, 11,
	13, 156, 274, 0, 0, 269, 276, 0, 278, 214,
	12, 216, 13, 275, 0, 269, 269, 282, 277, 217,
	269, 280, 281, 279,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:208
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:210
		{
		}
	case 3:
		//line parser.y:212
		{
		}
	case 4:
		//line parser.y:214
		{
		}
	case 5:
		//line parser.y:216
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:218
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:220
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:226
		{
		}
	case 11:
		//line parser.y:228
		{
		}
	case 12:
		//line parser.y:229
		{
		}
	case 13:
		//line parser.y:231
		{
		}
	case 14:
		//line parser.y:232
		{
		}
	case 15:
		//line parser.y:235
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:237
		{
		}
	case 17:
		//line parser.y:239
		{
		}
	case 18:
		//line parser.y:241
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		//line parser.y:253
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 69:
		//line parser.y:256
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 70:
		//line parser.y:259
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 71:
		//line parser.y:266
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 72:
		//line parser.y:273
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 73:
		//line parser.y:277
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 74:
		//line parser.y:284
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 75:
		//line parser.y:291
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 76:
		//line parser.y:298
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 77:
		//line parser.y:305
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 78:
		//line parser.y:312
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 79:
		//line parser.y:320
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 80:
		//line parser.y:328
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 81:
		//line parser.y:336
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 82:
		//line parser.y:344
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 83:
		//line parser.y:352
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 84:
		//line parser.y:363
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 85:
		//line parser.y:370
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 86:
		//line parser.y:378
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 87:
		//line parser.y:386
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 88:
		//line parser.y:396
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 89:
		//line parser.y:404
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 90:
		//line parser.y:412
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 91:
		//line parser.y:420
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 92:
		//line parser.y:428
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 93:
		//line parser.y:436
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 94:
		//line parser.y:444
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 95:
		//line parser.y:452
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 96:
		//line parser.y:460
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 97:
		//line parser.y:470
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:478
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 99:
		//line parser.y:489
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 100:
		//line parser.y:497
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 101:
		//line parser.y:507
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 102:
		//line parser.y:517
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 103:
		//line parser.y:519
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 104:
		//line parser.y:521
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 105:
		//line parser.y:523
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 106:
		//line parser.y:526
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 107:
		//line parser.y:528
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 108:
		//line parser.y:530
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 109:
		//line parser.y:532
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 110:
		//line parser.y:534
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 111:
		//line parser.y:536
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 112:
		//line parser.y:538
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 113:
		//line parser.y:545
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:547
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:549
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:551
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 117:
		//line parser.y:560
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:562
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:564
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:566
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:568
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 122:
		//line parser.y:571
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:573
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:575
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:579
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 126:
		//line parser.y:587
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 127:
		//line parser.y:596
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 128:
		//line parser.y:605
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:615
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:623
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:634
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 132:
		//line parser.y:636
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 133:
		//line parser.y:638
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 134:
		//line parser.y:640
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:642
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:645
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 137:
		//line parser.y:647
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 138:
		//line parser.y:649
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 139:
		//line parser.y:651
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 140:
		//line parser.y:655
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name: RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 141:
		//line parser.y:662
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 142:
		//line parser.y:672
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 143:
		//line parser.y:681
		{
			RubyVAL.genericValue = ast.Class{
				Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
			}
		}
	case 144:
		//line parser.y:687
		{
			RubyVAL.genericValue = ast.Class{
				Name:      RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				Namespace: strings.Join(RubyS[Rubypt-2].stringSlice, "::"),
			}
		}
	case 145:
		//line parser.y:695
		{
			RubyVAL.stringSlice = append(RubyVAL.stringSlice, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name)
		}
	case 146:
		//line parser.y:699
		{
			RubyVAL.stringSlice = append(RubyVAL.stringSlice, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name)
		}
	case 147:
		//line parser.y:704
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 148:
		//line parser.y:711
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 149:
		//line parser.y:715
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 150:
		//line parser.y:719
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 151:
		//line parser.y:726
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 152:
		//line parser.y:733
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 153:
		//line parser.y:740
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 154:
		//line parser.y:748
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 155:
		//line parser.y:755
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 156:
		//line parser.y:763
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 157:
		//line parser.y:778
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 158:
		//line parser.y:784
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 159:
		//line parser.y:791
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 160:
		//line parser.y:795
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 161:
		//line parser.y:802
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:809
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 163:
		//line parser.y:816
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 164:
		//line parser.y:823
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 165:
		//line parser.y:826
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 166:
		//line parser.y:828
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 167:
		//line parser.y:831
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 168:
		//line parser.y:833
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:836
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:838
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 171:
		//line parser.y:841
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 172:
		//line parser.y:843
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 173:
		//line parser.y:845
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 174:
		//line parser.y:847
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 175:
		//line parser.y:850
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 176:
		//line parser.y:852
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:854
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 178:
		//line parser.y:856
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 179:
		//line parser.y:859
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 180:
		//line parser.y:861
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:863
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 182:
		//line parser.y:865
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 183:
		//line parser.y:868
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 184:
		//line parser.y:870
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 185:
		//line parser.y:872
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 186:
		//line parser.y:874
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 187:
		//line parser.y:877
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 188:
		//line parser.y:878
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:879
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:880
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 191:
		//line parser.y:883
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 192:
		//line parser.y:892
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 193:
		//line parser.y:901
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 194:
		//line parser.y:910
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 195:
		//line parser.y:919
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:928
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 197:
		//line parser.y:936
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 198:
		//line parser.y:937
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 199:
		//line parser.y:939
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 200:
		//line parser.y:941
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 201:
		//line parser.y:943
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 202:
		//line parser.y:945
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 203:
		//line parser.y:947
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 204:
		//line parser.y:949
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 205:
		//line parser.y:956
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 206:
		//line parser.y:958
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:960
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 208:
		//line parser.y:962
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 209:
		//line parser.y:970
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 210:
		//line parser.y:972
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 211:
		//line parser.y:980
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 212:
		//line parser.y:988
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 213:
		//line parser.y:991
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 214:
		//line parser.y:998
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 215:
		//line parser.y:1006
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 216:
		//line parser.y:1013
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 217:
		//line parser.y:1020
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 218:
		//line parser.y:1028
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 219:
		//line parser.y:1030
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 220:
		//line parser.y:1037
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 221:
		//line parser.y:1041
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 222:
		//line parser.y:1044
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 223:
		//line parser.y:1046
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 224:
		//line parser.y:1048
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1050
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1053
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 227:
		//line parser.y:1060
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 228:
		//line parser.y:1068
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 229:
		//line parser.y:1075
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 230:
		//line parser.y:1082
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 231:
		//line parser.y:1089
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 232:
		//line parser.y:1096
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 233:
		//line parser.y:1103
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 234:
		//line parser.y:1110
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 235:
		//line parser.y:1118
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 236:
		//line parser.y:1125
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 237:
		//line parser.y:1134
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 238:
		//line parser.y:1141
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 239:
		//line parser.y:1148
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 240:
		//line parser.y:1155
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 241:
		//line parser.y:1162
		{
		}
	case 242:
		//line parser.y:1163
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 243:
		//line parser.y:1164
		{
		}
	case 244:
		//line parser.y:1167
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 245:
		//line parser.y:1170
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 246:
		//line parser.y:1178
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 247:
		//line parser.y:1180
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 248:
		//line parser.y:1193
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 249:
		//line parser.y:1213
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 250:
		//line parser.y:1215
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 251:
		//line parser.y:1218
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 252:
		//line parser.y:1220
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 253:
		//line parser.y:1223
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1225
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 255:
		//line parser.y:1228
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 256:
		//line parser.y:1235
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 257:
		//line parser.y:1237
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 258:
		//line parser.y:1240
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 259:
		//line parser.y:1248
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 260:
		//line parser.y:1252
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 261:
		//line parser.y:1254
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 262:
		//line parser.y:1256
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 263:
		//line parser.y:1260
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 264:
		//line parser.y:1262
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 265:
		//line parser.y:1264
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 266:
		//line parser.y:1268
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 267:
		//line parser.y:1277
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 268:
		//line parser.y:1279
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 269:
		//line parser.y:1282
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 270:
		//line parser.y:1284
		{
		}
	case 271:
		//line parser.y:1286
		{
		}
	case 272:
		//line parser.y:1288
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 273:
		//line parser.y:1290
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 274:
		//line parser.y:1293
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 275:
		//line parser.y:1300
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 276:
		//line parser.y:1308
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 277:
		//line parser.y:1315
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 278:
		//line parser.y:1323
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 279:
		//line parser.y:1331
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 280:
		//line parser.y:1338
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 281:
		//line parser.y:1345
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 282:
		//line parser.y:1352
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 283:
		//line parser.y:1360
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 284:
		//line parser.y:1363
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 285:
		//line parser.y:1365
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 286:
		//line parser.y:1368
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 287:
		//line parser.y:1370
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 288:
		//line parser.y:1373
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 289:
		//line parser.y:1375
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 290:
		//line parser.y:1377
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

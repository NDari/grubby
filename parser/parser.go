//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CAPITAL_REF = 57351
const LPAREN = 57352
const RPAREN = 57353
const COMMA = 57354
const NamespacedModule = 57355
const ProcArg = 57356
const DO = 57357
const DEF = 57358
const END = 57359
const IF = 57360
const ELSE = 57361
const ELSIF = 57362
const UNLESS = 57363
const CLASS = 57364
const MODULE = 57365
const FOR = 57366
const WHILE = 57367
const UNTIL = 57368
const BEGIN = 57369
const RESCUE = 57370
const ENSURE = 57371
const BREAK = 57372
const NEXT = 57373
const REDO = 57374
const RETRY = 57375
const RETURN = 57376
const YIELD = 57377
const AND = 57378
const OR = 57379
const LAMBDA = 57380
const CASE = 57381
const WHEN = 57382
const ALIAS = 57383
const SELF = 57384
const NIL = 57385
const TRUE = 57386
const FALSE = 57387
const LESSTHAN = 57388
const GREATERTHAN = 57389
const EQUALTO = 57390
const BANG = 57391
const COMPLEMENT = 57392
const BINARY_PLUS = 57393
const UNARY_PLUS = 57394
const BINARY_MINUS = 57395
const UNARY_MINUS = 57396
const STAR = 57397
const RANGE = 57398
const OR_EQUALS = 57399
const WHITESPACE = 57400
const NEWLINE = 57401
const SEMICOLON = 57402
const COLON = 57403
const DOT = 57404
const PIPE = 57405
const SLASH = 57406
const AMPERSAND = 57407
const QUESTIONMARK = 57408
const CARET = 57409
const LBRACKET = 57410
const RBRACKET = 57411
const LBRACE = 57412
const RBRACE = 57413
const DOLLARSIGN = 57414
const ATSIGN = 57415
const FILE_CONST_REF = 57416
const LINE_CONST_REF = 57417
const EOF = 57418

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1459

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 135,
	11, 117,
	12, 117,
	-2, 246,
	-1, 331,
	4, 21,
	36, 21,
	37, 21,
	46, 21,
	47, 21,
	51, 21,
	53, 21,
	62, 21,
	63, 21,
	64, 21,
	65, 21,
	-2, 117,
	-1, 342,
	11, 117,
	12, 117,
	-2, 246,
	-1, 380,
	4, 36,
	36, 36,
	37, 36,
	47, 36,
	51, 36,
	53, 36,
	59, 13,
	62, 36,
	63, 36,
	64, 36,
	65, 36,
	71, 13,
	-2, 15,
}

const RubyNprod = 302
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4384

var RubyAct = []int{

	309, 33, 5, 561, 426, 393, 148, 177, 241, 137,
	239, 138, 427, 316, 136, 55, 25, 315, 102, 194,
	403, 103, 2, 3, 144, 104, 297, 237, 379, 537,
	315, 290, 284, 28, 205, 315, 26, 206, 143, 4,
	264, 315, 505, 315, 315, 122, 14, 503, 255, 131,
	134, 144, 384, 487, 483, 485, 369, 174, 175, 100,
	99, 184, 185, 156, 164, 536, 158, 123, 271, 391,
	156, 188, 162, 158, 125, 300, 101, 126, 349, 199,
	293, 287, 187, 200, 201, 156, 390, 161, 158, 267,
	447, 198, 161, 93, 349, 349, 147, 195, 93, 93,
	162, 207, 122, 210, 211, 212, 199, 93, 159, 163,
	245, 127, 219, 124, 155, 549, 315, 224, 443, 530,
	161, 157, 229, 159, 123, 233, 234, 235, 157, 217,
	74, 317, 160, 168, 442, 385, 454, 242, 226, 227,
	453, 446, 169, 157, 424, 244, 253, 251, 254, 51,
	315, 370, 348, 356, 442, 168, 165, 260, 246, 315,
	279, 280, 231, 282, 283, 272, 288, 289, 275, 294,
	295, 296, 315, 270, 261, 263, 257, 129, 258, 173,
	102, 242, 147, 103, 248, 240, 243, 104, 301, 244,
	318, 319, 320, 321, 277, 167, 278, 147, 333, 152,
	121, 326, 171, 147, 491, 366, 314, 102, 332, 181,
	103, 158, 181, 181, 104, 172, 130, 443, 128, 336,
	102, 544, 545, 103, 339, 102, 147, 104, 103, 340,
	243, 165, 104, 311, 181, 181, 181, 238, 170, 415,
	166, 325, 398, 147, 399, 478, 351, 479, 305, 306,
	362, 355, 413, 401, 97, 181, 191, 181, 181, 192,
	181, 543, 181, 181, 181, 181, 313, 181, 408, 551,
	181, 535, 181, 181, 102, 367, 406, 103, 407, 322,
	401, 104, 181, 550, 497, 152, 493, 196, 372, 181,
	181, 181, 265, 189, 401, 401, 190, 401, 133, 408,
	152, 102, 78, 411, 103, 181, 152, 181, 104, 173,
	257, 181, 258, 354, 285, 312, 268, 291, 568, 430,
	354, 298, 242, 400, 102, 409, 240, 103, 405, 152,
	244, 104, 517, 337, 404, 576, 338, 573, 572, 193,
	518, 540, 421, 410, 152, 181, 152, 519, 412, 414,
	420, 502, 501, 571, 422, 573, 572, 514, 389, 459,
	458, 418, 255, 429, 181, 434, 457, 181, 459, 458,
	388, 243, 382, 255, 441, 437, 181, 181, 147, 444,
	387, 428, 377, 468, 371, 132, 438, 432, 133, 147,
	133, 567, 78, 359, 78, 460, 365, 366, 448, 358,
	450, 357, 463, 469, 473, 473, 208, 353, 303, 209,
	302, 236, 214, 323, 440, 467, 481, 489, 181, 329,
	376, 310, 181, 181, 328, 492, 1, 197, 92, 91,
	90, 484, 89, 486, 88, 488, 217, 87, 41, 494,
	40, 39, 38, 500, 54, 499, 474, 494, 20, 43,
	44, 21, 16, 12, 13, 508, 11, 45, 24, 511,
	23, 181, 22, 27, 19, 10, 35, 181, 30, 18,
	15, 506, 42, 507, 17, 37, 520, 521, 36, 31,
	29, 152, 71, 32, 70, 440, 181, 75, 0, 0,
	0, 528, 152, 0, 0, 181, 0, 0, 0, 181,
	532, 534, 525, 0, 0, 0, 181, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 0, 52, 0, 0, 0, 0, 0, 0,
	181, 181, 0, 0, 547, 494, 0, 494, 0, 557,
	0, 0, 0, 0, 0, 473, 473, 473, 181, 565,
	0, 0, 0, 574, 554, 555, 556, 181, 217, 0,
	0, 0, 0, 578, 0, 0, 473, 0, 569, 0,
	473, 473, 473, 153, 575, 0, 0, 0, 152, 0,
	577, 0, 0, 182, 579, 580, 182, 182, 0, 581,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 182,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 0, 181, 0, 0, 182,
	0, 182, 182, 0, 182, 0, 182, 182, 182, 182,
	0, 182, 0, 0, 182, 0, 182, 182, 0, 34,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 153,
	0, 0, 0, 182, 182, 182, 266, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 181, 0, 0, 182,
	153, 182, 0, 0, 0, 182, 0, 0, 286, 181,
	0, 292, 0, 0, 0, 299, 0, 0, 0, 149,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 149,
	0, 0, 149, 149, 0, 0, 0, 0, 153, 182,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 149, 149, 0, 182, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 182, 0, 0, 0, 149, 0, 149, 149, 0,
	149, 109, 149, 149, 149, 149, 0, 149, 0, 0,
	149, 0, 149, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 149, 0, 0, 0, 149,
	149, 149, 182, 118, 119, 0, 182, 182, 0, 0,
	149, 0, 0, 107, 108, 149, 149, 149, 110, 0,
	111, 149, 112, 120, 0, 0, 0, 0, 0, 106,
	115, 113, 114, 0, 0, 0, 452, 0, 0, 149,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 182, 0, 0, 149, 149, 149, 0, 0, 0,
	0, 109, 0, 0, 0, 153, 0, 0, 0, 0,
	182, 0, 0, 0, 149, 0, 153, 149, 0, 182,
	0, 0, 0, 182, 0, 0, 149, 149, 0, 0,
	182, 0, 0, 118, 119, 0, 0, 0, 0, 0,
	0, 153, 0, 107, 108, 0, 0, 0, 110, 0,
	111, 0, 112, 120, 0, 0, 0, 0, 0, 106,
	115, 113, 114, 0, 182, 182, 383, 0, 149, 0,
	0, 0, 380, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 69, 150, 68, 79, 151,
	135, 182, 142, 78, 155, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 153, 9, 0, 0, 0, 149, 81, 0,
	0, 0, 97, 98, 95, 96, 0, 0, 140, 82,
	83, 149, 84, 0, 85, 86, 380, 141, 0, 0,
	0, 0, 149, 0, 0, 149, 109, 0, 139, 149,
	145, 0, 94, 93, 73, 72, 149, 0, 153, 0,
	182, 0, 0, 146, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 178, 0, 0, 186, 178, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 108,
	149, 149, 0, 110, 0, 111, 0, 112, 202, 203,
	204, 0, 0, 0, 106, 115, 113, 114, 149, 0,
	182, 559, 0, 0, 0, 0, 0, 149, 0, 213,
	0, 215, 216, 182, 218, 0, 220, 221, 222, 223,
	0, 225, 0, 0, 228, 0, 230, 232, 149, 53,
	0, 0, 0, 0, 0, 0, 249, 0, 0, 252,
	0, 0, 0, 256, 259, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 0, 274,
	252, 276, 0, 304, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 149, 0, 0, 154,
	0, 0, 0, 146, 0, 0, 0, 0, 0, 183,
	0, 0, 183, 183, 0, 0, 0, 0, 324, 330,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 183, 183, 0, 343, 0,
	0, 344, 176, 0, 0, 0, 149, 0, 0, 0,
	346, 347, 0, 0, 0, 183, 0, 183, 183, 149,
	183, 109, 183, 183, 183, 183, 0, 183, 0, 0,
	183, 0, 183, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 154, 0, 0, 0, 183,
	183, 183, 373, 118, 119, 0, 330, 381, 0, 0,
	154, 0, 0, 107, 108, 183, 154, 183, 110, 0,
	111, 183, 112, 120, 0, 247, 0, 0, 250, 106,
	115, 113, 114, 0, 0, 0, 368, 0, 269, 154,
	0, 0, 0, 0, 0, 402, 0, 0, 0, 109,
	0, 178, 0, 0, 154, 183, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 0,
	419, 0, 0, 0, 183, 0, 252, 183, 0, 423,
	0, 118, 119, 373, 0, 0, 183, 183, 0, 0,
	431, 107, 108, 0, 0, 0, 110, 0, 111, 0,
	112, 439, 0, 0, 0, 0, 0, 106, 115, 113,
	114, 0, 0, 0, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 455, 456, 0, 0, 183, 0,
	0, 352, 183, 183, 0, 0, 0, 0, 0, 0,
	360, 0, 178, 363, 0, 69, 150, 68, 79, 151,
	135, 490, 0, 78, 155, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 375, 0, 378, 0, 0, 0,
	0, 183, 439, 0, 0, 0, 0, 183, 81, 0,
	0, 0, 97, 98, 95, 96, 0, 0, 0, 82,
	83, 154, 84, 0, 85, 86, 183, 0, 0, 396,
	397, 417, 154, 0, 0, 183, 109, 0, 273, 183,
	145, 0, 94, 93, 73, 72, 183, 0, 526, 0,
	529, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	378, 0, 0, 0, 0, 0, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 108,
	183, 183, 0, 110, 0, 111, 435, 112, 0, 0,
	0, 0, 0, 0, 106, 115, 113, 114, 183, 0,
	552, 509, 109, 449, 451, 0, 0, 183, 0, 0,
	0, 0, 0, 558, 0, 0, 0, 0, 0, 461,
	0, 0, 0, 465, 0, 466, 0, 0, 154, 0,
	0, 480, 0, 482, 118, 119, 0, 0, 0, 109,
	0, 0, 0, 0, 107, 108, 0, 0, 0, 110,
	0, 111, 495, 112, 0, 0, 496, 0, 0, 0,
	106, 115, 113, 114, 0, 0, 0, 386, 0, 0,
	0, 118, 119, 0, 154, 0, 183, 0, 0, 0,
	0, 107, 108, 512, 513, 0, 110, 0, 111, 0,
	112, 516, 0, 0, 0, 0, 0, 106, 115, 113,
	114, 0, 0, 522, 350, 524, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 49, 68, 79,
	50, 80, 0, 0, 78, 0, 183, 46, 564, 475,
	563, 562, 476, 47, 48, 539, 60, 61, 58, 183,
	0, 64, 65, 542, 66, 63, 59, 0, 0, 81,
	62, 0, 67, 97, 98, 95, 96, 0, 0, 0,
	82, 83, 0, 84, 553, 85, 86, 0, 396, 397,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 93, 73, 72, 69, 49, 68,
	79, 50, 80, 0, 0, 78, 0, 0, 46, 560,
	475, 563, 562, 476, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	81, 62, 0, 67, 97, 98, 95, 96, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 93, 73, 72, 69, 49,
	68, 79, 50, 80, 0, 0, 78, 0, 0, 46,
	462, 56, 395, 394, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 81, 62, 0, 67, 97, 98, 95, 96, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 307, 308, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 93, 73, 72, 69,
	49, 68, 79, 50, 80, 0, 0, 78, 0, 0,
	46, 392, 56, 395, 394, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 81, 62, 0, 67, 97, 98, 95, 96,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 93, 73, 72,
	69, 49, 68, 79, 50, 80, 0, 0, 78, 0,
	0, 46, 533, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 401, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 307, 308, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 0, 46, 531, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 401, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 307, 308, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 0, 46, 433, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 401, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 81, 62, 0, 67, 97,
	98, 95, 96, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 307, 308, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	93, 73, 72, 69, 49, 68, 79, 50, 80, 0,
	0, 78, 0, 0, 46, 425, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 401, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 81, 62, 0, 67,
	97, 98, 95, 96, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 307, 308, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 93, 73, 72, 69, 49, 68, 79, 50, 80,
	0, 0, 78, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 81, 62, 0,
	67, 97, 98, 95, 96, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 6, 7,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 93, 73, 72, 8, 69, 49, 68, 79,
	50, 80, 0, 0, 78, 0, 0, 46, 566, 475,
	0, 0, 476, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 81,
	62, 0, 67, 97, 98, 95, 96, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 93, 73, 72, 69, 49, 68,
	79, 50, 80, 0, 0, 78, 0, 0, 46, 546,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	81, 62, 0, 67, 97, 98, 95, 96, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 307, 308, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 93, 73, 72, 69, 49,
	68, 79, 50, 80, 0, 0, 78, 0, 0, 46,
	523, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 81, 62, 0, 67, 97, 98, 95, 96, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 307, 308, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 93, 73, 72, 69,
	49, 68, 79, 50, 80, 0, 0, 78, 0, 0,
	46, 515, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 81, 62, 0, 67, 97, 98, 95, 96,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 93, 73, 72,
	69, 49, 68, 79, 50, 80, 0, 0, 78, 0,
	0, 46, 0, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 307, 308, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 504, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 0, 46, 498, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 307, 308, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 0, 46, 477, 475, 0, 0, 476, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 81, 62, 0, 67, 97,
	98, 95, 96, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	93, 73, 72, 69, 49, 68, 79, 50, 80, 0,
	0, 78, 0, 0, 46, 470, 475, 0, 0, 476,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 81, 62, 0, 67,
	97, 98, 95, 96, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 93, 73, 72, 69, 49, 68, 79, 50, 80,
	0, 0, 78, 0, 0, 46, 464, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 81, 62, 0,
	67, 97, 98, 95, 96, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 307, 308,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 93, 73, 72, 69, 49, 68, 79, 50,
	80, 0, 0, 78, 0, 0, 46, 445, 56, 0,
	0, 57, 47, 48, 0, 60, 61, 58, 0, 0,
	64, 65, 0, 66, 63, 59, 0, 0, 81, 62,
	0, 67, 97, 98, 95, 96, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 307,
	308, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 93, 73, 72, 69, 49, 68, 79,
	50, 80, 0, 0, 78, 0, 0, 46, 436, 56,
	0, 0, 57, 47, 48, 0, 60, 61, 58, 0,
	0, 64, 65, 0, 66, 63, 59, 0, 0, 81,
	62, 0, 67, 97, 98, 95, 96, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	307, 308, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 93, 73, 72, 69, 49, 68,
	79, 50, 80, 0, 0, 78, 0, 0, 46, 374,
	56, 0, 0, 57, 47, 48, 0, 60, 61, 58,
	0, 0, 64, 65, 0, 66, 63, 59, 0, 0,
	81, 62, 0, 67, 97, 98, 95, 96, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 307, 308, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 93, 73, 72, 69, 49,
	68, 79, 50, 80, 0, 0, 78, 0, 0, 46,
	364, 56, 0, 0, 57, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 0,
	0, 81, 62, 0, 67, 97, 98, 95, 96, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 307, 308, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 93, 73, 72, 69,
	49, 68, 79, 50, 80, 0, 0, 78, 0, 0,
	46, 361, 56, 0, 0, 57, 47, 48, 0, 60,
	61, 58, 0, 0, 64, 65, 0, 66, 63, 59,
	0, 0, 81, 62, 0, 67, 97, 98, 95, 96,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 93, 73, 72,
	69, 49, 68, 79, 50, 80, 0, 0, 78, 0,
	0, 46, 0, 475, 0, 0, 476, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 0, 46, 0, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 307, 308, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 335, 0,
	78, 0, 0, 46, 0, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 81, 62, 0, 67, 97,
	98, 95, 96, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	93, 73, 72, 69, 49, 68, 79, 50, 80, 0,
	0, 78, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 81, 62, 0, 67,
	97, 98, 95, 96, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 93, 73, 72, 69, 49, 68, 79, 50, 80,
	0, 0, 78, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 81, 62, 0,
	67, 97, 98, 95, 96, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 69, 331, 68, 79, 180,
	80, 0, 0, 78, 0, 0, 0, 76, 0, 77,
	0, 94, 93, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 97, 98, 95, 96, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 315,
	0, 0, 0, 271, 0, 0, 0, 0, 76, 0,
	77, 327, 94, 93, 73, 72, 69, 150, 68, 79,
	151, 135, 0, 0, 78, 155, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 97, 98, 95, 96, 0, 0, 140,
	82, 83, 0, 84, 0, 85, 86, 69, 150, 68,
	79, 151, 80, 0, 0, 78, 155, 0, 0, 273,
	0, 145, 0, 94, 93, 73, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 97, 98, 95, 96, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 315, 0, 69, 179, 68, 79, 180, 80, 0,
	76, 78, 77, 0, 94, 93, 73, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	97, 98, 95, 96, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 315, 0, 0,
	0, 271, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 93, 73, 72, 69, 179, 68, 79, 180, 342,
	0, 0, 78, 0, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 97, 98, 95, 96, 0, 0, 341, 82, 83,
	0, 84, 0, 85, 86, 69, 331, 68, 79, 180,
	80, 0, 0, 78, 0, 0, 0, 76, 0, 145,
	0, 94, 93, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 97, 98, 95, 96, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 327, 94, 93, 73, 72, 69, 150, 68, 79,
	151, 135, 0, 0, 78, 155, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 97, 98, 95, 96, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 69, 179, 68,
	79, 180, 80, 0, 0, 78, 0, 0, 0, 273,
	0, 145, 0, 94, 93, 73, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 97, 98, 95, 96, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 93, 73, 72, 69, 150,
	68, 79, 151, 80, 0, 0, 78, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 97, 98, 95, 96, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 69,
	179, 68, 79, 180, 80, 0, 0, 78, 0, 0,
	0, 76, 0, 77, 0, 94, 93, 73, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 81, 0, 0, 0, 97, 98, 95, 96,
	0, 0, 0, 82, 83, 116, 84, 0, 85, 86,
	109, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	118, 119, 76, 0, 77, 0, 94, 93, 73, 72,
	107, 108, 109, 0, 105, 110, 0, 111, 0, 112,
	120, 0, 118, 119, 0, 0, 106, 115, 113, 114,
	117, 0, 107, 108, 109, 0, 0, 110, 0, 111,
	0, 112, 570, 0, 118, 119, 0, 0, 106, 115,
	113, 114, 117, 0, 107, 108, 109, 0, 0, 110,
	0, 111, 0, 112, 0, 0, 118, 119, 0, 0,
	106, 115, 113, 114, 117, 0, 107, 108, 548, 0,
	0, 110, 0, 111, 0, 112, 0, 0, 118, 119,
	0, 0, 106, 115, 113, 114, 0, 0, 107, 108,
	109, 0, 0, 110, 0, 111, 0, 112, 0, 0,
	118, 119, 0, 345, 106, 115, 113, 114, 0, 0,
	107, 108, 416, 0, 0, 110, 0, 111, 0, 112,
	0, 0, 118, 119, 0, 0, 106, 115, 113, 114,
	0, 0, 107, 108, 0, 0, 0, 110, 0, 111,
	0, 112, 0, 0, 118, 119, 0, 0, 106, 115,
	113, 114, 0, 0, 107, 108, 0, 0, 0, 110,
	0, 111, 0, 112, 0, 0, 0, 0, 0, 0,
	106, 115, 113, 114,
}
var RubyPact = []int{

	-37, 2189, -1000, -1000, -1000, 0, -1000, -1000, -1000, 4164,
	-1000, -1000, -1000, -1000, 179, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 56, -1000, 49, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 212, 381, 289, 940,
	75, 52, 183, 85, 190, 167, 3539, 3539, -1000, 4134,
	3539, 3539, 4134, 4134, 275, 238, -1000, 332, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 277,
	-1000, 9, 3539, 3539, 4134, 4134, 4134, -1000, -1000, -1000,
	-1000, -1000, -1000, 28, 400, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3539, 3539, 3539, 4134, 406, 4134, 4134, -1000,
	4134, 3539, 4134, 4134, 4134, 4134, 3539, 4134, -1000, -1000,
	4134, 3539, 4134, 4134, 3539, 3539, 3539, 405, 175, 48,
	316, 138, 4134, 198, -1000, 4083, 9, -1000, 36, 4134,
	4134, 4134, 34, 304, 5, -1000, 4296, -1000, -1000, -1,
	3661, 60, 24, 108, 107, 4134, 4083, 4134, -1000, 3539,
	3539, 4134, 3539, 3539, 26, 3539, 3539, 25, 3539, 3539,
	3539, 20, 404, 402, 283, 189, 3326, 221, 4296, 3961,
	53, 19, -1000, -1000, 256, 207, 4296, 91, 221, 3539,
	3539, 3539, 3539, 272, 3712, 3890, 4083, 3397, -1000, -1000,
	283, 283, 4296, 4296, 4296, -1000, -1000, 327, -1000, -1000,
	283, 283, 283, 4296, 3839, 4296, 4296, 4012, 4296, 283,
	4296, 4296, 4296, 4296, 283, 4252, 4012, 4012, 4296, 283,
	4296, 83, 1545, 283, 283, 283, 9, -1000, 401, 301,
	131, -1000, 105, 395, 393, 387, -1000, 3184, 289, 4296,
	3113, 385, 4296, -1000, -1000, -1000, 1207, -13, 82, 4186,
	-1000, -1000, 4208, -1000, -1000, -1000, -1000, 378, 4134, 3042,
	-1000, 376, 3590, 4134, 4296, 361, 857, -17, 66, 283,
	283, 1508, 283, 283, -1000, -1000, -1000, 374, 283, 283,
	-1000, -1000, -1000, 364, 283, 283, 283, -1000, -1000, -1000,
	352, 297, 18, 1, 1834, -1000, -1000, -1000, -1000, 283,
	225, 4134, -1000, -1000, 91, -1000, 259, 4134, 283, 283,
	283, 283, -1000, 291, 4296, -1000, -1000, -1000, 240, 227,
	4318, 1380, 350, 283, -1000, -1000, 3768, -1000, -1000, -1000,
	9, 3539, 4083, 4296, 4296, 4134, 4296, 4296, -1000, 4134,
	96, -1000, 2118, 316, 131, 308, 4134, -1000, -1000, 316,
	2047, -1000, -1000, 2971, -1000, 9, -1000, 3712, 106, -1000,
	-1000, -1000, 100, 4296, -1000, 2900, 78, -1000, 3326, -1000,
	-1, 767, -1000, 92, -1000, -1000, 88, -1000, -1000, -1000,
	4134, 4134, -1000, 349, 3539, -1000, 1763, 2829, -1000, -1000,
	-1000, 379, 4296, 2758, 2687, 228, -1000, -1000, 4134, 221,
	-15, -1000, -16, -1000, -18, -1000, 3539, 4134, -1000, 4296,
	-1000, 283, 193, 4296, 3539, -1000, 269, -1000, -1000, -1000,
	-1000, 4296, -1000, -1000, 267, 2616, -1000, -1000, 3712, 4296,
	-1000, -1000, 3539, 346, -1000, -1000, -1000, 345, -24, 2545,
	-29, 3326, 86, -1000, 3539, 1442, 1285, -1000, 3539, -1000,
	283, 3326, -1000, 340, -1000, 2474, 3326, 328, 341, -1000,
	-1000, -1000, -1000, 283, -1000, 3539, 3539, -1000, -1000, -1000,
	2403, 221, 3326, -1000, 3712, -1000, 4012, -1000, 113, 283,
	4296, -1000, 283, -1000, -1000, 1976, 1905, -1000, -1000, 260,
	283, -3, -1000, -1000, -1000, -1000, -42, 3468, 283, 205,
	-1000, 283, 3326, 3326, -1000, -1000, 3326, 335, 289, -1000,
	202, 162, 2332, -1000, 3326, 57, 4296, -1000, -1000, 4274,
	54, -1000, 266, -1000, 252, -1000, 4134, -1000, 283, 3326,
	-1000, -1000, 3326, -1000, -1000, -1000, -1000, 57, 3539, 4134,
	-1000, -1000, 1002, 3326, 1692, 1621, 2261, 306, 4230, -1000,
	-1000, 336, 3539, -1000, -1000, 318, -1000, -1000, -1000, 57,
	-1000, -1000, 3539, -1000, 283, 3255, -1000, 57, 283, 3255,
	3255, 3255,
}
var RubyPgo = []int{

	0, 487, 0, 484, 130, 483, 36, 9, 482, 480,
	479, 478, 1099, 475, 12, 33, 474, 6, 472, 46,
	470, 469, 973, 468, 533, 659, 466, 465, 464, 463,
	462, 460, 458, 457, 456, 454, 8, 149, 453, 452,
	1, 13, 451, 450, 449, 16, 448, 446, 3, 444,
	442, 441, 440, 438, 437, 434, 432, 430, 429, 428,
	1133, 427, 4, 14, 28, 5, 426, 27, 424, 20,
	421, 11, 420, 7, 419, 38, 15, 10, 415, 413,
	391, 19,
}
var RubyR1 = []int{

	0, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 80, 80, 81, 81, 60, 60, 60, 60, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 33, 33,
	33, 33, 33, 33, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 45, 18, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	26, 63, 63, 63, 63, 73, 73, 71, 71, 71,
	71, 71, 71, 71, 17, 75, 75, 27, 27, 27,
	27, 27, 27, 27, 27, 67, 67, 77, 77, 77,
	36, 36, 36, 36, 34, 34, 35, 38, 40, 40,
	40, 19, 19, 19, 19, 19, 19, 19, 20, 20,
	76, 76, 39, 39, 39, 39, 39, 39, 39, 12,
	12, 37, 37, 24, 24, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 3, 8, 10, 4, 1, 79, 79, 79, 79,
	79, 79, 79, 5, 5, 5, 68, 68, 74, 74,
	74, 7, 7, 7, 7, 7, 7, 64, 72, 72,
	72, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 65, 65, 65, 65, 61, 61, 61, 11,
	21, 21, 14, 14, 14, 14, 78, 78, 70, 70,
	62, 62, 28, 28, 29, 30, 30, 32, 32, 32,
	31, 31, 31, 15, 46, 46, 46, 69, 69, 69,
	69, 69, 47, 47, 47, 47, 47, 48, 48, 48,
	48, 44, 43, 13, 42, 42, 42, 42, 41, 41,
	6, 9,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 5, 1,
	4, 4, 2, 3, 2, 3, 4, 5, 4, 3,
	4, 5, 2, 3, 3, 3, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 6, 7, 6, 6,
	4, 3, 6, 1, 4, 1, 3, 0, 1, 1,
	1, 4, 4, 4, 2, 1, 3, 5, 6, 7,
	7, 8, 8, 5, 6, 1, 3, 0, 1, 3,
	1, 2, 3, 2, 4, 6, 5, 4, 1, 2,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	9, 6, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 3, 3, 3, 3, 3, 4, 3,
	3, 3, 4, 3, 3, 3, 4, 3, 3, 3,
	4, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 1, 1, 5, 1, 1, 0, 1, 1, 1,
	4, 4, 4, 3, 5, 5, 3, 7, 3, 7,
	8, 3, 4, 5, 5, 5, 6, 3, 0, 1,
	3, 4, 5, 3, 3, 3, 3, 3, 5, 6,
	5, 3, 4, 3, 3, 2, 0, 2, 2, 3,
	4, 6, 2, 3, 5, 4, 1, 3, 0, 2,
	1, 2, 2, 1, 1, 2, 1, 1, 3, 3,
	1, 3, 3, 5, 5, 5, 3, 0, 2, 2,
	2, 2, 5, 6, 5, 6, 5, 4, 3, 3,
	2, 4, 4, 2, 5, 7, 4, 6, 4, 5,
	3, 3,
}
var RubyChk = []int{

	-1000, -66, 59, 60, 76, -2, 59, 60, 76, -22,
	-27, -34, -38, -35, -19, -20, -39, -16, -21, -28,
	-46, -42, -30, -31, -32, -45, -6, -29, -15, -9,
	-23, -10, -5, -40, -25, -26, -11, -13, -50, -51,
	-52, -53, -18, -44, -43, -33, 16, 22, 23, 6,
	9, -37, -24, -12, -49, -76, 18, 21, 27, 35,
	25, 26, 39, 34, 30, 31, 33, 41, 7, 5,
	-3, -8, 75, 74, -4, -1, 68, 70, 13, 8,
	10, 38, 49, 50, 52, 54, 55, -54, -55, -56,
	-57, -58, -59, 73, 72, 44, 45, 42, 43, 60,
	59, 76, 18, 21, 25, 28, 62, 46, 47, 4,
	51, 53, 55, 64, 65, 63, 21, 66, 36, 37,
	56, 21, 46, 68, 57, 18, 21, 62, 6, -4,
	4, -40, 4, 9, -40, 10, -63, -7, -71, 68,
	48, 57, 12, -75, 15, 70, -22, -19, -17, -25,
	6, 9, -37, -24, -12, 14, 10, 68, 13, 48,
	57, 68, 48, 57, 12, 48, 57, 12, 48, 57,
	48, 12, 48, 12, -2, -2, -60, -73, -22, 6,
	9, -37, -24, -12, -2, -2, -22, -81, -73, 18,
	21, 18, 21, 7, -81, -81, 10, -61, -7, 70,
	-2, -2, -22, -22, -22, 6, 9, 73, 6, 9,
	-2, -2, -2, -22, 6, -22, -22, -81, -22, -2,
	-22, -22, -22, -22, -2, -22, -81, -81, -22, -2,
	-22, -75, -22, -2, -2, -2, 6, -67, 62, -77,
	10, -36, 6, 55, 14, 62, -67, -60, 46, -22,
	-60, -71, -22, -7, -7, 12, -22, -6, -75, -22,
	-45, -15, -22, -15, 6, -37, -24, 55, 12, -60,
	-64, 63, -81, 68, -22, -71, -22, -6, -75, -2,
	-2, -22, -2, -2, 6, -37, -24, 55, -2, -2,
	6, -37, -24, 55, -2, -2, -2, 6, -37, -24,
	55, -76, 6, 6, -60, 59, 60, 59, 60, -2,
	-70, 12, 59, 59, -81, 59, -41, 40, -2, -2,
	-2, -2, 7, -79, -22, -19, -17, 71, -68, -74,
	-22, 6, -71, -2, 60, 11, -81, 6, 9, -7,
	-63, 48, 10, -22, -22, 61, -22, -22, 69, 12,
	69, -7, -60, 6, 12, -77, 48, 6, 6, 6,
	-60, 17, -40, -60, 17, 11, 12, -81, 69, 69,
	69, 6, -81, -22, 17, -60, -72, 6, -60, -64,
	-25, -22, 11, 69, 69, 69, 69, 6, 6, 6,
	68, 68, 17, -65, 20, 19, -60, -60, 17, 19,
	-14, 28, -22, -69, -69, -41, 17, 19, 40, -73,
	-81, 12, -81, 12, -81, 12, 4, 61, 11, -22,
	-7, -2, -71, -22, 48, 17, -62, -14, -67, -36,
	11, -22, -67, 17, -62, -60, 17, -7, -81, -22,
	-19, -17, 48, 12, -17, 17, 63, 12, -81, -60,
	-81, -60, 69, 48, 48, -22, -22, 17, 20, 19,
	-2, -60, 17, -65, 17, -60, -60, -78, 4, -40,
	17, 59, 60, -2, -47, 18, 21, 17, 17, 19,
	-60, -73, -60, 69, -81, 71, -81, 71, -81, -2,
	-22, 11, -2, 17, -14, -60, -60, 17, 17, -17,
	-2, 6, 6, 71, 71, 71, -81, -81, -2, 69,
	69, -2, -60, -60, 17, 17, -60, 4, 12, 6,
	-2, -2, -60, 17, -60, -81, -22, -19, -17, -22,
	6, 17, -62, 17, -62, 11, 68, 71, -2, -60,
	6, -40, -60, 59, 59, 60, 17, -81, 4, 61,
	17, 17, -22, -60, -69, -69, -69, -2, -22, 69,
	17, -48, 20, 19, 17, -48, 17, -80, 12, -81,
	12, 17, 20, 19, -2, -69, 17, -81, -2, -69,
	-69, -69,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 0, 0, 0, 21,
	22, 23, 24, 25, 0, 0, 0, 0, 15, 263,
	0, 0, 13, 266, 270, 267, 264, 0, 19, 20,
	26, 27, 28, 29, 30, 31, 13, 13, 150, 79,
	246, 0, 0, 0, 0, 0, 0, 48, 49, 50,
	51, 52, 53, 0, 0, 201, 202, 204, 205, 5,
	6, 7, 0, 0, 0, 0, 0, 0, 0, 13,
	0, 0, 0, 0, 0, 0, 0, 0, 13, 13,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	137, 15, 0, 148, 15, -2, 82, 84, 92, 13,
	0, 0, 0, 113, 15, 13, 118, 119, 120, 36,
	21, 22, 23, 24, 25, 0, 117, 0, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 15, 0, 258, 262, 115, 21,
	22, 23, 24, 25, 0, 0, 13, 0, 265, 0,
	0, 0, 0, 0, 206, 0, 117, 0, 293, 13,
	191, 192, 193, 194, 76, 171, 172, 0, 169, 170,
	233, 241, 276, 75, 85, 94, 96, 0, 195, 196,
	197, 198, 199, 200, 235, 0, 0, 0, 300, 237,
	95, 0, 125, 168, 234, 236, 89, 15, 0, 135,
	137, 138, 140, 0, 0, 0, 15, 0, 0, 15,
	0, 0, 118, 83, 93, 13, 125, 0, 0, 151,
	152, 153, 162, 163, 175, 176, 177, 0, 13, 0,
	15, 228, 15, 13, 124, 0, 125, 0, 0, 154,
	164, 0, 155, 165, 179, 180, 181, 0, 156, 166,
	183, 184, 185, 0, 157, 167, 158, 187, 188, 189,
	0, 159, 0, 0, 0, 15, 15, 16, 17, 18,
	0, 0, 277, 277, 0, 14, 0, 0, 271, 272,
	268, 269, 301, 13, 207, 208, 209, 213, 13, 13,
	0, -2, 0, 247, 248, 249, 15, 173, 174, 86,
	88, 0, -2, 125, 110, 0, 291, 292, 104, 0,
	105, 90, 0, 137, 0, 0, 0, 141, 143, 137,
	0, 144, 15, 0, 147, 77, 13, 0, 97, 100,
	102, 178, 0, 126, 221, 0, 0, 229, 13, 15,
	-2, 125, 81, 98, 101, 103, 99, 182, 186, 190,
	0, 0, 231, 0, 0, 15, 0, 0, 250, 15,
	259, 15, 116, 0, 0, 0, 296, 15, 0, 15,
	0, 13, 0, 13, 0, 13, 13, 0, 80, 0,
	87, 91, 0, 273, 0, 127, 0, 260, 15, 139,
	136, 142, 15, 133, 0, 0, 146, 78, 0, 121,
	122, 123, 0, 0, 114, 222, 227, 0, 0, 0,
	0, 13, 97, 13, 0, 0, 0, 232, 0, 15,
	15, 245, 238, 0, 240, 0, 252, 15, 0, 256,
	274, 278, 279, 280, 281, 0, 0, 275, 294, 15,
	0, 15, 13, 203, 0, 214, 0, 215, 0, 216,
	218, 111, 109, 128, 261, 0, 0, 134, 145, 123,
	106, 0, 230, 223, 224, 225, 0, 0, 108, 0,
	161, 15, 243, 244, 239, 251, 253, 0, 0, 15,
	15, 0, 0, 297, 13, 298, 210, 211, 212, 0,
	0, 129, 0, 130, 0, 112, 0, 226, 107, 242,
	15, 257, 255, 277, 15, 15, 295, 299, 13, 0,
	131, 132, 0, 254, 0, 0, 0, 11, 13, 160,
	282, 0, 0, 277, 284, 0, 286, 217, 12, 219,
	13, 283, 0, 277, 277, 290, 285, 220, 277, 288,
	289, 287,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:224
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:226
		{
		}
	case 3:
		//line parser.y:228
		{
		}
	case 4:
		//line parser.y:230
		{
		}
	case 5:
		//line parser.y:232
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:234
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:236
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:242
		{
		}
	case 11:
		//line parser.y:244
		{
		}
	case 12:
		//line parser.y:245
		{
		}
	case 13:
		//line parser.y:247
		{
		}
	case 14:
		//line parser.y:248
		{
		}
	case 15:
		//line parser.y:251
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:253
		{
		}
	case 17:
		//line parser.y:255
		{
		}
	case 18:
		//line parser.y:257
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 75:
		//line parser.y:269
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 76:
		//line parser.y:272
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:275
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 78:
		//line parser.y:282
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:          RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-2].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 79:
		//line parser.y:290
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 80:
		//line parser.y:294
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 81:
		//line parser.y:301
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 82:
		//line parser.y:308
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 83:
		//line parser.y:315
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 84:
		//line parser.y:323
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 85:
		//line parser.y:331
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 86:
		//line parser.y:338
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 87:
		//line parser.y:347
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 88:
		//line parser.y:356
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 89:
		//line parser.y:364
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 90:
		//line parser.y:372
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 91:
		//line parser.y:381
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 92:
		//line parser.y:392
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 93:
		//line parser.y:399
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 94:
		//line parser.y:407
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 95:
		//line parser.y:415
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 96:
		//line parser.y:423
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:433
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 98:
		//line parser.y:441
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 99:
		//line parser.y:449
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:457
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 101:
		//line parser.y:465
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 102:
		//line parser.y:473
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 103:
		//line parser.y:481
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 104:
		//line parser.y:489
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 105:
		//line parser.y:497
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 106:
		//line parser.y:507
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 107:
		//line parser.y:515
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 108:
		//line parser.y:526
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 109:
		//line parser.y:534
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 110:
		//line parser.y:544
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 111:
		//line parser.y:554
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 112:
		//line parser.y:556
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-1].genericValue)
		}
	case 113:
		//line parser.y:558
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 114:
		//line parser.y:560
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:563
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:565
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:567
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 118:
		//line parser.y:569
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:571
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:573
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:575
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:577
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:579
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:582
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
		}
	case 125:
		//line parser.y:590
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:592
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:596
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 128:
		//line parser.y:604
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:613
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:622
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:631
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 132:
		//line parser.y:641
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 133:
		//line parser.y:651
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 134:
		//line parser.y:659
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 135:
		//line parser.y:670
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 136:
		//line parser.y:672
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 137:
		//line parser.y:674
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 138:
		//line parser.y:676
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 139:
		//line parser.y:678
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 140:
		//line parser.y:681
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 141:
		//line parser.y:683
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 142:
		//line parser.y:685
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 143:
		//line parser.y:687
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 144:
		//line parser.y:691
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 145:
		//line parser.y:699
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 146:
		//line parser.y:709
		{
			if RubyS[Rubypt-3].operator != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + RubyS[Rubypt-3].operator + ")")
			}

			RubyVAL.genericValue = ast.EigenClass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 147:
		//line parser.y:721
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 148:
		//line parser.y:730
		{
			RubyVAL.genericValue = ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
		}
	case 149:
		//line parser.y:737
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(string)}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
		}
	case 150:
		//line parser.y:754
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(string), "::")
			namespace := strings.Join(pieces[:len(pieces)-1], "::")
			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.TrimPrefix(namespace, "::"),
				IsGlobalNamespace: true,
			}
		}
	case 151:
		//line parser.y:765
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 152:
		//line parser.y:772
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 153:
		//line parser.y:776
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 154:
		//line parser.y:780
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 155:
		//line parser.y:787
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 156:
		//line parser.y:794
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 157:
		//line parser.y:801
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 158:
		//line parser.y:809
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 159:
		//line parser.y:816
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 160:
		//line parser.y:824
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 161:
		//line parser.y:839
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 162:
		//line parser.y:845
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 163:
		//line parser.y:852
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 164:
		//line parser.y:856
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 165:
		//line parser.y:863
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 166:
		//line parser.y:870
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 167:
		//line parser.y:877
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 168:
		//line parser.y:884
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 169:
		//line parser.y:887
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:889
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 171:
		//line parser.y:892
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 172:
		//line parser.y:894
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 173:
		//line parser.y:897
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 174:
		//line parser.y:899
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 175:
		//line parser.y:902
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 176:
		//line parser.y:904
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:906
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 178:
		//line parser.y:908
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 179:
		//line parser.y:911
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 180:
		//line parser.y:913
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:915
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 182:
		//line parser.y:917
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 183:
		//line parser.y:920
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 184:
		//line parser.y:922
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 185:
		//line parser.y:924
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 186:
		//line parser.y:926
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 187:
		//line parser.y:929
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 188:
		//line parser.y:931
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 189:
		//line parser.y:933
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 190:
		//line parser.y:935
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 191:
		//line parser.y:938
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 192:
		//line parser.y:939
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 193:
		//line parser.y:940
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 194:
		//line parser.y:941
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 195:
		//line parser.y:944
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:953
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 197:
		//line parser.y:962
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 198:
		//line parser.y:971
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 199:
		//line parser.y:980
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 200:
		//line parser.y:989
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 201:
		//line parser.y:997
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 202:
		//line parser.y:998
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 203:
		//line parser.y:1000
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 204:
		//line parser.y:1002
		{
			RubyVAL.genericValue = ast.Self{}
		}
	case 205:
		//line parser.y:1003
		{
			RubyVAL.genericValue = ast.Nil{}
		}
	case 206:
		//line parser.y:1005
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 207:
		//line parser.y:1007
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 208:
		//line parser.y:1009
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 209:
		//line parser.y:1011
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 210:
		//line parser.y:1013
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 211:
		//line parser.y:1015
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 212:
		//line parser.y:1017
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 213:
		//line parser.y:1020
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 214:
		//line parser.y:1022
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 215:
		//line parser.y:1030
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 216:
		//line parser.y:1039
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 217:
		//line parser.y:1046
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 218:
		//line parser.y:1054
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 219:
		//line parser.y:1061
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 220:
		//line parser.y:1068
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 221:
		//line parser.y:1076
		{
			RubyVAL.genericBlock = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 222:
		//line parser.y:1078
		{
			RubyVAL.genericBlock = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 223:
		//line parser.y:1080
		{
			RubyVAL.genericBlock = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 224:
		//line parser.y:1082
		{
			RubyVAL.genericBlock = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 225:
		//line parser.y:1084
		{
			RubyVAL.genericBlock = ast.Block{Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 226:
		//line parser.y:1086
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			RubyVAL.genericBlock = ast.Block{Body: body}
		}
	case 227:
		//line parser.y:1094
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 228:
		//line parser.y:1096
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 229:
		//line parser.y:1098
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 230:
		//line parser.y:1100
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 231:
		//line parser.y:1103
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 232:
		//line parser.y:1110
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 233:
		//line parser.y:1118
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 234:
		//line parser.y:1125
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 235:
		//line parser.y:1132
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 236:
		//line parser.y:1139
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 237:
		//line parser.y:1146
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 238:
		//line parser.y:1153
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 239:
		//line parser.y:1160
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 240:
		//line parser.y:1168
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 241:
		//line parser.y:1175
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 242:
		//line parser.y:1184
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 243:
		//line parser.y:1191
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 244:
		//line parser.y:1198
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 245:
		//line parser.y:1205
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 246:
		//line parser.y:1212
		{
		}
	case 247:
		//line parser.y:1213
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 248:
		//line parser.y:1214
		{
		}
	case 249:
		//line parser.y:1217
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 250:
		//line parser.y:1220
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 251:
		//line parser.y:1227
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 252:
		//line parser.y:1236
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 253:
		//line parser.y:1238
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 254:
		//line parser.y:1251
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 255:
		//line parser.y:1270
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 256:
		//line parser.y:1284
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 257:
		//line parser.y:1286
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 258:
		//line parser.y:1289
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 259:
		//line parser.y:1291
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 260:
		//line parser.y:1294
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 261:
		//line parser.y:1296
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 262:
		//line parser.y:1299
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 263:
		//line parser.y:1306
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 264:
		//line parser.y:1308
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 265:
		//line parser.y:1311
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 266:
		//line parser.y:1319
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 267:
		//line parser.y:1323
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 268:
		//line parser.y:1325
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 269:
		//line parser.y:1327
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 270:
		//line parser.y:1331
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 271:
		//line parser.y:1333
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 272:
		//line parser.y:1335
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 273:
		//line parser.y:1339
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 274:
		//line parser.y:1348
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 275:
		//line parser.y:1350
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 276:
		//line parser.y:1352
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 277:
		//line parser.y:1355
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 278:
		//line parser.y:1357
		{
		}
	case 279:
		//line parser.y:1359
		{
		}
	case 280:
		//line parser.y:1361
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 281:
		//line parser.y:1363
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 282:
		//line parser.y:1366
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 283:
		//line parser.y:1373
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 284:
		//line parser.y:1381
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 285:
		//line parser.y:1388
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 286:
		//line parser.y:1396
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 287:
		//line parser.y:1404
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 288:
		//line parser.y:1411
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 289:
		//line parser.y:1418
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 290:
		//line parser.y:1425
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 291:
		//line parser.y:1433
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 292:
		//line parser.y:1436
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 293:
		//line parser.y:1438
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
		}
	case 294:
		//line parser.y:1441
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 295:
		//line parser.y:1443
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 296:
		//line parser.y:1445
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 297:
		//line parser.y:1447
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 298:
		//line parser.y:1450
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 299:
		//line parser.y:1452
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 300:
		//line parser.y:1454
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	case 301:
		//line parser.y:1457
		{
			RubyVAL.genericValue = ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
		}
	}
	goto Rubystack /* stack new state and value */
}

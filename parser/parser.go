//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SPECIAL_CHAR_REF = 57349
const CAPITAL_REF = 57350
const LPAREN = 57351
const RPAREN = 57352
const COMMA = 57353
const NamespacedModule = 57354
const DO = 57355
const DEF = 57356
const END = 57357
const IF = 57358
const ELSE = 57359
const ELSIF = 57360
const UNLESS = 57361
const CLASS = 57362
const MODULE = 57363
const FOR = 57364
const WHILE = 57365
const UNTIL = 57366
const BEGIN = 57367
const RESCUE = 57368
const ENSURE = 57369
const BREAK = 57370
const NEXT = 57371
const REDO = 57372
const RETRY = 57373
const RETURN = 57374
const YIELD = 57375
const AND = 57376
const OR = 57377
const LAMBDA = 57378
const CASE = 57379
const WHEN = 57380
const TRUE = 57381
const FALSE = 57382
const LESSTHAN = 57383
const GREATERTHAN = 57384
const EQUALTO = 57385
const BANG = 57386
const COMPLEMENT = 57387
const POSITIVE = 57388
const NEGATIVE = 57389
const STAR = 57390
const RANGE = 57391
const OR_EQUALS = 57392
const WHITESPACE = 57393
const NEWLINE = 57394
const SEMICOLON = 57395
const COLON = 57396
const DOT = 57397
const PIPE = 57398
const SLASH = 57399
const AMPERSAND = 57400
const QUESTIONMARK = 57401
const CARET = 57402
const LBRACKET = 57403
const RBRACKET = 57404
const LBRACE = 57405
const RBRACE = 57406
const DOLLARSIGN = 57407
const ATSIGN = 57408
const FILE_CONST_REF = 57409
const EOF = 57410

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"POSITIVE",
	"NEGATIVE",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1393

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 122,
	10, 110,
	11, 110,
	-2, 242,
	-1, 314,
	52, 13,
	64, 13,
	-2, 31,
	-1, 327,
	10, 110,
	11, 110,
	-2, 242,
}

const RubyNprod = 294
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 3798

var RubyAct = []int{

	293, 162, 5, 541, 412, 31, 411, 215, 378, 219,
	300, 227, 62, 217, 25, 13, 124, 299, 123, 281,
	52, 387, 92, 299, 363, 93, 2, 3, 111, 488,
	274, 268, 26, 98, 299, 468, 248, 132, 184, 134,
	185, 369, 4, 352, 299, 238, 466, 134, 112, 517,
	119, 121, 299, 129, 159, 160, 464, 333, 90, 89,
	376, 284, 462, 107, 108, 164, 165, 429, 333, 168,
	96, 97, 277, 271, 91, 99, 100, 101, 251, 85,
	333, 179, 180, 375, 95, 104, 102, 103, 106, 178,
	85, 85, 98, 189, 190, 147, 85, 178, 186, 114,
	48, 197, 115, 146, 256, 299, 202, 424, 370, 256,
	116, 207, 428, 146, 211, 212, 213, 177, 18, 353,
	529, 153, 107, 108, 111, 299, 223, 435, 154, 96,
	97, 332, 434, 113, 220, 409, 512, 109, 230, 245,
	247, 244, 149, 95, 112, 263, 264, 138, 266, 267,
	432, 272, 273, 259, 278, 279, 280, 230, 241, 255,
	153, 237, 239, 299, 138, 130, 209, 138, 138, 426,
	302, 303, 304, 305, 147, 261, 221, 318, 285, 242,
	301, 148, 299, 138, 138, 138, 222, 317, 150, 309,
	425, 230, 146, 158, 299, 138, 262, 138, 138, 340,
	138, 152, 138, 138, 138, 138, 225, 138, 98, 324,
	138, 325, 138, 138, 110, 141, 141, 141, 143, 143,
	143, 220, 424, 234, 218, 157, 138, 138, 138, 249,
	156, 345, 339, 150, 98, 471, 348, 138, 107, 108,
	151, 229, 234, 138, 120, 96, 97, 138, 76, 144,
	269, 144, 335, 275, 499, 130, 94, 282, 145, 95,
	229, 500, 155, 221, 107, 108, 539, 142, 142, 142,
	98, 96, 97, 222, 234, 138, 234, 92, 425, 457,
	93, 458, 415, 338, 92, 95, 98, 93, 143, 106,
	357, 241, 308, 138, 229, 390, 138, 391, 295, 384,
	107, 108, 392, 393, 400, 138, 138, 96, 97, 389,
	398, 130, 242, 523, 524, 109, 107, 108, 392, 388,
	522, 95, 395, 96, 97, 530, 175, 406, 368, 476,
	473, 109, 138, 138, 158, 220, 385, 95, 218, 407,
	385, 385, 338, 230, 351, 413, 92, 548, 414, 93,
	418, 130, 92, 138, 383, 93, 520, 92, 138, 138,
	93, 92, 239, 405, 93, 385, 71, 232, 77, 233,
	78, 357, 556, 76, 553, 552, 92, 221, 171, 93,
	441, 172, 289, 290, 216, 420, 253, 222, 452, 452,
	444, 448, 169, 297, 460, 170, 138, 79, 404, 367,
	87, 88, 138, 469, 252, 80, 81, 82, 83, 84,
	472, 138, 296, 299, 366, 367, 474, 138, 551, 510,
	553, 552, 74, 474, 75, 483, 86, 85, 234, 322,
	138, 323, 98, 547, 138, 130, 491, 480, 486, 485,
	494, 138, 497, 98, 440, 439, 229, 347, 348, 480,
	438, 138, 440, 439, 484, 501, 502, 187, 105, 188,
	482, 374, 107, 108, 118, 94, 117, 373, 372, 96,
	97, 362, 358, 107, 108, 354, 138, 138, 342, 508,
	96, 97, 514, 95, 341, 99, 100, 101, 109, 337,
	493, 518, 287, 138, 95, 104, 102, 103, 106, 286,
	214, 192, 306, 447, 138, 313, 521, 361, 294, 312,
	49, 1, 176, 61, 60, 59, 58, 98, 57, 474,
	56, 39, 234, 38, 37, 36, 51, 453, 20, 537,
	41, 42, 21, 15, 234, 452, 452, 452, 12, 545,
	481, 11, 24, 554, 534, 535, 536, 107, 108, 23,
	22, 27, 481, 558, 96, 97, 452, 139, 19, 10,
	452, 452, 452, 33, 234, 555, 138, 28, 95, 17,
	14, 40, 106, 16, 139, 559, 560, 139, 139, 138,
	561, 35, 509, 34, 29, 73, 30, 72, 0, 0,
	138, 0, 0, 139, 139, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 139, 139, 0,
	139, 138, 139, 139, 139, 139, 138, 139, 138, 0,
	139, 0, 139, 139, 98, 0, 0, 0, 98, 0,
	138, 0, 0, 235, 130, 550, 139, 139, 139, 250,
	0, 0, 0, 98, 0, 0, 0, 139, 0, 0,
	0, 0, 235, 139, 107, 108, 0, 139, 107, 108,
	270, 96, 97, 276, 0, 96, 97, 283, 0, 0,
	0, 0, 0, 107, 108, 95, 0, 0, 0, 95,
	96, 97, 492, 0, 235, 139, 235, 0, 32, 71,
	136, 77, 137, 122, 95, 128, 76, 134, 0, 0,
	0, 371, 0, 139, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 139, 0, 0, 0,
	79, 0, 0, 87, 88, 0, 0, 126, 80, 81,
	82, 83, 84, 0, 127, 133, 0, 0, 0, 0,
	0, 0, 139, 139, 0, 125, 0, 135, 0, 86,
	85, 0, 133, 0, 0, 133, 133, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 98, 0, 139, 139,
	0, 133, 133, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 133, 133, 0, 133, 0,
	133, 133, 133, 133, 0, 133, 107, 108, 133, 0,
	133, 133, 0, 96, 97, 0, 139, 0, 0, 0,
	0, 133, 139, 0, 133, 133, 133, 95, 0, 0,
	0, 139, 0, 0, 334, 133, 0, 139, 0, 0,
	133, 133, 0, 0, 0, 133, 0, 0, 235, 0,
	139, 98, 0, 0, 139, 98, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 133, 314, 133, 0, 71, 316, 77, 137,
	78, 107, 108, 76, 0, 107, 108, 0, 96, 97,
	0, 133, 96, 97, 133, 0, 139, 139, 0, 0,
	0, 329, 95, 133, 133, 0, 95, 79, 528, 0,
	87, 88, 0, 139, 0, 80, 81, 82, 83, 84,
	0, 0, 0, 299, 139, 0, 0, 256, 0, 0,
	133, 133, 74, 0, 75, 311, 86, 85, 107, 108,
	0, 402, 235, 0, 0, 96, 97, 0, 0, 0,
	0, 133, 0, 0, 235, 0, 314, 133, 0, 95,
	0, 0, 71, 136, 77, 137, 122, 531, 0, 76,
	134, 107, 108, 0, 0, 0, 0, 0, 96, 97,
	0, 0, 0, 0, 235, 0, 139, 0, 0, 0,
	0, 0, 95, 79, 133, 0, 87, 88, 0, 139,
	133, 80, 81, 82, 83, 84, 0, 0, 0, 133,
	139, 0, 0, 0, 0, 133, 0, 0, 258, 0,
	135, 0, 86, 85, 0, 0, 133, 0, 133, 0,
	0, 139, 133, 0, 0, 0, 139, 0, 139, 133,
	0, 0, 0, 9, 0, 0, 0, 0, 0, 133,
	139, 0, 0, 0, 0, 0, 0, 0, 71, 136,
	77, 137, 122, 0, 0, 76, 134, 0, 0, 0,
	0, 0, 0, 0, 133, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	131, 133, 87, 88, 0, 0, 126, 80, 81, 82,
	83, 84, 133, 0, 0, 0, 0, 163, 0, 0,
	166, 163, 0, 0, 258, 0, 135, 0, 86, 85,
	133, 0, 0, 0, 0, 0, 181, 182, 183, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 191, 0,
	193, 194, 0, 196, 0, 198, 199, 200, 201, 0,
	203, 0, 0, 206, 0, 208, 210, 0, 0, 0,
	0, 0, 133, 0, 133, 0, 228, 0, 0, 240,
	243, 246, 0, 0, 0, 0, 0, 133, 0, 0,
	131, 0, 0, 0, 0, 228, 260, 0, 133, 0,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 232, 77, 233, 78, 0, 133,
	76, 0, 0, 0, 133, 0, 133, 307, 315, 228,
	0, 50, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 79, 0, 131, 87, 88, 328,
	0, 0, 80, 81, 82, 83, 84, 0, 330, 331,
	299, 0, 0, 0, 0, 0, 489, 0, 0, 74,
	0, 75, 0, 86, 85, 0, 0, 0, 140, 0,
	0, 0, 0, 0, 0, 349, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 140, 140,
	0, 0, 0, 0, 0, 0, 356, 0, 0, 0,
	0, 315, 365, 173, 140, 140, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 140, 140,
	0, 140, 0, 140, 140, 140, 140, 0, 140, 0,
	0, 140, 0, 140, 140, 0, 0, 0, 0, 386,
	0, 0, 0, 0, 236, 163, 0, 140, 140, 140,
	0, 0, 0, 0, 396, 0, 0, 0, 140, 0,
	131, 0, 0, 236, 140, 0, 288, 0, 140, 0,
	167, 228, 0, 408, 0, 0, 0, 356, 0, 174,
	0, 0, 0, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 422, 236, 140, 236, 0, 0,
	0, 0, 195, 71, 232, 77, 233, 78, 0, 0,
	76, 204, 205, 0, 140, 0, 0, 140, 0, 436,
	437, 0, 161, 0, 0, 0, 140, 140, 0, 0,
	0, 0, 0, 0, 79, 0, 163, 87, 88, 257,
	0, 0, 80, 81, 82, 83, 84, 470, 0, 0,
	299, 0, 0, 140, 140, 0, 478, 0, 0, 74,
	0, 75, 0, 86, 85, 479, 0, 0, 0, 0,
	298, 0, 0, 0, 140, 0, 0, 479, 0, 140,
	140, 0, 321, 0, 0, 0, 224, 0, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 507, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 516, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 516, 0, 0, 0, 0, 140, 0,
	0, 0, 350, 0, 0, 0, 0, 0, 0, 236,
	0, 140, 0, 0, 527, 140, 355, 0, 0, 131,
	0, 532, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 140, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 0, 0, 0, 0, 0,
	343, 0, 0, 0, 0, 0, 0, 140, 140, 0,
	0, 0, 0, 0, 0, 71, 136, 77, 137, 122,
	394, 0, 76, 134, 140, 0, 397, 399, 401, 0,
	0, 0, 360, 0, 364, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 87,
	88, 0, 0, 236, 80, 81, 82, 83, 84, 0,
	0, 0, 421, 0, 403, 236, 381, 382, 0, 0,
	0, 258, 0, 135, 0, 86, 85, 0, 431, 0,
	0, 433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 140, 364, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 463,
	140, 0, 465, 0, 467, 0, 195, 0, 0, 0,
	0, 140, 419, 0, 71, 136, 77, 137, 78, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	430, 0, 140, 0, 0, 0, 0, 140, 490, 140,
	0, 0, 0, 0, 0, 79, 0, 442, 87, 88,
	0, 140, 446, 80, 81, 82, 83, 84, 459, 0,
	461, 299, 0, 0, 0, 506, 0, 423, 0, 0,
	74, 0, 75, 0, 86, 85, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 136, 77, 137, 327,
	0, 0, 76, 134, 0, 0, 0, 495, 496, 526,
	0, 0, 0, 0, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 503, 79, 505, 0, 87,
	88, 0, 195, 326, 80, 81, 82, 83, 84, 0,
	0, 0, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 135, 557, 86, 85, 0, 0, 0,
	0, 519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 533, 0, 0,
	381, 382, 71, 46, 77, 47, 78, 0, 0, 76,
	0, 43, 544, 454, 543, 542, 455, 44, 45, 0,
	64, 65, 55, 0, 0, 68, 69, 0, 70, 67,
	63, 0, 0, 79, 66, 0, 87, 88, 0, 0,
	0, 80, 81, 82, 83, 84, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 86, 85, 71, 46, 77, 47, 78, 0,
	0, 76, 0, 43, 540, 454, 543, 542, 455, 44,
	45, 0, 64, 65, 55, 0, 0, 68, 69, 0,
	70, 67, 63, 0, 0, 79, 66, 0, 87, 88,
	0, 0, 0, 80, 81, 82, 83, 84, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 86, 85, 71, 46, 77, 47,
	78, 0, 0, 76, 0, 43, 443, 53, 380, 379,
	54, 44, 45, 0, 64, 65, 55, 0, 0, 68,
	69, 0, 70, 67, 63, 0, 0, 79, 66, 0,
	87, 88, 0, 0, 0, 80, 81, 82, 83, 84,
	0, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 86, 85, 71, 46,
	77, 47, 78, 0, 0, 76, 0, 43, 377, 53,
	380, 379, 54, 44, 45, 0, 64, 65, 55, 0,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 0, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	71, 46, 77, 47, 78, 0, 0, 76, 0, 43,
	0, 53, 0, 0, 54, 44, 45, 0, 64, 65,
	55, 0, 0, 68, 69, 0, 70, 67, 63, 0,
	0, 79, 66, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 0, 6, 7, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	86, 85, 0, 8, 71, 46, 77, 47, 78, 0,
	0, 76, 0, 43, 513, 53, 0, 0, 54, 44,
	45, 0, 64, 65, 55, 385, 0, 68, 69, 0,
	70, 67, 63, 0, 0, 79, 66, 0, 87, 88,
	0, 0, 0, 80, 81, 82, 83, 84, 0, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 86, 85, 71, 46, 77, 47,
	78, 0, 0, 76, 0, 43, 417, 53, 0, 0,
	54, 44, 45, 0, 64, 65, 55, 385, 0, 68,
	69, 0, 70, 67, 63, 0, 0, 79, 66, 0,
	87, 88, 0, 0, 0, 80, 81, 82, 83, 84,
	0, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 86, 85, 71, 46,
	77, 47, 78, 0, 0, 76, 0, 43, 410, 53,
	0, 0, 54, 44, 45, 0, 64, 65, 55, 385,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 0, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	71, 46, 77, 47, 78, 0, 0, 76, 0, 43,
	546, 454, 0, 0, 455, 44, 45, 0, 64, 65,
	55, 0, 0, 68, 69, 0, 70, 67, 63, 0,
	0, 79, 66, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	86, 85, 71, 46, 77, 47, 78, 0, 0, 76,
	0, 43, 525, 53, 0, 0, 54, 44, 45, 0,
	64, 65, 55, 0, 0, 68, 69, 0, 70, 67,
	63, 0, 0, 79, 66, 0, 87, 88, 0, 0,
	0, 80, 81, 82, 83, 84, 0, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 86, 85, 71, 46, 77, 47, 78, 0,
	0, 76, 0, 43, 504, 53, 0, 0, 54, 44,
	45, 0, 64, 65, 55, 0, 0, 68, 69, 0,
	70, 67, 63, 0, 0, 79, 66, 0, 87, 88,
	0, 0, 0, 80, 81, 82, 83, 84, 0, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 86, 85, 71, 46, 77, 47,
	78, 0, 0, 76, 0, 43, 0, 53, 0, 0,
	54, 44, 45, 0, 64, 65, 55, 0, 0, 68,
	69, 0, 70, 67, 63, 0, 0, 79, 66, 0,
	87, 88, 0, 0, 0, 80, 81, 82, 83, 84,
	0, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 487, 86, 85, 71, 46,
	77, 47, 78, 0, 0, 76, 0, 43, 477, 53,
	0, 0, 54, 44, 45, 0, 64, 65, 55, 0,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 0, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	71, 46, 77, 47, 78, 0, 0, 76, 0, 43,
	456, 454, 0, 0, 455, 44, 45, 0, 64, 65,
	55, 0, 0, 68, 69, 0, 70, 67, 63, 0,
	0, 79, 66, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	86, 85, 71, 46, 77, 47, 78, 0, 0, 76,
	0, 43, 449, 454, 0, 0, 455, 44, 45, 0,
	64, 65, 55, 0, 0, 68, 69, 0, 70, 67,
	63, 0, 0, 79, 66, 0, 87, 88, 0, 0,
	0, 80, 81, 82, 83, 84, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 86, 85, 71, 46, 77, 47, 78, 0,
	0, 76, 0, 43, 445, 53, 0, 0, 54, 44,
	45, 0, 64, 65, 55, 0, 0, 68, 69, 0,
	70, 67, 63, 0, 0, 79, 66, 0, 87, 88,
	0, 0, 0, 80, 81, 82, 83, 84, 0, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 86, 85, 71, 46, 77, 47,
	78, 0, 0, 76, 0, 43, 427, 53, 0, 0,
	54, 44, 45, 0, 64, 65, 55, 0, 0, 68,
	69, 0, 70, 67, 63, 0, 0, 79, 66, 0,
	87, 88, 0, 0, 0, 80, 81, 82, 83, 84,
	0, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 86, 85, 71, 46,
	77, 47, 78, 0, 0, 76, 0, 43, 359, 53,
	0, 0, 54, 44, 45, 0, 64, 65, 55, 0,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 0, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	71, 46, 77, 47, 78, 0, 0, 76, 0, 43,
	346, 53, 0, 0, 54, 44, 45, 0, 64, 65,
	55, 0, 0, 68, 69, 0, 70, 67, 63, 0,
	0, 79, 66, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 75, 0,
	86, 85, 71, 46, 77, 47, 78, 0, 0, 76,
	0, 43, 344, 53, 0, 0, 54, 44, 45, 0,
	64, 65, 55, 0, 0, 68, 69, 0, 70, 67,
	63, 0, 0, 79, 66, 0, 87, 88, 0, 0,
	0, 80, 81, 82, 83, 84, 0, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 0, 86, 85, 71, 46, 77, 47, 78, 0,
	0, 76, 0, 43, 0, 454, 0, 0, 455, 44,
	45, 0, 64, 65, 55, 0, 0, 68, 69, 0,
	70, 67, 63, 0, 0, 79, 66, 0, 87, 88,
	0, 0, 0, 80, 81, 82, 83, 84, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 86, 85, 71, 46, 77, 47,
	78, 0, 0, 76, 0, 43, 0, 53, 0, 0,
	54, 44, 45, 0, 64, 65, 55, 0, 0, 68,
	69, 0, 70, 67, 63, 0, 0, 79, 66, 0,
	87, 88, 0, 0, 0, 80, 81, 82, 83, 84,
	0, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 86, 85, 71, 46,
	77, 47, 78, 320, 0, 76, 0, 43, 0, 53,
	0, 0, 54, 44, 45, 0, 64, 65, 55, 0,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	71, 46, 77, 47, 78, 0, 0, 76, 0, 43,
	0, 53, 0, 0, 54, 44, 45, 0, 64, 65,
	55, 0, 0, 68, 69, 0, 70, 67, 63, 0,
	0, 79, 66, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 0, 299, 71, 46,
	77, 47, 78, 0, 0, 76, 74, 43, 75, 53,
	86, 85, 54, 44, 45, 0, 64, 65, 55, 0,
	0, 68, 69, 0, 70, 67, 63, 0, 0, 79,
	66, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 71, 316, 77, 137, 78, 0, 0, 76,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 87, 88, 0, 0,
	0, 80, 81, 82, 83, 84, 0, 0, 0, 299,
	71, 232, 77, 233, 78, 0, 0, 76, 74, 0,
	75, 311, 86, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 0, 0, 0, 299, 71, 136,
	77, 137, 78, 310, 0, 76, 74, 0, 75, 0,
	86, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 86, 85,
	71, 136, 77, 137, 78, 0, 0, 76, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 87, 88, 0, 0, 0, 80,
	81, 82, 83, 84, 71, 232, 77, 233, 78, 0,
	0, 76, 0, 0, 0, 0, 74, 0, 135, 0,
	86, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 87, 88,
	0, 0, 0, 80, 81, 82, 83, 84, 71, 136,
	77, 137, 122, 0, 0, 76, 134, 231, 0, 0,
	74, 0, 75, 0, 86, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 87, 88, 0, 0, 0, 80, 81, 82,
	83, 84, 71, 136, 77, 137, 78, 0, 0, 76,
	0, 0, 0, 0, 258, 0, 135, 0, 86, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 87, 88, 0, 0,
	0, 80, 81, 82, 83, 84, 71, 515, 77, 137,
	78, 0, 0, 76, 0, 0, 0, 0, 74, 0,
	75, 0, 86, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	87, 88, 0, 0, 0, 80, 81, 82, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 86, 85,
}
var RubyPact = []int{

	-26, 2125, -1000, -1000, -1000, 6, -1000, -1000, -1000, 439,
	-1000, -1000, -1000, 195, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 83, -1000, 55, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 460, 236, 236, 684, 208, 131, 190,
	78, 219, 182, 3353, 3353, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3687, 3353, 3353, 3687, 3687, 376, 362,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 317, -1000, 26,
	3353, 3353, 3687, 3687, 3687, 32, 451, -1000, -1000, -1000,
	-1000, -1000, 3353, 3353, 3687, 495, 3687, 3687, -1000, 3687,
	3353, 3687, 3687, 3687, 3687, 3353, 3687, -1000, -1000, 3687,
	3353, 3687, 3687, 3353, 3353, 3353, 494, 329, 215, 165,
	276, -1000, 3599, 26, 34, 3687, 3687, 3687, 30, 393,
	375, 29, -1000, -13, 48, -1000, 3643, 207, 42, -1000,
	-1000, 3599, 3687, -1000, 3353, 3353, 3687, 3353, 3353, 25,
	3353, 3353, 24, 3353, 3353, 3353, 13, 493, 486, 345,
	330, 3181, 287, 841, 360, 341, 841, 142, 287, 3353,
	3353, 3353, 3353, 3445, 3397, 3599, 3243, -1000, -1000, 345,
	345, 841, 841, 841, -1000, -1000, 423, -1000, -1000, 345,
	345, 841, 1780, 841, 841, 3493, 841, 345, 841, 841,
	841, 841, 345, 837, 3493, 3493, 841, 345, 841, 69,
	762, 345, 345, 345, 26, -1000, 483, 331, 128, -1000,
	156, 478, 472, -1000, 3057, 236, 2995, 437, 29, -1000,
	-1000, 3687, 1043, 206, 52, 145, 117, -1000, -1000, -1000,
	282, -19, 57, 230, -1000, -1000, 513, -1000, -1000, -1000,
	-1000, 469, 3555, 466, 2933, -1000, 465, 861, 3687, 404,
	266, -21, 46, 345, 345, 639, 345, 345, -1000, -1000,
	-1000, 462, 345, 345, -1000, -1000, -1000, 461, 345, 345,
	345, -1000, -1000, -1000, 455, 323, 22, -1, 2063, -1000,
	-1000, -1000, -1000, 345, 339, 3687, -1000, -1000, 142, -1000,
	280, 3687, 345, 345, 345, 345, 311, 29, -1000, -1000,
	3687, -1000, 299, 293, -13, 927, 1590, 388, 345, -1000,
	-1000, 53, -1000, -1000, 34, 26, 3353, 3599, 841, 3687,
	841, 841, -1000, 3555, 92, -1000, 2313, 215, 128, 272,
	3687, -1000, -1000, 2251, -1000, -1000, -1000, 26, -1000, 841,
	1699, 179, -1000, -1000, -1000, 111, 841, -1000, -1000, -1000,
	2871, 56, -1000, -1000, 3181, 88, -1000, -1000, 89, -1000,
	-1000, 84, -1000, -1000, -1000, 3687, 3687, -1000, 435, 3353,
	-1000, 2001, 2809, -1000, -1000, 236, 841, 2747, 2685, 264,
	-1000, -1000, 3687, 287, 0, -1000, 841, -8, -1000, -18,
	-1000, -29, 3353, 3687, -1000, -1000, 345, 225, 841, 3353,
	-1000, 315, -1000, -1000, -1000, -1000, 841, -1000, 314, 2623,
	-1000, 1388, 841, 454, 3353, 448, 433, -1000, -1000, 432,
	2561, -35, 64, 1188, -1000, 3353, 620, 428, -1000, 3353,
	-1000, 345, 3181, -1000, 427, -1000, 3181, 250, -1000, -1000,
	-1000, -1000, 345, -1000, 3353, 3353, -1000, -1000, -1000, 2499,
	287, 3181, -1000, 361, -1000, 3493, -1000, 130, -1000, 345,
	841, -1000, 345, -1000, -1000, 2189, -1000, -1000, 3731, 29,
	-1000, -1000, -1000, 345, -12, -1000, -1000, -1000, -1000, 3687,
	3305, 345, 267, -1000, 345, 3181, 3181, -1000, 3181, 350,
	236, 268, 261, 2437, -1000, 3181, 73, 29, -1000, -1000,
	3687, 894, 66, -1000, 310, 947, 841, 3687, 345, 3181,
	-1000, -1000, -1000, -1000, -1000, -1000, 73, 841, 3353, 3687,
	-1000, -1000, 204, 3181, 1939, 1877, 2375, 336, 624, -1000,
	-1000, 403, 3353, -1000, -1000, 357, -1000, -1000, -1000, 73,
	-1000, -1000, 3353, -1000, 345, 3119, -1000, 73, 345, 3119,
	3119, 3119,
}
var RubyPgo = []int{

	0, 0, 587, 586, 32, 37, 585, 584, 583, 1211,
	581, 4, 12, 573, 571, 15, 570, 569, 1033, 567,
	510, 688, 563, 559, 558, 551, 550, 549, 542, 118,
	541, 9, 100, 538, 533, 5, 10, 532, 531, 530,
	14, 528, 527, 3, 526, 525, 524, 523, 521, 520,
	518, 516, 515, 514, 513, 1356, 512, 6, 18, 24,
	8, 511, 7, 509, 21, 508, 11, 507, 1, 505,
	53, 20, 16, 13, 503, 502, 433, 1293,
}
var RubyR1 = []int{

	0, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 76, 76, 77, 77, 55, 55, 55, 55, 19,
	19, 19, 19, 19, 19, 19, 19, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 29, 29, 29, 29, 29, 29, 29, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 40, 14,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 22, 58, 58, 58, 58, 58, 58, 68, 68,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 72,
	72, 72, 72, 72, 70, 70, 70, 23, 23, 23,
	23, 23, 23, 62, 62, 73, 73, 73, 31, 31,
	31, 31, 30, 30, 33, 35, 35, 35, 15, 15,
	15, 15, 15, 15, 15, 16, 16, 71, 71, 34,
	34, 34, 34, 34, 34, 34, 9, 9, 32, 32,
	20, 20, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 2, 6,
	7, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	3, 3, 3, 3, 63, 63, 69, 69, 69, 5,
	5, 5, 5, 59, 67, 67, 67, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 60, 60,
	60, 60, 56, 56, 56, 8, 17, 11, 11, 11,
	74, 74, 65, 65, 57, 57, 24, 24, 25, 26,
	26, 28, 28, 28, 27, 27, 27, 12, 41, 41,
	64, 64, 64, 64, 64, 42, 42, 42, 42, 42,
	43, 43, 43, 43, 39, 38, 10, 37, 37, 37,
	37, 36, 36, 4,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 5, 1, 4, 4, 2, 3, 3, 4, 4,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 6, 7, 6,
	6, 4, 3, 7, 1, 5, 1, 3, 1, 3,
	0, 1, 1, 1, 2, 4, 4, 4, 5, 1,
	1, 4, 2, 5, 1, 3, 3, 5, 6, 7,
	8, 5, 6, 1, 3, 0, 1, 3, 1, 2,
	3, 2, 4, 6, 4, 1, 2, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 9, 6, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 4, 3, 3, 3, 4,
	3, 3, 3, 4, 3, 3, 3, 4, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 1, 1,
	5, 0, 1, 1, 1, 2, 4, 4, 4, 5,
	3, 5, 5, 5, 3, 7, 3, 7, 8, 3,
	4, 5, 5, 3, 0, 1, 3, 4, 5, 3,
	3, 3, 3, 3, 5, 6, 5, 3, 4, 3,
	3, 2, 0, 2, 2, 3, 4, 2, 3, 5,
	1, 3, 0, 2, 1, 2, 2, 1, 1, 2,
	1, 1, 3, 3, 1, 3, 3, 5, 5, 5,
	0, 2, 2, 2, 2, 5, 6, 5, 6, 5,
	4, 3, 3, 2, 4, 4, 2, 5, 7, 4,
	6, 4, 5, 3,
}
var RubyChk = []int{

	-1000, -61, 52, 53, 68, -1, 52, 53, 68, -18,
	-23, -30, -33, -15, -16, -34, -13, -17, -29, -24,
	-41, -37, -26, -27, -28, -40, -4, -25, -19, -7,
	-3, -35, -21, -22, -8, -10, -45, -46, -47, -48,
	-14, -39, -38, 14, 20, 21, 6, 8, -32, -20,
	-9, -44, -71, 16, 19, 25, -49, -50, -51, -52,
	-53, -54, -12, 33, 23, 24, 37, 32, 28, 29,
	31, 5, -2, -6, 61, 63, 12, 7, 9, 36,
	44, 45, 46, 47, 48, 66, 65, 39, 40, 53,
	52, 68, 16, 19, 26, 55, 41, 42, 4, 46,
	47, 48, 57, 58, 56, 19, 59, 34, 35, 49,
	19, 41, 61, 50, 16, 19, 55, 6, 4, -35,
	8, -35, 9, -58, -72, 61, 43, 50, 11, -70,
	-29, -18, -5, -21, 13, 63, 6, 8, -32, -20,
	-9, 9, 61, 12, 43, 50, 61, 43, 50, 11,
	43, 50, 11, 43, 50, 43, 11, 43, 11, -1,
	-1, -55, -68, -18, -1, -1, -18, -77, -68, 16,
	19, 16, 19, -77, -77, 9, -56, -5, 63, -1,
	-1, -18, -18, -18, 6, 8, 66, 6, 8, -1,
	-1, -18, 6, -18, -18, -77, -18, -1, -18, -18,
	-18, -18, -1, -18, -77, -77, -18, -1, -18, -70,
	-18, -1, -1, -1, 6, -62, 55, -73, 9, -31,
	6, 48, 58, -62, -55, 41, -55, -66, -18, -29,
	-15, 58, 6, 8, -32, -20, -9, -5, 11, -5,
	-18, -4, -70, -18, -40, -12, -18, -12, 6, -32,
	-20, 48, 11, 11, -55, -59, 56, -77, 61, -66,
	-18, -4, -70, -1, -1, -18, -1, -1, 6, -32,
	-20, 48, -1, -1, 6, -32, -20, 48, -1, -1,
	-1, 6, -32, -20, 48, -71, 6, 6, -55, 52,
	53, 52, 53, -1, -65, 11, 52, 52, -77, 52,
	-36, 38, -1, -1, -1, -1, -75, -18, -29, -15,
	58, 64, -63, -69, -21, -18, 6, -66, -1, 53,
	10, -77, 6, 8, -72, -58, 43, 9, -18, 54,
	-18, -18, 62, 11, 62, -5, -55, 6, 11, -73,
	43, 6, 6, -55, 15, -35, 15, 10, 11, -18,
	-77, 62, 62, 62, 6, -77, -18, -5, 6, 15,
	-55, -67, 6, -59, -55, -18, 10, 11, 62, 62,
	62, 62, 6, 6, 6, 61, 61, 15, -60, 18,
	17, -55, -55, 15, -11, 26, -18, -64, -64, -36,
	15, 17, 38, -68, -77, 11, -18, -77, 11, -77,
	11, -77, 4, 54, 10, -5, -1, -66, -18, 43,
	15, -57, -11, -62, -31, 10, -18, 15, -57, -55,
	-5, -77, -18, 58, 43, 11, 58, 15, 56, 11,
	-55, -77, 62, -77, 43, 43, -18, -18, 15, 18,
	17, -1, -55, 15, -60, 15, -55, -74, -35, 15,
	52, 53, -1, -42, 16, 19, 15, 15, 17, -55,
	-68, -55, 62, -77, 64, -77, 64, -77, 64, -1,
	-18, 10, -1, 15, -11, -55, 15, 15, 58, -18,
	-15, -29, 6, -1, 6, 6, 6, 64, 64, 58,
	-77, -1, 62, 62, -1, -55, -55, 15, -55, 4,
	11, -1, -1, -55, 15, -55, -77, -18, -15, -29,
	58, -18, 6, 15, -57, 6, -18, 61, -1, -55,
	6, -35, 52, 52, 53, 15, -77, -18, 4, 54,
	15, 10, -18, -55, -64, -64, -64, -1, -18, 62,
	15, -43, 18, 17, 15, -43, 15, -76, 11, -77,
	11, 15, 18, 17, -1, -64, 15, -77, -1, -64,
	-64, -64,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 0, 0, 0, 20, 21, 22, 23,
	24, 0, 0, 0, 0, 15, 42, 43, 44, 45,
	46, 47, 48, 257, 0, 0, 13, 260, 264, 261,
	258, 19, 25, 26, 13, 13, 147, 72, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 5,
	6, 7, 0, 0, 0, 0, 0, 0, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 13, 13, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 135, 15,
	145, 15, -2, 75, 84, 13, 0, 0, 0, 104,
	106, 119, 120, 31, 15, 13, 20, 21, 22, 23,
	24, 110, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 15,
	0, 252, 256, 108, 0, 0, 13, 0, 259, 0,
	0, 0, 0, 201, 0, 110, 0, 286, 13, 188,
	189, 190, 191, 69, 168, 169, 0, 166, 167, 229,
	237, 68, 77, 85, 87, 0, 192, 193, 194, 195,
	196, 197, 231, 0, 0, 0, 293, 233, 86, 0,
	124, 165, 230, 232, 81, 15, 0, 133, 135, 136,
	138, 0, 0, 15, 0, 0, 0, 0, 111, 112,
	113, 0, 20, 21, 22, 23, 24, 76, 13, 122,
	124, 0, 0, 148, 149, 150, 159, 160, 172, 173,
	174, 0, 13, 0, 0, 15, 224, 15, 13, 0,
	124, 0, 0, 151, 161, 0, 152, 162, 176, 177,
	178, 0, 153, 163, 180, 181, 182, 0, 154, 164,
	155, 184, 185, 186, 0, 156, 0, 0, 0, 15,
	15, 16, 17, 18, 0, 0, 270, 270, 0, 14,
	0, 0, 265, 266, 262, 263, 13, 202, 203, 204,
	0, 210, 13, 13, -2, 0, 20, 0, 243, 244,
	245, 15, 170, 171, 78, 79, 0, -2, 101, 0,
	284, 285, 95, 0, 96, 82, 0, 135, 0, 0,
	0, 139, 141, 0, 142, 15, 144, 70, 13, 114,
	0, 88, 91, 93, 175, 0, 125, 126, 107, 219,
	0, 0, 225, 15, 13, 124, 74, 13, 89, 92,
	94, 90, 179, 183, 187, 0, 0, 227, 0, 0,
	15, 0, 0, 246, 253, 15, 109, 0, 0, 0,
	289, 15, 0, 15, 0, 13, 205, 0, 13, 0,
	13, 0, 13, 0, 73, 80, 83, 0, 267, 0,
	127, 0, 254, 15, 137, 134, 140, 131, 0, 0,
	71, 0, 121, 0, 0, 0, 0, 220, 223, 0,
	0, 0, 88, 0, 13, 0, 0, 0, 228, 0,
	15, 15, 241, 234, 0, 236, 247, 15, 250, 268,
	271, 272, 273, 274, 0, 0, 269, 287, 15, 0,
	15, 13, 200, 0, 211, 0, 212, 0, 213, 214,
	216, 102, 100, 128, 255, 0, 132, 143, 0, 115,
	116, 117, 123, 97, 0, 105, 226, 221, 222, 0,
	0, 99, 0, 158, 15, 239, 240, 235, 248, 0,
	0, 15, 0, 0, 290, 13, 291, 206, 207, 208,
	0, 0, 0, 129, 0, 20, 118, 0, 98, 238,
	15, 251, 270, 15, 15, 288, 292, 209, 13, 0,
	130, 103, 0, 249, 0, 0, 0, 11, 13, 157,
	275, 0, 0, 270, 277, 0, 279, 215, 12, 217,
	13, 276, 0, 270, 270, 283, 278, 218, 270, 281,
	282, 280,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:207
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:209
		{
		}
	case 3:
		//line parser.y:211
		{
		}
	case 4:
		//line parser.y:213
		{
		}
	case 5:
		//line parser.y:215
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:217
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:219
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:225
		{
		}
	case 11:
		//line parser.y:227
		{
		}
	case 12:
		//line parser.y:228
		{
		}
	case 13:
		//line parser.y:230
		{
		}
	case 14:
		//line parser.y:231
		{
		}
	case 15:
		//line parser.y:234
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:236
		{
		}
	case 17:
		//line parser.y:238
		{
		}
	case 18:
		//line parser.y:240
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		//line parser.y:252
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 69:
		//line parser.y:255
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 70:
		//line parser.y:258
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 71:
		//line parser.y:265
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 72:
		//line parser.y:272
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 73:
		//line parser.y:276
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 74:
		//line parser.y:283
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 75:
		//line parser.y:290
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 76:
		//line parser.y:297
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 77:
		//line parser.y:304
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 78:
		//line parser.y:311
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 79:
		//line parser.y:319
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 80:
		//line parser.y:327
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 81:
		//line parser.y:335
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 82:
		//line parser.y:343
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 83:
		//line parser.y:351
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 84:
		//line parser.y:362
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 85:
		//line parser.y:369
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 86:
		//line parser.y:377
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 87:
		//line parser.y:385
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 88:
		//line parser.y:395
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 89:
		//line parser.y:403
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 90:
		//line parser.y:411
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 91:
		//line parser.y:419
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 92:
		//line parser.y:427
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 93:
		//line parser.y:435
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 94:
		//line parser.y:443
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 95:
		//line parser.y:451
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 96:
		//line parser.y:459
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 97:
		//line parser.y:469
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:477
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 99:
		//line parser.y:488
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 100:
		//line parser.y:496
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 101:
		//line parser.y:506
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 102:
		//line parser.y:516
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 103:
		//line parser.y:518
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 104:
		//line parser.y:520
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 105:
		//line parser.y:522
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 106:
		//line parser.y:524
		{
			RubyVAL.genericSlice = []ast.Node{RubyS[Rubypt-0].genericValue}
		}
	case 107:
		//line parser.y:526
		{
			RubyVAL.genericSlice = []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}
		}
	case 108:
		//line parser.y:529
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 109:
		//line parser.y:531
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 110:
		//line parser.y:533
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 111:
		//line parser.y:535
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 112:
		//line parser.y:537
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:539
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:541
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 115:
		//line parser.y:548
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 116:
		//line parser.y:550
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:552
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:554
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 119:
		//line parser.y:563
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:565
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:567
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:569
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:571
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 124:
		//line parser.y:574
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:576
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:578
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:582
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 128:
		//line parser.y:590
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:599
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:608
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:618
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 132:
		//line parser.y:626
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 133:
		//line parser.y:637
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 134:
		//line parser.y:639
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 135:
		//line parser.y:641
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 136:
		//line parser.y:643
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:645
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:648
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 139:
		//line parser.y:650
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 140:
		//line parser.y:652
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 141:
		//line parser.y:654
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 142:
		//line parser.y:658
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name: RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 143:
		//line parser.y:665
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 144:
		//line parser.y:675
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 145:
		//line parser.y:684
		{
			RubyVAL.genericValue = ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
		}
	case 146:
		//line parser.y:691
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(string)}, "")
			pieces := strings.Split(fullName, "::")

			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.Join(pieces[:len(pieces)-1], "::"),
				IsGlobalNamespace: false,
			}
		}
	case 147:
		//line parser.y:703
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(string), "::")
			namespace := strings.Join(pieces[:len(pieces)-1], "::")
			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.TrimPrefix(namespace, "::"),
				IsGlobalNamespace: true,
			}
		}
	case 148:
		//line parser.y:714
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 149:
		//line parser.y:721
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 150:
		//line parser.y:725
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 151:
		//line parser.y:729
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 152:
		//line parser.y:736
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 153:
		//line parser.y:743
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 154:
		//line parser.y:750
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 155:
		//line parser.y:758
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 156:
		//line parser.y:765
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 157:
		//line parser.y:773
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 158:
		//line parser.y:788
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 159:
		//line parser.y:794
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 160:
		//line parser.y:801
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 161:
		//line parser.y:805
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:812
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 163:
		//line parser.y:819
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 164:
		//line parser.y:826
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 165:
		//line parser.y:833
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 166:
		//line parser.y:836
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 167:
		//line parser.y:838
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 168:
		//line parser.y:841
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:843
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:846
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 171:
		//line parser.y:848
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 172:
		//line parser.y:851
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 173:
		//line parser.y:853
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 174:
		//line parser.y:855
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 175:
		//line parser.y:857
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 176:
		//line parser.y:860
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:862
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 178:
		//line parser.y:864
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 179:
		//line parser.y:866
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 180:
		//line parser.y:869
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:871
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 182:
		//line parser.y:873
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 183:
		//line parser.y:875
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 184:
		//line parser.y:878
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 185:
		//line parser.y:880
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 186:
		//line parser.y:882
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 187:
		//line parser.y:884
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 188:
		//line parser.y:887
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:888
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:889
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 191:
		//line parser.y:890
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 192:
		//line parser.y:893
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 193:
		//line parser.y:902
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 194:
		//line parser.y:911
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 195:
		//line parser.y:920
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:929
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 197:
		//line parser.y:938
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 198:
		//line parser.y:946
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 199:
		//line parser.y:947
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 200:
		//line parser.y:949
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 201:
		//line parser.y:951
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 202:
		//line parser.y:953
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 203:
		//line parser.y:955
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 204:
		//line parser.y:957
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 205:
		//line parser.y:959
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 206:
		//line parser.y:966
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:968
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 208:
		//line parser.y:970
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 209:
		//line parser.y:972
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 210:
		//line parser.y:980
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 211:
		//line parser.y:982
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 212:
		//line parser.y:990
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 213:
		//line parser.y:998
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 214:
		//line parser.y:1001
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 215:
		//line parser.y:1008
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 216:
		//line parser.y:1016
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 217:
		//line parser.y:1023
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 218:
		//line parser.y:1030
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 219:
		//line parser.y:1038
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 220:
		//line parser.y:1040
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 221:
		//line parser.y:1047
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 222:
		//line parser.y:1051
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 223:
		//line parser.y:1054
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 224:
		//line parser.y:1056
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 225:
		//line parser.y:1058
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1060
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 227:
		//line parser.y:1063
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 228:
		//line parser.y:1070
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 229:
		//line parser.y:1078
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 230:
		//line parser.y:1085
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 231:
		//line parser.y:1092
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 232:
		//line parser.y:1099
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 233:
		//line parser.y:1106
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 234:
		//line parser.y:1113
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 235:
		//line parser.y:1120
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 236:
		//line parser.y:1128
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 237:
		//line parser.y:1135
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 238:
		//line parser.y:1144
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 239:
		//line parser.y:1151
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 240:
		//line parser.y:1158
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 241:
		//line parser.y:1165
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 242:
		//line parser.y:1172
		{
		}
	case 243:
		//line parser.y:1173
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 244:
		//line parser.y:1174
		{
		}
	case 245:
		//line parser.y:1177
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 246:
		//line parser.y:1180
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 247:
		//line parser.y:1188
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 248:
		//line parser.y:1190
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 249:
		//line parser.y:1203
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 250:
		//line parser.y:1223
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 251:
		//line parser.y:1225
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 252:
		//line parser.y:1228
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 253:
		//line parser.y:1230
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1233
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 255:
		//line parser.y:1235
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 256:
		//line parser.y:1238
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 257:
		//line parser.y:1245
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 258:
		//line parser.y:1247
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 259:
		//line parser.y:1250
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 260:
		//line parser.y:1258
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 261:
		//line parser.y:1262
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 262:
		//line parser.y:1264
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 263:
		//line parser.y:1266
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 264:
		//line parser.y:1270
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 265:
		//line parser.y:1272
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 266:
		//line parser.y:1274
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 267:
		//line parser.y:1278
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 268:
		//line parser.y:1287
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 269:
		//line parser.y:1289
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 270:
		//line parser.y:1292
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 271:
		//line parser.y:1294
		{
		}
	case 272:
		//line parser.y:1296
		{
		}
	case 273:
		//line parser.y:1298
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 274:
		//line parser.y:1300
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 275:
		//line parser.y:1303
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 276:
		//line parser.y:1310
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 277:
		//line parser.y:1318
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 278:
		//line parser.y:1325
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 279:
		//line parser.y:1333
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 280:
		//line parser.y:1341
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 281:
		//line parser.y:1348
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 282:
		//line parser.y:1355
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 283:
		//line parser.y:1362
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 284:
		//line parser.y:1370
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 285:
		//line parser.y:1373
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 286:
		//line parser.y:1375
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 287:
		//line parser.y:1378
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 288:
		//line parser.y:1380
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 289:
		//line parser.y:1382
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 290:
		//line parser.y:1384
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 291:
		//line parser.y:1387
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 292:
		//line parser.y:1389
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 293:
		//line parser.y:1391
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SPECIAL_CHAR_REF = 57349
const CAPITAL_REF = 57350
const LPAREN = 57351
const RPAREN = 57352
const COMMA = 57353
const DO = 57354
const DEF = 57355
const END = 57356
const IF = 57357
const ELSE = 57358
const ELSIF = 57359
const UNLESS = 57360
const CLASS = 57361
const MODULE = 57362
const FOR = 57363
const WHILE = 57364
const UNTIL = 57365
const BEGIN = 57366
const RESCUE = 57367
const ENSURE = 57368
const BREAK = 57369
const NEXT = 57370
const REDO = 57371
const RETRY = 57372
const RETURN = 57373
const YIELD = 57374
const AND = 57375
const OR = 57376
const LAMBDA = 57377
const CASE = 57378
const WHEN = 57379
const TRUE = 57380
const FALSE = 57381
const LESSTHAN = 57382
const GREATERTHAN = 57383
const EQUALTO = 57384
const BANG = 57385
const COMPLEMENT = 57386
const POSITIVE = 57387
const NEGATIVE = 57388
const STAR = 57389
const RANGE = 57390
const OR_EQUALS = 57391
const WHITESPACE = 57392
const NEWLINE = 57393
const SEMICOLON = 57394
const COLON = 57395
const DOUBLECOLON = 57396
const DOT = 57397
const PIPE = 57398
const SLASH = 57399
const AMPERSAND = 57400
const QUESTIONMARK = 57401
const CARET = 57402
const LBRACKET = 57403
const RBRACKET = 57404
const LBRACE = 57405
const RBRACE = 57406
const DOLLARSIGN = 57407
const ATSIGN = 57408
const FILE_CONST_REF = 57409
const EOF = 57410

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"POSITIVE",
	"NEGATIVE",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOUBLECOLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1376

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	54, 144,
	-2, 21,
	-1, 118,
	54, 144,
	-2, 142,
	-1, 120,
	10, 107,
	11, 107,
	-2, 240,
	-1, 134,
	54, 144,
	-2, 21,
	-1, 229,
	54, 144,
	-2, 21,
	-1, 307,
	51, 13,
	64, 13,
	-2, 31,
	-1, 310,
	54, 145,
	-2, 143,
	-1, 321,
	10, 107,
	11, 107,
	-2, 240,
}

const RubyNprod = 289
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 3842

var RubyAct = []int{

	288, 402, 5, 531, 401, 30, 158, 215, 371, 211,
	380, 122, 121, 127, 213, 51, 131, 18, 276, 26,
	362, 25, 298, 223, 90, 356, 298, 91, 2, 3,
	298, 298, 129, 96, 180, 477, 181, 13, 61, 457,
	346, 114, 269, 455, 453, 4, 505, 298, 369, 117,
	119, 234, 131, 155, 156, 327, 263, 244, 451, 279,
	88, 87, 105, 106, 160, 161, 368, 174, 327, 94,
	95, 96, 327, 163, 97, 98, 99, 89, 83, 175,
	176, 138, 142, 272, 93, 102, 100, 101, 104, 251,
	145, 185, 186, 112, 182, 170, 113, 266, 247, 193,
	105, 106, 83, 174, 198, 518, 363, 94, 95, 203,
	173, 109, 207, 208, 209, 47, 83, 83, 109, 347,
	298, 143, 93, 326, 205, 251, 219, 111, 144, 529,
	143, 298, 110, 139, 419, 414, 216, 238, 225, 110,
	142, 258, 259, 237, 261, 262, 240, 267, 268, 142,
	273, 274, 275, 257, 233, 235, 225, 250, 226, 256,
	425, 135, 254, 241, 243, 294, 295, 296, 297, 280,
	138, 383, 138, 312, 500, 221, 226, 217, 135, 418,
	216, 135, 135, 214, 298, 298, 301, 149, 218, 225,
	424, 416, 399, 149, 150, 311, 135, 135, 135, 90,
	318, 319, 91, 140, 216, 140, 302, 214, 135, 226,
	135, 135, 141, 135, 146, 135, 135, 135, 135, 298,
	135, 217, 139, 135, 139, 135, 135, 339, 415, 333,
	90, 154, 218, 91, 90, 510, 230, 91, 334, 135,
	135, 135, 245, 329, 90, 217, 152, 91, 148, 135,
	108, 290, 519, 212, 230, 135, 218, 415, 135, 414,
	96, 264, 153, 378, 270, 465, 292, 238, 277, 96,
	511, 512, 96, 237, 390, 90, 378, 151, 91, 146,
	291, 351, 460, 342, 230, 135, 147, 230, 388, 105,
	106, 377, 447, 488, 448, 96, 94, 95, 105, 106,
	489, 105, 106, 381, 135, 94, 95, 135, 94, 95,
	385, 93, 154, 107, 332, 449, 135, 135, 482, 96,
	93, 396, 462, 93, 105, 106, 376, 422, 405, 332,
	481, 94, 95, 378, 248, 90, 171, 378, 91, 225,
	404, 403, 408, 135, 135, 397, 93, 118, 105, 106,
	96, 235, 395, 364, 538, 94, 95, 310, 90, 226,
	351, 91, 96, 107, 135, 394, 360, 508, 135, 135,
	93, 284, 285, 431, 410, 166, 537, 361, 167, 105,
	106, 442, 442, 434, 438, 164, 94, 95, 165, 475,
	450, 105, 106, 458, 107, 359, 360, 474, 94, 95,
	461, 93, 546, 463, 543, 542, 135, 473, 345, 541,
	463, 543, 542, 93, 486, 472, 430, 429, 471, 135,
	328, 428, 367, 430, 429, 135, 480, 341, 342, 470,
	483, 316, 183, 317, 184, 366, 96, 230, 96, 135,
	116, 470, 115, 135, 365, 490, 491, 355, 348, 469,
	135, 336, 335, 331, 282, 281, 493, 92, 210, 188,
	135, 469, 74, 299, 437, 105, 106, 105, 106, 502,
	497, 306, 94, 95, 94, 95, 354, 289, 305, 1,
	506, 172, 60, 59, 135, 135, 58, 93, 57, 93,
	496, 104, 56, 104, 55, 509, 38, 37, 36, 135,
	35, 50, 443, 20, 463, 96, 40, 41, 21, 135,
	382, 15, 540, 12, 11, 48, 24, 23, 527, 22,
	19, 523, 524, 525, 442, 442, 442, 230, 535, 10,
	32, 27, 17, 544, 105, 106, 14, 96, 39, 230,
	16, 94, 95, 548, 545, 34, 442, 33, 28, 71,
	442, 442, 442, 29, 549, 550, 93, 70, 0, 551,
	0, 136, 0, 0, 0, 135, 105, 106, 230, 0,
	135, 0, 0, 94, 95, 0, 0, 0, 136, 0,
	0, 136, 136, 135, 0, 0, 323, 0, 93, 0,
	0, 0, 0, 0, 135, 0, 136, 136, 136, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 136, 0,
	136, 136, 0, 136, 135, 136, 136, 136, 136, 135,
	136, 135, 0, 136, 0, 136, 136, 0, 0, 0,
	105, 106, 0, 0, 135, 0, 231, 94, 95, 136,
	136, 136, 246, 0, 0, 0, 517, 0, 0, 136,
	0, 0, 93, 0, 231, 136, 0, 0, 136, 96,
	0, 265, 0, 0, 271, 0, 0, 0, 278, 0,
	0, 0, 0, 103, 0, 105, 106, 0, 0, 0,
	92, 0, 94, 95, 231, 136, 0, 231, 105, 106,
	0, 0, 0, 0, 0, 94, 95, 93, 0, 0,
	97, 98, 99, 107, 136, 0, 0, 136, 0, 0,
	93, 102, 100, 101, 104, 0, 136, 136, 0, 69,
	45, 75, 46, 76, 0, 0, 0, 42, 534, 444,
	533, 532, 445, 43, 44, 0, 63, 64, 54, 0,
	0, 67, 68, 136, 136, 66, 62, 0, 0, 77,
	65, 0, 85, 86, 0, 0, 0, 78, 79, 80,
	81, 82, 0, 0, 136, 440, 441, 0, 136, 136,
	0, 0, 392, 0, 0, 72, 0, 73, 0, 84,
	83, 0, 0, 0, 0, 0, 0, 0, 69, 133,
	75, 134, 120, 520, 0, 131, 0, 0, 0, 0,
	0, 105, 106, 0, 0, 0, 136, 0, 94, 95,
	31, 0, 0, 0, 0, 0, 0, 0, 77, 136,
	0, 85, 86, 93, 0, 136, 78, 79, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 231, 0, 136,
	0, 0, 0, 136, 253, 0, 132, 0, 84, 83,
	136, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 130, 130, 0, 0,
	0, 0, 0, 0, 136, 136, 0, 0, 0, 0,
	0, 130, 130, 130, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 130, 0, 130, 130, 0, 130, 136,
	130, 130, 130, 130, 0, 130, 0, 0, 130, 0,
	130, 130, 0, 0, 0, 0, 0, 231, 0, 0,
	0, 130, 0, 0, 130, 130, 130, 0, 0, 231,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 130,
	130, 0, 0, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 231, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	307, 0, 130, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 130,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 130, 0, 136, 0, 0, 0, 0, 136,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 130, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 307, 130, 0, 0, 0, 0, 69,
	45, 75, 46, 76, 0, 0, 0, 42, 530, 444,
	533, 532, 445, 43, 44, 0, 63, 64, 54, 0,
	0, 67, 68, 0, 0, 66, 62, 0, 0, 77,
	65, 130, 85, 86, 0, 9, 0, 78, 79, 80,
	81, 82, 0, 0, 130, 440, 441, 0, 0, 0,
	130, 0, 0, 0, 0, 72, 0, 73, 0, 84,
	83, 0, 130, 0, 130, 0, 0, 0, 130, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	0, 162, 159, 0, 0, 0, 0, 0, 0, 130,
	130, 0, 0, 0, 0, 0, 177, 178, 179, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 187, 0,
	189, 190, 0, 192, 130, 194, 195, 196, 197, 0,
	199, 0, 0, 202, 0, 204, 206, 0, 0, 0,
	0, 0, 130, 0, 0, 0, 224, 0, 0, 236,
	239, 242, 0, 0, 130, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 224, 255, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 0, 0, 130, 0, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 308, 0, 224, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 128, 0, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 325, 0, 130,
	0, 0, 0, 0, 130, 0, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 343, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 350, 0, 0, 0, 308, 358,
	0, 0, 0, 0, 69, 45, 75, 46, 76, 0,
	0, 0, 42, 433, 52, 373, 372, 53, 43, 44,
	0, 63, 64, 54, 0, 0, 67, 68, 0, 0,
	66, 62, 0, 0, 77, 65, 379, 85, 86, 0,
	49, 0, 78, 79, 80, 81, 82, 0, 0, 386,
	286, 287, 0, 0, 0, 128, 0, 0, 0, 0,
	72, 0, 73, 0, 84, 83, 0, 224, 0, 398,
	0, 0, 0, 350, 0, 0, 0, 0, 0, 0,
	406, 0, 0, 0, 168, 0, 137, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 137, 137, 0, 0,
	0, 0, 0, 0, 426, 427, 0, 0, 0, 0,
	0, 137, 137, 137, 0, 0, 0, 0, 0, 159,
	0, 0, 0, 137, 0, 137, 137, 0, 137, 459,
	137, 137, 137, 137, 0, 137, 0, 0, 137, 0,
	137, 137, 0, 0, 0, 0, 0, 468, 169, 0,
	0, 232, 0, 0, 137, 137, 137, 0, 0, 468,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 232,
	137, 191, 0, 137, 0, 0, 0, 0, 0, 0,
	200, 201, 0, 0, 0, 159, 0, 0, 495, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 232,
	137, 0, 232, 504, 0, 0, 283, 252, 0, 0,
	0, 0, 0, 0, 504, 0, 0, 0, 0, 137,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 137, 0, 516, 0, 0, 293, 0, 128,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 528, 0, 0, 0, 137, 137,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 45, 75, 46, 76, 0, 0, 137,
	42, 0, 52, 137, 137, 53, 43, 44, 0, 63,
	64, 54, 0, 0, 67, 68, 0, 0, 66, 62,
	0, 0, 77, 65, 0, 85, 86, 0, 0, 344,
	78, 79, 80, 81, 82, 0, 0, 0, 6, 7,
	0, 137, 0, 349, 220, 0, 222, 0, 72, 0,
	73, 0, 84, 83, 137, 8, 0, 0, 249, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 232, 0, 137, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 384, 137, 0, 0, 0, 0,
	387, 389, 391, 0, 0, 0, 0, 0, 0, 69,
	133, 75, 134, 120, 0, 0, 131, 0, 0, 137,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 411, 330, 77,
	0, 0, 85, 86, 137, 0, 337, 78, 79, 80,
	81, 82, 421, 0, 0, 423, 0, 393, 0, 0,
	0, 0, 232, 0, 0, 253, 0, 132, 0, 84,
	83, 0, 0, 0, 232, 0, 0, 353, 0, 357,
	452, 0, 0, 454, 0, 456, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 232, 0, 137, 0, 0, 0, 0,
	0, 374, 375, 0, 0, 0, 0, 0, 137, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 69, 133, 75, 134, 120, 0,
	126, 131, 357, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 137, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 409, 85, 86, 137,
	0, 124, 78, 79, 80, 81, 82, 0, 125, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 0, 515,
	123, 0, 132, 0, 84, 83, 0, 0, 0, 0,
	432, 0, 0, 0, 0, 436, 0, 0, 0, 526,
	0, 0, 191, 69, 228, 75, 229, 76, 0, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 547, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 85, 86, 0, 0,
	0, 78, 79, 80, 81, 82, 0, 484, 485, 298,
	0, 0, 0, 0, 487, 0, 498, 0, 0, 72,
	0, 73, 0, 84, 83, 492, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 69, 45, 75, 46, 76,
	0, 0, 0, 42, 370, 52, 373, 372, 53, 43,
	44, 0, 63, 64, 54, 0, 0, 67, 68, 0,
	507, 66, 62, 0, 0, 77, 65, 0, 85, 86,
	514, 0, 0, 78, 79, 80, 81, 82, 0, 0,
	0, 286, 287, 0, 0, 522, 0, 0, 374, 375,
	0, 72, 0, 73, 0, 84, 83, 69, 45, 75,
	46, 76, 0, 0, 0, 42, 501, 52, 0, 0,
	53, 43, 44, 0, 63, 64, 54, 378, 0, 67,
	68, 0, 0, 66, 62, 0, 0, 77, 65, 0,
	85, 86, 0, 0, 0, 78, 79, 80, 81, 82,
	0, 0, 0, 286, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 73, 0, 84, 83, 69,
	45, 75, 46, 76, 0, 0, 0, 42, 407, 52,
	0, 0, 53, 43, 44, 0, 63, 64, 54, 378,
	0, 67, 68, 0, 0, 66, 62, 0, 0, 77,
	65, 0, 85, 86, 0, 0, 0, 78, 79, 80,
	81, 82, 0, 0, 0, 286, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 73, 0, 84,
	83, 69, 45, 75, 46, 76, 0, 0, 0, 42,
	400, 52, 0, 0, 53, 43, 44, 0, 63, 64,
	54, 378, 0, 67, 68, 0, 0, 66, 62, 0,
	0, 77, 65, 0, 85, 86, 0, 0, 0, 78,
	79, 80, 81, 82, 0, 0, 0, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 73,
	0, 84, 83, 69, 45, 75, 46, 76, 0, 0,
	0, 42, 536, 444, 0, 0, 445, 43, 44, 0,
	63, 64, 54, 0, 0, 67, 68, 0, 0, 66,
	62, 0, 0, 77, 65, 0, 85, 86, 0, 0,
	0, 78, 79, 80, 81, 82, 0, 0, 0, 440,
	441, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 73, 0, 84, 83, 69, 45, 75, 46, 76,
	0, 0, 0, 42, 513, 52, 0, 0, 53, 43,
	44, 0, 63, 64, 54, 0, 0, 67, 68, 0,
	0, 66, 62, 0, 0, 77, 65, 0, 85, 86,
	0, 0, 0, 78, 79, 80, 81, 82, 0, 0,
	0, 286, 287, 0, 69, 45, 75, 46, 76, 0,
	0, 72, 42, 73, 52, 84, 83, 53, 43, 44,
	0, 63, 64, 54, 0, 0, 67, 68, 0, 0,
	66, 62, 0, 0, 77, 65, 0, 85, 86, 0,
	0, 0, 78, 79, 80, 81, 82, 0, 0, 0,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 73, 476, 84, 83, 69, 45, 75, 46,
	76, 0, 0, 0, 42, 466, 52, 0, 0, 53,
	43, 44, 0, 63, 64, 54, 0, 0, 67, 68,
	0, 0, 66, 62, 0, 0, 77, 65, 0, 85,
	86, 0, 0, 0, 78, 79, 80, 81, 82, 0,
	0, 0, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 73, 0, 84, 83, 69, 45,
	75, 46, 76, 0, 0, 0, 42, 446, 444, 0,
	0, 445, 43, 44, 0, 63, 64, 54, 0, 0,
	67, 68, 0, 0, 66, 62, 0, 0, 77, 65,
	0, 85, 86, 0, 0, 0, 78, 79, 80, 81,
	82, 0, 0, 0, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 73, 0, 84, 83,
	69, 45, 75, 46, 76, 0, 0, 0, 42, 439,
	444, 0, 0, 445, 43, 44, 0, 63, 64, 54,
	0, 0, 67, 68, 0, 0, 66, 62, 0, 0,
	77, 65, 0, 85, 86, 0, 0, 0, 78, 79,
	80, 81, 82, 0, 0, 0, 440, 441, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 73, 0,
	84, 83, 69, 45, 75, 46, 76, 0, 0, 0,
	42, 435, 52, 0, 0, 53, 43, 44, 0, 63,
	64, 54, 0, 0, 67, 68, 0, 0, 66, 62,
	0, 0, 77, 65, 0, 85, 86, 0, 0, 0,
	78, 79, 80, 81, 82, 0, 0, 0, 286, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	73, 0, 84, 83, 69, 45, 75, 46, 76, 0,
	0, 0, 42, 417, 52, 0, 0, 53, 43, 44,
	0, 63, 64, 54, 0, 0, 67, 68, 0, 0,
	66, 62, 0, 0, 77, 65, 0, 85, 86, 0,
	0, 0, 78, 79, 80, 81, 82, 0, 0, 0,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 73, 0, 84, 83, 69, 45, 75, 46,
	76, 0, 0, 0, 42, 352, 52, 0, 0, 53,
	43, 44, 0, 63, 64, 54, 0, 0, 67, 68,
	0, 0, 66, 62, 0, 0, 77, 65, 0, 85,
	86, 0, 0, 0, 78, 79, 80, 81, 82, 0,
	0, 0, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 73, 0, 84, 83, 69, 45,
	75, 46, 76, 0, 0, 0, 42, 340, 52, 0,
	0, 53, 43, 44, 0, 63, 64, 54, 0, 0,
	67, 68, 0, 0, 66, 62, 0, 0, 77, 65,
	0, 85, 86, 0, 0, 0, 78, 79, 80, 81,
	82, 0, 0, 0, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 73, 0, 84, 83,
	69, 45, 75, 46, 76, 0, 0, 0, 42, 338,
	52, 0, 0, 53, 43, 44, 0, 63, 64, 54,
	0, 0, 67, 68, 0, 0, 66, 62, 0, 0,
	77, 65, 0, 85, 86, 0, 0, 0, 78, 79,
	80, 81, 82, 0, 0, 0, 286, 287, 0, 69,
	45, 75, 46, 76, 0, 0, 72, 42, 73, 444,
	84, 83, 445, 43, 44, 0, 63, 64, 54, 0,
	0, 67, 68, 0, 0, 66, 62, 0, 0, 77,
	65, 0, 85, 86, 0, 0, 0, 78, 79, 80,
	81, 82, 0, 0, 0, 440, 441, 0, 69, 45,
	75, 46, 76, 0, 0, 72, 42, 73, 52, 84,
	83, 53, 43, 44, 0, 63, 64, 54, 0, 0,
	67, 68, 0, 0, 66, 62, 0, 0, 77, 65,
	0, 85, 86, 0, 0, 0, 78, 79, 80, 81,
	82, 0, 0, 0, 286, 287, 0, 69, 45, 75,
	46, 76, 314, 0, 72, 42, 73, 52, 84, 83,
	53, 43, 44, 0, 63, 64, 54, 0, 0, 67,
	68, 0, 0, 66, 62, 0, 0, 77, 65, 0,
	85, 86, 0, 0, 0, 78, 79, 80, 81, 82,
	0, 0, 0, 0, 313, 0, 69, 45, 75, 46,
	76, 0, 0, 72, 42, 73, 52, 84, 83, 53,
	43, 44, 0, 63, 64, 54, 0, 0, 67, 68,
	0, 0, 66, 62, 0, 0, 77, 65, 0, 85,
	86, 0, 0, 0, 78, 79, 80, 81, 82, 0,
	0, 0, 298, 0, 0, 69, 45, 75, 46, 76,
	0, 0, 72, 42, 73, 52, 84, 83, 53, 43,
	44, 0, 63, 64, 54, 0, 0, 67, 68, 0,
	0, 66, 62, 0, 0, 77, 65, 0, 85, 86,
	0, 0, 0, 78, 79, 80, 81, 82, 69, 309,
	75, 134, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 73, 0, 84, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 85, 86, 0, 0, 0, 78, 79, 80, 81,
	82, 0, 0, 0, 298, 0, 0, 0, 0, 251,
	0, 0, 0, 0, 72, 0, 73, 304, 84, 83,
	69, 228, 75, 229, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 85, 86, 0, 0, 0, 78, 79,
	80, 81, 82, 0, 0, 0, 298, 69, 228, 75,
	229, 76, 0, 478, 0, 0, 72, 0, 73, 0,
	84, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	85, 86, 0, 0, 0, 78, 79, 80, 81, 82,
	0, 0, 0, 298, 69, 133, 75, 134, 76, 0,
	467, 0, 0, 72, 0, 73, 0, 84, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 85, 86, 0,
	0, 0, 78, 79, 80, 81, 82, 0, 0, 0,
	298, 69, 133, 75, 134, 120, 0, 413, 131, 0,
	72, 0, 73, 0, 84, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 85, 86, 0, 0, 124, 78,
	79, 80, 81, 82, 69, 133, 75, 134, 321, 0,
	0, 131, 0, 0, 0, 0, 0, 253, 0, 132,
	0, 84, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 85, 86, 0,
	0, 320, 78, 79, 80, 81, 82, 69, 309, 75,
	134, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 132, 0, 84, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	85, 86, 0, 0, 0, 78, 79, 80, 81, 82,
	0, 0, 0, 298, 69, 228, 75, 229, 76, 0,
	0, 0, 0, 72, 0, 73, 304, 84, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 85, 86, 0,
	0, 0, 78, 79, 80, 81, 82, 0, 0, 0,
	298, 69, 133, 75, 134, 76, 0, 303, 0, 0,
	72, 0, 73, 0, 84, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 85, 86, 0, 0, 0, 78,
	79, 80, 81, 82, 0, 0, 0, 298, 69, 133,
	75, 134, 76, 0, 0, 131, 0, 72, 0, 73,
	0, 84, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 85, 86, 0, 0, 0, 78, 79, 80, 81,
	82, 69, 228, 75, 229, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 132, 0, 84, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 85, 86, 0, 0, 0, 78,
	79, 80, 81, 82, 69, 133, 75, 134, 120, 0,
	0, 131, 0, 0, 227, 0, 0, 72, 0, 73,
	0, 84, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 85, 86, 0,
	0, 0, 78, 79, 80, 81, 82, 69, 133, 75,
	134, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 0, 132, 0, 84, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	85, 86, 0, 0, 0, 78, 79, 80, 81, 82,
	69, 503, 75, 134, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 73, 0, 84, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 85, 86, 0, 0, 0, 78, 79,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 73, 0,
	84, 83,
}
var RubyPact = []int{

	-23, 1637, -1000, -1000, -1000, 9, -1000, -1000, -1000, 655,
	-1000, -1000, -1000, 232, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 78, -1000, -14, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 436, 339, 339, 1879, 163, 79, 237, 145,
	235, 220, 3130, 3130, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3732, 3130, 3130, 3732, 3732, 370, 360, -1000,
	-1000, -1000, -1000, -1000, 41, 327, -1000, 4, 3130, 3130,
	3732, 3732, 3732, 28, 426, -1000, -1000, -1000, -1000, -1000,
	3130, 3130, 3732, 453, 3732, 3732, -1000, 3732, 3130, 3732,
	3732, 3732, 3732, 3130, 3732, -1000, -1000, 3732, 3130, 3732,
	3732, 3130, 3130, 3130, 452, 198, 174, 135, -1000, -1000,
	3646, 4, 40, 3732, 3732, 3732, 51, 323, 597, -1000,
	71, 33, -1000, 3689, 72, 21, -1000, -1000, 3646, 3732,
	3130, 3130, 3732, 3130, 3130, 50, 3130, 3130, 36, 3130,
	3130, 3130, 12, 449, 448, 260, 320, 2983, 240, 597,
	229, 215, 597, 240, 3130, 3130, 3130, 3130, 3509, 3462,
	349, 3646, 3032, -1000, -1000, 260, 260, 597, 597, 597,
	-1000, -1000, 425, -1000, -1000, 260, 260, 597, 3419, 597,
	597, 3556, 597, 260, 597, 597, 597, 597, 260, 533,
	3556, 3556, 597, 260, 597, 61, 358, 260, 260, 260,
	4, -1000, 447, 303, 130, -1000, 196, 446, 445, -1000,
	2885, 339, 2823, 417, 29, -1000, -1000, 3732, 3376, 161,
	88, 172, 151, -1000, -1000, -1000, 346, -22, 57, 432,
	-1000, -1000, 434, -1000, -1000, -1000, -1000, 442, 3603, 2761,
	-1000, 441, 3173, 3732, 385, 315, -42, 44, 260, 260,
	291, 260, 260, -1000, -1000, -1000, 438, 260, 260, -1000,
	-1000, -1000, 429, 260, 260, 260, -1000, -1000, -1000, 416,
	301, 5, -13, 2030, -1000, -1000, -1000, -1000, 260, 312,
	3732, -1000, -1000, 134, 260, 260, 260, 260, -1000, 299,
	29, -1000, -1000, 3732, -1000, 277, 263, 71, 768, 1754,
	-1000, 355, 260, -1000, -1000, 69, -1000, -1000, 40, 4,
	3130, 3646, 597, 3732, 597, 597, -1000, 3603, 150, -1000,
	2216, 174, 130, 318, 3732, -1000, -1000, 2154, -1000, -1000,
	-1000, 4, -1000, 597, 3329, 217, -1000, -1000, -1000, 133,
	597, -1000, -1000, 2699, 123, -1000, -1000, 2983, 265, -1000,
	-1000, 148, -1000, -1000, 118, -1000, -1000, -1000, 3732, 3732,
	-1000, 407, 3130, -1000, 1359, 2637, -1000, -1000, 339, 597,
	2575, 2513, 278, 3732, -4, -1000, 597, -20, -1000, -21,
	-1000, -25, 3130, 3732, -1000, -1000, 260, 272, 597, 3130,
	-1000, 308, -1000, -1000, -1000, -1000, 597, -1000, 251, 2451,
	-1000, 3282, 597, 412, 3130, 401, 391, -1000, -1000, 383,
	2389, -29, 93, 3235, -1000, 3130, 268, 256, -1000, 3130,
	-1000, 260, 2983, -1000, 400, -1000, 2983, 289, -1000, -1000,
	-1000, -1000, 260, -1000, 3130, 3130, -1000, -1000, -1000, 3732,
	240, -1000, 1958, -1000, 3556, -1000, 168, -1000, 260, 597,
	-1000, 260, -1000, -1000, 2092, -1000, -1000, 3775, 29, -1000,
	-1000, -1000, 260, -15, -1000, -1000, -1000, -1000, 3732, 3081,
	260, 246, -1000, 260, 2983, 2983, -1000, 2983, 361, 339,
	184, 219, 2340, 240, 2983, 29, -1000, -1000, 3732, 642,
	52, -1000, 238, 783, 597, 3732, 260, 2983, -1000, -1000,
	-1000, -1000, -1000, -1000, 2983, 80, 597, 3130, 3732, -1000,
	-1000, 67, 2983, 1064, 714, 2278, 80, 343, 501, -1000,
	-1000, 395, 3130, -1000, -1000, 388, -1000, -1000, -1000, 80,
	-1000, -1000, 3130, -1000, 260, 2934, -1000, 80, 260, 2934,
	2934, 2934,
}
var RubyPgo = []int{

	0, 0, 557, 553, 19, 32, 549, 548, 547, 1400,
	545, 1, 38, 540, 538, 37, 536, 532, 1105, 531,
	515, 810, 530, 529, 520, 519, 517, 516, 17, 514,
	7, 115, 513, 511, 5, 510, 508, 507, 506, 21,
	503, 502, 3, 501, 500, 498, 497, 496, 494, 492,
	488, 486, 483, 482, 1576, 481, 4, 12, 25, 8,
	479, 9, 478, 10, 477, 23, 476, 6, 471, 13,
	15, 11, 14, 464, 463, 462, 376, 1444,
}
var RubyR1 = []int{

	0, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 76, 76, 77, 77, 54, 54, 54, 54, 19,
	19, 19, 19, 19, 19, 19, 19, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 28, 28, 28, 28, 28, 28, 28, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 39, 14, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	22, 57, 57, 57, 57, 67, 67, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 71, 71, 71, 71,
	71, 69, 69, 69, 23, 23, 23, 23, 23, 23,
	61, 61, 72, 72, 72, 30, 30, 30, 30, 29,
	29, 32, 34, 34, 75, 75, 15, 15, 15, 15,
	15, 15, 15, 16, 16, 70, 70, 33, 33, 33,
	33, 33, 33, 33, 9, 9, 31, 31, 20, 20,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 2, 6, 7, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 3, 3,
	3, 3, 62, 62, 68, 68, 68, 5, 5, 5,
	5, 58, 66, 66, 66, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 59, 59, 59, 59,
	55, 55, 55, 8, 17, 11, 11, 11, 73, 73,
	64, 64, 56, 56, 24, 24, 25, 25, 27, 27,
	27, 26, 26, 26, 12, 40, 40, 63, 63, 63,
	63, 63, 41, 41, 41, 41, 41, 42, 42, 42,
	42, 38, 37, 10, 36, 36, 35, 35, 4,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 4,
	5, 1, 4, 4, 2, 3, 3, 4, 4, 5,
	3, 4, 5, 2, 3, 3, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 6, 7, 6, 6,
	4, 3, 7, 1, 5, 1, 3, 0, 1, 1,
	1, 2, 4, 4, 4, 5, 1, 1, 4, 2,
	5, 1, 3, 3, 5, 6, 7, 8, 5, 6,
	1, 3, 0, 1, 3, 1, 2, 3, 2, 4,
	6, 4, 1, 3, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 9, 6, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 4, 3, 3, 3, 4, 3, 3,
	3, 4, 3, 3, 3, 4, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 1, 1, 5, 0,
	1, 1, 1, 2, 4, 4, 4, 5, 3, 5,
	5, 5, 3, 7, 3, 7, 8, 3, 4, 5,
	5, 3, 0, 1, 3, 4, 5, 3, 3, 3,
	3, 3, 5, 6, 5, 3, 4, 3, 3, 2,
	0, 2, 2, 3, 4, 2, 3, 5, 1, 3,
	0, 2, 1, 2, 2, 1, 2, 1, 1, 3,
	3, 1, 3, 3, 5, 5, 5, 0, 2, 2,
	2, 2, 5, 6, 5, 6, 5, 4, 3, 3,
	2, 4, 4, 2, 5, 7, 4, 5, 3,
}
var RubyChk = []int{

	-1000, -60, 51, 52, 68, -1, 51, 52, 68, -18,
	-23, -29, -32, -15, -16, -33, -13, -17, -28, -24,
	-40, -36, -25, -26, -27, -39, -4, -19, -7, -3,
	-34, -21, -22, -8, -10, -44, -45, -46, -47, -14,
	-38, -37, 13, 19, 20, 6, 8, -31, -20, -9,
	-43, -70, 15, 18, 24, -48, -49, -50, -51, -52,
	-53, -12, 32, 22, 23, 36, 31, 27, 28, 5,
	-2, -6, 61, 63, -75, 7, 9, 35, 43, 44,
	45, 46, 47, 66, 65, 38, 39, 52, 51, 68,
	15, 18, 25, 55, 40, 41, 4, 45, 46, 47,
	57, 58, 56, 18, 59, 33, 34, 48, 18, 40,
	61, 49, 15, 18, 55, 6, 4, -34, 8, -34,
	9, -57, -71, 61, 42, 49, 11, -69, -18, -5,
	-21, 12, 63, 6, 8, -31, -20, -9, 9, 61,
	42, 49, 61, 42, 49, 11, 42, 49, 11, 42,
	49, 42, 11, 42, 11, -1, -1, -54, -67, -18,
	-1, -1, -18, -67, 15, 18, 15, 18, -77, -77,
	54, 9, -55, -5, 63, -1, -1, -18, -18, -18,
	6, 8, 66, 6, 8, -1, -1, -18, 6, -18,
	-18, -77, -18, -1, -18, -18, -18, -18, -1, -18,
	-77, -77, -18, -1, -18, -69, -18, -1, -1, -1,
	6, -61, 55, -72, 9, -30, 6, 47, 58, -61,
	-54, 40, -54, -65, -18, -28, -15, 58, 6, 8,
	-31, -20, -9, -5, 11, -5, -18, -4, -69, -18,
	-39, -12, -18, -12, 6, -31, -20, 47, 11, -54,
	-58, 56, -77, 61, -65, -18, -4, -69, -1, -1,
	-18, -1, -1, 6, -31, -20, 47, -1, -1, 6,
	-31, -20, 47, -1, -1, -1, 6, -31, -20, 47,
	-70, 6, 6, -54, 51, 52, 51, 52, -1, -64,
	11, 51, 51, -77, -1, -1, -1, -1, 51, -74,
	-18, -28, -15, 58, 64, -62, -68, -21, -18, 6,
	8, -65, -1, 52, 10, -77, 6, 8, -71, -57,
	42, 9, -18, 53, -18, -18, 62, 11, 62, -5,
	-54, 6, 11, -72, 42, 6, 6, -54, 14, -34,
	14, 10, 11, -18, -77, 62, 62, 62, 6, -77,
	-18, -5, 14, -54, -66, 6, -58, -54, -18, 10,
	11, 62, 62, 62, 62, 6, 6, 6, 61, 61,
	14, -59, 17, 16, -54, -54, 14, -11, 25, -18,
	-63, -63, -35, 37, -77, 11, -18, -77, 11, -77,
	11, -77, 4, 53, 10, -5, -1, -65, -18, 42,
	14, -56, -11, -61, -30, 10, -18, 14, -56, -54,
	-5, -77, -18, 58, 42, 11, 58, 14, 56, 11,
	-54, -77, 62, -77, 42, 42, -18, -18, 14, 17,
	16, -1, -54, 14, -59, 14, -54, -73, -34, 14,
	51, 52, -1, -41, 15, 18, 14, 14, 16, 37,
	-67, 62, -77, 64, -77, 64, -77, 64, -1, -18,
	10, -1, 14, -11, -54, 14, 14, 58, -18, -15,
	-28, 6, -1, 6, 6, 6, 64, 64, 58, -77,
	-1, 62, 62, -1, -54, -54, 14, -54, 4, 11,
	-1, -1, -54, -67, -54, -18, -15, -28, 58, -18,
	6, 14, -56, 6, -18, 61, -1, -54, 6, -34,
	51, 51, 52, 14, -54, -77, -18, 4, 53, 14,
	10, -18, -54, -63, -63, -63, -77, -1, -18, 62,
	14, -42, 17, 16, 14, -42, 14, -76, 11, -77,
	11, 14, 17, 16, -1, -63, 14, -77, -1, -63,
	-63, -63,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 0, 0, 0, 20, -2, 22, 23, 24,
	0, 0, 0, 0, 15, 42, 43, 44, 45, 46,
	47, 48, 255, 0, 0, 0, 257, 261, 258, 19,
	25, 26, 13, 13, 0, 71, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 5, 6, 7,
	0, 0, 0, 0, 0, 0, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 13, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 132, 15, -2, 15,
	-2, 74, 83, 13, 0, 0, 0, 103, 116, 117,
	31, 15, 13, 20, -2, 22, 23, 24, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 15, 0, 250, 254, 105,
	0, 0, 13, 256, 0, 0, 0, 0, 199, 0,
	0, 107, 0, 283, 13, 186, 187, 188, 189, 68,
	166, 167, 0, 164, 165, 227, 235, 67, 76, 84,
	86, 0, 190, 191, 192, 193, 194, 195, 229, 0,
	0, 0, 288, 231, 85, 0, 121, 163, 228, 230,
	80, 15, 0, 130, 132, 133, 135, 0, 0, 15,
	0, 0, 0, 0, 108, 109, 110, 0, 20, -2,
	22, 23, 24, 75, 13, 119, 121, 0, 0, 146,
	147, 148, 157, 158, 170, 171, 172, 0, 13, 0,
	15, 222, 15, 13, 0, 121, 0, 0, 149, 159,
	0, 150, 160, 174, 175, 176, 0, 151, 161, 178,
	179, 180, 0, 152, 162, 153, 182, 183, 184, 0,
	154, 0, 0, 0, 15, 15, 16, 17, 18, 0,
	0, 267, 267, 0, 262, 263, 259, 260, 14, 13,
	200, 201, 202, 0, 208, 13, 13, -2, 0, 20,
	-2, 0, 241, 242, 243, 15, 168, 169, 77, 78,
	0, -2, 100, 0, 281, 282, 94, 0, 95, 81,
	0, 132, 0, 0, 0, 136, 138, 0, 139, 15,
	141, 69, 13, 111, 0, 87, 90, 92, 173, 0,
	122, 123, 217, 0, 0, 223, 15, 13, 121, 73,
	13, 88, 91, 93, 89, 177, 181, 185, 0, 0,
	225, 0, 0, 15, 0, 0, 244, 251, 15, 106,
	0, 0, 0, 0, 0, 13, 203, 0, 13, 0,
	13, 0, 13, 0, 72, 79, 82, 0, 264, 0,
	124, 0, 252, 15, 134, 131, 137, 128, 0, 0,
	70, 0, 118, 0, 0, 0, 0, 218, 221, 0,
	0, 0, 87, 0, 13, 0, 0, 0, 226, 0,
	15, 15, 239, 232, 0, 234, 245, 15, 248, 265,
	268, 269, 270, 271, 0, 0, 266, 284, 15, 0,
	15, 198, 0, 209, 0, 210, 0, 211, 212, 214,
	101, 99, 125, 253, 0, 129, 140, 0, 112, 113,
	114, 120, 96, 0, 104, 224, 219, 220, 0, 0,
	98, 0, 156, 15, 237, 238, 233, 246, 0, 0,
	15, 0, 0, 15, 13, 204, 205, 206, 0, 0,
	0, 126, 0, 20, 115, 0, 97, 236, 15, 249,
	267, 15, 15, 285, 13, 286, 207, 13, 0, 127,
	102, 0, 247, 0, 0, 0, 287, 11, 13, 155,
	272, 0, 0, 267, 274, 0, 276, 213, 12, 215,
	13, 273, 0, 267, 267, 280, 275, 216, 267, 278,
	279, 277,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:207
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:209
		{
		}
	case 3:
		//line parser.y:211
		{
		}
	case 4:
		//line parser.y:213
		{
		}
	case 5:
		//line parser.y:215
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:217
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:219
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:225
		{
		}
	case 11:
		//line parser.y:227
		{
		}
	case 12:
		//line parser.y:228
		{
		}
	case 13:
		//line parser.y:230
		{
		}
	case 14:
		//line parser.y:231
		{
		}
	case 15:
		//line parser.y:234
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:236
		{
		}
	case 17:
		//line parser.y:238
		{
		}
	case 18:
		//line parser.y:240
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		//line parser.y:252
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 68:
		//line parser.y:255
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 69:
		//line parser.y:258
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 70:
		//line parser.y:265
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 71:
		//line parser.y:272
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 72:
		//line parser.y:276
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 73:
		//line parser.y:283
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 74:
		//line parser.y:290
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 75:
		//line parser.y:297
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 76:
		//line parser.y:304
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 77:
		//line parser.y:311
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 78:
		//line parser.y:319
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 79:
		//line parser.y:327
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 80:
		//line parser.y:335
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 81:
		//line parser.y:343
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 82:
		//line parser.y:351
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 83:
		//line parser.y:362
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 84:
		//line parser.y:369
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 85:
		//line parser.y:377
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 86:
		//line parser.y:385
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 87:
		//line parser.y:395
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 88:
		//line parser.y:403
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 89:
		//line parser.y:411
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 90:
		//line parser.y:419
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 91:
		//line parser.y:427
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 92:
		//line parser.y:435
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 93:
		//line parser.y:443
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 94:
		//line parser.y:451
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 95:
		//line parser.y:459
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 96:
		//line parser.y:469
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:477
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:488
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 99:
		//line parser.y:496
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 100:
		//line parser.y:506
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 101:
		//line parser.y:516
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 102:
		//line parser.y:518
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 103:
		//line parser.y:520
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 104:
		//line parser.y:522
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 105:
		//line parser.y:525
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 106:
		//line parser.y:527
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 107:
		//line parser.y:529
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 108:
		//line parser.y:531
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 109:
		//line parser.y:533
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 110:
		//line parser.y:535
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 111:
		//line parser.y:537
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 112:
		//line parser.y:544
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:546
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:548
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:550
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 116:
		//line parser.y:559
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:561
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:563
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:565
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:567
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 121:
		//line parser.y:570
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:572
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:574
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:578
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 125:
		//line parser.y:586
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 126:
		//line parser.y:595
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 127:
		//line parser.y:604
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 128:
		//line parser.y:614
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 129:
		//line parser.y:622
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 130:
		//line parser.y:633
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 131:
		//line parser.y:635
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 132:
		//line parser.y:637
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 133:
		//line parser.y:639
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 134:
		//line parser.y:641
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:644
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 136:
		//line parser.y:646
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 137:
		//line parser.y:648
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 138:
		//line parser.y:650
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 139:
		//line parser.y:654
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name: RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 140:
		//line parser.y:661
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 141:
		//line parser.y:671
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 142:
		//line parser.y:680
		{
			RubyVAL.genericValue = ast.Class{
				Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
			}
		}
	case 143:
		//line parser.y:686
		{
			RubyVAL.genericValue = ast.Class{
				Name:      RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				Namespace: strings.Join(RubyS[Rubypt-2].stringSlice, "::"),
			}
		}
	case 144:
		//line parser.y:694
		{
			RubyVAL.stringSlice = append(RubyVAL.stringSlice, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name)
		}
	case 145:
		//line parser.y:698
		{
			RubyVAL.stringSlice = append(RubyVAL.stringSlice, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name)
		}
	case 146:
		//line parser.y:703
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 147:
		//line parser.y:710
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 148:
		//line parser.y:714
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 149:
		//line parser.y:718
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 150:
		//line parser.y:725
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 151:
		//line parser.y:732
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 152:
		//line parser.y:739
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 153:
		//line parser.y:747
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 154:
		//line parser.y:754
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 155:
		//line parser.y:762
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 156:
		//line parser.y:777
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 157:
		//line parser.y:783
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 158:
		//line parser.y:790
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 159:
		//line parser.y:794
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 160:
		//line parser.y:801
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 161:
		//line parser.y:808
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:815
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 163:
		//line parser.y:822
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 164:
		//line parser.y:825
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 165:
		//line parser.y:827
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 166:
		//line parser.y:830
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 167:
		//line parser.y:832
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 168:
		//line parser.y:835
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:837
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:840
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 171:
		//line parser.y:842
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 172:
		//line parser.y:844
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 173:
		//line parser.y:846
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 174:
		//line parser.y:849
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 175:
		//line parser.y:851
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 176:
		//line parser.y:853
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 177:
		//line parser.y:855
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 178:
		//line parser.y:858
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 179:
		//line parser.y:860
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 180:
		//line parser.y:862
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:864
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 182:
		//line parser.y:867
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 183:
		//line parser.y:869
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 184:
		//line parser.y:871
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 185:
		//line parser.y:873
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 186:
		//line parser.y:876
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 187:
		//line parser.y:877
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 188:
		//line parser.y:878
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:879
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:882
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 191:
		//line parser.y:891
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 192:
		//line parser.y:900
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 193:
		//line parser.y:909
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 194:
		//line parser.y:918
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 195:
		//line parser.y:927
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 196:
		//line parser.y:935
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 197:
		//line parser.y:936
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 198:
		//line parser.y:938
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 199:
		//line parser.y:940
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 200:
		//line parser.y:942
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 201:
		//line parser.y:944
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 202:
		//line parser.y:946
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 203:
		//line parser.y:948
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 204:
		//line parser.y:955
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 205:
		//line parser.y:957
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 206:
		//line parser.y:959
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:961
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 208:
		//line parser.y:969
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 209:
		//line parser.y:971
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 210:
		//line parser.y:979
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 211:
		//line parser.y:987
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 212:
		//line parser.y:990
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 213:
		//line parser.y:997
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 214:
		//line parser.y:1005
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 215:
		//line parser.y:1012
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 216:
		//line parser.y:1019
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 217:
		//line parser.y:1027
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 218:
		//line parser.y:1029
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 219:
		//line parser.y:1036
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 220:
		//line parser.y:1040
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 221:
		//line parser.y:1043
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 222:
		//line parser.y:1045
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 223:
		//line parser.y:1047
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1049
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1052
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 226:
		//line parser.y:1059
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 227:
		//line parser.y:1067
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 228:
		//line parser.y:1074
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 229:
		//line parser.y:1081
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 230:
		//line parser.y:1088
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 231:
		//line parser.y:1095
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 232:
		//line parser.y:1102
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 233:
		//line parser.y:1109
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 234:
		//line parser.y:1117
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 235:
		//line parser.y:1124
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 236:
		//line parser.y:1133
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 237:
		//line parser.y:1140
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 238:
		//line parser.y:1147
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 239:
		//line parser.y:1154
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 240:
		//line parser.y:1161
		{
		}
	case 241:
		//line parser.y:1162
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 242:
		//line parser.y:1163
		{
		}
	case 243:
		//line parser.y:1166
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 244:
		//line parser.y:1169
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 245:
		//line parser.y:1177
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 246:
		//line parser.y:1179
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 247:
		//line parser.y:1192
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 248:
		//line parser.y:1212
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 249:
		//line parser.y:1214
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 250:
		//line parser.y:1217
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 251:
		//line parser.y:1219
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 252:
		//line parser.y:1222
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 253:
		//line parser.y:1224
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1227
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 255:
		//line parser.y:1234
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 256:
		//line parser.y:1237
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 257:
		//line parser.y:1245
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 258:
		//line parser.y:1249
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 259:
		//line parser.y:1251
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 260:
		//line parser.y:1253
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 261:
		//line parser.y:1257
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 262:
		//line parser.y:1259
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 263:
		//line parser.y:1261
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 264:
		//line parser.y:1265
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 265:
		//line parser.y:1274
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 266:
		//line parser.y:1276
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 267:
		//line parser.y:1279
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 268:
		//line parser.y:1281
		{
		}
	case 269:
		//line parser.y:1283
		{
		}
	case 270:
		//line parser.y:1285
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 271:
		//line parser.y:1287
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 272:
		//line parser.y:1290
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 273:
		//line parser.y:1297
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 274:
		//line parser.y:1305
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 275:
		//line parser.y:1312
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 276:
		//line parser.y:1320
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 277:
		//line parser.y:1328
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 278:
		//line parser.y:1335
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 279:
		//line parser.y:1342
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 280:
		//line parser.y:1349
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 281:
		//line parser.y:1357
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 282:
		//line parser.y:1360
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 283:
		//line parser.y:1362
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 284:
		//line parser.y:1365
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 285:
		//line parser.y:1367
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 286:
		//line parser.y:1370
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 287:
		//line parser.y:1372
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 288:
		//line parser.y:1374
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

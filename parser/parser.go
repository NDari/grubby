//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	hashPair        ast.HashKeyValuePair
	astString       ast.String
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const LPAREN = 57355
const RPAREN = 57356
const COMMA = 57357
const STRING = 57358
const NamespacedModule = 57359
const ProcArg = 57360
const DO = 57361
const DEF = 57362
const END = 57363
const IF = 57364
const ELSE = 57365
const ELSIF = 57366
const UNLESS = 57367
const CLASS = 57368
const MODULE = 57369
const FOR = 57370
const WHILE = 57371
const UNTIL = 57372
const BEGIN = 57373
const RESCUE = 57374
const ENSURE = 57375
const BREAK = 57376
const NEXT = 57377
const REDO = 57378
const RETRY = 57379
const RETURN = 57380
const YIELD = 57381
const AND = 57382
const OR = 57383
const LAMBDA = 57384
const CASE = 57385
const WHEN = 57386
const ALIAS = 57387
const SELF = 57388
const NIL = 57389
const DEFINED = 57390
const LESSTHAN = 57391
const GREATERTHAN = 57392
const EQUALTO = 57393
const BANG = 57394
const COMPLEMENT = 57395
const BINARY_PLUS = 57396
const UNARY_PLUS = 57397
const BINARY_MINUS = 57398
const UNARY_MINUS = 57399
const STAR = 57400
const RANGE = 57401
const EXCLUSIVE_RANGE = 57402
const OR_EQUALS = 57403
const AND_EQUALS = 57404
const WHITESPACE = 57405
const NEWLINE = 57406
const SEMICOLON = 57407
const COLON = 57408
const DOT = 57409
const PIPE = 57410
const SLASH = 57411
const AMPERSAND = 57412
const QUESTIONMARK = 57413
const CARET = 57414
const LBRACKET = 57415
const RBRACKET = 57416
const LBRACE = 57417
const RBRACE = 57418
const ATSIGN = 57419
const FILE_CONST_REF = 57420
const LINE_CONST_REF = 57421
const EOF = 57422

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"DEFINED",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"EXCLUSIVE_RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:2029

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 131,
	67, 20,
	-2, 156,
	-1, 143,
	20, 273,
	22, 273,
	25, 273,
	26, 273,
	27, 273,
	29, 273,
	30, 273,
	31, 273,
	34, 273,
	35, 273,
	37, 273,
	38, 273,
	39, 273,
	43, 273,
	45, 273,
	65, 273,
	-2, 11,
	-1, 217,
	20, 273,
	22, 273,
	25, 273,
	26, 273,
	27, 273,
	29, 273,
	30, 273,
	31, 273,
	34, 273,
	35, 273,
	37, 273,
	38, 273,
	39, 273,
	43, 273,
	45, 273,
	65, 273,
	-2, 11,
	-1, 374,
	15, 129,
	-2, 20,
	-1, 387,
	20, 273,
	22, 273,
	25, 273,
	26, 273,
	27, 273,
	29, 273,
	30, 273,
	31, 273,
	34, 273,
	35, 273,
	37, 273,
	38, 273,
	39, 273,
	43, 273,
	45, 273,
	65, 273,
	-2, 11,
	-1, 428,
	64, 11,
	76, 11,
	-2, 13,
	-1, 471,
	64, 11,
	76, 11,
	-2, 13,
	-1, 626,
	15, 136,
	-2, 11,
}

const RubyNprod = 340
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4988

var RubyAct = []int{

	353, 484, 5, 145, 456, 669, 445, 157, 166, 193,
	485, 158, 146, 487, 269, 267, 56, 360, 144, 26,
	152, 55, 266, 632, 427, 25, 2, 3, 341, 328,
	21, 319, 560, 101, 153, 228, 102, 295, 229, 600,
	103, 28, 4, 14, 134, 359, 70, 131, 69, 359,
	135, 439, 136, 359, 359, 359, 95, 628, 190, 191,
	436, 583, 200, 201, 302, 581, 555, 553, 182, 434,
	169, 359, 167, 283, 204, 99, 98, 153, 394, 344,
	331, 551, 322, 222, 223, 220, 96, 97, 298, 177,
	221, 100, 216, 94, 156, 394, 394, 419, 94, 94,
	394, 94, 231, 232, 233, 230, 205, 94, 206, 94,
	170, 240, 128, 398, 627, 129, 245, 94, 73, 72,
	171, 172, 252, 156, 256, 396, 178, 261, 262, 263,
	264, 274, 168, 221, 443, 442, 247, 559, 394, 124,
	178, 394, 255, 253, 394, 259, 258, 173, 281, 173,
	282, 126, 127, 273, 438, 435, 169, 275, 167, 433,
	122, 512, 169, 125, 167, 130, 644, 286, 284, 390,
	182, 311, 312, 313, 288, 316, 317, 318, 301, 290,
	325, 326, 327, 177, 332, 333, 334, 52, 310, 309,
	289, 292, 294, 315, 314, 666, 170, 417, 324, 323,
	397, 179, 124, 393, 156, 345, 179, 336, 335, 362,
	363, 364, 365, 361, 511, 174, 180, 181, 168, 174,
	377, 123, 370, 178, 168, 108, 125, 372, 178, 175,
	176, 359, 646, 359, 615, 137, 676, 173, 162, 383,
	156, 173, 507, 122, 506, 359, 614, 521, 198, 613,
	189, 198, 162, 585, 384, 575, 101, 520, 369, 102,
	505, 117, 118, 103, 483, 482, 480, 162, 404, 399,
	106, 107, 198, 198, 198, 109, 183, 110, 506, 111,
	101, 198, 359, 102, 402, 277, 188, 103, 105, 114,
	112, 113, 198, 415, 198, 198, 359, 198, 639, 198,
	198, 198, 198, 359, 198, 359, 359, 198, 198, 665,
	198, 30, 198, 198, 121, 372, 454, 486, 546, 183,
	547, 432, 640, 641, 156, 74, 286, 284, 198, 184,
	185, 187, 664, 663, 270, 198, 198, 198, 198, 296,
	101, 461, 651, 102, 270, 272, 210, 103, 162, 211,
	268, 101, 156, 198, 102, 272, 198, 101, 103, 132,
	102, 198, 457, 649, 103, 320, 198, 186, 453, 208,
	329, 462, 209, 133, 338, 342, 458, 459, 647, 460,
	624, 156, 349, 350, 162, 271, 473, 617, 472, 470,
	270, 572, 565, 357, 682, 271, 679, 678, 108, 356,
	461, 272, 162, 198, 598, 213, 475, 474, 101, 366,
	478, 102, 495, 507, 599, 103, 488, 500, 156, 355,
	156, 496, 305, 198, 503, 283, 198, 468, 504, 508,
	492, 493, 494, 405, 117, 118, 198, 198, 466, 517,
	490, 403, 464, 106, 107, 489, 401, 527, 109, 189,
	110, 394, 111, 119, 120, 530, 187, 541, 541, 401,
	502, 105, 114, 112, 113, 299, 381, 108, 162, 382,
	677, 549, 679, 678, 450, 593, 451, 526, 525, 141,
	78, 562, 169, 563, 564, 454, 452, 566, 212, 561,
	409, 198, 198, 408, 198, 536, 162, 367, 573, 567,
	141, 78, 140, 117, 118, 535, 577, 578, 141, 78,
	567, 580, 106, 107, 579, 441, 440, 109, 437, 110,
	156, 111, 587, 425, 420, 162, 590, 407, 406, 405,
	105, 114, 112, 113, 347, 346, 524, 667, 526, 525,
	265, 235, 373, 198, 603, 604, 424, 354, 1, 198,
	219, 92, 91, 90, 89, 88, 87, 41, 40, 39,
	611, 38, 162, 517, 162, 542, 20, 43, 198, 44,
	16, 618, 620, 622, 198, 12, 13, 198, 198, 625,
	619, 621, 623, 11, 626, 45, 24, 629, 504, 23,
	22, 27, 198, 19, 10, 35, 610, 18, 15, 71,
	42, 17, 46, 37, 162, 36, 31, 29, 32, 198,
	75, 0, 0, 0, 0, 0, 645, 0, 198, 0,
	502, 648, 0, 650, 0, 652, 0, 0, 0, 0,
	198, 198, 0, 567, 0, 567, 0, 567, 0, 0,
	0, 0, 53, 0, 659, 660, 661, 0, 0, 198,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	541, 541, 541, 0, 162, 0, 673, 0, 0, 198,
	0, 680, 0, 0, 0, 0, 681, 0, 0, 684,
	108, 304, 541, 0, 685, 686, 541, 541, 541, 687,
	138, 0, 0, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 199, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 118, 0, 0,
	0, 0, 163, 0, 601, 106, 107, 199, 199, 199,
	109, 0, 110, 0, 111, 0, 199, 0, 0, 0,
	162, 0, 198, 105, 114, 112, 113, 199, 0, 199,
	199, 0, 199, 0, 199, 199, 199, 199, 0, 199,
	0, 0, 199, 199, 162, 199, 0, 199, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 199, 0, 0, 633, 0, 0, 0,
	199, 199, 199, 199, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 163, 0, 0, 0, 0, 199, 0,
	0, 199, 0, 0, 0, 198, 199, 117, 118, 0,
	321, 199, 0, 0, 0, 330, 106, 107, 0, 339,
	343, 109, 198, 110, 0, 111, 119, 120, 0, 163,
	0, 0, 0, 0, 105, 114, 112, 113, 0, 0,
	0, 518, 0, 0, 0, 0, 0, 163, 199, 0,
	0, 0, 70, 160, 69, 79, 161, 78, 164, 143,
	0, 151, 95, 0, 165, 153, 0, 0, 199, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 199, 0, 0, 0, 0, 0, 81, 0,
	0, 34, 96, 97, 93, 0, 0, 148, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 149, 150, 0,
	0, 0, 0, 163, 0, 0, 0, 0, 0, 147,
	0, 154, 0, 94, 73, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 199, 0, 199,
	0, 163, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 159, 0, 0, 159, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	163, 159, 0, 0, 0, 0, 159, 159, 159, 0,
	0, 0, 0, 0, 0, 159, 0, 0, 199, 0,
	0, 0, 0, 0, 199, 0, 159, 0, 159, 159,
	0, 159, 0, 159, 159, 159, 159, 163, 159, 163,
	0, 159, 159, 199, 159, 0, 159, 159, 0, 199,
	0, 0, 199, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 159, 0, 0, 108, 0, 199, 0, 159,
	159, 159, 159, 0, 0, 0, 0, 0, 0, 163,
	0, 0, 159, 0, 199, 0, 0, 159, 0, 0,
	159, 0, 0, 199, 0, 159, 0, 0, 0, 0,
	159, 117, 118, 0, 0, 199, 199, 0, 159, 0,
	106, 107, 0, 0, 0, 109, 0, 110, 159, 111,
	119, 120, 0, 0, 199, 0, 0, 0, 105, 114,
	112, 113, 199, 0, 0, 418, 159, 159, 0, 163,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 70,
	160, 69, 79, 161, 78, 164, 143, 159, 0, 95,
	159, 165, 153, 0, 0, 0, 0, 0, 0, 0,
	159, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 602,
	85, 86, 159, 0, 108, 0, 0, 0, 0, 469,
	0, 0, 0, 0, 0, 163, 306, 199, 154, 0,
	94, 73, 72, 0, 0, 159, 159, 0, 159, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	117, 118, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 0, 0, 0, 109, 0, 110, 0, 111, 159,
	0, 634, 0, 0, 9, 0, 0, 105, 114, 112,
	113, 0, 0, 0, 589, 0, 0, 159, 0, 0,
	0, 0, 0, 159, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 159, 0, 159, 0,
	0, 0, 159, 0, 0, 0, 0, 199, 159, 0,
	0, 159, 159, 0, 0, 155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 159, 0, 202, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 0,
	0, 0, 0, 159, 218, 0, 0, 0, 0, 224,
	225, 226, 159, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 159, 159, 0, 0, 0, 234,
	0, 236, 237, 0, 239, 0, 241, 242, 243, 244,
	0, 246, 0, 159, 250, 251, 0, 254, 0, 257,
	260, 159, 0, 214, 0, 0, 0, 0, 159, 0,
	108, 0, 0, 159, 0, 278, 0, 0, 0, 0,
	0, 0, 285, 287, 291, 293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	307, 0, 0, 260, 0, 0, 117, 118, 260, 0,
	0, 0, 0, 260, 0, 106, 107, 0, 0, 0,
	109, 340, 110, 0, 111, 119, 120, 203, 0, 0,
	0, 155, 0, 105, 114, 112, 113, 0, 0, 0,
	395, 215, 0, 0, 159, 0, 159, 0, 0, 368,
	375, 0, 0, 70, 160, 69, 79, 161, 78, 164,
	143, 0, 151, 95, 0, 165, 153, 0, 159, 0,
	340, 0, 238, 388, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 391, 392, 0, 0, 0, 0, 81,
	0, 0, 0, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 303, 159,
	306, 0, 154, 0, 94, 73, 72, 0, 108, 0,
	0, 308, 0, 0, 0, 0, 159, 0, 428, 429,
	0, 431, 0, 218, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 117, 118, 358, 0, 108, 0,
	0, 0, 155, 106, 107, 0, 0, 0, 109, 0,
	110, 376, 111, 119, 120, 380, 0, 0, 0, 0,
	455, 105, 114, 112, 113, 116, 194, 0, 0, 0,
	0, 0, 0, 0, 117, 118, 0, 108, 0, 155,
	0, 218, 0, 106, 107, 471, 0, 0, 109, 0,
	110, 260, 111, 0, 477, 479, 0, 0, 0, 0,
	0, 105, 114, 112, 113, 104, 0, 0, 588, 491,
	0, 0, 0, 117, 118, 0, 0, 416, 0, 0,
	0, 501, 106, 107, 0, 0, 509, 109, 0, 110,
	0, 111, 0, 421, 0, 375, 0, 0, 0, 430,
	105, 114, 112, 113, 116, 0, 0, 522, 523, 0,
	0, 0, 0, 70, 374, 69, 79, 197, 78, 136,
	80, 0, 0, 95, 0, 0, 194, 0, 0, 0,
	0, 0, 0, 0, 557, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 509, 0, 0, 81,
	0, 0, 0, 96, 97, 93, 0, 0, 0, 82,
	83, 463, 84, 0, 85, 86, 465, 467, 0, 0,
	0, 359, 0, 0, 0, 302, 0, 0, 0, 0,
	76, 476, 77, 371, 94, 73, 72, 0, 481, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 499,
	0, 0, 0, 0, 0, 0, 0, 609, 0, 375,
	513, 0, 515, 0, 0, 0, 519, 0, 0, 0,
	70, 160, 69, 79, 161, 78, 164, 143, 0, 0,
	95, 501, 165, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 33, 192, 0, 552, 0,
	554, 0, 556, 0, 558, 515, 81, 0, 0, 0,
	96, 97, 93, 0, 0, 148, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 654, 0, 576, 0, 0, 306, 0, 154,
	0, 94, 73, 72, 139, 142, 0, 0, 0, 662,
	584, 0, 0, 0, 586, 0, 195, 0, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 276, 0, 0, 279,
	195, 195, 195, 0, 608, 0, 0, 0, 108, 195,
	300, 0, 0, 0, 0, 616, 0, 0, 0, 0,
	195, 0, 195, 195, 0, 195, 0, 195, 195, 195,
	195, 0, 195, 108, 0, 195, 195, 0, 195, 0,
	195, 195, 0, 0, 117, 118, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 195, 0, 109, 0,
	110, 643, 111, 195, 195, 195, 195, 0, 0, 117,
	118, 105, 114, 112, 113, 116, 0, 0, 106, 107,
	653, 195, 0, 109, 195, 110, 0, 111, 0, 195,
	0, 117, 118, 0, 195, 0, 105, 114, 112, 113,
	106, 107, 195, 0, 0, 109, 0, 110, 0, 111,
	119, 120, 0, 0, 0, 0, 675, 389, 105, 114,
	112, 113, 0, 400, 0, 0, 0, 0, 0, 0,
	683, 195, 410, 0, 0, 413, 0, 0, 0, 0,
	0, 0, 0, 70, 160, 69, 79, 161, 78, 164,
	80, 195, 0, 95, 195, 165, 0, 0, 423, 0,
	426, 0, 0, 0, 195, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 412, 85, 86, 0, 0, 0, 0,
	0, 359, 0, 0, 0, 0, 448, 449, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 0, 0, 195,
	195, 0, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 497,
	0, 195, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 514, 516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 0, 0, 0,
	0, 0, 195, 0, 528, 195, 195, 0, 532, 533,
	0, 534, 0, 0, 0, 0, 0, 548, 0, 550,
	195, 0, 0, 0, 0, 0, 0, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 568, 0, 0, 195, 0, 0, 569,
	570, 571, 0, 0, 0, 0, 0, 0, 195, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 591, 592, 195, 0, 0, 0, 0,
	0, 0, 597, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 605, 0, 607, 0, 0, 0,
	0, 0, 0, 0, 70, 196, 69, 79, 197, 78,
	136, 80, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	81, 0, 631, 0, 96, 97, 93, 636, 637, 638,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	195, 0, 359, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 612, 94, 73, 72, 0, 656,
	657, 658, 0, 0, 0, 0, 0, 448, 449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 635, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 672, 543, 671, 670, 544, 48, 49, 0, 61,
	62, 59, 0, 195, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	195, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 539, 540, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 50, 69, 79, 51, 78, 54, 80, 0, 0,
	95, 0, 0, 0, 47, 668, 543, 671, 670, 544,
	48, 49, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 539, 540,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 50, 69, 79, 51, 78,
	54, 80, 0, 0, 95, 0, 0, 0, 47, 529,
	57, 447, 446, 58, 48, 49, 0, 61, 62, 59,
	0, 0, 65, 66, 0, 67, 64, 60, 0, 0,
	81, 63, 0, 68, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 70, 50,
	69, 79, 51, 78, 54, 80, 0, 0, 95, 0,
	0, 0, 47, 444, 57, 447, 446, 58, 48, 49,
	0, 61, 62, 59, 0, 0, 65, 66, 0, 67,
	64, 60, 0, 0, 81, 63, 0, 68, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	73, 72, 70, 50, 69, 79, 51, 78, 54, 80,
	0, 0, 95, 0, 0, 0, 47, 0, 57, 0,
	0, 58, 48, 49, 0, 61, 62, 59, 454, 486,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 73, 72, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 594, 57, 0, 0, 58, 48, 49, 0, 61,
	62, 59, 0, 595, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 50, 69, 79, 51, 78, 54, 80, 0, 0,
	95, 0, 0, 0, 47, 0, 57, 0, 0, 58,
	48, 49, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 6, 7,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 8, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	674, 543, 0, 0, 544, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 539, 540, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 655, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 642, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 606, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 596, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	0, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 582, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 574, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 545, 543,
	0, 0, 544, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 539, 540, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 538, 543, 0, 0, 544, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 539, 540, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 531, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	510, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 498, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 422, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 414, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 411, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	0, 543, 0, 0, 544, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 539, 540, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 0, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 379, 0, 95, 0, 0, 0, 47, 0, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 0, 378, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 0, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 359, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 0, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 70, 196, 69, 79, 197, 78,
	136, 80, 0, 0, 95, 0, 165, 0, 76, 0,
	77, 0, 94, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 359, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 70, 196,
	69, 79, 197, 78, 136, 80, 0, 0, 95, 0,
	0, 0, 70, 196, 69, 79, 197, 78, 136, 387,
	0, 0, 95, 0, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 81, 85,
	86, 0, 96, 97, 93, 0, 359, 385, 82, 83,
	302, 84, 0, 85, 86, 76, 0, 77, 0, 94,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 386,
	0, 154, 0, 94, 73, 72, 70, 374, 69, 79,
	197, 78, 136, 80, 0, 0, 95, 0, 0, 0,
	70, 160, 69, 79, 161, 78, 164, 143, 0, 0,
	95, 0, 165, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 81, 85, 86, 0,
	96, 97, 93, 0, 359, 0, 82, 83, 0, 84,
	0, 85, 86, 76, 0, 77, 371, 94, 73, 72,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 154,
	0, 94, 73, 72, 70, 196, 69, 79, 197, 78,
	136, 80, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 359, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 70, 196,
	69, 79, 197, 78, 136, 80, 0, 0, 95, 0,
	0, 0, 70, 160, 69, 79, 161, 78, 164, 217,
	0, 0, 95, 0, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 63, 0, 0, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 81, 85,
	86, 0, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 76, 0, 77, 0, 94,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 73, 72, 70, 196, 69, 79,
	197, 78, 136, 80, 0, 0, 95, 0, 0, 0,
	70, 337, 69, 79, 197, 78, 136, 80, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 81, 85, 86, 0,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 76, 0, 77, 0, 94, 73, 72,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 160, 69, 79, 161, 78,
	164, 80, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72,
}
var RubyPact = []int{

	-38, 2874, -1000, -1000, -1000, 11, -1000, -1000, -1000, 1534,
	-1000, -1000, -1000, -1000, 289, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 170, 90, -1000, 98, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 40, 498, 469,
	856, 59, 168, 155, 268, 316, 235, 4355, 4355, -1000,
	4820, 4355, 4355, 4820, 4908, 347, 324, -1000, 480, -1000,
	-1000, 389, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4746,
	-1000, 15, 4355, 4355, 4820, 4820, 4820, -1000, -1000, -1000,
	-1000, -1000, -1000, 4820, 28, -1000, -1000, -1000, -1000, -1000,
	-1000, 4355, 4355, 4355, 4820, 534, 4820, 4820, -1000, 4820,
	4355, 4820, 4820, 4820, 4820, 4355, 4820, -1000, -1000, 4820,
	4820, 4355, 4820, 4355, 4820, 4820, 4355, 4355, 4355, 4355,
	533, 337, 86, 64, 337, -1000, -1000, -1000, -1000, 236,
	4820, 471, -1000, -1000, 15, -1000, 58, 4820, 4732, 4820,
	4820, 30, 450, -4, -1000, 676, -1000, -1000, 407, 153,
	1804, 145, 164, 150, 225, 4820, -1000, -1000, 4820, -1000,
	4355, 4355, 4355, 4820, 4355, 4355, 4355, 24, 4820, 4355,
	4355, 4355, 22, 4355, 4355, 4355, 4834, 21, 528, 527,
	386, 318, 4133, 404, 1949, 87, 4584, 151, 76, 67,
	335, 329, 1949, 169, 404, -1000, -1000, 1924, 4355, 4355,
	4355, 4355, 401, -1000, 2057, 4570, 410, -1000, 676, 4207,
	-1000, -1000, 386, 386, 1949, 1949, 1949, 1949, -1000, -1000,
	459, 386, 386, 386, 1949, 4496, 1949, 1949, 4658, 1949,
	386, 1949, 1949, 1949, 1949, 386, 1971, 103, 4658, 4658,
	1949, 1949, 386, 129, 1376, 51, 386, 1949, 126, 39,
	394, 386, 386, 386, 386, 15, -1000, 444, 383, -1000,
	217, 522, 521, 520, 486, -1000, 3985, 469, 1949, 3911,
	2057, -1000, -1000, -1000, 123, 1041, 23, 1613, -1000, -1000,
	-1000, 1924, -1000, 1924, -1000, -1000, -1000, -1000, 517, -1000,
	3837, -1000, 516, 1687, 4820, -1000, 4820, 1949, 2057, 85,
	-5, 386, 386, 386, 81, -14, 386, 386, 386, -1000,
	-1000, -1000, 511, 80, -23, 386, 386, 386, -1000, -1000,
	-1000, 509, 386, 386, 386, 441, 436, 1457, 74, 53,
	1949, -1000, -1000, -1000, 508, 434, 62, 61, 2652, -1000,
	-1000, -1000, -1000, 386, 453, 4820, -1000, -1000, 169, -1000,
	356, 4820, 386, 386, 386, 386, -1000, 427, 1949, -1000,
	-1000, -1000, 423, 412, 1123, 676, 2057, 386, -1000, -1000,
	4482, -1000, -1000, -1000, 15, 4355, 4820, -1000, 1949, 4820,
	4820, 1949, 1949, 215, -1000, 214, -1000, 213, -1000, -1000,
	2726, 327, 431, 426, 4820, -1000, -1000, 337, 337, 337,
	2726, -1000, -1000, 3763, -1000, 402, 2057, 209, 227, -1000,
	-1000, 4408, -1000, 3689, 146, -1000, 4133, -1000, 676, 1949,
	4658, 777, 410, 206, -1000, 196, -1000, -1000, -1000, -1000,
	-1000, -1000, 4820, 4820, -1000, 515, 4355, -1000, 2578, 3615,
	-1000, -1000, -1000, -1000, 490, 1949, 3541, 3467, 297, -1000,
	-1000, 4820, 404, 7, -1000, -9, -1000, -10, -1000, 4820,
	410, 1949, -1000, 386, 63, -42, 2057, 1949, -1000, 394,
	4355, 4658, 4355, 4355, 371, 284, -1000, -1000, -1000, -1000,
	-1000, 1949, -1000, -1000, -1000, 370, 284, 3393, -1000, 241,
	-1000, 676, -1000, -1000, 407, 4355, 4355, 507, -1000, 1949,
	-1000, -1000, 504, -11, 3319, -15, 4133, -1000, 193, 239,
	-1000, 4355, 1574, 1180, -1000, 4355, -1000, 386, 4133, -1000,
	454, -1000, 2800, 3245, 4133, 399, 32, -1000, -1000, -1000,
	-1000, 386, -1000, 4355, 4355, -1000, -1000, -1000, 3171, 404,
	4133, -1000, 2057, -1000, 2328, -1000, 242, 1949, 232, 183,
	-1000, 402, 386, 386, 386, -1000, 366, -1000, 4133, 2726,
	2726, 2726, -1000, 359, -1000, 15, 2057, 386, 386, 41,
	-1000, -1000, -1000, -1000, -19, -1000, 4281, 386, 398, -1000,
	386, 4133, 4133, -1000, -1000, -1000, -1000, 4133, 16, 469,
	-1000, -1000, -1000, 234, 258, 3097, -1000, 4133, 167, 1949,
	-1000, -1000, -1000, 100, -1000, 4355, 218, -1000, 357, 284,
	342, 284, 321, 284, -1000, -1000, -1000, 4820, -1000, 386,
	4133, 3023, -1000, -1000, -1000, -1000, 4133, 4133, 4133, -1000,
	-1000, -1000, -1000, 167, 4820, 386, -1000, -1000, 312, -1000,
	311, -1000, 288, 181, 463, -1000, 4133, 4133, 4133, 2504,
	2430, 2949, 221, -1000, -1000, -1000, -1000, -1000, -1000, 449,
	4355, -1000, -1000, 373, -1000, 167, -1000, -1000, 4355, -1000,
	386, 4059, -1000, 167, 386, 4059, 4059, 4059,
}
var RubyPgo = []int{

	0, 610, 0, 325, 608, 19, 3, 607, 606, 605,
	603, 13, 602, 41, 601, 7, 600, 43, 599, 598,
	597, 1244, 311, 642, 901, 595, 594, 593, 591, 590,
	589, 586, 585, 583, 576, 14, 187, 575, 570, 1835,
	17, 30, 569, 567, 25, 566, 565, 5, 21, 561,
	559, 558, 557, 556, 555, 554, 553, 552, 551, 1776,
	550, 10, 18, 24, 6, 548, 22, 4, 1, 547,
	12, 546, 9, 542, 20, 16, 15, 505, 497, 8,
	11, 1373,
}
var RubyR1 = []int{

	0, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 81, 81, 59, 59, 59, 59, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 32, 32, 32, 32,
	32, 32, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 18, 18, 44, 16, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 25, 62, 62, 62, 62, 72, 72, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 15, 74,
	74, 68, 68, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 66, 66, 66, 76, 76, 76, 35,
	35, 35, 35, 33, 33, 34, 37, 39, 39, 39,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 19,
	19, 19, 75, 75, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 36, 36,
	23, 23, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 8, 3,
	1, 78, 78, 78, 78, 78, 78, 78, 4, 4,
	4, 4, 79, 80, 80, 73, 73, 73, 6, 6,
	6, 6, 6, 6, 63, 71, 71, 71, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 64,
	64, 64, 64, 60, 60, 60, 9, 20, 20, 20,
	20, 11, 11, 11, 11, 11, 11, 11, 11, 77,
	77, 69, 69, 61, 61, 27, 27, 28, 29, 29,
	29, 29, 31, 31, 31, 30, 30, 30, 13, 13,
	45, 45, 45, 67, 67, 67, 67, 67, 46, 46,
	46, 46, 46, 47, 47, 47, 47, 43, 42, 10,
	41, 41, 41, 41, 40, 40, 5, 5, 7, 12,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 2, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 6, 7, 1,
	2, 6, 6, 2, 3, 2, 3, 4, 5, 4,
	3, 4, 5, 2, 3, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 6, 6, 6, 6, 6, 6, 7, 6,
	6, 8, 4, 5, 8, 1, 4, 1, 3, 0,
	1, 1, 1, 1, 4, 4, 4, 4, 2, 1,
	4, 0, 2, 6, 7, 8, 8, 8, 9, 9,
	9, 6, 7, 1, 3, 3, 0, 1, 3, 1,
	2, 3, 2, 4, 6, 5, 4, 1, 2, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 9, 6, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 3, 3, 3, 3, 4, 3, 3, 3, 4,
	3, 3, 3, 4, 3, 3, 3, 4, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 5, 1,
	1, 0, 1, 1, 1, 4, 4, 4, 3, 5,
	6, 5, 3, 1, 4, 3, 7, 8, 3, 4,
	5, 5, 5, 6, 3, 0, 1, 3, 4, 5,
	3, 3, 3, 3, 3, 5, 6, 5, 3, 4,
	3, 3, 2, 0, 2, 2, 3, 4, 6, 8,
	6, 2, 3, 5, 5, 5, 4, 4, 4, 1,
	3, 0, 2, 1, 2, 2, 1, 1, 2, 2,
	2, 1, 1, 3, 3, 1, 3, 3, 5, 5,
	5, 5, 3, 0, 2, 2, 2, 2, 5, 6,
	5, 6, 5, 4, 3, 3, 2, 4, 4, 2,
	5, 7, 4, 6, 4, 5, 3, 3, 3, 2,
}
var RubyChk = []int{

	-1000, -65, 64, 65, 80, -2, 64, 65, 80, -21,
	-26, -33, -37, -34, -17, -19, -38, -14, -20, -27,
	-45, -41, -29, -30, -31, -44, -5, -28, -13, -7,
	-22, -8, -4, -39, -24, -25, -9, -10, -49, -50,
	-51, -52, -16, -43, -42, -32, -12, 20, 26, 27,
	7, 10, -36, -23, 12, -48, -75, 22, 25, 31,
	39, 29, 30, 43, 38, 34, 35, 37, 45, 8,
	6, -18, 79, 78, -3, -1, 73, 75, 11, 9,
	13, 42, 52, 53, 55, 57, 58, -53, -54, -55,
	-56, -57, -58, 48, 77, 16, 46, 47, 65, 64,
	80, 22, 25, 29, 32, 67, 49, 50, 4, 54,
	56, 58, 69, 70, 68, 25, 71, 40, 41, 59,
	60, 25, 73, 51, 49, 73, 61, 62, 22, 25,
	67, 7, -22, -3, 4, 10, 12, -36, -23, -39,
	4, 10, -39, 13, -62, -6, -70, 73, 51, 61,
	62, 15, -74, 19, 75, -21, -17, -15, -80, -24,
	7, 10, -36, -23, 12, 18, -79, 13, 73, 11,
	51, 61, 62, 73, 51, 61, 62, 15, 73, 51,
	61, 62, 15, 51, 61, 62, 51, 15, 51, 15,
	-2, -2, -59, -72, -21, -39, 7, 10, -36, -23,
	-2, -2, -21, -81, -72, -13, -17, -21, 22, 25,
	22, 25, 8, 16, -81, -81, -70, 13, -21, -60,
	-6, 75, -2, -2, -21, -21, -21, -21, 7, 10,
	77, -2, -2, -2, -21, 7, -21, -21, -81, -21,
	-2, -21, -21, -21, -21, -2, -21, -5, -81, -81,
	-21, -21, -2, -74, -21, -5, -2, -21, -74, -5,
	-21, -2, -2, -2, -2, 7, -66, -76, 13, -35,
	7, 58, 18, 67, 67, -66, -59, 49, -21, -59,
	-81, -6, -6, 15, -74, -21, -5, -21, -44, -13,
	-41, -21, -13, -21, -13, 7, -36, -23, 58, 15,
	-59, -63, 68, -81, 5, 15, 73, -21, -81, -74,
	-5, -2, -2, -2, -74, -5, -2, -2, -2, 7,
	-36, -23, 58, -74, -5, -2, -2, -2, 7, -36,
	-23, 58, -2, -2, -2, -48, -74, 7, -36, -23,
	-21, 7, -36, -23, 58, -75, 7, 7, -59, 64,
	65, 64, 65, -2, -69, 15, 64, 64, -81, 64,
	-40, 44, -2, -2, -2, -2, 8, -78, -21, -17,
	-15, 76, -80, -73, 7, -21, -81, -2, 65, 14,
	-81, 7, 10, -6, -62, 51, 73, 13, -21, 66,
	66, -21, -21, 74, 15, 74, 74, 74, 74, -6,
	-59, 15, -76, 58, 51, 7, 7, 7, 7, 4,
	-59, 21, -39, -59, 21, -70, -81, 74, 74, 74,
	7, -81, 21, -59, -71, 7, -59, -63, -21, -21,
	-81, -21, -70, 74, 74, 74, 74, 7, 74, 74,
	7, 7, 73, 73, 21, -64, 24, 23, -59, -59,
	21, 23, 33, -11, 32, -21, -67, -67, -40, 21,
	23, 44, -72, -81, 15, -81, 15, -81, 15, 66,
	-70, -21, -6, -2, -74, -5, -81, -21, -5, -21,
	51, -81, 51, 51, -68, -61, 33, -11, -35, 14,
	14, -21, -66, -66, -66, -68, -61, -59, 21, -81,
	15, -21, -17, -15, -80, 51, 51, 15, -15, -21,
	21, 68, 15, -81, -59, -81, -59, -79, 74, -81,
	51, 51, -21, -21, 21, 24, 23, -2, -59, 21,
	-64, 21, -59, -59, -59, -77, 5, -39, 21, 64,
	65, -2, -46, 22, 25, 21, 21, 23, -59, -72,
	-59, 74, -81, 76, -81, 76, -81, -21, -81, 74,
	74, -70, -2, -2, -2, 21, -68, -11, -59, -59,
	-59, -59, 21, -68, 21, 14, -81, -2, -2, 7,
	7, 76, 76, 76, -81, 14, -81, -2, 74, 74,
	-2, -59, -59, 21, 21, 33, 21, -59, 5, 15,
	7, -36, -23, -2, -2, -59, 21, -59, -81, -21,
	-17, -15, 76, 7, 14, 51, -81, 21, -68, -61,
	-68, -61, -68, -61, 21, -6, -15, 73, 76, -2,
	-59, -59, 7, -36, -23, -39, -59, -59, -59, 64,
	64, 65, 21, -81, 66, -2, 14, 21, -68, 21,
	-68, 21, -68, -81, -21, 21, -59, -59, -59, -67,
	-67, -67, -21, 21, 21, 21, 14, 74, 21, -47,
	24, 23, 21, -47, 21, -81, 15, 21, 24, 23,
	-2, -67, 21, -81, -2, -67, -67, -67,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 0, 0, 0,
	20, 21, 23, 24, 22, 0, 0, 0, 0, 13,
	296, 0, 0, 11, 301, 305, 302, 297, 0, 17,
	18, 19, 25, 26, 27, 28, 11, 11, 169, 79,
	273, 0, 0, 0, 0, 0, 0, 46, 47, 48,
	49, 50, 51, 0, 0, 73, 229, 230, 5, 6,
	7, 0, 0, 0, 0, 0, 0, 0, 11, 0,
	0, 0, 0, 0, 0, 0, 0, 11, 11, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 0, 156, 21, 22, 23, 24, 13,
	0, 167, 13, -2, 83, 85, 93, 11, 0, 0,
	0, 0, 125, 13, 11, 130, 131, 132, 133, 33,
	20, 21, 23, 24, 22, 0, 243, 11, 0, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 291, 295, 127, 32, 20, 21, 23, 24,
	0, 0, 11, 0, 298, 299, 300, 127, 0, 0,
	0, 0, 0, 74, 231, 0, 80, -2, 130, 0,
	329, 11, 218, 219, 220, 221, 76, 339, 198, 199,
	0, 260, 268, 312, 75, 86, 95, 97, 0, 222,
	223, 224, 225, 226, 227, 262, 0, 0, 0, 0,
	336, 337, 264, 0, 139, 0, 178, 96, 0, 0,
	139, 190, 197, 261, 263, 90, 13, 153, 156, 157,
	159, 0, 0, 0, 0, 13, 0, 0, 13, 0,
	129, 84, 94, 11, 0, 139, 0, 170, 171, 172,
	173, 184, 185, 191, 192, 202, 203, 204, 0, 11,
	0, 13, 255, 13, 0, 11, 11, 138, 129, 0,
	0, 174, 186, 193, 0, 0, 175, 187, 194, 206,
	207, 208, 0, 0, 0, 176, 188, 195, 210, 211,
	212, 0, 177, 189, 196, 179, 180, 20, 23, 24,
	139, 214, 215, 216, 0, 181, 0, 0, 0, 13,
	13, 14, 15, 16, 0, 0, 313, 313, 0, 12,
	0, 0, 306, 307, 303, 304, 338, 11, 232, 233,
	234, 238, 11, 11, -2, 0, 129, 274, 275, 276,
	13, 200, 201, 87, 89, 0, 11, -2, 122, 0,
	0, 327, 328, 101, 11, 102, 103, 110, 111, 91,
	141, 0, 0, 0, 0, 160, 162, 156, 156, 156,
	141, 163, 13, 0, 166, 11, 0, 98, 99, 100,
	205, 0, 248, 0, 0, 256, 11, 13, -2, 242,
	0, 139, 11, 104, 105, 106, 107, 209, 108, 109,
	213, 217, 0, 0, 258, 0, 0, 13, 0, 0,
	277, 13, 13, 292, 13, 128, 0, 0, 0, 332,
	13, 0, 13, 0, 11, 0, 11, 0, 11, 0,
	11, -2, 88, 92, 0, 0, 129, 308, 309, 0,
	0, 0, 0, 0, 0, 141, 13, 293, 158, 154,
	155, 161, 13, 13, 13, 0, 141, 0, 165, 0,
	11, 134, 135, 136, 137, 0, 0, 0, 126, 140,
	249, 254, 0, 0, 0, 0, 11, 244, 99, 0,
	11, 0, 0, 0, 259, 0, 13, 13, 272, 265,
	0, 267, 0, 0, 281, 13, 0, 289, 310, 314,
	315, 316, 317, 0, 0, 311, 330, 13, 0, 13,
	11, 228, 0, 239, 0, 241, 0, 245, 0, 112,
	113, 11, 116, 117, 120, 143, 0, 294, 142, 141,
	141, 141, 151, 0, 164, 77, 0, 114, 115, 0,
	257, 250, 251, 252, 0, 82, 0, 119, 0, 183,
	13, 270, 271, 266, 278, 13, 280, 282, 0, 0,
	13, 13, 13, 13, 0, 0, 333, 11, 334, 235,
	236, 237, 240, 0, 81, 0, 0, 144, 0, 141,
	0, 141, 0, 141, 152, 78, -2, 0, 253, 118,
	269, 0, 13, 13, 13, 290, 286, 287, 288, 313,
	13, 13, 331, 335, 0, 121, 123, 145, 0, 146,
	0, 147, 0, 0, 0, 279, 283, 284, 285, 0,
	0, 0, 11, 148, 149, 150, 124, 182, 318, 0,
	0, 313, 320, 0, 322, 246, 11, 319, 0, 313,
	313, 326, 321, 247, 313, 324, 325, 323,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:235
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:237
		{
		}
	case 3:
		//line parser.y:239
		{
		}
	case 4:
		//line parser.y:241
		{
		}
	case 5:
		//line parser.y:243
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:245
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:247
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:253
		{
		}
	case 11:
		//line parser.y:255
		{
		}
	case 12:
		//line parser.y:256
		{
		}
	case 13:
		//line parser.y:259
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 14:
		//line parser.y:261
		{
		}
	case 15:
		//line parser.y:263
		{
		}
	case 16:
		//line parser.y:265
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 17:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 18:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:276
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 74:
		//line parser.y:278
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 75:
		//line parser.y:286
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 76:
		//line parser.y:289
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:292
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:301
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:311
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:317
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 81:
		//line parser.y:325
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:334
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:343
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:352
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:362
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:372
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:381
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:392
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:403
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:413
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:423
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:434
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:447
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 94:
		//line parser.y:455
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 95:
		//line parser.y:464
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 96:
		//line parser.y:473
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:482
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:493
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 99:
		//line parser.y:502
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:511
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 101:
		//line parser.y:520
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 102:
		//line parser.y:529
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 103:
		//line parser.y:538
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 104:
		//line parser.y:547
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 105:
		//line parser.y:556
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 106:
		//line parser.y:565
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 107:
		//line parser.y:574
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 108:
		//line parser.y:583
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 109:
		//line parser.y:592
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 110:
		//line parser.y:601
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 111:
		//line parser.y:610
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 112:
		//line parser.y:619
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 113:
		//line parser.y:632
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 114:
		//line parser.y:648
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:657
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:666
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 117:
		//line parser.y:675
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 118:
		//line parser.y:684
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 119:
		//line parser.y:693
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 120:
		//line parser.y:702
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 121:
		//line parser.y:711
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 122:
		//line parser.y:726
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 123:
		//line parser.y:738
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 124:
		//line parser.y:740
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 125:
		//line parser.y:742
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 126:
		//line parser.y:744
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:747
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:749
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:752
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 130:
		//line parser.y:754
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 131:
		//line parser.y:756
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 132:
		//line parser.y:758
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:760
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 134:
		//line parser.y:767
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:769
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:771
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:773
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 138:
		//line parser.y:782
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 139:
		//line parser.y:793
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 140:
		//line parser.y:795
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 141:
		//line parser.y:799
		{
			RubyVAL.genericSlice = nil
		}
	case 142:
		//line parser.y:801
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 143:
		//line parser.y:804
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 144:
		//line parser.y:815
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 145:
		//line parser.y:827
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:839
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 147:
		//line parser.y:851
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 148:
		//line parser.y:863
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 149:
		//line parser.y:876
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 150:
		//line parser.y:889
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 151:
		//line parser.y:902
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 152:
		//line parser.y:913
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 153:
		//line parser.y:927
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 154:
		//line parser.y:929
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 155:
		//line parser.y:931
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 156:
		//line parser.y:933
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 157:
		//line parser.y:935
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 158:
		//line parser.y:937
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 159:
		//line parser.y:940
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 160:
		//line parser.y:942
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 161:
		//line parser.y:944
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 162:
		//line parser.y:946
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 163:
		//line parser.y:950
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 164:
		//line parser.y:960
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 165:
		//line parser.y:972
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 166:
		//line parser.y:985
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 167:
		//line parser.y:996
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 168:
		//line parser.y:1005
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 169:
		//line parser.y:1024
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 170:
		//line parser.y:1042
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1051
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 172:
		//line parser.y:1057
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1063
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 174:
		//line parser.y:1065
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1074
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 176:
		//line parser.y:1083
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1092
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 178:
		//line parser.y:1094
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 179:
		//line parser.y:1097
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1106
		{
			var rhs ast.Node = RubyS[Rubypt-0].genericSlice
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				rhs = RubyS[Rubypt-0].genericSlice[0]
			}
			RubyVAL.genericValue = ast.Assignment{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				LHS:  RubyS[Rubypt-2].genericValue,
				RHS:  rhs,
			}
		}
	case 181:
		//line parser.y:1118
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1128
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 183:
		//line parser.y:1143
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 184:
		//line parser.y:1149
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 185:
		//line parser.y:1158
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1164
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1173
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 188:
		//line parser.y:1182
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 189:
		//line parser.y:1191
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:1193
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 191:
		//line parser.y:1202
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 192:
		//line parser.y:1211
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 193:
		//line parser.y:1217
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 194:
		//line parser.y:1226
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 195:
		//line parser.y:1235
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 196:
		//line parser.y:1244
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 197:
		//line parser.y:1246
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 198:
		//line parser.y:1253
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 199:
		//line parser.y:1259
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 200:
		//line parser.y:1266
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 201:
		//line parser.y:1272
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 202:
		//line parser.y:1279
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1281
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1283
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1285
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1288
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 207:
		//line parser.y:1290
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 208:
		//line parser.y:1292
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 209:
		//line parser.y:1294
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 210:
		//line parser.y:1297
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 211:
		//line parser.y:1299
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 212:
		//line parser.y:1301
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 213:
		//line parser.y:1303
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 214:
		//line parser.y:1306
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 215:
		//line parser.y:1308
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 216:
		//line parser.y:1310
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 217:
		//line parser.y:1312
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 218:
		//line parser.y:1316
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 219:
		//line parser.y:1318
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 220:
		//line parser.y:1320
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 221:
		//line parser.y:1322
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 222:
		//line parser.y:1325
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 223:
		//line parser.y:1336
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 224:
		//line parser.y:1347
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 225:
		//line parser.y:1358
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 226:
		//line parser.y:1369
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 227:
		//line parser.y:1380
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 228:
		//line parser.y:1391
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 229:
		//line parser.y:1393
		{
		}
	case 230:
		//line parser.y:1394
		{
		}
	case 231:
		//line parser.y:1396
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 232:
		//line parser.y:1398
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 233:
		//line parser.y:1400
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 234:
		//line parser.y:1402
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 235:
		//line parser.y:1404
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 236:
		//line parser.y:1406
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 237:
		//line parser.y:1408
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 238:
		//line parser.y:1411
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 239:
		//line parser.y:1413
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 240:
		//line parser.y:1415
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Pairs: RubyS[Rubypt-3].hashPairSlice}
		}
	case 241:
		//line parser.y:1417
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 242:
		//line parser.y:1426
		{
			RubyVAL.hashPair = ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue}
		}
	case 243:
		//line parser.y:1429
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 244:
		//line parser.y:1431
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 245:
		//line parser.y:1434
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 246:
		//line parser.y:1441
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 247:
		//line parser.y:1448
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 248:
		//line parser.y:1456
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 249:
		//line parser.y:1461
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 250:
		//line parser.y:1466
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 251:
		//line parser.y:1471
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 252:
		//line parser.y:1476
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 253:
		//line parser.y:1481
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 254:
		//line parser.y:1491
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 255:
		//line parser.y:1493
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 256:
		//line parser.y:1495
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 257:
		//line parser.y:1497
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 258:
		//line parser.y:1500
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 259:
		//line parser.y:1509
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 260:
		//line parser.y:1519
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 261:
		//line parser.y:1528
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 262:
		//line parser.y:1537
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 263:
		//line parser.y:1546
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 264:
		//line parser.y:1555
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 265:
		//line parser.y:1564
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 266:
		//line parser.y:1573
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 267:
		//line parser.y:1583
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 268:
		//line parser.y:1592
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 269:
		//line parser.y:1603
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 270:
		//line parser.y:1612
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 271:
		//line parser.y:1620
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 272:
		//line parser.y:1628
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 273:
		//line parser.y:1636
		{
		}
	case 274:
		//line parser.y:1637
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 275:
		//line parser.y:1638
		{
		}
	case 276:
		//line parser.y:1641
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 277:
		//line parser.y:1644
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 278:
		//line parser.y:1653
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 279:
		//line parser.y:1663
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 280:
		//line parser.y:1673
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 281:
		//line parser.y:1683
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 282:
		//line parser.y:1685
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 283:
		//line parser.y:1699
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 284:
		//line parser.y:1715
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 285:
		//line parser.y:1731
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 286:
		//line parser.y:1747
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 287:
		//line parser.y:1757
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 288:
		//line parser.y:1767
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 289:
		//line parser.y:1779
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 290:
		//line parser.y:1781
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 291:
		//line parser.y:1784
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 292:
		//line parser.y:1786
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 293:
		//line parser.y:1789
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 294:
		//line parser.y:1791
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 295:
		//line parser.y:1794
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 296:
		//line parser.y:1801
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 297:
		//line parser.y:1803
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 298:
		//line parser.y:1806
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 299:
		//line parser.y:1814
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 300:
		//line parser.y:1816
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 301:
		//line parser.y:1818
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 302:
		//line parser.y:1822
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 303:
		//line parser.y:1824
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 304:
		//line parser.y:1826
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 305:
		//line parser.y:1830
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 306:
		//line parser.y:1832
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 307:
		//line parser.y:1834
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 308:
		//line parser.y:1838
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 309:
		//line parser.y:1848
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
			}
		}
	case 310:
		//line parser.y:1858
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 311:
		//line parser.y:1864
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 312:
		//line parser.y:1871
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 313:
		//line parser.y:1878
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 314:
		//line parser.y:1880
		{
		}
	case 315:
		//line parser.y:1882
		{
		}
	case 316:
		//line parser.y:1884
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 317:
		//line parser.y:1886
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 318:
		//line parser.y:1889
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 319:
		//line parser.y:1897
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 320:
		//line parser.y:1906
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 321:
		//line parser.y:1914
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 322:
		//line parser.y:1923
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 323:
		//line parser.y:1932
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 324:
		//line parser.y:1940
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 325:
		//line parser.y:1948
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 326:
		//line parser.y:1956
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 327:
		//line parser.y:1965
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 328:
		//line parser.y:1968
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 329:
		//line parser.y:1971
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 330:
		//line parser.y:1978
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 331:
		//line parser.y:1984
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 332:
		//line parser.y:1990
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 333:
		//line parser.y:1996
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 334:
		//line parser.y:2003
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 335:
		//line parser.y:2005
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 336:
		//line parser.y:2008
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 337:
		//line parser.y:2010
		{
			RubyVAL.genericValue = ast.Range{
				Start:            RubyS[Rubypt-2].genericValue,
				End:              RubyS[Rubypt-0].genericValue,
				Line:             RubyS[Rubypt-2].genericValue.LineNumber(),
				ExcludeLastValue: true,
			}
		}
	case 338:
		//line parser.y:2020
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 339:
		//line parser.y:2027
		{
			RubyVAL.genericValue = ast.Defined{Node: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

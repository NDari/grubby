//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	hashPair        ast.HashKeyValuePair
	astString       ast.String
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const LPAREN = 57355
const RPAREN = 57356
const COMMA = 57357
const STRING = 57358
const NamespacedModule = 57359
const ProcArg = 57360
const DO = 57361
const DEF = 57362
const END = 57363
const IF = 57364
const ELSE = 57365
const ELSIF = 57366
const UNLESS = 57367
const CLASS = 57368
const MODULE = 57369
const FOR = 57370
const WHILE = 57371
const UNTIL = 57372
const BEGIN = 57373
const RESCUE = 57374
const ENSURE = 57375
const BREAK = 57376
const NEXT = 57377
const REDO = 57378
const RETRY = 57379
const RETURN = 57380
const YIELD = 57381
const AND = 57382
const OR = 57383
const LAMBDA = 57384
const CASE = 57385
const WHEN = 57386
const ALIAS = 57387
const SELF = 57388
const NIL = 57389
const DEFINED = 57390
const LESSTHAN = 57391
const GREATERTHAN = 57392
const EQUALTO = 57393
const BANG = 57394
const COMPLEMENT = 57395
const BINARY_PLUS = 57396
const UNARY_PLUS = 57397
const BINARY_MINUS = 57398
const UNARY_MINUS = 57399
const STAR = 57400
const RANGE = 57401
const EXCLUSIVE_RANGE = 57402
const OR_EQUALS = 57403
const AND_EQUALS = 57404
const WHITESPACE = 57405
const NEWLINE = 57406
const SEMICOLON = 57407
const COLON = 57408
const DOT = 57409
const PIPE = 57410
const SLASH = 57411
const AMPERSAND = 57412
const QUESTIONMARK = 57413
const CARET = 57414
const LBRACKET = 57415
const RBRACKET = 57416
const LBRACE = 57417
const RBRACE = 57418
const ATSIGN = 57419
const FILE_CONST_REF = 57420
const LINE_CONST_REF = 57421
const EOF = 57422

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"DEFINED",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"EXCLUSIVE_RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1958

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 130,
	67, 20,
	-2, 149,
	-1, 142,
	20, 266,
	22, 266,
	25, 266,
	26, 266,
	27, 266,
	29, 266,
	30, 266,
	31, 266,
	34, 266,
	35, 266,
	37, 266,
	38, 266,
	39, 266,
	43, 266,
	45, 266,
	65, 266,
	-2, 11,
	-1, 216,
	20, 266,
	22, 266,
	25, 266,
	26, 266,
	27, 266,
	29, 266,
	30, 266,
	31, 266,
	34, 266,
	35, 266,
	37, 266,
	38, 266,
	39, 266,
	43, 266,
	45, 266,
	65, 266,
	-2, 11,
	-1, 370,
	4, 20,
	5, 20,
	40, 20,
	41, 20,
	49, 20,
	50, 20,
	54, 20,
	56, 20,
	67, 20,
	68, 20,
	69, 20,
	70, 20,
	-2, 124,
	-1, 383,
	20, 266,
	22, 266,
	25, 266,
	26, 266,
	27, 266,
	29, 266,
	30, 266,
	31, 266,
	34, 266,
	35, 266,
	37, 266,
	38, 266,
	39, 266,
	43, 266,
	45, 266,
	65, 266,
	-2, 11,
	-1, 421,
	4, 33,
	5, 33,
	40, 33,
	41, 33,
	50, 33,
	54, 33,
	56, 33,
	64, 11,
	67, 33,
	68, 33,
	69, 33,
	70, 33,
	76, 11,
	-2, 13,
	-1, 609,
	15, 131,
	-2, 11,
}

const RubyNprod = 333
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4854

var RubyAct = []int{

	349, 475, 5, 649, 449, 157, 477, 474, 156, 165,
	145, 192, 265, 144, 262, 438, 356, 263, 143, 56,
	151, 615, 26, 337, 420, 25, 55, 585, 324, 101,
	21, 315, 102, 2, 3, 133, 103, 70, 130, 69,
	355, 134, 355, 135, 355, 291, 548, 95, 227, 4,
	610, 228, 611, 355, 568, 14, 566, 355, 189, 190,
	390, 152, 199, 200, 432, 543, 429, 298, 427, 541,
	355, 99, 98, 181, 340, 28, 203, 96, 97, 327,
	539, 436, 318, 221, 222, 127, 176, 100, 128, 123,
	215, 94, 168, 94, 166, 219, 294, 94, 94, 390,
	411, 94, 230, 231, 232, 181, 155, 390, 94, 73,
	72, 239, 123, 124, 627, 94, 244, 220, 229, 547,
	205, 391, 251, 252, 125, 126, 257, 258, 259, 260,
	390, 177, 169, 390, 279, 155, 124, 390, 152, 246,
	204, 178, 170, 171, 172, 254, 178, 255, 271, 435,
	177, 179, 180, 52, 167, 172, 270, 277, 431, 278,
	173, 269, 386, 177, 129, 355, 428, 280, 177, 282,
	307, 308, 309, 284, 312, 313, 314, 297, 286, 321,
	322, 323, 172, 328, 329, 330, 600, 598, 305, 426,
	306, 108, 409, 310, 220, 311, 389, 168, 319, 166,
	320, 136, 656, 495, 161, 509, 332, 341, 358, 359,
	360, 361, 331, 508, 197, 155, 496, 197, 161, 373,
	368, 646, 366, 285, 288, 290, 500, 117, 118, 494,
	629, 599, 168, 161, 166, 473, 106, 107, 197, 197,
	197, 109, 570, 110, 355, 111, 397, 197, 379, 176,
	182, 155, 495, 380, 105, 114, 112, 113, 197, 167,
	197, 197, 560, 197, 164, 197, 197, 197, 197, 365,
	197, 355, 169, 197, 197, 392, 122, 197, 197, 499,
	355, 355, 395, 188, 186, 173, 357, 407, 182, 273,
	30, 121, 355, 197, 167, 174, 175, 266, 183, 184,
	197, 197, 197, 197, 292, 368, 355, 172, 268, 108,
	355, 266, 355, 161, 645, 425, 644, 264, 197, 187,
	185, 197, 268, 280, 632, 282, 197, 534, 630, 535,
	316, 197, 155, 212, 101, 325, 74, 102, 131, 334,
	338, 103, 447, 476, 101, 117, 118, 102, 267, 161,
	454, 103, 496, 209, 106, 107, 210, 446, 450, 109,
	155, 110, 267, 111, 119, 120, 607, 161, 197, 455,
	602, 451, 105, 114, 112, 113, 623, 624, 101, 506,
	557, 102, 466, 463, 132, 103, 345, 346, 197, 155,
	101, 197, 101, 102, 465, 102, 551, 103, 452, 103,
	453, 197, 197, 467, 485, 468, 489, 478, 266, 471,
	484, 479, 394, 583, 493, 482, 483, 492, 351, 268,
	622, 454, 497, 584, 301, 443, 155, 444, 155, 279,
	161, 461, 353, 505, 352, 101, 447, 445, 102, 398,
	515, 662, 103, 659, 658, 657, 480, 659, 658, 197,
	529, 529, 108, 197, 197, 459, 197, 518, 161, 396,
	578, 457, 514, 513, 491, 512, 537, 514, 513, 207,
	188, 390, 208, 186, 550, 394, 295, 140, 78, 524,
	549, 168, 553, 552, 140, 78, 362, 161, 117, 118,
	211, 565, 553, 558, 139, 562, 563, 106, 107, 564,
	140, 78, 109, 434, 110, 197, 111, 119, 120, 377,
	572, 197, 378, 433, 575, 105, 114, 112, 113, 430,
	418, 412, 410, 401, 161, 155, 161, 400, 399, 398,
	197, 343, 588, 589, 342, 261, 197, 234, 363, 197,
	197, 523, 369, 417, 197, 350, 1, 218, 92, 596,
	91, 197, 505, 90, 89, 88, 87, 604, 606, 41,
	40, 39, 161, 603, 605, 38, 530, 493, 20, 43,
	609, 44, 612, 16, 608, 12, 13, 197, 11, 45,
	24, 23, 22, 27, 19, 10, 35, 18, 15, 197,
	197, 71, 42, 17, 46, 37, 595, 36, 31, 29,
	32, 628, 75, 0, 0, 0, 0, 0, 197, 0,
	0, 553, 631, 553, 633, 0, 197, 491, 0, 0,
	0, 0, 0, 161, 0, 0, 53, 640, 641, 642,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 529, 529, 529, 0, 653, 0, 0, 0, 0,
	0, 660, 0, 0, 0, 0, 661, 0, 0, 664,
	0, 0, 529, 0, 665, 666, 529, 529, 529, 667,
	117, 118, 0, 0, 137, 0, 0, 162, 586, 106,
	107, 0, 0, 0, 109, 0, 110, 198, 111, 0,
	198, 162, 0, 0, 161, 0, 197, 105, 114, 112,
	113, 0, 0, 0, 647, 0, 162, 0, 0, 0,
	0, 198, 198, 198, 0, 161, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 198, 0, 198, 198, 0, 198, 616, 198, 198,
	198, 198, 0, 198, 0, 0, 198, 198, 0, 0,
	198, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 198, 0, 0, 108,
	0, 0, 0, 198, 198, 198, 198, 293, 0, 0,
	0, 197, 0, 0, 0, 0, 162, 0, 0, 0,
	115, 198, 0, 0, 198, 0, 0, 104, 0, 198,
	0, 0, 0, 317, 198, 117, 118, 0, 326, 0,
	0, 0, 335, 339, 106, 107, 0, 0, 0, 109,
	0, 110, 162, 111, 119, 120, 0, 0, 0, 0,
	0, 0, 105, 114, 112, 113, 116, 0, 0, 0,
	162, 198, 70, 159, 69, 79, 160, 78, 163, 142,
	0, 150, 95, 0, 164, 152, 0, 0, 0, 0,
	0, 198, 0, 0, 198, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 198, 198, 0, 0, 81, 0,
	0, 0, 96, 97, 93, 0, 0, 147, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 148, 149, 0,
	0, 0, 0, 162, 0, 0, 0, 117, 118, 146,
	0, 153, 0, 94, 73, 72, 106, 107, 0, 0,
	0, 109, 198, 110, 0, 111, 198, 198, 0, 198,
	0, 162, 0, 0, 105, 114, 112, 113, 0, 0,
	0, 574, 0, 0, 0, 0, 0, 0, 0, 70,
	159, 69, 79, 160, 78, 163, 142, 0, 150, 95,
	162, 164, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	34, 0, 0, 0, 198, 81, 0, 0, 0, 96,
	97, 93, 0, 0, 0, 82, 83, 162, 84, 162,
	85, 86, 0, 198, 0, 0, 0, 0, 0, 198,
	0, 0, 198, 198, 0, 0, 302, 198, 153, 0,
	94, 73, 72, 0, 198, 0, 0, 0, 0, 0,
	0, 158, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 158, 0, 0, 158, 158, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 0, 198, 198, 0, 158, 158, 158, 0, 0,
	0, 108, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 0, 158, 0, 158, 158, 198,
	158, 0, 158, 158, 158, 158, 162, 158, 0, 0,
	158, 158, 0, 0, 158, 158, 0, 117, 118, 0,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 0,
	158, 109, 0, 110, 0, 111, 0, 158, 158, 158,
	158, 0, 0, 0, 105, 114, 112, 113, 0, 0,
	158, 573, 0, 0, 0, 158, 104, 0, 158, 0,
	0, 587, 0, 158, 117, 118, 0, 0, 158, 0,
	0, 0, 0, 106, 107, 0, 158, 162, 109, 198,
	110, 0, 111, 0, 0, 0, 158, 0, 0, 0,
	0, 105, 114, 112, 113, 116, 0, 0, 162, 0,
	0, 0, 0, 0, 158, 158, 0, 0, 0, 70,
	159, 69, 79, 160, 78, 163, 142, 0, 0, 95,
	617, 164, 152, 0, 0, 158, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 158,
	0, 0, 0, 0, 0, 81, 0, 198, 0, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 198, 0, 0, 158, 0, 462,
	0, 0, 0, 0, 0, 0, 302, 0, 153, 0,
	94, 73, 72, 0, 0, 0, 158, 0, 0, 0,
	421, 158, 0, 158, 0, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 370, 69, 79, 196, 78, 135,
	80, 0, 0, 95, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 0, 9, 0, 0, 0, 158, 81,
	0, 0, 0, 96, 97, 93, 0, 0, 0, 82,
	83, 158, 84, 158, 85, 86, 0, 421, 0, 0,
	213, 355, 0, 158, 0, 298, 158, 158, 0, 0,
	76, 158, 77, 367, 94, 73, 72, 0, 158, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 158,
	0, 0, 0, 0, 0, 193, 0, 0, 201, 206,
	0, 0, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 158, 158, 0, 223,
	224, 225, 0, 0, 202, 0, 0, 0, 226, 0,
	0, 0, 0, 0, 0, 158, 0, 0, 214, 233,
	0, 235, 236, 158, 238, 0, 240, 241, 242, 243,
	158, 245, 0, 0, 249, 250, 0, 0, 253, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	0, 0, 108, 0, 274, 0, 0, 0, 247, 248,
	0, 281, 283, 287, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 303,
	0, 0, 256, 276, 0, 0, 0, 256, 117, 118,
	0, 0, 256, 0, 299, 0, 0, 106, 107, 0,
	336, 158, 109, 158, 110, 0, 111, 304, 0, 0,
	154, 0, 0, 0, 0, 105, 114, 112, 113, 116,
	0, 0, 158, 0, 0, 0, 0, 0, 364, 371,
	0, 0, 0, 70, 159, 69, 79, 160, 78, 163,
	142, 0, 354, 95, 0, 164, 152, 0, 0, 336,
	0, 0, 384, 0, 0, 0, 0, 372, 0, 0,
	0, 376, 387, 388, 0, 0, 0, 0, 0, 81,
	0, 158, 0, 96, 97, 93, 0, 0, 147, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 158, 0,
	0, 217, 0, 0, 0, 108, 0, 0, 0, 0,
	302, 0, 153, 0, 94, 73, 72, 0, 0, 0,
	414, 0, 0, 0, 371, 422, 0, 424, 0, 217,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 118, 0, 0, 0, 413, 0, 0, 0,
	106, 107, 423, 344, 0, 109, 0, 110, 154, 111,
	119, 120, 0, 0, 0, 0, 0, 385, 105, 114,
	112, 113, 0, 0, 0, 0, 448, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 154, 0, 217, 0, 0,
	0, 464, 0, 0, 0, 0, 0, 256, 0, 0,
	470, 472, 0, 191, 456, 414, 0, 0, 0, 458,
	460, 0, 481, 0, 0, 0, 117, 118, 0, 0,
	0, 0, 0, 490, 469, 106, 107, 0, 0, 0,
	109, 0, 110, 0, 111, 119, 120, 0, 371, 0,
	0, 0, 0, 105, 114, 112, 113, 0, 488, 0,
	510, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	501, 0, 503, 0, 0, 0, 507, 0, 0, 193,
	108, 300, 0, 0, 0, 0, 0, 545, 0, 33,
	0, 0, 272, 0, 217, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 0, 540, 0,
	542, 0, 544, 0, 546, 0, 117, 118, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 0, 0,
	109, 0, 110, 0, 111, 0, 0, 0, 138, 141,
	561, 0, 0, 105, 114, 112, 113, 0, 0, 0,
	194, 0, 0, 194, 0, 569, 0, 0, 0, 571,
	0, 0, 0, 117, 118, 594, 0, 371, 0, 0,
	0, 0, 106, 107, 194, 194, 194, 109, 0, 110,
	0, 111, 0, 194, 0, 0, 490, 0, 0, 593,
	105, 114, 112, 113, 194, 0, 194, 194, 0, 194,
	601, 194, 194, 194, 194, 0, 194, 0, 0, 194,
	194, 0, 0, 194, 194, 0, 393, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 405, 194,
	0, 0, 0, 0, 0, 635, 194, 194, 194, 194,
	0, 0, 0, 626, 0, 0, 0, 0, 0, 0,
	0, 416, 643, 419, 194, 0, 0, 194, 0, 0,
	634, 0, 194, 0, 0, 0, 0, 194, 0, 0,
	0, 0, 0, 0, 0, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 655, 0, 0, 0, 0, 441,
	442, 0, 0, 0, 194, 0, 0, 663, 0, 0,
	70, 159, 69, 79, 160, 78, 163, 80, 0, 0,
	95, 0, 164, 0, 194, 0, 0, 194, 0, 0,
	419, 0, 0, 0, 0, 0, 0, 194, 194, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	96, 97, 93, 0, 0, 0, 82, 83, 486, 84,
	0, 85, 86, 404, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 502, 504, 0, 76, 0, 77,
	0, 94, 73, 72, 0, 194, 0, 0, 0, 194,
	194, 0, 194, 0, 516, 0, 0, 0, 520, 521,
	0, 522, 0, 0, 0, 0, 0, 536, 0, 538,
	0, 0, 70, 195, 69, 79, 196, 78, 135, 80,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	554, 0, 0, 0, 0, 0, 555, 556, 0, 0,
	0, 194, 0, 0, 0, 0, 0, 194, 81, 0,
	0, 0, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 194, 0, 576, 577,
	355, 0, 194, 0, 0, 194, 194, 582, 0, 76,
	194, 77, 597, 94, 73, 72, 0, 194, 0, 590,
	0, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 194, 0, 0, 613,
	0, 0, 0, 0, 614, 0, 0, 525, 0, 619,
	620, 621, 0, 0, 194, 0, 0, 0, 0, 0,
	0, 0, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 637,
	638, 639, 0, 0, 0, 0, 0, 441, 442, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 652, 531, 651, 650, 532, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 194, 0, 0, 0, 0, 527, 528, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 50, 69, 79, 51, 78, 54, 80,
	0, 0, 95, 0, 618, 0, 47, 648, 531, 651,
	650, 532, 48, 49, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	194, 68, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 194, 0, 0,
	527, 528, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 73, 72, 70, 50, 69, 79,
	51, 78, 54, 80, 0, 0, 95, 0, 0, 0,
	47, 517, 57, 440, 439, 58, 48, 49, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 50, 69, 79, 51, 78, 54, 80, 0, 0,
	95, 0, 0, 0, 47, 437, 57, 440, 439, 58,
	48, 49, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 50, 69, 79, 51, 78,
	54, 80, 0, 0, 95, 0, 0, 0, 47, 0,
	57, 0, 0, 58, 48, 49, 0, 61, 62, 59,
	447, 476, 65, 66, 0, 67, 64, 60, 0, 0,
	81, 63, 0, 68, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	0, 0, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 77, 0, 94, 73, 72, 70, 50,
	69, 79, 51, 78, 54, 80, 0, 0, 95, 0,
	0, 0, 47, 579, 57, 0, 0, 58, 48, 49,
	0, 61, 62, 59, 0, 580, 65, 66, 0, 67,
	64, 60, 0, 0, 81, 63, 0, 68, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	73, 72, 70, 50, 69, 79, 51, 78, 54, 80,
	0, 0, 95, 0, 0, 0, 47, 0, 57, 0,
	0, 58, 48, 49, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	6, 7, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 73, 72, 8, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 654, 531, 0, 0, 532, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 527, 528, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 636, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	625, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 591, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 581, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 0, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 567, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 559, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	533, 531, 0, 0, 532, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 527, 528, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 526, 531, 0, 0, 532, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 527, 528, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 519, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 498, 57, 0, 0, 58, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 487, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 0, 0, 95, 0, 0, 0, 47,
	415, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 406, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 403, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 70, 50, 69,
	79, 51, 78, 54, 80, 0, 0, 95, 0, 0,
	0, 47, 0, 531, 0, 0, 532, 48, 49, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 527, 528, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 73,
	72, 70, 50, 69, 79, 51, 78, 54, 80, 0,
	0, 95, 0, 0, 0, 47, 0, 57, 0, 0,
	58, 48, 49, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 94, 73, 72, 70, 50, 69, 79, 51,
	78, 54, 80, 375, 0, 95, 0, 0, 0, 47,
	0, 57, 0, 0, 58, 48, 49, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 96, 97, 93, 0, 0,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	0, 0, 0, 0, 374, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 77, 0, 94, 73, 72, 70,
	50, 69, 79, 51, 78, 54, 80, 0, 0, 95,
	0, 0, 0, 47, 0, 57, 0, 0, 58, 48,
	49, 0, 61, 62, 59, 0, 0, 65, 66, 0,
	67, 64, 60, 0, 0, 81, 63, 0, 68, 96,
	97, 93, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 77, 0,
	94, 73, 72, 70, 50, 69, 79, 51, 78, 54,
	80, 0, 0, 95, 0, 0, 0, 47, 0, 57,
	0, 0, 58, 48, 49, 0, 61, 62, 59, 0,
	0, 65, 66, 0, 67, 64, 60, 0, 0, 81,
	63, 0, 68, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 70, 195, 69, 79,
	196, 78, 135, 80, 0, 0, 95, 0, 0, 0,
	76, 0, 77, 0, 94, 73, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 298, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 195, 69, 79, 196, 78, 135, 383, 0, 0,
	95, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	96, 97, 93, 0, 0, 381, 82, 83, 0, 84,
	0, 85, 86, 70, 370, 69, 79, 196, 78, 135,
	80, 0, 0, 95, 0, 0, 0, 382, 0, 153,
	0, 94, 73, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 96, 97, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 367, 94, 73, 72, 70, 159, 69,
	79, 160, 78, 163, 142, 0, 0, 95, 0, 164,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	70, 195, 69, 79, 196, 78, 135, 80, 0, 0,
	95, 0, 0, 0, 302, 0, 153, 0, 94, 73,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72, 70, 195, 69, 79, 196, 78,
	135, 80, 0, 0, 95, 0, 0, 0, 70, 159,
	69, 79, 160, 78, 163, 216, 0, 0, 95, 0,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 63, 0, 0, 96, 97, 93, 0, 0, 0,
	82, 83, 0, 84, 81, 85, 86, 0, 96, 97,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 76, 0, 77, 0, 94, 73, 72, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 94,
	73, 72, 70, 195, 69, 79, 196, 78, 135, 80,
	0, 0, 95, 0, 0, 0, 70, 333, 69, 79,
	196, 78, 135, 80, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 81, 85, 86, 0, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 76,
	0, 77, 0, 94, 73, 72, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 73, 72,
	70, 159, 69, 79, 160, 78, 163, 80, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	96, 97, 93, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 77,
	0, 94, 73, 72,
}
var RubyPact = []int{

	-31, 2736, -1000, -1000, -1000, 7, -1000, -1000, -1000, 765,
	-1000, -1000, -1000, -1000, 266, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 225, 63, -1000, 97, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 31, 490, 467,
	836, 81, 234, 90, 237, 269, 268, 4217, 4217, -1000,
	4686, 4217, 4217, 4686, 4774, 447, 331, -1000, 482, -1000,
	-1000, 317, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4612,
	-1000, 42, 4217, 4217, 4686, 4686, 4686, -1000, -1000, -1000,
	-1000, -1000, -1000, 4686, 41, -1000, -1000, -1000, -1000, -1000,
	-1000, 4217, 4217, 4217, 4686, 530, 4686, 4686, -1000, 4686,
	4217, 4686, 4686, 4686, 4686, 4217, 4686, -1000, -1000, 4686,
	4686, 4217, 4217, 4686, 4686, 4217, 4217, 4217, 4217, 528,
	304, 94, 89, 304, -1000, -1000, -1000, -1000, 240, 4686,
	470, -1000, -1000, 42, -1000, 119, 4686, 4598, 4686, 4686,
	38, 461, -1, -1000, 1786, -1000, -1000, 409, 40, 1547,
	221, 109, 95, 199, 4686, -1000, -1000, 4686, -1000, 4217,
	4217, 4217, 4686, 4217, 4217, 4217, 24, 4686, 4217, 4217,
	4217, 21, 4217, 4217, 4217, 4700, 16, 527, 524, 413,
	322, 3995, 403, 1833, -1000, 4471, 186, 82, 77, 370,
	368, 1833, 242, 403, -1000, -1000, 1468, 4217, 4217, 4217,
	4217, 478, -1000, 2014, 4397, 414, -1000, 1786, 4069, -1000,
	-1000, 413, 413, 1833, 1833, 1833, 1833, -1000, -1000, 502,
	413, 413, 413, 1833, 4344, 1833, 1833, 4524, 1833, 413,
	1833, 1833, 1833, 1833, 413, 1611, 96, 4524, 4524, 1833,
	1833, 413, 413, 1833, 122, 47, 1696, 413, 413, 413,
	413, 42, -1000, 460, 401, -1000, 195, 522, 521, 520,
	516, -1000, 3847, 467, 1833, 3773, 2014, -1000, -1000, -1000,
	118, 448, 26, 1114, -1000, -1000, -1000, 1468, -1000, 1468,
	-1000, -1000, -1000, -1000, 514, 4686, 3699, -1000, 513, 1297,
	4686, -1000, 4686, 1833, 2014, 115, -6, 413, 413, 413,
	92, -8, 413, 413, 413, -1000, -1000, -1000, 512, 84,
	-10, 413, 413, 413, -1000, -1000, -1000, 506, 413, 413,
	413, 458, 456, 943, 71, 58, 1833, -1000, -1000, -1000,
	496, 455, 76, 8, 2514, -1000, -1000, -1000, -1000, 413,
	404, 4686, -1000, -1000, 242, -1000, 377, 4686, 413, 413,
	413, 413, -1000, 446, 1833, -1000, -1000, -1000, 440, 416,
	1193, 1786, 2014, 413, -1000, -1000, 4270, -1000, -1000, -1000,
	42, 4217, 4686, -1000, 1833, 4686, 4686, 1833, 1833, 184,
	4686, -1000, -1000, 2588, 290, 397, 432, 4686, -1000, -1000,
	304, 304, 2588, -1000, -1000, 3625, -1000, 391, 2014, 178,
	201, -1000, -1000, 246, 1833, -1000, 3551, 211, -1000, 3995,
	-1000, 40, 1833, 4524, 305, 414, 162, -1000, 154, -1000,
	-1000, -1000, -1000, -1000, -1000, 4686, 4686, -1000, 444, 4217,
	-1000, 2440, 3477, -1000, -1000, -1000, -1000, 474, 1833, 3403,
	3329, 306, -1000, -1000, 4686, 403, 6, -1000, -7, -1000,
	-11, -1000, 4686, 414, 1833, -1000, 413, 45, -28, 2014,
	1833, -1000, 1696, 4217, 375, 310, -1000, -1000, -1000, -1000,
	-1000, 1833, -1000, -1000, 359, 310, 3255, -1000, 248, -1000,
	1786, -1000, -1000, 409, 4217, 4217, 492, -1000, -1000, -1000,
	484, -20, 3181, -22, 3995, -1000, 152, 228, -1000, 4217,
	1067, 867, -1000, 4217, -1000, 413, 3995, -1000, 439, -1000,
	2662, 3107, 3995, 408, 20, -1000, -1000, -1000, -1000, 413,
	-1000, 4217, 4217, -1000, -1000, -1000, 3033, 403, 3995, -1000,
	2014, -1000, 2116, -1000, 180, 1833, 217, 135, -1000, 391,
	413, -1000, 349, -1000, 3995, 2588, 2588, -1000, 345, -1000,
	42, 2014, 413, 413, -23, -1000, -1000, -1000, -1000, -24,
	-1000, 4143, 413, 337, -1000, 413, 3995, 3995, -1000, -1000,
	-1000, -1000, 3995, 14, 467, -1000, -1000, -1000, 356, 312,
	2959, -1000, 3995, 101, 1833, -1000, -1000, -1000, 48, -1000,
	4217, 216, -1000, 307, 310, 303, 310, -1000, -1000, -1000,
	4686, -1000, 413, 3995, 2885, -1000, -1000, -1000, -1000, 3995,
	3995, 3995, -1000, -1000, -1000, -1000, 101, 4686, 413, -1000,
	-1000, 295, -1000, 293, 207, 630, -1000, 3995, 3995, 3995,
	2366, 2283, 2811, 187, -1000, -1000, -1000, -1000, -1000, 424,
	4217, -1000, -1000, 420, -1000, 101, -1000, -1000, 4217, -1000,
	413, 3921, -1000, 101, 413, 3921, 3921, 3921,
}
var RubyPgo = []int{

	0, 602, 0, 336, 600, 22, 13, 599, 598, 597,
	595, 6, 594, 75, 593, 8, 592, 55, 591, 588,
	587, 1334, 290, 626, 980, 586, 585, 584, 583, 582,
	581, 580, 579, 578, 576, 12, 153, 575, 573, 1799,
	16, 30, 571, 569, 25, 568, 566, 3, 26, 565,
	561, 560, 559, 556, 555, 554, 553, 550, 548, 1663,
	547, 1, 18, 24, 15, 546, 14, 4, 7, 545,
	10, 543, 11, 542, 20, 19, 17, 541, 538, 9,
	5, 1360,
}
var RubyR1 = []int{

	0, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 81, 81, 59, 59, 59, 59, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 32, 32, 32, 32,
	32, 32, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 18, 18, 44, 16, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 25, 62, 62,
	62, 62, 72, 72, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 15, 74, 74, 68, 68, 26, 26,
	26, 26, 26, 26, 26, 26, 66, 66, 66, 76,
	76, 76, 35, 35, 35, 35, 33, 33, 34, 37,
	39, 39, 39, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 19, 19, 19, 75, 75, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 36, 36, 23, 23, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 8, 3, 1, 78, 78, 78, 78, 78, 78,
	78, 4, 4, 4, 4, 79, 80, 80, 73, 73,
	73, 6, 6, 6, 6, 6, 6, 63, 71, 71,
	71, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 64, 64, 64, 64, 60, 60, 60, 9,
	20, 20, 20, 20, 11, 11, 11, 11, 11, 11,
	11, 11, 77, 77, 69, 69, 61, 61, 27, 27,
	28, 29, 29, 29, 29, 31, 31, 31, 30, 30,
	30, 13, 13, 45, 45, 45, 67, 67, 67, 67,
	67, 46, 46, 46, 46, 46, 47, 47, 47, 47,
	43, 42, 10, 41, 41, 41, 41, 40, 40, 5,
	5, 7, 12,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 2, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 6, 7, 1,
	2, 6, 6, 2, 3, 2, 3, 4, 5, 4,
	3, 4, 5, 2, 3, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 6,
	6, 6, 6, 7, 6, 6, 8, 4, 5, 8,
	1, 4, 1, 3, 0, 1, 1, 1, 1, 4,
	4, 4, 4, 2, 1, 3, 0, 2, 6, 7,
	8, 8, 9, 9, 6, 7, 1, 3, 3, 0,
	1, 3, 1, 2, 3, 2, 4, 6, 5, 4,
	1, 2, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 9, 6, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 3, 3, 3, 3, 4, 3,
	3, 3, 4, 3, 3, 3, 4, 3, 3, 3,
	4, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 5, 1, 1, 0, 1, 1, 1, 4, 4,
	4, 3, 5, 6, 5, 3, 1, 4, 3, 7,
	8, 3, 4, 5, 5, 5, 6, 3, 0, 1,
	3, 4, 5, 3, 3, 3, 3, 3, 5, 6,
	5, 3, 4, 3, 3, 2, 0, 2, 2, 3,
	4, 6, 8, 6, 2, 3, 5, 5, 5, 4,
	4, 4, 1, 3, 0, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 1, 1, 3, 3, 1, 3,
	3, 5, 5, 5, 5, 3, 0, 2, 2, 2,
	2, 5, 6, 5, 6, 5, 4, 3, 3, 2,
	4, 4, 2, 5, 7, 4, 6, 4, 5, 3,
	3, 3, 2,
}
var RubyChk = []int{

	-1000, -65, 64, 65, 80, -2, 64, 65, 80, -21,
	-26, -33, -37, -34, -17, -19, -38, -14, -20, -27,
	-45, -41, -29, -30, -31, -44, -5, -28, -13, -7,
	-22, -8, -4, -39, -24, -25, -9, -10, -49, -50,
	-51, -52, -16, -43, -42, -32, -12, 20, 26, 27,
	7, 10, -36, -23, 12, -48, -75, 22, 25, 31,
	39, 29, 30, 43, 38, 34, 35, 37, 45, 8,
	6, -18, 79, 78, -3, -1, 73, 75, 11, 9,
	13, 42, 52, 53, 55, 57, 58, -53, -54, -55,
	-56, -57, -58, 48, 77, 16, 46, 47, 65, 64,
	80, 22, 25, 29, 32, 67, 49, 50, 4, 54,
	56, 58, 69, 70, 68, 25, 71, 40, 41, 59,
	60, 25, 51, 49, 73, 61, 62, 22, 25, 67,
	7, -22, -3, 4, 10, 12, -36, -23, -39, 4,
	10, -39, 13, -62, -6, -70, 73, 51, 61, 62,
	15, -74, 19, 75, -21, -17, -15, -80, -24, 7,
	10, -36, -23, 12, 18, -79, 13, 73, 11, 51,
	61, 62, 73, 51, 61, 62, 15, 73, 51, 61,
	62, 15, 51, 61, 62, 51, 15, 51, 15, -2,
	-2, -59, -72, -21, -39, 7, 10, -36, -23, -2,
	-2, -21, -81, -72, -13, -17, -21, 22, 25, 22,
	25, 8, 16, -81, -81, -70, 13, -21, -60, -6,
	75, -2, -2, -21, -21, -21, -21, 7, 10, 77,
	-2, -2, -2, -21, 7, -21, -21, -81, -21, -2,
	-21, -21, -21, -21, -2, -21, -5, -81, -81, -21,
	-21, -2, -2, -21, -74, -5, -21, -2, -2, -2,
	-2, 7, -66, -76, 13, -35, 7, 58, 18, 67,
	67, -66, -59, 49, -21, -59, -81, -6, -6, 15,
	-74, -21, -5, -21, -44, -13, -41, -21, -13, -21,
	-13, 7, -36, -23, 58, 15, -59, -63, 68, -81,
	5, 15, 73, -21, -81, -74, -5, -2, -2, -2,
	-74, -5, -2, -2, -2, 7, -36, -23, 58, -74,
	-5, -2, -2, -2, 7, -36, -23, 58, -2, -2,
	-2, -48, -74, 7, -36, -23, -21, 7, -36, -23,
	58, -75, 7, 7, -59, 64, 65, 64, 65, -2,
	-69, 15, 64, 64, -81, 64, -40, 44, -2, -2,
	-2, -2, 8, -78, -21, -17, -15, 76, -80, -73,
	7, -21, -81, -2, 65, 14, -81, 7, 10, -6,
	-62, 51, 73, 13, -21, 66, 66, -21, -21, 74,
	15, 74, -6, -59, 15, -76, 58, 51, 7, 7,
	7, 7, -59, 21, -39, -59, 21, -70, -81, 74,
	74, 74, 7, -81, -21, 21, -59, -71, 7, -59,
	-63, -24, -21, -81, -21, -70, 74, 74, 74, 74,
	7, 74, 74, 7, 7, 73, 73, 21, -64, 24,
	23, -59, -59, 21, 23, 33, -11, 32, -21, -67,
	-67, -40, 21, 23, 44, -72, -81, 15, -81, 15,
	-81, 15, 66, -70, -21, -6, -2, -74, -5, -81,
	-21, -5, -21, 51, -68, -61, 33, -11, -35, 14,
	14, -21, -66, -66, -68, -61, -59, 21, -81, 15,
	-21, -17, -15, -80, 51, 51, 15, -15, 21, 68,
	15, -81, -59, -81, -59, -79, 74, -81, 51, 51,
	-21, -21, 21, 24, 23, -2, -59, 21, -64, 21,
	-59, -59, -59, -77, 5, -39, 21, 64, 65, -2,
	-46, 22, 25, 21, 21, 23, -59, -72, -59, 74,
	-81, 76, -81, 76, -81, -21, -81, 74, 74, -70,
	-2, 21, -68, -11, -59, -59, -59, 21, -68, 21,
	14, -81, -2, -2, 7, 7, 76, 76, 76, -81,
	14, -81, -2, 74, 74, -2, -59, -59, 21, 21,
	33, 21, -59, 5, 15, 7, -36, -23, -2, -2,
	-59, 21, -59, -81, -21, -17, -15, 76, 7, 14,
	51, -81, 21, -68, -61, -68, -61, 21, -6, -15,
	73, 76, -2, -59, -59, 7, -36, -23, -39, -59,
	-59, -59, 64, 64, 65, 21, -81, 66, -2, 14,
	21, -68, 21, -68, -81, -21, 21, -59, -59, -59,
	-67, -67, -67, -21, 21, 21, 14, 74, 21, -47,
	24, 23, 21, -47, 21, -81, 15, 21, 24, 23,
	-2, -67, 21, -81, -2, -67, -67, -67,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 0, 0, 0,
	20, 21, 23, 24, 22, 0, 0, 0, 0, 13,
	289, 0, 0, 11, 294, 298, 295, 290, 0, 17,
	18, 19, 25, 26, 27, 28, 11, 11, 162, 79,
	266, 0, 0, 0, 0, 0, 0, 46, 47, 48,
	49, 50, 51, 0, 0, 73, 222, 223, 5, 6,
	7, 0, 0, 0, 0, 0, 0, 0, 11, 0,
	0, 0, 0, 0, 0, 0, 0, 11, 11, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, 149, 21, 22, 23, 24, 13, 0,
	160, 13, -2, 83, 85, 93, 11, 0, 0, 0,
	0, 120, 13, 11, 125, 126, 127, 128, 33, 20,
	21, 23, 24, 22, 0, 236, 11, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 13,
	0, 284, 288, 122, 32, 20, 21, 23, 24, 0,
	0, 11, 0, 291, 292, 293, 122, 0, 0, 0,
	0, 0, 74, 224, 0, 80, -2, 125, 0, 322,
	11, 211, 212, 213, 214, 76, 332, 191, 192, 0,
	253, 261, 305, 75, 86, 95, 97, 0, 215, 216,
	217, 218, 219, 220, 255, 0, 0, 0, 0, 329,
	330, 257, 171, 96, 0, 0, 134, 183, 190, 254,
	256, 90, 13, 146, 149, 150, 152, 0, 0, 0,
	0, 13, 0, 0, 13, 0, 124, 84, 94, 11,
	0, 134, 0, 163, 164, 165, 166, 177, 178, 184,
	185, 195, 196, 197, 0, 11, 0, 13, 248, 13,
	0, 11, 11, 133, 124, 0, 0, 167, 179, 186,
	0, 0, 168, 180, 187, 199, 200, 201, 0, 0,
	0, 169, 181, 188, 203, 204, 205, 0, 170, 182,
	189, 172, 173, 20, 23, 24, 134, 207, 208, 209,
	0, 174, 0, 0, 0, 13, 13, 14, 15, 16,
	0, 0, 306, 306, 0, 12, 0, 0, 299, 300,
	296, 297, 331, 11, 225, 226, 227, 231, 11, 11,
	-2, 0, 124, 267, 268, 269, 13, 193, 194, 87,
	89, 0, 11, -2, 117, 0, 0, 320, 321, 107,
	0, 108, 91, 136, 0, 0, 0, 0, 153, 155,
	149, 149, 136, 156, 13, 0, 159, 11, 0, 98,
	99, 100, 198, 0, 135, 241, 0, 0, 249, 11,
	13, -2, 235, 0, 134, 11, 101, 102, 103, 104,
	202, 105, 106, 206, 210, 0, 0, 251, 0, 0,
	13, 0, 0, 270, 13, 13, 285, 13, 123, 0,
	0, 0, 325, 13, 0, 13, 0, 11, 0, 11,
	0, 11, 0, 11, 0, 88, 92, 0, 0, 124,
	301, 302, 0, 0, 0, 136, 13, 286, 151, 147,
	148, 154, 13, 13, 0, 136, 0, 158, 0, 11,
	129, 130, 131, 132, 0, 0, 0, 121, 242, 247,
	0, 0, 0, 0, 11, 237, 99, 0, 11, 0,
	0, 0, 252, 0, 13, 13, 265, 258, 0, 260,
	0, 0, 274, 13, 0, 282, 303, 307, 308, 309,
	310, 0, 0, 304, 323, 13, 0, 13, 11, 221,
	0, 232, 0, 234, 0, 238, 0, 109, 110, 11,
	115, 138, 0, 287, 137, 136, 136, 144, 0, 157,
	77, 0, 111, 112, 0, 250, 243, 244, 245, 0,
	82, 0, 114, 0, 176, 13, 263, 264, 259, 271,
	13, 273, 275, 0, 0, 13, 13, 13, 13, 0,
	0, 326, 11, 327, 228, 229, 230, 233, 0, 81,
	0, 0, 139, 0, 136, 0, 136, 145, 78, -2,
	0, 246, 113, 262, 0, 13, 13, 13, 283, 279,
	280, 281, 306, 13, 13, 324, 328, 0, 116, 118,
	140, 0, 141, 0, 0, 0, 272, 276, 277, 278,
	0, 0, 0, 11, 142, 143, 119, 175, 311, 0,
	0, 306, 313, 0, 315, 239, 11, 312, 0, 306,
	306, 319, 314, 240, 306, 317, 318, 316,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:235
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:237
		{
		}
	case 3:
		//line parser.y:239
		{
		}
	case 4:
		//line parser.y:241
		{
		}
	case 5:
		//line parser.y:243
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:245
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:247
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:253
		{
		}
	case 11:
		//line parser.y:255
		{
		}
	case 12:
		//line parser.y:256
		{
		}
	case 13:
		//line parser.y:259
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 14:
		//line parser.y:261
		{
		}
	case 15:
		//line parser.y:263
		{
		}
	case 16:
		//line parser.y:265
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 17:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 18:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:276
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 74:
		//line parser.y:278
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 75:
		//line parser.y:286
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 76:
		//line parser.y:289
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:292
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:301
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:311
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:317
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 81:
		//line parser.y:325
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:334
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:343
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:352
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:362
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:372
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:381
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:392
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:403
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:413
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:423
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:434
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:447
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 94:
		//line parser.y:455
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 95:
		//line parser.y:464
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 96:
		//line parser.y:473
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:482
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:493
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 99:
		//line parser.y:502
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:511
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 101:
		//line parser.y:520
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 102:
		//line parser.y:529
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 103:
		//line parser.y:538
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 104:
		//line parser.y:547
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 105:
		//line parser.y:556
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 106:
		//line parser.y:565
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 107:
		//line parser.y:574
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 108:
		//line parser.y:583
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 109:
		//line parser.y:592
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 110:
		//line parser.y:605
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 111:
		//line parser.y:621
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 112:
		//line parser.y:630
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 113:
		//line parser.y:639
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 114:
		//line parser.y:648
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:657
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:666
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 117:
		//line parser.y:681
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 118:
		//line parser.y:693
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 119:
		//line parser.y:695
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 120:
		//line parser.y:697
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 121:
		//line parser.y:699
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:702
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:704
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:707
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 125:
		//line parser.y:709
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:711
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:713
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:715
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 129:
		//line parser.y:722
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:724
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 131:
		//line parser.y:726
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 132:
		//line parser.y:728
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 133:
		//line parser.y:737
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 134:
		//line parser.y:748
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:750
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:754
		{
			RubyVAL.genericSlice = nil
		}
	case 137:
		//line parser.y:756
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 138:
		//line parser.y:759
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 139:
		//line parser.y:770
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 140:
		//line parser.y:782
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 141:
		//line parser.y:794
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 142:
		//line parser.y:806
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 143:
		//line parser.y:819
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 144:
		//line parser.y:832
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 145:
		//line parser.y:843
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:857
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 147:
		//line parser.y:859
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 148:
		//line parser.y:861
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 149:
		//line parser.y:863
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 150:
		//line parser.y:865
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 151:
		//line parser.y:867
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 152:
		//line parser.y:870
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 153:
		//line parser.y:872
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 154:
		//line parser.y:874
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 155:
		//line parser.y:876
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 156:
		//line parser.y:880
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 157:
		//line parser.y:890
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 158:
		//line parser.y:902
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 159:
		//line parser.y:915
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 160:
		//line parser.y:926
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 161:
		//line parser.y:935
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 162:
		//line parser.y:954
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 163:
		//line parser.y:972
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 164:
		//line parser.y:981
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 165:
		//line parser.y:987
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:993
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 167:
		//line parser.y:995
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:1004
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 169:
		//line parser.y:1013
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 170:
		//line parser.y:1022
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 171:
		//line parser.y:1024
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 172:
		//line parser.y:1027
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1036
		{
			var rhs ast.Node = RubyS[Rubypt-0].genericSlice
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				rhs = RubyS[Rubypt-0].genericSlice[0]
			}
			RubyVAL.genericValue = ast.Assignment{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				LHS:  RubyS[Rubypt-2].genericValue,
				RHS:  rhs,
			}
		}
	case 174:
		//line parser.y:1048
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1058
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 176:
		//line parser.y:1073
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 177:
		//line parser.y:1079
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 178:
		//line parser.y:1088
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 179:
		//line parser.y:1094
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 180:
		//line parser.y:1103
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 181:
		//line parser.y:1112
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 182:
		//line parser.y:1121
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 183:
		//line parser.y:1123
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 184:
		//line parser.y:1132
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 185:
		//line parser.y:1141
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1147
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1156
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 188:
		//line parser.y:1165
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 189:
		//line parser.y:1174
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:1176
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 191:
		//line parser.y:1183
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 192:
		//line parser.y:1189
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 193:
		//line parser.y:1196
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 194:
		//line parser.y:1202
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 195:
		//line parser.y:1209
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 196:
		//line parser.y:1211
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 197:
		//line parser.y:1213
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1215
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 199:
		//line parser.y:1218
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1220
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1222
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 202:
		//line parser.y:1224
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1227
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1229
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1231
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1233
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 207:
		//line parser.y:1236
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 208:
		//line parser.y:1238
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 209:
		//line parser.y:1240
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 210:
		//line parser.y:1242
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 211:
		//line parser.y:1246
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 212:
		//line parser.y:1248
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 213:
		//line parser.y:1250
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 214:
		//line parser.y:1252
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 215:
		//line parser.y:1255
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 216:
		//line parser.y:1266
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 217:
		//line parser.y:1277
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 218:
		//line parser.y:1288
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 219:
		//line parser.y:1299
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 220:
		//line parser.y:1310
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 221:
		//line parser.y:1321
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 222:
		//line parser.y:1323
		{
		}
	case 223:
		//line parser.y:1324
		{
		}
	case 224:
		//line parser.y:1326
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 225:
		//line parser.y:1328
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1330
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 227:
		//line parser.y:1332
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 228:
		//line parser.y:1334
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 229:
		//line parser.y:1336
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 230:
		//line parser.y:1338
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 231:
		//line parser.y:1341
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 232:
		//line parser.y:1343
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 233:
		//line parser.y:1345
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Pairs: RubyS[Rubypt-3].hashPairSlice}
		}
	case 234:
		//line parser.y:1347
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 235:
		//line parser.y:1356
		{
			RubyVAL.hashPair = ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue}
		}
	case 236:
		//line parser.y:1359
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 237:
		//line parser.y:1361
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 238:
		//line parser.y:1364
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 239:
		//line parser.y:1371
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 240:
		//line parser.y:1378
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 241:
		//line parser.y:1386
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 242:
		//line parser.y:1391
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 243:
		//line parser.y:1396
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 244:
		//line parser.y:1401
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 245:
		//line parser.y:1406
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 246:
		//line parser.y:1411
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 247:
		//line parser.y:1420
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 248:
		//line parser.y:1422
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 249:
		//line parser.y:1424
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 250:
		//line parser.y:1426
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 251:
		//line parser.y:1429
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1438
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1448
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1457
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1466
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 256:
		//line parser.y:1475
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 257:
		//line parser.y:1484
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 258:
		//line parser.y:1493
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 259:
		//line parser.y:1502
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 260:
		//line parser.y:1512
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 261:
		//line parser.y:1521
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 262:
		//line parser.y:1532
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 263:
		//line parser.y:1541
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 264:
		//line parser.y:1549
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 265:
		//line parser.y:1557
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 266:
		//line parser.y:1565
		{
		}
	case 267:
		//line parser.y:1566
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 268:
		//line parser.y:1567
		{
		}
	case 269:
		//line parser.y:1570
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 270:
		//line parser.y:1573
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 271:
		//line parser.y:1582
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 272:
		//line parser.y:1592
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 273:
		//line parser.y:1602
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 274:
		//line parser.y:1612
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 275:
		//line parser.y:1614
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 276:
		//line parser.y:1628
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 277:
		//line parser.y:1644
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 278:
		//line parser.y:1660
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 279:
		//line parser.y:1676
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 280:
		//line parser.y:1686
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 281:
		//line parser.y:1696
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 282:
		//line parser.y:1708
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 283:
		//line parser.y:1710
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 284:
		//line parser.y:1713
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 285:
		//line parser.y:1715
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 286:
		//line parser.y:1718
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 287:
		//line parser.y:1720
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 288:
		//line parser.y:1723
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 289:
		//line parser.y:1730
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 290:
		//line parser.y:1732
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 291:
		//line parser.y:1735
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 292:
		//line parser.y:1743
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 293:
		//line parser.y:1745
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 294:
		//line parser.y:1747
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 295:
		//line parser.y:1751
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 296:
		//line parser.y:1753
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 297:
		//line parser.y:1755
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 298:
		//line parser.y:1759
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 299:
		//line parser.y:1761
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 300:
		//line parser.y:1763
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 301:
		//line parser.y:1767
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 302:
		//line parser.y:1777
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
			}
		}
	case 303:
		//line parser.y:1787
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 304:
		//line parser.y:1793
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 305:
		//line parser.y:1800
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 306:
		//line parser.y:1807
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 307:
		//line parser.y:1809
		{
		}
	case 308:
		//line parser.y:1811
		{
		}
	case 309:
		//line parser.y:1813
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 310:
		//line parser.y:1815
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 311:
		//line parser.y:1818
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 312:
		//line parser.y:1826
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 313:
		//line parser.y:1835
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 314:
		//line parser.y:1843
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 315:
		//line parser.y:1852
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 316:
		//line parser.y:1861
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 317:
		//line parser.y:1869
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 318:
		//line parser.y:1877
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 319:
		//line parser.y:1885
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 320:
		//line parser.y:1894
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 321:
		//line parser.y:1897
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 322:
		//line parser.y:1900
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 323:
		//line parser.y:1907
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 324:
		//line parser.y:1913
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 325:
		//line parser.y:1919
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 326:
		//line parser.y:1925
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 327:
		//line parser.y:1932
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 328:
		//line parser.y:1934
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 329:
		//line parser.y:1937
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 330:
		//line parser.y:1939
		{
			RubyVAL.genericValue = ast.Range{
				Start:            RubyS[Rubypt-2].genericValue,
				End:              RubyS[Rubypt-0].genericValue,
				Line:             RubyS[Rubypt-2].genericValue.LineNumber(),
				ExcludeLastValue: true,
			}
		}
	case 331:
		//line parser.y:1949
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 332:
		//line parser.y:1956
		{
			RubyVAL.genericValue = ast.Defined{Node: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}

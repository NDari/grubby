//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	operator        string
	genericValue    ast.Node
	genericSlice    ast.Nodes
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CAPITAL_REF = 57351
const LPAREN = 57352
const RPAREN = 57353
const COMMA = 57354
const NamespacedModule = 57355
const DO = 57356
const DEF = 57357
const END = 57358
const IF = 57359
const ELSE = 57360
const ELSIF = 57361
const UNLESS = 57362
const CLASS = 57363
const MODULE = 57364
const FOR = 57365
const WHILE = 57366
const UNTIL = 57367
const BEGIN = 57368
const RESCUE = 57369
const ENSURE = 57370
const BREAK = 57371
const NEXT = 57372
const REDO = 57373
const RETRY = 57374
const RETURN = 57375
const YIELD = 57376
const AND = 57377
const OR = 57378
const LAMBDA = 57379
const CASE = 57380
const WHEN = 57381
const ALIAS = 57382
const SELF = 57383
const NIL = 57384
const TRUE = 57385
const FALSE = 57386
const LESSTHAN = 57387
const GREATERTHAN = 57388
const EQUALTO = 57389
const BANG = 57390
const COMPLEMENT = 57391
const BINARY_PLUS = 57392
const UNARY_PLUS = 57393
const BINARY_MINUS = 57394
const UNARY_MINUS = 57395
const STAR = 57396
const RANGE = 57397
const OR_EQUALS = 57398
const WHITESPACE = 57399
const NEWLINE = 57400
const SEMICOLON = 57401
const COLON = 57402
const DOT = 57403
const PIPE = 57404
const SLASH = 57405
const AMPERSAND = 57406
const QUESTIONMARK = 57407
const CARET = 57408
const LBRACKET = 57409
const RBRACKET = 57410
const LBRACE = 57411
const RBRACE = 57412
const DOLLARSIGN = 57413
const ATSIGN = 57414
const FILE_CONST_REF = 57415
const LINE_CONST_REF = 57416
const EOF = 57417

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"TRUE",
	"FALSE",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1461

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 135,
	11, 115,
	12, 115,
	-2, 248,
	-1, 328,
	58, 13,
	70, 13,
	-2, 36,
	-1, 341,
	11, 115,
	12, 115,
	-2, 248,
}

const RubyNprod = 304
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4613

var RubyAct = []int{

	307, 33, 5, 566, 174, 428, 427, 233, 14, 314,
	393, 243, 229, 231, 137, 136, 55, 142, 313, 25,
	2, 3, 378, 403, 102, 197, 146, 103, 198, 295,
	508, 104, 288, 144, 26, 313, 313, 4, 28, 313,
	253, 122, 146, 313, 282, 263, 540, 488, 486, 131,
	134, 484, 384, 482, 368, 391, 390, 171, 172, 158,
	270, 176, 177, 123, 153, 100, 99, 155, 180, 237,
	69, 148, 68, 79, 149, 135, 556, 298, 78, 146,
	291, 191, 101, 192, 193, 127, 347, 553, 313, 347,
	51, 199, 285, 266, 444, 93, 125, 191, 93, 126,
	159, 156, 81, 202, 203, 204, 97, 98, 95, 96,
	93, 93, 211, 82, 83, 190, 84, 216, 85, 86,
	158, 154, 221, 442, 122, 225, 226, 227, 315, 313,
	313, 347, 272, 270, 147, 124, 94, 93, 73, 72,
	150, 223, 385, 238, 245, 369, 123, 313, 453, 452,
	150, 425, 153, 150, 150, 155, 257, 277, 278, 259,
	280, 281, 245, 286, 287, 273, 292, 293, 294, 269,
	252, 254, 276, 256, 165, 150, 150, 150, 260, 262,
	161, 533, 316, 317, 318, 319, 299, 346, 447, 275,
	332, 153, 234, 165, 155, 323, 150, 245, 150, 150,
	331, 150, 166, 150, 150, 150, 150, 162, 150, 154,
	354, 150, 234, 150, 150, 159, 232, 240, 74, 164,
	121, 338, 339, 150, 160, 155, 249, 443, 156, 150,
	150, 150, 264, 313, 443, 158, 170, 157, 446, 150,
	235, 168, 360, 309, 249, 150, 353, 234, 154, 150,
	236, 232, 283, 188, 162, 289, 130, 416, 128, 296,
	235, 102, 349, 163, 103, 129, 520, 230, 104, 442,
	236, 169, 491, 364, 521, 555, 167, 249, 150, 249,
	69, 247, 68, 79, 248, 80, 401, 320, 78, 102,
	257, 102, 103, 97, 103, 235, 104, 150, 104, 414,
	150, 373, 547, 548, 477, 236, 478, 256, 411, 150,
	150, 406, 81, 407, 400, 170, 97, 98, 95, 96,
	409, 185, 405, 82, 83, 554, 84, 408, 85, 86,
	303, 304, 546, 313, 408, 404, 401, 150, 150, 531,
	497, 422, 76, 398, 77, 399, 94, 93, 73, 72,
	245, 401, 102, 423, 401, 103, 493, 133, 150, 104,
	430, 78, 150, 150, 429, 435, 183, 401, 102, 184,
	433, 103, 254, 421, 573, 104, 352, 102, 267, 102,
	103, 373, 103, 543, 104, 581, 104, 578, 577, 576,
	522, 578, 577, 311, 506, 459, 517, 438, 458, 457,
	150, 431, 352, 468, 472, 472, 150, 462, 456, 310,
	458, 457, 505, 480, 181, 150, 504, 182, 467, 489,
	132, 150, 572, 133, 502, 133, 492, 78, 389, 78,
	420, 382, 249, 494, 150, 381, 382, 388, 150, 363,
	364, 494, 387, 503, 336, 150, 200, 337, 501, 201,
	377, 370, 357, 356, 511, 355, 351, 150, 514, 301,
	501, 300, 228, 206, 321, 466, 327, 376, 308, 69,
	330, 68, 79, 149, 80, 523, 524, 78, 326, 1,
	189, 150, 150, 92, 91, 90, 89, 88, 87, 41,
	40, 39, 530, 38, 54, 473, 20, 43, 44, 150,
	21, 81, 535, 537, 16, 97, 98, 95, 96, 12,
	150, 541, 82, 83, 13, 84, 11, 85, 86, 52,
	45, 24, 313, 544, 23, 22, 270, 27, 19, 10,
	249, 76, 35, 77, 325, 94, 93, 73, 72, 30,
	18, 494, 249, 494, 15, 42, 17, 37, 36, 31,
	29, 71, 32, 562, 70, 75, 0, 0, 0, 0,
	472, 472, 472, 0, 570, 0, 0, 0, 579, 151,
	559, 560, 561, 0, 249, 0, 150, 0, 583, 151,
	0, 472, 151, 151, 0, 472, 472, 472, 0, 0,
	150, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	150, 0, 584, 585, 151, 151, 151, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 151, 0, 151, 151, 150,
	151, 150, 151, 151, 151, 151, 0, 151, 0, 0,
	151, 0, 151, 151, 150, 109, 0, 0, 0, 0,
	0, 0, 151, 575, 0, 250, 0, 0, 151, 151,
	151, 265, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 250, 151, 0, 118, 119, 151, 0,
	0, 284, 0, 0, 290, 0, 107, 108, 297, 0,
	0, 110, 0, 111, 0, 112, 0, 0, 0, 0,
	0, 0, 106, 115, 113, 114, 250, 151, 250, 69,
	148, 68, 79, 149, 135, 0, 141, 78, 146, 0,
	0, 0, 0, 0, 0, 0, 151, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 151,
	0, 81, 0, 0, 0, 97, 98, 95, 96, 0,
	0, 139, 82, 83, 109, 84, 0, 85, 86, 0,
	140, 0, 0, 0, 0, 0, 151, 151, 0, 0,
	0, 138, 0, 147, 0, 94, 93, 73, 72, 0,
	0, 0, 0, 0, 0, 118, 119, 151, 0, 0,
	0, 151, 151, 0, 0, 107, 108, 0, 0, 0,
	110, 0, 111, 0, 112, 0, 0, 0, 34, 0,
	0, 106, 115, 113, 114, 117, 69, 247, 68, 79,
	248, 80, 0, 0, 78, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 81, 0,
	151, 0, 97, 98, 95, 96, 0, 0, 145, 82,
	83, 250, 84, 151, 85, 86, 0, 151, 145, 313,
	0, 145, 145, 0, 151, 509, 0, 0, 76, 0,
	77, 0, 94, 93, 73, 72, 151, 0, 0, 0,
	0, 0, 0, 145, 145, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 151, 0, 0, 145, 0, 145, 145, 0, 145,
	0, 145, 145, 145, 145, 0, 145, 0, 151, 145,
	0, 145, 145, 0, 109, 0, 0, 0, 0, 151,
	0, 145, 0, 0, 145, 0, 0, 145, 145, 145,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 250,
	0, 0, 145, 145, 0, 118, 119, 145, 0, 0,
	0, 250, 0, 0, 0, 107, 108, 0, 0, 0,
	110, 0, 111, 0, 112, 120, 0, 0, 0, 109,
	0, 106, 115, 113, 114, 145, 328, 145, 450, 0,
	0, 0, 0, 250, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 145, 151,
	118, 119, 0, 0, 0, 0, 0, 145, 145, 151,
	107, 108, 0, 0, 0, 110, 0, 111, 0, 112,
	120, 0, 0, 0, 0, 0, 106, 115, 113, 114,
	0, 151, 0, 383, 0, 145, 145, 0, 151, 0,
	151, 0, 0, 69, 247, 68, 79, 248, 80, 0,
	0, 78, 0, 151, 0, 0, 145, 0, 0, 0,
	328, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 9, 0, 97,
	98, 95, 96, 0, 0, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 0, 313, 0, 145, 0,
	0, 0, 499, 0, 145, 76, 0, 77, 0, 94,
	93, 73, 72, 145, 0, 0, 0, 0, 0, 145,
	0, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	145, 0, 145, 0, 0, 0, 145, 175, 0, 0,
	178, 175, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	145, 0, 0, 205, 0, 207, 208, 0, 210, 0,
	212, 213, 214, 215, 0, 217, 0, 145, 220, 0,
	222, 224, 0, 109, 0, 0, 0, 0, 145, 0,
	241, 0, 0, 244, 0, 0, 255, 258, 261, 0,
	0, 0, 0, 0, 0, 0, 143, 0, 145, 0,
	0, 244, 274, 0, 118, 119, 279, 0, 0, 0,
	145, 0, 0, 0, 107, 108, 0, 0, 0, 110,
	0, 111, 0, 112, 120, 0, 0, 0, 109, 0,
	106, 115, 113, 114, 322, 329, 244, 367, 0, 0,
	0, 0, 145, 0, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 0, 0, 342, 145, 118,
	119, 0, 0, 0, 0, 0, 344, 345, 145, 107,
	108, 0, 0, 0, 110, 109, 111, 0, 112, 0,
	0, 0, 0, 0, 0, 106, 115, 113, 114, 0,
	145, 0, 564, 0, 365, 143, 109, 145, 0, 145,
	0, 0, 0, 0, 0, 186, 118, 119, 0, 0,
	0, 0, 145, 0, 0, 372, 107, 108, 0, 329,
	380, 110, 0, 111, 0, 112, 0, 118, 119, 0,
	0, 0, 106, 115, 113, 114, 53, 107, 108, 513,
	0, 0, 110, 0, 111, 0, 112, 0, 0, 0,
	0, 302, 0, 106, 115, 113, 114, 402, 0, 0,
	512, 0, 0, 175, 0, 0, 0, 0, 179, 0,
	0, 0, 412, 0, 0, 0, 0, 0, 143, 0,
	0, 0, 0, 187, 0, 0, 152, 0, 0, 244,
	0, 424, 0, 0, 0, 372, 152, 0, 0, 152,
	152, 0, 432, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 440, 209, 0, 0, 0, 0,
	0, 152, 152, 152, 218, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 455,
	0, 0, 152, 0, 152, 152, 0, 152, 0, 152,
	152, 152, 152, 271, 152, 0, 175, 152, 0, 152,
	152, 0, 109, 0, 0, 0, 0, 490, 0, 152,
	0, 0, 251, 0, 0, 152, 152, 152, 0, 0,
	0, 0, 0, 239, 312, 152, 242, 500, 0, 0,
	251, 152, 0, 118, 119, 152, 0, 335, 268, 500,
	0, 0, 0, 107, 108, 0, 0, 0, 110, 0,
	111, 0, 112, 0, 0, 0, 0, 0, 0, 106,
	115, 113, 114, 251, 152, 251, 386, 0, 0, 0,
	0, 529, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 152, 539, 0, 0,
	0, 0, 0, 0, 0, 152, 152, 539, 0, 366,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 0, 0, 0, 0, 0, 551,
	0, 350, 0, 152, 152, 0, 143, 0, 557, 0,
	358, 0, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 563, 0, 0, 152, 0, 0, 0, 152, 152,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 375, 0, 379, 0, 0, 0, 410, 0, 0,
	0, 0, 413, 415, 417, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 152, 118, 119, 0,
	0, 109, 152, 0, 0, 396, 397, 107, 108, 0,
	0, 152, 110, 0, 111, 0, 112, 152, 0, 0,
	439, 0, 0, 106, 115, 113, 114, 117, 251, 0,
	152, 0, 118, 119, 152, 449, 0, 379, 451, 0,
	0, 152, 107, 108, 0, 0, 0, 110, 0, 111,
	0, 112, 0, 152, 0, 0, 0, 0, 106, 115,
	113, 114, 436, 0, 0, 348, 0, 483, 0, 0,
	485, 0, 487, 0, 209, 0, 0, 152, 152, 0,
	448, 69, 148, 68, 79, 149, 80, 0, 0, 78,
	0, 0, 0, 0, 0, 152, 0, 460, 0, 0,
	0, 464, 0, 465, 0, 0, 152, 0, 510, 479,
	0, 481, 0, 81, 0, 0, 0, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 251, 84, 0, 85,
	86, 495, 0, 0, 313, 496, 0, 528, 251, 0,
	441, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	515, 516, 0, 0, 0, 0, 0, 0, 519, 116,
	251, 0, 152, 0, 0, 0, 105, 0, 0, 0,
	525, 0, 527, 550, 118, 119, 152, 0, 0, 0,
	0, 0, 0, 0, 107, 108, 152, 0, 0, 110,
	0, 111, 0, 112, 120, 0, 0, 0, 209, 0,
	106, 115, 113, 114, 117, 0, 542, 0, 152, 574,
	0, 0, 0, 0, 545, 152, 0, 152, 0, 0,
	0, 582, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 558, 0, 0, 0, 396,
	397, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 46, 569, 474, 568, 567, 475, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 46, 565, 474, 568, 567, 475, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 46, 461, 56, 395, 394, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 46, 392, 56, 395, 394, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 46, 536, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 401, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 46, 534, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 401, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 46, 434, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 401, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 46, 426, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 401, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 69, 49, 68, 79, 50, 80, 0, 0, 78,
	0, 46, 0, 56, 0, 0, 57, 47, 48, 0,
	60, 61, 58, 0, 0, 64, 65, 0, 66, 63,
	59, 0, 0, 81, 62, 0, 67, 97, 98, 95,
	96, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 6, 7, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 94, 93, 73,
	72, 8, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 571, 474, 0, 0, 475, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 549, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 526, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 518, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 0, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 507, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 498, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 476, 474, 0, 0, 475, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 469, 474, 0, 0, 475, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 463, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 445, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 437, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 374, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 362, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 359, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 0, 474, 0, 0, 475, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 0, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 334, 0,
	78, 0, 46, 0, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 0, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 69, 49, 68, 79, 50, 80, 0, 0,
	78, 0, 46, 0, 56, 0, 0, 57, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 81, 62, 0, 67, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 69, 148, 68, 79, 149, 135, 0, 0,
	78, 146, 0, 0, 76, 0, 77, 0, 94, 93,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 0, 0, 419, 0, 0,
	0, 0, 0, 0, 272, 0, 147, 0, 94, 93,
	73, 72, 69, 148, 68, 79, 149, 135, 0, 0,
	78, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 97, 98,
	95, 96, 0, 0, 139, 82, 83, 0, 84, 0,
	85, 86, 69, 148, 68, 79, 149, 341, 0, 0,
	78, 146, 0, 0, 272, 0, 147, 0, 94, 93,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 97, 98,
	95, 96, 0, 0, 340, 82, 83, 0, 84, 0,
	85, 86, 69, 330, 68, 79, 149, 80, 0, 0,
	78, 0, 0, 0, 76, 0, 147, 0, 94, 93,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 97, 98,
	95, 96, 0, 0, 0, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 0, 313, 0, 69, 247, 68,
	79, 248, 80, 0, 76, 78, 77, 325, 94, 93,
	73, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 97, 98, 95, 96, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 324, 0, 0, 76,
	0, 77, 0, 94, 93, 73, 72, 69, 148, 68,
	79, 149, 80, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 97, 98, 95, 96, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 94, 93, 73, 72, 69, 148, 68,
	79, 149, 80, 0, 0, 78, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 97, 98, 95, 96, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 69, 247, 68,
	79, 248, 80, 0, 0, 78, 0, 0, 0, 76,
	0, 147, 0, 94, 93, 73, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 97, 98, 95, 96, 0, 0, 0,
	82, 83, 0, 84, 0, 85, 86, 0, 0, 69,
	148, 68, 79, 149, 135, 0, 246, 78, 146, 76,
	0, 77, 0, 94, 93, 73, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 97, 98, 95, 96, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 69,
	148, 68, 79, 149, 80, 0, 0, 78, 0, 0,
	0, 272, 0, 147, 0, 94, 93, 73, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 97, 98, 95, 96, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 69,
	538, 68, 79, 149, 80, 0, 0, 78, 0, 0,
	0, 76, 0, 77, 0, 94, 93, 73, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 81, 0, 0, 0, 97, 98, 95, 96, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	119, 76, 0, 77, 0, 94, 93, 73, 72, 107,
	108, 552, 0, 0, 110, 0, 111, 0, 112, 0,
	118, 119, 0, 0, 343, 106, 115, 113, 114, 0,
	107, 108, 418, 0, 0, 110, 0, 111, 0, 112,
	0, 0, 118, 119, 0, 0, 106, 115, 113, 114,
	0, 0, 107, 108, 0, 0, 0, 110, 0, 111,
	0, 112, 0, 118, 119, 0, 0, 0, 106, 115,
	113, 114, 0, 107, 108, 0, 0, 0, 110, 0,
	111, 0, 112, 0, 0, 0, 0, 0, 0, 106,
	115, 113, 114,
}
var RubyPact = []int{

	-38, 2506, -1000, -1000, -1000, 7, -1000, -1000, -1000, 1849,
	-1000, -1000, -1000, -1000, 200, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 79, -1000, 24, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 252, 416, 348, 704,
	181, 168, 207, 146, 229, 224, 3837, 3837, -1000, 4404,
	3837, 3837, 4404, 4404, 397, 349, -1000, 314, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 243,
	-1000, 12, 3837, 3837, 4404, 4404, 4404, -1000, -1000, -1000,
	-1000, -1000, -1000, 19, 440, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3837, 3837, 3837, 4404, 457, 4404, 4404, -1000,
	4404, 3837, 4404, 4404, 4404, 4404, 3837, 4404, -1000, -1000,
	4404, 3837, 4404, 4404, 3837, 3837, 3837, 456, 206, 8,
	241, 172, 4404, 212, -1000, 4302, 12, 28, 4404, 4404,
	4404, 39, 366, 4505, -1000, -4, -2, -1000, 4354, 142,
	-8, -1000, -1000, 4302, 4404, -1000, 3837, 3837, 4404, 3837,
	3837, 38, 3837, 3837, 26, 3837, 3837, 3837, 23, 455,
	453, 360, 272, 3627, 231, 4505, 351, 335, 4505, 89,
	231, 3837, 3837, 3837, 3837, 280, 4112, 4057, 4302, 3697,
	-1000, -1000, 360, 360, 4505, 4505, 4505, -1000, -1000, 438,
	-1000, -1000, 360, 360, 360, 4505, 4007, 4505, 4505, 4182,
	4505, 360, 4505, 4505, 4505, 4505, 360, 4484, 4182, 4182,
	4505, 360, 4505, 119, 1697, 360, 360, 360, 12, -1000,
	450, 364, 186, -1000, 163, 449, 447, 446, -1000, 3487,
	348, 4505, 3417, 428, 4505, -1000, 4404, 3957, 54, 53,
	160, 127, -1000, -1000, -1000, 1219, -14, 77, 1662, -1000,
	-1000, 750, -1000, -1000, -1000, -1000, 445, 4252, 3347, -1000,
	444, 464, 4404, 424, 985, -16, 74, 360, 360, 1508,
	360, 360, -1000, -1000, -1000, 436, 360, 360, -1000, -1000,
	-1000, 431, 360, 360, 360, -1000, -1000, -1000, 422, 303,
	-11, -12, 2156, -1000, -1000, -1000, -1000, 360, 327, 4404,
	-1000, -1000, 89, -1000, 295, 4404, 360, 360, 360, 360,
	-1000, 296, 4505, -1000, 4404, -1000, 287, 245, -4, 4548,
	3887, 419, 360, -1000, -1000, 71, -1000, -1000, 28, 12,
	3837, 4302, 4505, 4404, 4505, 4505, -1000, 4252, 104, -1000,
	2436, 241, 186, 390, 4404, -1000, -1000, 241, 2366, -1000,
	-1000, 3277, -1000, 12, -1000, 4505, 1776, 222, -1000, -1000,
	-1000, 30, 4505, -1000, -1000, 3207, 176, -1000, -1000, 3627,
	930, -1000, -1000, 102, -1000, -1000, 101, -1000, -1000, -1000,
	4404, 4404, -1000, 392, 3837, -1000, 2086, 3137, -1000, -1000,
	-1000, 414, 4505, 3067, 2997, 288, -1000, -1000, 4404, 231,
	-15, -1000, 4505, -19, -1000, -22, -1000, -23, 3837, 4404,
	-1000, -1000, 360, 261, 4505, 3837, -1000, 340, -1000, -1000,
	-1000, -1000, 4505, -1000, -1000, 324, 2927, -1000, -1000, 1058,
	4505, 418, 3837, 410, 406, -1000, -1000, 388, 2857, -40,
	76, 811, -1000, 3837, 1342, 1321, -1000, 3837, -1000, 360,
	3627, -1000, 380, -1000, 2787, 3627, 262, 384, -1000, -1000,
	-1000, -1000, 360, -1000, 3837, 3837, -1000, -1000, -1000, 2717,
	231, 3627, -1000, 275, -1000, 4182, -1000, 175, -1000, 360,
	4505, -1000, 360, -1000, -1000, 2296, 2226, -1000, -1000, 4454,
	4505, -1000, -1000, 360, -21, -1000, -1000, -1000, -1000, 4404,
	3767, 360, 215, -1000, 360, 3627, 3627, -1000, -1000, 3627,
	377, 348, -1000, 274, 244, 2647, -1000, 3627, 72, 4505,
	-1000, 4404, 4527, 27, -1000, 309, -1000, 259, 65, 4505,
	4404, 360, 3627, -1000, -1000, 3627, -1000, -1000, -1000, -1000,
	72, 4505, 3837, 4404, -1000, -1000, -1000, 1274, 3627, 2016,
	1946, 2577, 362, 641, -1000, -1000, 373, 3837, -1000, -1000,
	369, -1000, -1000, -1000, 72, -1000, -1000, 3837, -1000, 360,
	3557, -1000, 72, 360, 3557, 3557, 3557,
}
var RubyPgo = []int{

	0, 555, 0, 554, 218, 552, 34, 33, 551, 550,
	549, 548, 1386, 547, 5, 38, 546, 545, 8, 544,
	540, 1097, 539, 519, 808, 532, 529, 528, 527, 525,
	524, 521, 520, 516, 514, 7, 90, 509, 504, 1,
	9, 500, 498, 497, 19, 496, 495, 3, 494, 493,
	491, 490, 489, 488, 487, 486, 485, 484, 483, 1401,
	480, 6, 15, 22, 10, 479, 12, 478, 23, 468,
	11, 467, 4, 466, 17, 16, 14, 13, 465, 464,
	422, 1355,
}
var RubyR1 = []int{

	0, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 80, 80, 81, 81, 59, 59, 59, 59, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 32, 32,
	32, 32, 32, 32, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 44, 17, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 25, 62,
	62, 62, 62, 72, 72, 70, 70, 70, 70, 70,
	70, 70, 76, 76, 76, 76, 76, 74, 74, 74,
	26, 26, 26, 26, 26, 26, 26, 26, 66, 66,
	77, 77, 77, 35, 35, 35, 35, 33, 33, 34,
	37, 39, 39, 39, 18, 18, 18, 18, 18, 18,
	18, 19, 19, 75, 75, 38, 38, 38, 38, 38,
	38, 38, 12, 12, 36, 36, 23, 23, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 3, 8, 10, 4, 1, 79,
	79, 79, 79, 79, 79, 79, 5, 5, 5, 5,
	67, 67, 73, 73, 73, 7, 7, 7, 7, 63,
	71, 71, 71, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 64, 64, 64, 64, 60, 60,
	60, 11, 20, 20, 14, 14, 14, 14, 78, 78,
	69, 69, 61, 61, 27, 27, 28, 29, 29, 31,
	31, 31, 30, 30, 30, 15, 45, 45, 45, 68,
	68, 68, 68, 68, 46, 46, 46, 46, 46, 47,
	47, 47, 47, 43, 42, 13, 41, 41, 41, 41,
	40, 40, 6, 9,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 5, 1,
	4, 4, 2, 3, 3, 4, 4, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 6, 7, 6, 6, 4, 3,
	7, 1, 5, 1, 3, 0, 1, 1, 2, 4,
	4, 5, 1, 1, 4, 2, 5, 1, 3, 3,
	5, 6, 7, 7, 8, 8, 5, 6, 1, 3,
	0, 1, 3, 1, 2, 3, 2, 4, 6, 5,
	4, 1, 2, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 9, 6, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 3, 3, 3, 3,
	3, 4, 3, 3, 3, 4, 3, 3, 3, 4,
	3, 3, 3, 4, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 1, 1, 5, 1, 1, 0,
	1, 1, 2, 4, 4, 5, 3, 5, 5, 5,
	3, 7, 3, 7, 8, 3, 4, 5, 5, 3,
	0, 1, 3, 4, 5, 3, 3, 3, 3, 3,
	5, 6, 5, 3, 4, 3, 3, 2, 0, 2,
	2, 3, 4, 6, 2, 3, 5, 4, 1, 3,
	0, 2, 1, 2, 2, 1, 1, 2, 1, 1,
	3, 3, 1, 3, 3, 5, 5, 5, 3, 0,
	2, 2, 2, 2, 5, 6, 5, 6, 5, 4,
	3, 3, 2, 4, 4, 2, 5, 7, 4, 6,
	4, 5, 3, 3,
}
var RubyChk = []int{

	-1000, -65, 58, 59, 75, -2, 58, 59, 75, -21,
	-26, -33, -37, -34, -18, -19, -38, -16, -20, -27,
	-45, -41, -29, -30, -31, -44, -6, -28, -15, -9,
	-22, -10, -5, -39, -24, -25, -11, -13, -49, -50,
	-51, -52, -17, -43, -42, -32, 15, 21, 22, 6,
	9, -36, -23, -12, -48, -75, 17, 20, 26, 34,
	24, 25, 38, 33, 29, 30, 32, 40, 7, 5,
	-3, -8, 74, 73, -4, -1, 67, 69, 13, 8,
	10, 37, 48, 49, 51, 53, 54, -53, -54, -55,
	-56, -57, -58, 72, 71, 43, 44, 41, 42, 59,
	58, 75, 17, 20, 24, 27, 61, 45, 46, 4,
	50, 52, 54, 63, 64, 62, 20, 65, 35, 36,
	55, 20, 45, 67, 56, 17, 20, 61, 6, -4,
	4, -39, 4, 9, -39, 10, -62, -76, 67, 47,
	56, 12, -74, -21, -7, -24, 14, 69, 6, 9,
	-36, -23, -12, 10, 67, 13, 47, 56, 67, 47,
	56, 12, 47, 56, 12, 47, 56, 47, 12, 47,
	12, -2, -2, -59, -72, -21, -2, -2, -21, -81,
	-72, 17, 20, 17, 20, 7, -81, -81, 10, -60,
	-7, 69, -2, -2, -21, -21, -21, 6, 9, 72,
	6, 9, -2, -2, -2, -21, 6, -21, -21, -81,
	-21, -2, -21, -21, -21, -21, -2, -21, -81, -81,
	-21, -2, -21, -74, -21, -2, -2, -2, 6, -66,
	61, -77, 10, -35, 6, 54, 64, 61, -66, -59,
	45, -21, -59, -70, -21, -18, 64, 6, 9, -36,
	-23, -12, -7, 12, -7, -21, -6, -74, -21, -44,
	-15, -21, -15, 6, -36, -23, 54, 12, -59, -63,
	62, -81, 67, -70, -21, -6, -74, -2, -2, -21,
	-2, -2, 6, -36, -23, 54, -2, -2, 6, -36,
	-23, 54, -2, -2, -2, 6, -36, -23, 54, -75,
	6, 6, -59, 58, 59, 58, 59, -2, -69, 12,
	58, 58, -81, 58, -40, 39, -2, -2, -2, -2,
	7, -79, -21, -18, 64, 70, -67, -73, -24, -21,
	6, -70, -2, 59, 11, -81, 6, 9, -76, -62,
	47, 10, -21, 60, -21, -21, 68, 12, 68, -7,
	-59, 6, 12, -77, 47, 6, 6, 6, -59, 16,
	-39, -59, 16, 11, 12, -21, -81, 68, 68, 68,
	6, -81, -21, -7, 16, -59, -71, 6, -63, -59,
	-21, 11, 12, 68, 68, 68, 68, 6, 6, 6,
	67, 67, 16, -64, 19, 18, -59, -59, 16, 18,
	-14, 27, -21, -68, -68, -40, 16, 18, 39, -72,
	-81, 12, -21, -81, 12, -81, 12, -81, 4, 60,
	11, -7, -2, -70, -21, 47, 16, -61, -14, -66,
	-35, 11, -21, -66, 16, -61, -59, 16, -7, -81,
	-21, 64, 47, 12, 64, 16, 62, 12, -59, -81,
	68, -81, 47, 47, -21, -21, 16, 19, 18, -2,
	-59, 16, -64, 16, -59, -59, -78, 4, -39, 16,
	58, 59, -2, -46, 17, 20, 16, 16, 18, -59,
	-72, -59, 68, -81, 70, -81, 70, -81, 70, -2,
	-21, 11, -2, 16, -14, -59, -59, 16, 16, 64,
	-21, -18, 6, -2, 6, 6, 6, 70, 70, 64,
	-81, -2, 68, 68, -2, -59, -59, 16, 16, -59,
	4, 12, 6, -2, -2, -59, 16, -59, -81, -21,
	-18, 64, -21, 6, 16, -61, 16, -61, 6, -21,
	67, -2, -59, 6, -39, -59, 58, 58, 59, 16,
	-81, -21, 4, 60, 16, 16, 11, -21, -59, -68,
	-68, -68, -2, -21, 68, 16, -47, 19, 18, 16,
	-47, 16, -80, 12, -81, 12, 16, 19, 18, -2,
	-68, 16, -81, -2, -68, -68, -68,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 0, 0, 0, 21,
	22, 23, 24, 25, 0, 0, 0, 0, 15, 265,
	0, 0, 13, 268, 272, 269, 266, 0, 19, 20,
	26, 27, 28, 29, 30, 31, 13, 13, 153, 79,
	248, 0, 0, 0, 0, 0, 0, 48, 49, 50,
	51, 52, 53, 0, 0, 204, 205, 207, 208, 5,
	6, 7, 0, 0, 0, 0, 0, 0, 0, 13,
	0, 0, 0, 0, 0, 0, 0, 0, 13, 13,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 0,
	140, 15, 0, 151, 15, -2, 82, 91, 13, 0,
	0, 0, 111, 122, 123, 36, 15, 13, 21, 22,
	23, 24, 25, 115, 0, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 15, 0, 260, 264, 113, 0, 0, 13, 0,
	267, 0, 0, 0, 0, 0, 209, 0, 115, 0,
	295, 13, 194, 195, 196, 197, 76, 174, 175, 0,
	172, 173, 235, 243, 278, 75, 84, 92, 94, 0,
	198, 199, 200, 201, 202, 203, 237, 0, 0, 0,
	302, 239, 93, 0, 127, 171, 236, 238, 88, 15,
	0, 138, 140, 141, 143, 0, 0, 0, 15, 0,
	0, 15, 0, 0, 116, 117, 0, 21, 22, 23,
	24, 25, 83, 13, 125, 127, 0, 0, 154, 155,
	156, 165, 166, 178, 179, 180, 0, 13, 0, 15,
	230, 15, 13, 0, 127, 0, 0, 157, 167, 0,
	158, 168, 182, 183, 184, 0, 159, 169, 186, 187,
	188, 0, 160, 170, 161, 190, 191, 192, 0, 162,
	0, 0, 0, 15, 15, 16, 17, 18, 0, 0,
	279, 279, 0, 14, 0, 0, 273, 274, 270, 271,
	303, 13, 210, 211, 0, 216, 13, 13, -2, 0,
	21, 0, 249, 250, 251, 15, 176, 177, 85, 86,
	0, -2, 108, 0, 293, 294, 102, 0, 103, 89,
	0, 140, 0, 0, 0, 144, 146, 140, 0, 147,
	15, 0, 150, 77, 13, 118, 0, 95, 98, 100,
	181, 0, 128, 129, 225, 0, 0, 231, 15, 13,
	127, 81, 13, 96, 99, 101, 97, 185, 189, 193,
	0, 0, 233, 0, 0, 15, 0, 0, 252, 15,
	261, 15, 114, 0, 0, 0, 298, 15, 0, 15,
	0, 13, 212, 0, 13, 0, 13, 0, 13, 0,
	80, 87, 90, 0, 275, 0, 130, 0, 262, 15,
	142, 139, 145, 15, 136, 0, 0, 149, 78, 0,
	124, 0, 0, 0, 0, 226, 229, 0, 0, 0,
	95, 0, 13, 0, 0, 0, 234, 0, 15, 15,
	247, 240, 0, 242, 0, 254, 15, 0, 258, 276,
	280, 281, 282, 283, 0, 0, 277, 296, 15, 0,
	15, 13, 206, 0, 217, 0, 218, 0, 219, 220,
	222, 109, 107, 131, 263, 0, 0, 137, 148, 0,
	119, 120, 126, 104, 0, 112, 232, 227, 228, 0,
	0, 106, 0, 164, 15, 245, 246, 241, 253, 255,
	0, 0, 15, 15, 0, 0, 299, 13, 300, 213,
	214, 0, 0, 0, 132, 0, 133, 0, 21, 121,
	0, 105, 244, 15, 259, 257, 279, 15, 15, 297,
	301, 215, 13, 0, 134, 135, 110, 0, 256, 0,
	0, 0, 11, 13, 163, 284, 0, 0, 279, 286,
	0, 288, 221, 12, 223, 13, 285, 0, 279, 279,
	292, 287, 224, 279, 290, 291, 289,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:221
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:223
		{
		}
	case 3:
		//line parser.y:225
		{
		}
	case 4:
		//line parser.y:227
		{
		}
	case 5:
		//line parser.y:229
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:231
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:233
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:239
		{
		}
	case 11:
		//line parser.y:241
		{
		}
	case 12:
		//line parser.y:242
		{
		}
	case 13:
		//line parser.y:244
		{
		}
	case 14:
		//line parser.y:245
		{
		}
	case 15:
		//line parser.y:248
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:250
		{
		}
	case 17:
		//line parser.y:252
		{
		}
	case 18:
		//line parser.y:254
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 74:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 75:
		//line parser.y:266
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 76:
		//line parser.y:269
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:272
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 78:
		//line parser.y:279
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-2].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 79:
		//line parser.y:286
		{
			RubyVAL.genericValue = ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 80:
		//line parser.y:290
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 81:
		//line parser.y:297
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 82:
		//line parser.y:304
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 83:
		//line parser.y:311
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args: append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 84:
		//line parser.y:318
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 85:
		//line parser.y:325
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 86:
		//line parser.y:333
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
		}
	case 87:
		//line parser.y:341
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-4].genericValue,
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:   append(RubyS[Rubypt-1].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 88:
		//line parser.y:349
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
		}
	case 89:
		//line parser.y:357
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 90:
		//line parser.y:365
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 91:
		//line parser.y:376
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 92:
		//line parser.y:383
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 93:
		//line parser.y:391
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 94:
		//line parser.y:399
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 95:
		//line parser.y:409
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 96:
		//line parser.y:417
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 97:
		//line parser.y:425
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 98:
		//line parser.y:433
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 99:
		//line parser.y:441
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:449
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 101:
		//line parser.y:457
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 102:
		//line parser.y:465
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 103:
		//line parser.y:473
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 104:
		//line parser.y:483
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 105:
		//line parser.y:491
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 106:
		//line parser.y:502
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 107:
		//line parser.y:510
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
		}
	case 108:
		//line parser.y:520
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Name: RubyS[Rubypt-2].operator},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 109:
		//line parser.y:530
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 110:
		//line parser.y:532
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-1].genericValue})
		}
	case 111:
		//line parser.y:534
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 112:
		//line parser.y:536
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 113:
		//line parser.y:539
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:541
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:543
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 116:
		//line parser.y:545
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:547
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:549
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 119:
		//line parser.y:556
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:558
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:560
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 122:
		//line parser.y:569
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 123:
		//line parser.y:571
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:573
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:575
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:577
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.ProcArg{Value: RubyS[Rubypt-0].genericValue})
		}
	case 127:
		//line parser.y:580
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 128:
		//line parser.y:582
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:584
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:588
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 131:
		//line parser.y:596
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 132:
		//line parser.y:605
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 133:
		//line parser.y:614
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 134:
		//line parser.y:623
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 135:
		//line parser.y:633
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 136:
		//line parser.y:643
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name: ast.BareReference{Name: RubyS[Rubypt-3].operator},
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 137:
		//line parser.y:651
		{
			RubyVAL.genericValue = ast.FuncDecl{
				Name:    ast.BareReference{Name: RubyS[Rubypt-4].operator},
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 138:
		//line parser.y:662
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 139:
		//line parser.y:664
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 140:
		//line parser.y:666
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 141:
		//line parser.y:668
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 142:
		//line parser.y:670
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 143:
		//line parser.y:673
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 144:
		//line parser.y:675
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 145:
		//line parser.y:677
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 146:
		//line parser.y:679
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 147:
		//line parser.y:683
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 148:
		//line parser.y:691
		{
			RubyVAL.genericValue = ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
		}
	case 149:
		//line parser.y:701
		{
			if RubyS[Rubypt-3].operator != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + RubyS[Rubypt-3].operator + ")")
			}

			RubyVAL.genericValue = ast.EigenClass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 150:
		//line parser.y:713
		{
			RubyVAL.genericValue = ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 151:
		//line parser.y:722
		{
			RubyVAL.genericValue = ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
		}
	case 152:
		//line parser.y:729
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(string)}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
		}
	case 153:
		//line parser.y:746
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(string), "::")
			namespace := strings.Join(pieces[:len(pieces)-1], "::")
			RubyVAL.genericValue = ast.Class{
				Name:              pieces[len(pieces)-1],
				Namespace:         strings.TrimPrefix(namespace, "::"),
				IsGlobalNamespace: true,
			}
		}
	case 154:
		//line parser.y:757
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 155:
		//line parser.y:764
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 156:
		//line parser.y:768
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 157:
		//line parser.y:772
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 158:
		//line parser.y:779
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 159:
		//line parser.y:786
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 160:
		//line parser.y:793
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 161:
		//line parser.y:801
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 162:
		//line parser.y:808
		{
			RubyVAL.genericValue = ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
		}
	case 163:
		//line parser.y:816
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 164:
		//line parser.y:831
		{
			tail := ast.CallExpression{Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 165:
		//line parser.y:837
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 166:
		//line parser.y:844
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 167:
		//line parser.y:848
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 168:
		//line parser.y:855
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 169:
		//line parser.y:862
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 170:
		//line parser.y:869
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
		}
	case 171:
		//line parser.y:876
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 172:
		//line parser.y:879
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 173:
		//line parser.y:881
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 174:
		//line parser.y:884
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 175:
		//line parser.y:886
		{
			RubyVAL.genericValue = ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 176:
		//line parser.y:889
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 177:
		//line parser.y:891
		{
			RubyVAL.genericValue = ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 178:
		//line parser.y:894
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 179:
		//line parser.y:896
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 180:
		//line parser.y:898
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 181:
		//line parser.y:900
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 182:
		//line parser.y:903
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 183:
		//line parser.y:905
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 184:
		//line parser.y:907
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 185:
		//line parser.y:909
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 186:
		//line parser.y:912
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 187:
		//line parser.y:914
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 188:
		//line parser.y:916
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
		}
	case 189:
		//line parser.y:918
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 190:
		//line parser.y:921
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 191:
		//line parser.y:923
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 192:
		//line parser.y:925
		{
			RubyVAL.genericValue = ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
		}
	case 193:
		//line parser.y:927
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
		}
	case 194:
		//line parser.y:930
		{
			RubyVAL.genericValue = ast.Negation{Target: RubyS[Rubypt-0].genericValue}
		}
	case 195:
		//line parser.y:931
		{
			RubyVAL.genericValue = ast.Complement{Target: RubyS[Rubypt-0].genericValue}
		}
	case 196:
		//line parser.y:932
		{
			RubyVAL.genericValue = ast.Positive{Target: RubyS[Rubypt-0].genericValue}
		}
	case 197:
		//line parser.y:933
		{
			RubyVAL.genericValue = ast.Negative{Target: RubyS[Rubypt-0].genericValue}
		}
	case 198:
		//line parser.y:936
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 199:
		//line parser.y:945
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 200:
		//line parser.y:954
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 201:
		//line parser.y:963
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 202:
		//line parser.y:972
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 203:
		//line parser.y:981
		{
			RubyVAL.genericValue = ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 204:
		//line parser.y:989
		{
			RubyVAL.genericValue = ast.Boolean{Value: true}
		}
	case 205:
		//line parser.y:990
		{
			RubyVAL.genericValue = ast.Boolean{Value: false}
		}
	case 206:
		//line parser.y:992
		{
			RubyVAL.genericValue = ast.Array{Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 207:
		//line parser.y:994
		{
			RubyVAL.genericValue = ast.Self{}
		}
	case 208:
		//line parser.y:995
		{
			RubyVAL.genericValue = ast.Nil{}
		}
	case 209:
		//line parser.y:997
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 210:
		//line parser.y:999
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 211:
		//line parser.y:1001
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 212:
		//line parser.y:1003
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 213:
		//line parser.y:1010
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 214:
		//line parser.y:1012
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 215:
		//line parser.y:1014
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.CallExpression{
				Func:   ast.BareReference{Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			})
		}
	case 216:
		//line parser.y:1022
		{
			RubyVAL.genericValue = ast.Hash{}
		}
	case 217:
		//line parser.y:1024
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 218:
		//line parser.y:1032
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Pairs: pairs}
		}
	case 219:
		//line parser.y:1040
		{
			RubyVAL.genericValue = ast.Block{Body: ast.Nodes{RubyS[Rubypt-2].genericValue}}
		}
	case 220:
		//line parser.y:1043
		{
			if RubyS[Rubypt-1].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 221:
		//line parser.y:1050
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 222:
		//line parser.y:1058
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 223:
		//line parser.y:1065
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 224:
		//line parser.y:1072
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 225:
		//line parser.y:1080
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 226:
		//line parser.y:1082
		{
			RubyVAL.genericValue = ast.Block{
				Body: RubyS[Rubypt-1].genericSlice,
				Args: RubyS[Rubypt-2].genericSlice,
			}
		}
	case 227:
		//line parser.y:1089
		{
			RubyVAL.genericValue = ast.Block{Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 228:
		//line parser.y:1093
		{
			RubyVAL.genericValue = ast.Block{Body: RubyS[Rubypt-2].genericSlice}
		}
	case 229:
		//line parser.y:1096
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 230:
		//line parser.y:1098
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 231:
		//line parser.y:1100
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 232:
		//line parser.y:1102
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 233:
		//line parser.y:1105
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 234:
		//line parser.y:1112
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 235:
		//line parser.y:1120
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 236:
		//line parser.y:1127
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 237:
		//line parser.y:1134
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 238:
		//line parser.y:1141
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 239:
		//line parser.y:1148
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
		}
	case 240:
		//line parser.y:1155
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 241:
		//line parser.y:1162
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 242:
		//line parser.y:1170
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 243:
		//line parser.y:1177
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 244:
		//line parser.y:1186
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 245:
		//line parser.y:1193
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 246:
		//line parser.y:1200
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 247:
		//line parser.y:1207
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 248:
		//line parser.y:1214
		{
		}
	case 249:
		//line parser.y:1215
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 250:
		//line parser.y:1216
		{
		}
	case 251:
		//line parser.y:1219
		{
			RubyVAL.genericValue = ast.Group{Body: RubyS[Rubypt-1].genericSlice}
		}
	case 252:
		//line parser.y:1222
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 253:
		//line parser.y:1229
		{
			RubyVAL.genericValue = ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 254:
		//line parser.y:1238
		{
			RubyVAL.genericValue = ast.Rescue{Body: RubyS[Rubypt-0].genericSlice}
		}
	case 255:
		//line parser.y:1240
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 256:
		//line parser.y:1253
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 257:
		//line parser.y:1272
		{
			if RubyS[Rubypt-2].operator != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 258:
		//line parser.y:1286
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 259:
		//line parser.y:1288
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 260:
		//line parser.y:1291
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 261:
		//line parser.y:1293
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 262:
		//line parser.y:1296
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 263:
		//line parser.y:1298
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 264:
		//line parser.y:1301
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 265:
		//line parser.y:1308
		{
			RubyVAL.genericValue = ast.Yield{}
		}
	case 266:
		//line parser.y:1310
		{
			RubyVAL.genericValue = ast.Retry{}
		}
	case 267:
		//line parser.y:1313
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 268:
		//line parser.y:1321
		{
			RubyVAL.genericValue = ast.Return{}
		}
	case 269:
		//line parser.y:1325
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 270:
		//line parser.y:1327
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 271:
		//line parser.y:1329
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 272:
		//line parser.y:1333
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 273:
		//line parser.y:1335
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 274:
		//line parser.y:1337
		{
			RubyVAL.genericValue = ast.IfBlock{Condition: ast.Negation{Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 275:
		//line parser.y:1341
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
		}
	case 276:
		//line parser.y:1350
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 277:
		//line parser.y:1352
		{
			RubyVAL.genericValue = ast.Loop{Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue}, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 278:
		//line parser.y:1354
		{
			RubyVAL.genericValue = ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 279:
		//line parser.y:1357
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 280:
		//line parser.y:1359
		{
		}
	case 281:
		//line parser.y:1361
		{
		}
	case 282:
		//line parser.y:1363
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 283:
		//line parser.y:1365
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 284:
		//line parser.y:1368
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 285:
		//line parser.y:1375
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 286:
		//line parser.y:1383
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 287:
		//line parser.y:1390
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 288:
		//line parser.y:1398
		{
			RubyVAL.genericValue = ast.IfBlock{
				Condition: ast.Negation{Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 289:
		//line parser.y:1406
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 290:
		//line parser.y:1413
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 291:
		//line parser.y:1420
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 292:
		//line parser.y:1427
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Condition: ast.Boolean{Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 293:
		//line parser.y:1435
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 294:
		//line parser.y:1438
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 295:
		//line parser.y:1440
		{
			RubyVAL.genericValue = ast.Lambda{Body: RubyS[Rubypt-0].genericValue.(ast.Block)}
		}
	case 296:
		//line parser.y:1443
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 297:
		//line parser.y:1445
		{
			RubyVAL.genericValue = ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 298:
		//line parser.y:1447
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
		}
	case 299:
		//line parser.y:1449
		{
			RubyVAL.genericValue = ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
		}
	case 300:
		//line parser.y:1452
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 301:
		//line parser.y:1454
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 302:
		//line parser.y:1456
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
		}
	case 303:
		//line parser.y:1459
		{
			RubyVAL.genericValue = ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
		}
	}
	goto Rubystack /* stack new state and value */
}

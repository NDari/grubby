//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	hashPair        ast.HashKeyValuePair
	astString       ast.String

	methodParam      ast.MethodParam
	methodParamSlice []ast.MethodParam
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const IVAR_OR_CLASS_VARIABLE = 57355
const LPAREN = 57356
const RPAREN = 57357
const COMMA = 57358
const STRING = 57359
const NamespacedModule = 57360
const ProcArg = 57361
const DO = 57362
const DEF = 57363
const END = 57364
const IF = 57365
const ELSE = 57366
const ELSIF = 57367
const UNLESS = 57368
const CLASS = 57369
const MODULE = 57370
const FOR = 57371
const WHILE = 57372
const UNTIL = 57373
const BEGIN = 57374
const RESCUE = 57375
const ENSURE = 57376
const BREAK = 57377
const NEXT = 57378
const REDO = 57379
const RETRY = 57380
const RETURN = 57381
const YIELD = 57382
const AND = 57383
const OR = 57384
const LAMBDA = 57385
const CASE = 57386
const WHEN = 57387
const ALIAS = 57388
const SUPER = 57389
const SELF = 57390
const NIL = 57391
const DEFINED = 57392
const LESSTHAN = 57393
const GREATERTHAN = 57394
const EQUALTO = 57395
const BANG = 57396
const COMPLEMENT = 57397
const BINARY_PLUS = 57398
const UNARY_PLUS = 57399
const BINARY_MINUS = 57400
const UNARY_MINUS = 57401
const STAR = 57402
const RANGE = 57403
const EXCLUSIVE_RANGE = 57404
const OR_EQUALS = 57405
const AND_EQUALS = 57406
const WHITESPACE = 57407
const NEWLINE = 57408
const SEMICOLON = 57409
const COLON = 57410
const DOT = 57411
const PIPE = 57412
const SLASH = 57413
const AMPERSAND = 57414
const QUESTIONMARK = 57415
const CARET = 57416
const LBRACKET = 57417
const RBRACKET = 57418
const LBRACE = 57419
const RBRACE = 57420
const FILE_CONST_REF = 57421
const LINE_CONST_REF = 57422
const EOF = 57423

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"IVAR_OR_CLASS_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SUPER",
	"SELF",
	"NIL",
	"DEFINED",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"EXCLUSIVE_RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1926

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 132,
	69, 20,
	-2, 158,
	-1, 143,
	21, 262,
	23, 262,
	26, 262,
	27, 262,
	28, 262,
	30, 262,
	31, 262,
	32, 262,
	35, 262,
	36, 262,
	38, 262,
	39, 262,
	40, 262,
	44, 262,
	46, 262,
	67, 262,
	-2, 11,
	-1, 154,
	21, 13,
	23, 13,
	26, 13,
	27, 13,
	28, 13,
	30, 13,
	31, 13,
	32, 13,
	35, 13,
	36, 13,
	38, 13,
	39, 13,
	40, 13,
	44, 13,
	46, 13,
	67, 13,
	-2, 11,
	-1, 212,
	21, 262,
	23, 262,
	26, 262,
	27, 262,
	28, 262,
	30, 262,
	31, 262,
	32, 262,
	35, 262,
	36, 262,
	38, 262,
	39, 262,
	40, 262,
	44, 262,
	46, 262,
	67, 262,
	-2, 11,
	-1, 216,
	21, 13,
	23, 13,
	26, 13,
	27, 13,
	28, 13,
	30, 13,
	31, 13,
	32, 13,
	35, 13,
	36, 13,
	38, 13,
	39, 13,
	40, 13,
	44, 13,
	46, 13,
	67, 13,
	78, 13,
	-2, 11,
	-1, 224,
	21, 262,
	23, 262,
	26, 262,
	27, 262,
	28, 262,
	30, 262,
	31, 262,
	32, 262,
	35, 262,
	36, 262,
	38, 262,
	39, 262,
	40, 262,
	44, 262,
	46, 262,
	67, 262,
	-2, 11,
	-1, 359,
	16, 127,
	-2, 20,
	-1, 410,
	66, 11,
	78, 11,
	-2, 13,
	-1, 453,
	66, 11,
	78, 11,
	-2, 13,
	-1, 570,
	66, 11,
	78, 11,
	-2, 14,
	-1, 612,
	16, 136,
	-2, 11,
	-1, 616,
	66, 11,
	78, 11,
	-2, 14,
}

const RubyNprod = 330
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4877

var RubyAct = []int{

	338, 28, 5, 469, 466, 158, 656, 167, 145, 189,
	265, 157, 383, 427, 146, 345, 300, 55, 144, 467,
	263, 344, 25, 546, 438, 56, 21, 2, 3, 377,
	421, 262, 135, 654, 70, 132, 69, 344, 136, 26,
	137, 138, 4, 101, 344, 95, 102, 297, 419, 640,
	104, 103, 344, 159, 153, 344, 614, 170, 186, 187,
	168, 344, 195, 196, 568, 613, 200, 540, 344, 209,
	404, 279, 381, 538, 199, 153, 96, 97, 344, 178,
	498, 159, 170, 217, 218, 168, 99, 98, 536, 545,
	215, 160, 379, 175, 211, 178, 377, 425, 377, 171,
	377, 100, 226, 227, 228, 229, 152, 73, 72, 172,
	173, 216, 236, 223, 424, 174, 175, 241, 125, 160,
	174, 169, 124, 248, 171, 252, 176, 177, 257, 258,
	259, 260, 216, 198, 123, 270, 377, 170, 174, 377,
	168, 344, 126, 14, 123, 297, 169, 210, 273, 386,
	285, 288, 290, 277, 174, 278, 420, 243, 418, 269,
	402, 301, 131, 251, 159, 297, 255, 271, 630, 373,
	296, 284, 309, 310, 311, 286, 314, 315, 316, 234,
	320, 321, 322, 101, 344, 652, 102, 282, 244, 245,
	104, 103, 601, 599, 159, 156, 380, 109, 602, 376,
	323, 169, 160, 495, 347, 348, 349, 350, 201, 308,
	330, 491, 490, 276, 313, 362, 357, 600, 346, 129,
	185, 355, 130, 156, 298, 506, 626, 627, 572, 505,
	249, 179, 160, 254, 118, 119, 344, 563, 306, 344,
	367, 180, 181, 344, 107, 108, 183, 125, 490, 110,
	368, 111, 344, 112, 280, 122, 489, 184, 464, 127,
	128, 463, 106, 115, 113, 114, 30, 343, 344, 653,
	384, 126, 109, 302, 461, 651, 307, 389, 159, 344,
	382, 312, 361, 182, 179, 387, 365, 650, 344, 324,
	101, 400, 101, 102, 366, 102, 649, 104, 103, 104,
	103, 636, 74, 634, 357, 266, 156, 632, 159, 118,
	119, 205, 264, 266, 206, 133, 160, 268, 409, 107,
	108, 417, 436, 468, 110, 268, 111, 159, 112, 120,
	121, 610, 603, 334, 335, 625, 156, 106, 115, 113,
	114, 117, 560, 435, 282, 266, 160, 101, 553, 401,
	102, 134, 208, 354, 104, 103, 444, 268, 267, 440,
	491, 159, 340, 159, 406, 160, 267, 439, 159, 411,
	456, 413, 669, 415, 666, 665, 452, 455, 327, 317,
	291, 454, 585, 303, 328, 318, 292, 170, 390, 203,
	342, 384, 204, 586, 482, 465, 472, 470, 388, 160,
	477, 160, 664, 486, 666, 665, 160, 488, 279, 101,
	458, 280, 102, 485, 450, 478, 104, 103, 492, 448,
	156, 446, 445, 502, 474, 475, 476, 447, 449, 512,
	501, 329, 319, 293, 531, 441, 532, 442, 185, 526,
	526, 487, 459, 460, 515, 471, 386, 462, 377, 432,
	156, 433, 341, 534, 183, 386, 294, 443, 443, 567,
	436, 434, 550, 352, 551, 552, 141, 78, 351, 156,
	481, 555, 554, 580, 34, 511, 510, 457, 101, 207,
	496, 102, 555, 561, 423, 104, 103, 504, 422, 405,
	565, 566, 509, 620, 511, 510, 587, 392, 394, 621,
	548, 393, 588, 156, 391, 156, 390, 574, 521, 332,
	156, 577, 331, 141, 78, 261, 537, 231, 539, 520,
	541, 140, 543, 496, 544, 358, 161, 141, 78, 589,
	590, 339, 1, 214, 92, 161, 91, 90, 161, 161,
	89, 88, 87, 41, 40, 484, 39, 502, 38, 597,
	527, 20, 564, 43, 161, 44, 16, 12, 13, 161,
	161, 161, 604, 606, 608, 11, 486, 569, 161, 161,
	488, 45, 611, 24, 617, 573, 612, 605, 607, 609,
	161, 23, 161, 161, 22, 161, 27, 161, 161, 161,
	161, 19, 161, 10, 35, 161, 161, 18, 161, 15,
	161, 161, 71, 631, 487, 594, 42, 17, 46, 555,
	633, 555, 635, 555, 637, 161, 37, 36, 31, 47,
	29, 32, 161, 161, 161, 161, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
	615, 161, 0, 0, 161, 0, 526, 526, 526, 161,
	645, 646, 647, 660, 0, 0, 0, 161, 667, 0,
	0, 0, 0, 629, 0, 0, 671, 161, 0, 526,
	0, 0, 0, 526, 526, 526, 109, 0, 0, 0,
	0, 596, 638, 668, 161, 161, 641, 0, 0, 0,
	0, 672, 673, 0, 0, 0, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 0, 484, 161,
	0, 0, 0, 118, 119, 0, 0, 0, 662, 161,
	161, 0, 0, 107, 108, 0, 0, 0, 110, 0,
	111, 0, 112, 670, 0, 0, 161, 0, 0, 0,
	0, 106, 115, 113, 114, 0, 0, 0, 576, 0,
	0, 161, 0, 0, 70, 162, 69, 79, 163, 78,
	165, 164, 143, 0, 151, 95, 0, 166, 153, 0,
	0, 0, 0, 161, 0, 0, 0, 161, 0, 161,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 94, 96, 97, 93, 0,
	161, 148, 82, 83, 0, 84, 109, 85, 86, 0,
	0, 149, 150, 0, 0, 161, 0, 0, 0, 0,
	0, 161, 0, 147, 0, 154, 0, 73, 72, 0,
	9, 0, 0, 0, 161, 0, 161, 0, 0, 0,
	161, 161, 0, 118, 119, 161, 0, 0, 0, 0,
	0, 0, 0, 107, 108, 109, 0, 0, 110, 0,
	111, 0, 112, 0, 161, 0, 0, 0, 0, 0,
	0, 106, 115, 113, 114, 0, 161, 0, 575, 0,
	0, 161, 155, 0, 0, 0, 0, 0, 0, 0,
	161, 190, 118, 119, 197, 202, 0, 0, 0, 161,
	161, 0, 107, 108, 0, 0, 0, 110, 0, 111,
	213, 112, 120, 121, 0, 219, 220, 221, 161, 0,
	106, 115, 113, 114, 222, 225, 161, 503, 0, 0,
	0, 0, 0, 0, 161, 161, 230, 161, 232, 233,
	0, 235, 0, 237, 238, 239, 240, 0, 242, 0,
	0, 246, 247, 0, 250, 0, 253, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 274, 0, 0, 0, 0, 0, 0, 281, 283,
	287, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 33, 0, 305, 0, 0,
	256, 0, 0, 0, 0, 256, 0, 118, 119, 0,
	0, 0, 161, 225, 161, 0, 0, 107, 108, 0,
	0, 0, 110, 155, 111, 0, 112, 120, 121, 0,
	0, 109, 0, 0, 0, 106, 115, 113, 114, 161,
	353, 360, 403, 0, 0, 139, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 191, 0, 0, 191,
	105, 0, 225, 0, 0, 371, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 374, 375, 0, 107, 108,
	191, 191, 191, 110, 0, 111, 0, 112, 161, 191,
	191, 0, 225, 0, 0, 0, 106, 115, 113, 114,
	117, 191, 0, 191, 191, 161, 191, 213, 191, 191,
	191, 191, 0, 191, 0, 188, 191, 191, 0, 191,
	109, 191, 191, 0, 0, 0, 0, 0, 0, 410,
	0, 0, 0, 414, 0, 416, 191, 213, 0, 0,
	0, 0, 0, 191, 191, 191, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 118, 119, 0,
	0, 0, 191, 0, 0, 191, 0, 107, 108, 0,
	191, 437, 110, 0, 111, 0, 112, 190, 191, 0,
	0, 0, 0, 0, 0, 106, 115, 113, 114, 117,
	155, 0, 213, 0, 0, 272, 453, 213, 275, 0,
	0, 256, 0, 0, 0, 0, 191, 0, 0, 295,
	70, 162, 69, 79, 163, 78, 165, 164, 143, 0,
	473, 95, 0, 166, 153, 0, 0, 191, 0, 0,
	191, 0, 483, 0, 0, 0, 0, 493, 0, 0,
	191, 191, 333, 0, 0, 0, 360, 81, 0, 0,
	0, 94, 96, 97, 93, 507, 508, 191, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 397,
	0, 0, 451, 0, 190, 0, 0, 0, 0, 304,
	0, 154, 542, 73, 72, 0, 0, 0, 0, 0,
	547, 549, 0, 493, 191, 0, 0, 0, 191, 0,
	191, 0, 0, 0, 0, 0, 70, 162, 69, 79,
	163, 78, 165, 164, 143, 0, 151, 95, 385, 166,
	153, 0, 0, 0, 0, 0, 0, 395, 0, 0,
	398, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 191, 81, 0, 0, 0, 94, 96, 97,
	93, 109, 408, 0, 82, 83, 412, 84, 0, 85,
	86, 191, 0, 0, 0, 0, 191, 0, 595, 0,
	360, 0, 0, 0, 0, 304, 0, 154, 0, 73,
	72, 0, 0, 0, 0, 191, 0, 0, 118, 119,
	430, 431, 0, 0, 0, 483, 0, 0, 107, 108,
	0, 0, 191, 110, 0, 111, 0, 112, 120, 121,
	0, 191, 0, 0, 0, 0, 106, 115, 113, 114,
	191, 191, 0, 378, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 639, 0, 0, 191, 0, 0,
	0, 0, 0, 479, 0, 191, 191, 0, 191, 0,
	0, 648, 0, 0, 0, 0, 497, 0, 0, 500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 513, 0, 0, 0, 517,
	518, 0, 519, 0, 0, 0, 0, 0, 533, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 497,
	0, 0, 70, 162, 69, 79, 163, 78, 165, 164,
	143, 0, 0, 95, 556, 166, 153, 0, 0, 0,
	557, 558, 559, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 94, 96, 97, 93, 571, 0, 148,
	82, 83, 0, 84, 0, 85, 86, 578, 579, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 0,
	0, 304, 622, 154, 0, 73, 72, 0, 591, 0,
	593, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 191, 0, 0, 0,
	0, 118, 119, 618, 0, 0, 0, 0, 619, 0,
	0, 107, 108, 623, 624, 333, 110, 0, 111, 0,
	112, 120, 121, 0, 0, 0, 0, 0, 0, 106,
	115, 113, 114, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 643, 644, 0, 0,
	0, 0, 430, 431, 70, 51, 69, 79, 52, 78,
	54, 53, 80, 0, 0, 95, 0, 0, 0, 48,
	659, 528, 658, 657, 529, 49, 50, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 94, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 524, 525, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 73, 72, 70,
	51, 69, 79, 52, 78, 54, 53, 80, 0, 0,
	95, 0, 0, 0, 48, 655, 528, 658, 657, 529,
	49, 50, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	94, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 524,
	525, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 73, 72, 70, 51, 69, 79, 52, 78,
	54, 53, 80, 0, 0, 95, 0, 0, 0, 48,
	514, 57, 429, 428, 58, 49, 50, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 94, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 336, 337, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 73, 72, 70,
	51, 69, 79, 52, 78, 54, 53, 80, 0, 0,
	95, 0, 0, 0, 48, 426, 57, 429, 428, 58,
	49, 50, 0, 61, 62, 59, 0, 0, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	94, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 336,
	337, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 73, 72, 70, 51, 69, 79, 52, 78,
	54, 53, 80, 0, 0, 95, 0, 0, 0, 48,
	0, 57, 0, 0, 58, 49, 50, 0, 61, 62,
	59, 436, 468, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 94, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 336, 337, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 73, 72, 70,
	51, 69, 79, 52, 78, 54, 53, 80, 0, 0,
	95, 0, 0, 0, 48, 581, 57, 0, 0, 58,
	49, 50, 0, 61, 62, 59, 0, 582, 65, 66,
	0, 67, 64, 60, 0, 0, 81, 63, 0, 68,
	94, 96, 97, 93, 0, 0, 0, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 336,
	337, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	77, 0, 73, 72, 70, 51, 69, 79, 52, 78,
	54, 53, 80, 0, 0, 95, 0, 0, 0, 48,
	0, 57, 0, 0, 58, 49, 50, 0, 61, 62,
	59, 0, 0, 65, 66, 0, 67, 64, 60, 0,
	0, 81, 63, 0, 68, 94, 96, 97, 93, 0,
	0, 0, 82, 83, 0, 84, 0, 85, 86, 0,
	0, 0, 0, 0, 6, 7, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 77, 0, 73, 72, 8,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 661, 528, 0, 0,
	529, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	524, 525, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 95, 0, 0, 0,
	48, 642, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 336, 337, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 628, 57, 0, 0,
	58, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 95, 0, 0, 0,
	48, 592, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 336, 337, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 583, 57, 0, 0,
	58, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 95, 0, 0, 0,
	48, 562, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 336, 337, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 530, 528, 0, 0,
	529, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	524, 525, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 95, 0, 0, 0,
	48, 523, 528, 0, 0, 529, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 524, 525, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 516, 57, 0, 0,
	58, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 95, 0, 0, 0,
	48, 0, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 336, 337, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 499, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 494, 57, 0, 0,
	58, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 95, 0, 0, 0,
	48, 480, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 336, 337, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 407, 57, 0, 0,
	58, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 95, 0, 0, 0,
	48, 399, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 336, 337, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 396, 57, 0, 0,
	58, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 95, 0, 0, 0,
	48, 0, 528, 0, 0, 529, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 524, 525, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 0, 57, 0, 0,
	58, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	336, 337, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 95, 0, 0, 0,
	48, 0, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 616, 337, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 0, 57, 0, 0,
	58, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	570, 337, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 364, 0, 95, 0, 0, 0,
	48, 0, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 0, 363, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 95, 0, 0, 0, 48, 0, 57, 0, 0,
	58, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 95, 0, 0, 0,
	48, 0, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	70, 162, 69, 79, 163, 78, 165, 164, 80, 0,
	0, 95, 0, 166, 76, 0, 77, 0, 73, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 192, 69, 79, 193,
	78, 137, 194, 80, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 598, 73, 72,
	70, 192, 69, 79, 193, 78, 137, 194, 80, 0,
	0, 95, 0, 166, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 359, 69, 79, 193,
	78, 137, 194, 80, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 356, 73, 72,
	70, 192, 69, 79, 193, 78, 137, 194, 224, 0,
	0, 95, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 94, 96, 97, 93, 0, 0, 369, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 370,
	0, 154, 0, 73, 72, 70, 162, 69, 79, 163,
	78, 165, 164, 143, 0, 0, 95, 0, 166, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	70, 192, 69, 79, 193, 78, 137, 194, 80, 0,
	0, 95, 0, 0, 304, 0, 154, 0, 73, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 192, 69, 79, 193,
	78, 137, 194, 224, 0, 0, 95, 0, 0, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	70, 192, 69, 79, 193, 78, 137, 194, 80, 0,
	0, 95, 0, 0, 76, 0, 154, 0, 73, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 63, 0,
	0, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 70, 162, 69, 79, 163,
	78, 165, 164, 212, 0, 0, 95, 0, 166, 76,
	0, 77, 0, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	70, 192, 69, 79, 193, 78, 137, 194, 80, 0,
	0, 95, 0, 0, 76, 0, 77, 0, 73, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 70, 325, 69, 79, 193,
	78, 137, 326, 80, 0, 0, 95, 0, 0, 76,
	0, 77, 0, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	70, 192, 69, 79, 193, 78, 137, 194, 224, 0,
	0, 95, 0, 0, 76, 0, 77, 0, 73, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 94, 96, 97, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 70, 162, 69, 79, 163,
	78, 165, 164, 80, 0, 0, 95, 0, 0, 76,
	0, 77, 0, 73, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 94, 96, 97, 93,
	0, 0, 0, 82, 83, 109, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 119, 0, 0, 76, 0, 77, 0, 73, 72,
	107, 108, 0, 0, 0, 110, 0, 111, 0, 112,
	120, 121, 118, 119, 109, 0, 0, 372, 106, 115,
	113, 114, 107, 108, 0, 0, 663, 110, 0, 111,
	0, 112, 120, 121, 0, 0, 109, 302, 0, 0,
	106, 115, 113, 114, 0, 0, 0, 0, 0, 0,
	0, 118, 119, 0, 0, 0, 0, 0, 109, 0,
	0, 107, 108, 0, 0, 0, 110, 0, 111, 0,
	112, 0, 0, 118, 119, 0, 0, 0, 0, 106,
	115, 113, 114, 107, 108, 0, 0, 0, 110, 0,
	111, 0, 112, 0, 0, 118, 119, 0, 0, 0,
	0, 106, 115, 113, 114, 107, 108, 0, 0, 0,
	110, 0, 111, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 115, 113, 114,
}
var RubyPact = []int{

	-39, 2128, -1000, -1000, -1000, 20, -1000, -1000, -1000, 1590,
	-1000, -1000, -1000, -1000, 229, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 69, 196, -1000, 93, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28, 517,
	456, 748, 46, 63, 178, 230, 204, 3779, 3779, -1000,
	4504, 3779, 3779, 4504, 4669, 366, 288, -1000, 471, -1000,
	-1000, 335, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4449,
	-1000, 34, 3779, 3779, 4504, 4504, 4504, -1000, -1000, -1000,
	-1000, -1000, -1000, 4504, 4614, -1000, -1000, -1000, -1000, -1000,
	-1000, 3779, 3779, 3779, 3779, 4504, 510, 4504, 4504, -1000,
	4504, 3779, 4504, 4504, 4504, 4504, 3779, 4504, -1000, -1000,
	4504, 4504, 3779, 4504, 3779, 4504, 4504, 3779, 3779, 3779,
	3779, 508, 298, 90, 66, 298, -1000, -1000, -1000, 97,
	4504, 376, -1000, -1000, 34, -1000, 55, 4504, 4394, 4504,
	4504, 373, 440, -23, 95, 268, -1000, -1000, 367, -1000,
	-1000, 67, 1506, 71, 40, 231, 4504, -1000, -1000, 4504,
	-1000, 3779, 3779, 3779, 4504, 3779, 3779, 3779, 372, 3779,
	3779, 3779, 4559, 371, 505, 502, 455, 267, 3404, 346,
	4804, 59, 4209, 126, 45, 386, 324, 4804, 173, 346,
	-1000, -1000, 1116, 3779, 3779, 3779, 3779, 460, -1000, 3834,
	4059, 392, -1000, 268, 3629, -1000, 95, 455, 455, 4804,
	4804, 4804, 4804, -1000, -1000, 4804, 455, 455, 455, 455,
	4804, 4134, 4804, 4804, 4264, 4804, 455, 4804, 4804, 4804,
	4804, 455, 4699, 101, 4264, 4264, 4804, 4804, 455, 123,
	1347, 16, 455, 4804, 120, -4, 4721, 455, 455, 455,
	455, 4339, -1000, 439, 338, -1000, 224, 499, 497, 490,
	494, -1000, 3254, 456, 4804, 3179, 3834, -1000, -1000, -1000,
	84, 966, -6, 1027, -1000, -1000, -1000, 1116, -1000, 1116,
	-1000, -1000, -1000, 482, -1000, 3104, -1000, 306, 4059, 3404,
	-1000, -1000, 4504, -1000, 4504, 4804, 3834, 82, -28, 455,
	455, 455, 80, -46, 455, 455, 455, -1000, -1000, 481,
	455, 455, 455, 438, 432, 1300, 79, -1000, -1000, 477,
	422, 39, 22, 1903, -1000, -1000, -1000, -1000, 455, 427,
	4504, -1000, -1000, 173, -1000, 413, 4504, 455, 455, 455,
	455, -1000, 405, 4804, -1000, -1000, -1000, 403, 398, 1204,
	4782, 3834, 455, -1000, -1000, 4264, 3834, -1000, 34, 3779,
	4504, 4804, -1000, -1000, 4804, 4804, 221, -1000, 208, -1000,
	205, -1000, 34, -1000, -1000, 1978, 306, 430, 381, 4504,
	-1000, -1000, 298, 298, 298, 1978, -1000, -1000, 3029, -1000,
	378, 3834, 203, 195, -1000, -1000, 3984, -1000, 2954, 133,
	4782, 2, 2879, 75, 4804, 4264, 851, 392, 176, -1000,
	172, -1000, -1000, -1000, 4504, 4504, -1000, 470, 3779, -1000,
	1828, 2804, -1000, -1000, -1000, -1000, 503, 4804, 2729, 2654,
	412, -1000, -1000, 4504, 346, 12, -1000, -5, -1000, -11,
	-1000, 4504, 392, 4804, 378, -1000, 455, 13, -53, 4264,
	4264, 3779, 4264, 3779, 3779, -1000, 326, 289, -1000, -1000,
	-1000, -1000, -1000, 4804, -1000, -1000, -1000, 320, 289, 2579,
	-1000, 222, -1000, 268, -1000, -1000, -1000, -1000, 367, 3779,
	3779, 452, -1000, 4804, -1000, -1000, -14, 3404, -1000, -1000,
	3554, -1000, -1000, 159, 213, -1000, 3779, 802, 672, -1000,
	3779, -1000, 455, 3404, -1000, 451, -1000, 2053, 2504, 3404,
	377, 489, -1000, -1000, -1000, -1000, 455, -1000, 3779, 3779,
	-1000, -1000, -1000, 2429, 346, 3404, -1000, 3834, -1000, 3909,
	-1000, 186, 4804, 202, 177, 145, -1000, 4804, -1000, 4721,
	455, 455, 455, -1000, 310, -1000, 3404, 1978, 1978, 1978,
	-1000, 309, -1000, 34, 3834, 455, 455, -10, -1000, -22,
	-1000, 3479, -1000, 3704, 455, 344, -1000, 455, 3404, 3404,
	-1000, -1000, -1000, -1000, 3404, 486, 456, -1000, -1000, 269,
	160, 2354, -1000, 3404, 118, 4804, -1000, -1000, -1000, 100,
	-1000, -1000, 3779, -1000, 285, 289, 281, 289, 279, 289,
	-1000, -1000, -1000, 4504, -1000, -29, -1000, 455, 3404, 2279,
	-1000, -1000, -1000, 3404, 3404, -1000, -1000, -1000, -1000, 118,
	4504, 455, -1000, 274, -1000, 265, -1000, 253, 170, 193,
	-1000, -45, -1000, 3404, 3404, 1753, 1678, 2204, 4760, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 380, 3779, -1000, -1000,
	350, -1000, 118, -1000, -1000, 3779, -1000, 455, 3329, -1000,
	118, 455, 3329, 3329, 3329,
}
var RubyPgo = []int{

	0, 626, 0, 302, 621, 39, 8, 620, 619, 618,
	617, 616, 3, 608, 1, 607, 11, 606, 143, 602,
	599, 597, 830, 266, 12, 474, 594, 593, 591, 586,
	584, 581, 573, 571, 565, 558, 557, 556, 995, 15,
	26, 555, 553, 22, 551, 550, 6, 17, 548, 546,
	544, 543, 542, 541, 540, 537, 536, 534, 1055, 533,
	19, 18, 13, 532, 24, 4, 531, 14, 9, 525,
	106, 25, 519, 463, 10, 16, 31, 20, 7, 5,
	69,
}
var RubyR1 = []int{

	0, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 80, 80, 58, 58, 58, 58, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 33, 33, 33, 33,
	33, 33, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 19, 19, 43, 17, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	26, 61, 61, 61, 61, 68, 68, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	16, 70, 70, 65, 65, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 76, 76, 76, 77, 77,
	77, 74, 74, 74, 74, 34, 34, 35, 36, 38,
	38, 38, 18, 18, 18, 18, 18, 18, 18, 18,
	20, 20, 20, 71, 71, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 37, 37, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 9, 3, 1, 73,
	73, 73, 73, 73, 73, 73, 4, 4, 4, 4,
	78, 79, 79, 69, 69, 69, 6, 6, 6, 6,
	6, 6, 6, 6, 24, 24, 75, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 62, 62,
	62, 62, 59, 59, 59, 10, 21, 21, 21, 21,
	12, 12, 12, 12, 12, 12, 72, 72, 66, 66,
	60, 60, 28, 28, 29, 30, 30, 30, 30, 32,
	32, 32, 31, 31, 31, 14, 14, 44, 44, 44,
	44, 64, 64, 64, 64, 64, 45, 45, 45, 45,
	45, 46, 46, 46, 46, 42, 41, 11, 40, 40,
	40, 40, 39, 39, 5, 5, 7, 13, 8, 8,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 2, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 6, 7, 1,
	2, 6, 6, 2, 3, 2, 3, 4, 5, 4,
	5, 4, 5, 2, 3, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	6, 6, 6, 6, 6, 6, 7, 6, 6, 8,
	4, 5, 8, 1, 4, 1, 3, 0, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	2, 1, 4, 0, 2, 6, 7, 8, 8, 8,
	9, 9, 9, 6, 7, 1, 3, 3, 0, 1,
	3, 1, 2, 3, 2, 4, 6, 5, 4, 1,
	2, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 9, 6, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 3, 4, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 5, 1, 1, 0,
	1, 1, 1, 4, 4, 4, 3, 5, 6, 5,
	3, 1, 4, 3, 7, 8, 3, 4, 4, 4,
	7, 8, 5, 6, 0, 1, 3, 4, 5, 3,
	3, 3, 3, 3, 5, 6, 5, 3, 4, 3,
	3, 2, 0, 2, 2, 3, 4, 6, 8, 6,
	2, 3, 5, 5, 4, 4, 1, 3, 0, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 1, 1,
	3, 3, 1, 3, 3, 6, 6, 5, 5, 3,
	3, 0, 2, 2, 2, 2, 5, 6, 5, 6,
	5, 4, 3, 3, 2, 4, 4, 2, 5, 7,
	4, 6, 4, 5, 3, 3, 3, 2, 1, 2,
}
var RubyChk = []int{

	-1000, -63, 66, 67, 81, -2, 66, 67, 81, -22,
	-27, -34, -36, -35, -18, -20, -37, -15, -21, -28,
	-44, -40, -30, -31, -32, -43, -5, -29, -14, -7,
	-23, -9, -4, -38, -25, -26, -10, -11, -48, -49,
	-50, -51, -17, -42, -41, -33, -13, -8, 21, 27,
	28, 7, 10, 13, 12, -47, -71, 23, 26, 32,
	40, 30, 31, 44, 39, 35, 36, 38, 46, 8,
	6, -19, 80, 79, -3, -1, 75, 77, 11, 9,
	14, 43, 54, 55, 57, 59, 60, -52, -53, -54,
	-55, -56, -57, 50, 47, 17, 48, 49, 67, 66,
	81, 23, 26, 31, 30, 33, 69, 51, 52, 4,
	56, 58, 60, 71, 72, 70, 26, 73, 41, 42,
	61, 62, 26, 75, 53, 51, 75, 63, 64, 23,
	26, 69, 7, -23, -3, 4, 10, 12, 13, -38,
	4, 10, -38, 14, -61, -6, -67, 75, 53, 63,
	64, 16, -70, 20, 77, -22, -18, -16, -79, -14,
	-5, -25, 7, 10, 13, 12, 19, -78, 14, 75,
	11, 53, 63, 64, 75, 53, 63, 64, 16, 53,
	63, 64, 53, 16, 53, 16, -2, -2, -58, -68,
	-22, -38, 7, 10, 13, -2, -2, -22, -80, -68,
	-14, -18, -22, 23, 26, 23, 26, 8, 17, -80,
	-80, -67, 14, -22, -59, -6, 77, -2, -2, -22,
	-22, -22, -22, -61, 14, -22, -2, -2, -2, -2,
	-22, 7, -22, -22, -80, -22, -2, -22, -22, -22,
	-22, -2, -22, -5, -80, -80, -22, -22, -2, -70,
	-22, -5, -2, -22, -70, -5, -22, -2, -2, -2,
	-2, 7, -76, -77, 14, -74, 7, 60, 19, 69,
	69, -76, -58, 51, -22, -58, -80, -6, -6, 16,
	-70, -22, -5, -22, -43, -14, -40, -22, -14, -22,
	-14, 7, 13, 60, 16, -58, -75, 70, -80, -58,
	-75, 66, 5, 16, 75, -22, -80, -70, -5, -2,
	-2, -2, -70, -5, -2, -2, -2, 7, 13, 60,
	-2, -2, -2, -47, -70, 7, 13, 7, 13, 60,
	-71, 7, 7, -58, 66, 67, 66, 67, -2, -66,
	16, 66, 66, -80, 66, -39, 45, -2, -2, -2,
	-2, 8, -73, -22, -18, -16, 78, -79, -69, 7,
	-22, -80, -2, 67, 15, -80, -80, -6, -61, 53,
	75, -22, 68, 68, -22, -22, 76, 16, 76, 76,
	76, 76, -61, -24, -6, -58, 16, -77, 60, 53,
	7, 7, 7, 7, 4, -58, 22, -38, -58, 22,
	-67, -80, 76, 76, 76, 7, -80, 22, -58, -77,
	-22, -80, -58, -80, -22, -80, -22, -67, 76, 76,
	76, 76, 7, 7, 75, 75, 22, -62, 25, 24,
	-58, -58, 22, 24, 34, -12, 33, -22, -64, -64,
	-39, 22, 24, 45, -68, -80, 16, -80, 16, -80,
	16, 68, -67, -22, -67, -6, -2, -70, -5, -80,
	-80, 53, -80, 53, 53, -24, -65, -60, 34, -12,
	-74, 15, 15, -22, -76, -76, -76, -65, -60, -58,
	22, -80, 16, -22, -18, -16, -14, -5, -79, 53,
	53, 16, -16, -22, 22, 70, -80, -58, 78, 78,
	-58, -75, -78, 76, -80, 53, 53, -22, -22, 22,
	25, 24, -2, -58, 22, -62, 22, -58, -58, -58,
	-72, 5, -38, 22, 66, 67, -2, -45, 23, 26,
	22, 22, 24, -58, -68, -58, 76, -80, 78, -80,
	78, -80, -22, -80, -80, 76, 76, -22, -5, -22,
	-2, -2, -2, 22, -65, -12, -58, -58, -58, -58,
	22, -65, 22, 15, -80, -2, -2, 7, 78, -80,
	66, -58, 15, -80, -2, 76, 76, -2, -58, -58,
	22, 22, 34, 22, -58, 5, 16, 7, 13, -2,
	-2, -58, 22, -58, -80, -22, -18, -16, 78, 7,
	15, 15, 53, 22, -65, -60, -65, -60, -65, -60,
	22, -6, -16, 75, 78, -80, 66, -2, -58, -58,
	7, 13, -38, -58, -58, 66, 66, 67, 22, -80,
	68, -2, 22, -65, 22, -65, 22, -65, -80, -22,
	78, -80, 22, -58, -58, -64, -64, -64, -22, 22,
	22, 22, 15, 76, 78, 22, -46, 25, 24, 22,
	-46, 22, -80, 16, 22, 25, 24, -2, -64, 22,
	-80, -2, -64, -64, -64,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 0, 0,
	0, 20, 21, 23, 22, 0, 0, 0, 0, 13,
	283, 0, 0, 11, 288, 292, 289, 284, 0, 17,
	18, 19, 24, 25, 26, 27, 11, 11, 171, 79,
	262, 0, 0, 0, 0, 0, 0, 46, 47, 48,
	49, 50, 51, 0, 328, 73, 217, 218, 5, 6,
	7, 0, 0, 0, 0, 0, 0, 0, 0, 11,
	0, 0, 0, 0, 0, 0, 0, 0, 11, 11,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 0, 0, 158, 21, 22, 23, 13,
	0, 169, 13, -2, 83, 85, 93, 11, 0, 0,
	0, 0, 123, 13, -2, 128, 129, 130, 131, 132,
	133, 32, 20, 21, 23, 22, 0, 231, 11, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 13, 0, 278, 282,
	125, 31, 20, 21, 23, 0, 0, 11, 0, 285,
	286, 287, 125, 0, 0, 0, 0, 0, 74, 219,
	0, 80, -2, 128, 0, 317, -2, 206, 207, 208,
	209, 76, 327, 329, -2, 141, 249, 257, 299, 300,
	75, 86, 95, 97, 0, 210, 211, 212, 213, 214,
	215, 251, 0, 0, 0, 0, 324, 325, 253, 0,
	141, 0, 179, 96, 0, 0, 141, 190, 196, 250,
	252, 244, 13, 155, 158, 159, 161, 0, 0, 0,
	0, 13, 0, 0, 13, 0, 127, 84, 94, 11,
	0, 141, 0, 172, 173, 174, 175, 185, 186, 191,
	192, 197, 198, 0, 11, 0, 13, 158, 0, 11,
	13, 11, 0, 11, 11, 140, 127, 0, 0, 176,
	187, 193, 0, 0, 177, 188, 194, 200, 201, 0,
	178, 189, 195, 180, 181, 20, 23, 203, 204, 0,
	182, 0, 0, 0, 13, 13, 14, 15, 16, 0,
	0, 301, 301, 0, 12, 0, 0, 293, 294, 290,
	291, 326, 11, 220, 221, 222, 226, 11, 11, -2,
	0, 127, 263, 264, 265, 0, 127, 87, 89, 0,
	11, 120, 11, 11, 315, 316, 101, 11, 102, 103,
	108, 109, 244, 91, 245, 143, 0, 0, 0, 0,
	162, 164, 158, 158, 158, 143, 165, 13, 0, 168,
	11, 0, 98, 99, 100, 199, 0, 236, 0, 0,
	-2, 0, 0, 13, 230, 0, 141, 11, 104, 105,
	106, 107, 202, 205, 0, 0, 247, 0, 0, 13,
	0, 0, 266, 13, 13, 279, 13, 126, 0, 0,
	0, 320, 13, 0, 13, 0, 11, 0, 11, 0,
	11, 0, 11, -2, 11, 88, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 143, 13, 280,
	160, 156, 157, 163, 13, 13, 13, 0, 143, 0,
	167, 0, 11, 134, 135, 136, 137, 138, 139, 0,
	0, 0, 124, 142, 237, 246, 0, 11, 238, 239,
	0, 13, 232, 99, 0, 11, 0, 0, 0, 248,
	0, 13, 13, 261, 254, 0, 256, 0, 0, 270,
	13, 0, 276, 297, 302, 303, 304, 305, 0, 0,
	298, 318, 13, 0, 13, 11, 216, 0, 227, 0,
	229, 0, 233, 0, 0, 110, 111, 295, 296, 0,
	114, 115, 118, 145, 0, 281, 144, 143, 143, 143,
	153, 0, 166, 77, 0, 112, 113, 0, 242, 0,
	-2, 0, 82, 0, 117, 0, 184, 13, 259, 260,
	255, 267, 13, 269, 271, 0, 0, 13, 13, 13,
	0, 0, 321, 11, 322, 223, 224, 225, 228, 0,
	81, 121, 0, 146, 0, 143, 0, 143, 0, 143,
	154, 78, -2, 0, 243, 0, -2, 116, 258, 0,
	13, 13, 277, 274, 275, 301, 13, 13, 319, 323,
	0, 119, 147, 0, 148, 0, 149, 0, 0, 0,
	240, 0, 268, 272, 273, 0, 0, 0, 11, 150,
	151, 152, 122, 183, 241, 306, 0, 0, 301, 308,
	0, 310, 234, 11, 307, 0, 301, 301, 314, 309,
	235, 301, 312, 313, 311,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:239
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:241
		{
		}
	case 3:
		//line parser.y:243
		{
		}
	case 4:
		//line parser.y:245
		{
		}
	case 5:
		//line parser.y:247
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:249
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:251
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:257
		{
		}
	case 11:
		//line parser.y:259
		{
		}
	case 12:
		//line parser.y:260
		{
		}
	case 13:
		//line parser.y:263
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 14:
		//line parser.y:265
		{
		}
	case 15:
		//line parser.y:267
		{
		}
	case 16:
		//line parser.y:269
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 17:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 18:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:280
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 74:
		//line parser.y:282
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 75:
		//line parser.y:290
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 76:
		//line parser.y:293
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:296
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:305
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:315
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:321
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 81:
		//line parser.y:329
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:338
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:347
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:356
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:366
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:376
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 87:
		//line parser.y:384
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:395
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:406
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:416
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-4].genericValue.LineNumber(),
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 91:
		//line parser.y:426
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-3].genericValue.LineNumber(),
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 92:
		//line parser.y:436
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:449
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 94:
		//line parser.y:457
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 95:
		//line parser.y:466
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 96:
		//line parser.y:475
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:484
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:495
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 99:
		//line parser.y:504
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:513
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 101:
		//line parser.y:522
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 102:
		//line parser.y:531
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 103:
		//line parser.y:540
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 104:
		//line parser.y:549
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 105:
		//line parser.y:558
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 106:
		//line parser.y:567
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 107:
		//line parser.y:576
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 108:
		//line parser.y:585
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 109:
		//line parser.y:594
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 110:
		//line parser.y:603
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 111:
		//line parser.y:616
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 112:
		//line parser.y:632
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 113:
		//line parser.y:641
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 114:
		//line parser.y:650
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:659
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:668
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 117:
		//line parser.y:677
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 118:
		//line parser.y:686
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 119:
		//line parser.y:695
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 120:
		//line parser.y:710
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 121:
		//line parser.y:722
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 122:
		//line parser.y:724
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 123:
		//line parser.y:726
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 124:
		//line parser.y:728
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:731
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:733
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:736
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 128:
		//line parser.y:738
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:740
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:742
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 131:
		//line parser.y:744
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 132:
		//line parser.y:751
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:753
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 134:
		//line parser.y:755
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:757
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:759
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:761
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:763
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 139:
		//line parser.y:765
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 140:
		//line parser.y:774
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 141:
		//line parser.y:785
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 142:
		//line parser.y:787
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 143:
		//line parser.y:791
		{
			RubyVAL.genericSlice = nil
		}
	case 144:
		//line parser.y:793
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 145:
		//line parser.y:796
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:807
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 147:
		//line parser.y:819
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 148:
		//line parser.y:831
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 149:
		//line parser.y:843
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 150:
		//line parser.y:855
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 151:
		//line parser.y:868
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 152:
		//line parser.y:881
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 153:
		//line parser.y:894
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 154:
		//line parser.y:905
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 155:
		//line parser.y:919
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-0].methodParamSlice
		}
	case 156:
		//line parser.y:921
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 157:
		//line parser.y:923
		{
			RubyVAL.methodParamSlice = []ast.MethodParam{{Name: "", IsSplat: true}}
		}
	case 158:
		//line parser.y:925
		{
		}
	case 159:
		//line parser.y:927
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 160:
		//line parser.y:929
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 161:
		//line parser.y:932
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 162:
		//line parser.y:934
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsSplat: true}
		}
	case 163:
		//line parser.y:936
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name, DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 164:
		//line parser.y:938
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsProc: true}
		}
	case 165:
		//line parser.y:942
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 166:
		//line parser.y:952
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 167:
		//line parser.y:964
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 168:
		//line parser.y:977
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 169:
		//line parser.y:988
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 170:
		//line parser.y:997
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 171:
		//line parser.y:1016
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 172:
		//line parser.y:1034
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1043
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1049
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1055
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 176:
		//line parser.y:1057
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1066
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 178:
		//line parser.y:1068
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 179:
		//line parser.y:1070
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 180:
		//line parser.y:1073
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 181:
		//line parser.y:1082
		{
			var rhs ast.Node = RubyS[Rubypt-0].genericSlice
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				rhs = RubyS[Rubypt-0].genericSlice[0]
			}
			RubyVAL.genericValue = ast.Assignment{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				LHS:  RubyS[Rubypt-2].genericValue,
				RHS:  rhs,
			}
		}
	case 182:
		//line parser.y:1094
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 183:
		//line parser.y:1104
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 184:
		//line parser.y:1119
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 185:
		//line parser.y:1125
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1134
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1140
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 188:
		//line parser.y:1149
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:1151
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:1153
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 191:
		//line parser.y:1162
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 192:
		//line parser.y:1171
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 193:
		//line parser.y:1177
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 194:
		//line parser.y:1186
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 195:
		//line parser.y:1188
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 196:
		//line parser.y:1190
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 197:
		//line parser.y:1198
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1200
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 199:
		//line parser.y:1202
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1205
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1207
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 202:
		//line parser.y:1209
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1212
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1214
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1216
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1220
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 207:
		//line parser.y:1222
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 208:
		//line parser.y:1224
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 209:
		//line parser.y:1226
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 210:
		//line parser.y:1229
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 211:
		//line parser.y:1240
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 212:
		//line parser.y:1251
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 213:
		//line parser.y:1262
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 214:
		//line parser.y:1273
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 215:
		//line parser.y:1284
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 216:
		//line parser.y:1295
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 217:
		//line parser.y:1297
		{
		}
	case 218:
		//line parser.y:1298
		{
		}
	case 219:
		//line parser.y:1300
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 220:
		//line parser.y:1302
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 221:
		//line parser.y:1304
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 222:
		//line parser.y:1306
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 223:
		//line parser.y:1308
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1310
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1312
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1315
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 227:
		//line parser.y:1317
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 228:
		//line parser.y:1319
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Pairs: RubyS[Rubypt-3].hashPairSlice}
		}
	case 229:
		//line parser.y:1321
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 230:
		//line parser.y:1330
		{
			RubyVAL.hashPair = ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue}
		}
	case 231:
		//line parser.y:1333
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 232:
		//line parser.y:1335
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 233:
		//line parser.y:1338
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 234:
		//line parser.y:1345
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 235:
		//line parser.y:1352
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 236:
		//line parser.y:1360
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
		}
	case 237:
		//line parser.y:1364
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 238:
		//line parser.y:1368
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
		}
	case 239:
		//line parser.y:1372
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 240:
		//line parser.y:1376
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Body: RubyS[Rubypt-3].genericSlice}
		}
	case 241:
		//line parser.y:1380
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Args: RubyS[Rubypt-4].methodParamSlice, Body: RubyS[Rubypt-3].genericSlice}
		}
	case 242:
		//line parser.y:1384
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 243:
		//line parser.y:1388
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
		}
	case 244:
		//line parser.y:1396
		{
		}
	case 245:
		//line parser.y:1396
		{
			RubyVAL.genericBlock = RubyS[Rubypt-0].genericBlock
		}
	case 246:
		//line parser.y:1400
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 247:
		//line parser.y:1404
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1413
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1423
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1432
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 251:
		//line parser.y:1441
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1450
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1459
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1468
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1477
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 256:
		//line parser.y:1487
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 257:
		//line parser.y:1496
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 258:
		//line parser.y:1507
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 259:
		//line parser.y:1516
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 260:
		//line parser.y:1524
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 261:
		//line parser.y:1532
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 262:
		//line parser.y:1540
		{
		}
	case 263:
		//line parser.y:1541
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 264:
		//line parser.y:1542
		{
		}
	case 265:
		//line parser.y:1545
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 266:
		//line parser.y:1548
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 267:
		//line parser.y:1557
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 268:
		//line parser.y:1567
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 269:
		//line parser.y:1577
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 270:
		//line parser.y:1587
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 271:
		//line parser.y:1589
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 272:
		//line parser.y:1603
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 273:
		//line parser.y:1619
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 274:
		//line parser.y:1635
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 275:
		//line parser.y:1645
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 276:
		//line parser.y:1657
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 277:
		//line parser.y:1659
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 278:
		//line parser.y:1662
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 279:
		//line parser.y:1664
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 280:
		//line parser.y:1667
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 281:
		//line parser.y:1669
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 282:
		//line parser.y:1672
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 283:
		//line parser.y:1679
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 284:
		//line parser.y:1681
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 285:
		//line parser.y:1684
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 286:
		//line parser.y:1692
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 287:
		//line parser.y:1694
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 288:
		//line parser.y:1696
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 289:
		//line parser.y:1700
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 290:
		//line parser.y:1702
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 291:
		//line parser.y:1704
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 292:
		//line parser.y:1708
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 293:
		//line parser.y:1710
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 294:
		//line parser.y:1712
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 295:
		//line parser.y:1716
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-5].genericValue,
				True:      RubyS[Rubypt-3].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 296:
		//line parser.y:1726
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-5].genericValue,
				True:      RubyS[Rubypt-3].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
				Line:      RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 297:
		//line parser.y:1736
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 298:
		//line parser.y:1742
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 299:
		//line parser.y:1749
		{
			RubyVAL.genericValue = ast.Loop{
				Line:      RubyS[Rubypt-2].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 300:
		//line parser.y:1757
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 301:
		//line parser.y:1764
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 302:
		//line parser.y:1766
		{
		}
	case 303:
		//line parser.y:1768
		{
		}
	case 304:
		//line parser.y:1770
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 305:
		//line parser.y:1772
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 306:
		//line parser.y:1775
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 307:
		//line parser.y:1783
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 308:
		//line parser.y:1792
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 309:
		//line parser.y:1800
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 310:
		//line parser.y:1809
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 311:
		//line parser.y:1818
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 312:
		//line parser.y:1826
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 313:
		//line parser.y:1834
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 314:
		//line parser.y:1842
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 315:
		//line parser.y:1851
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 316:
		//line parser.y:1854
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 317:
		//line parser.y:1857
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 318:
		//line parser.y:1864
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 319:
		//line parser.y:1870
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 320:
		//line parser.y:1876
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 321:
		//line parser.y:1882
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 322:
		//line parser.y:1889
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 323:
		//line parser.y:1891
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 324:
		//line parser.y:1894
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 325:
		//line parser.y:1896
		{
			RubyVAL.genericValue = ast.Range{
				Start:            RubyS[Rubypt-2].genericValue,
				End:              RubyS[Rubypt-0].genericValue,
				Line:             RubyS[Rubypt-2].genericValue.LineNumber(),
				ExcludeLastValue: true,
			}
		}
	case 326:
		//line parser.y:1906
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 327:
		//line parser.y:1913
		{
			RubyVAL.genericValue = ast.Defined{Node: RubyS[Rubypt-0].genericValue}
		}
	case 328:
		//line parser.y:1917
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
		}
	case 329:
		//line parser.y:1919
		{
			RubyVAL.genericValue = ast.SuperclassMethodImplCall{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	}
	goto Rubystack /* stack new state and value */
}

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CONSTANT = 57351
const NAMESPACED_CAPITAL_REF = 57352
const LPAREN = 57353
const RPAREN = 57354
const COMMA = 57355
const NamespacedModule = 57356
const ProcArg = 57357
const DO = 57358
const DEF = 57359
const END = 57360
const IF = 57361
const ELSE = 57362
const ELSIF = 57363
const UNLESS = 57364
const CLASS = 57365
const MODULE = 57366
const FOR = 57367
const WHILE = 57368
const UNTIL = 57369
const BEGIN = 57370
const RESCUE = 57371
const ENSURE = 57372
const BREAK = 57373
const NEXT = 57374
const REDO = 57375
const RETRY = 57376
const RETURN = 57377
const YIELD = 57378
const AND = 57379
const OR = 57380
const LAMBDA = 57381
const CASE = 57382
const WHEN = 57383
const ALIAS = 57384
const SELF = 57385
const NIL = 57386
const LESSTHAN = 57387
const GREATERTHAN = 57388
const EQUALTO = 57389
const BANG = 57390
const COMPLEMENT = 57391
const BINARY_PLUS = 57392
const UNARY_PLUS = 57393
const BINARY_MINUS = 57394
const UNARY_MINUS = 57395
const STAR = 57396
const RANGE = 57397
const OR_EQUALS = 57398
const WHITESPACE = 57399
const NEWLINE = 57400
const SEMICOLON = 57401
const COLON = 57402
const DOT = 57403
const PIPE = 57404
const SLASH = 57405
const AMPERSAND = 57406
const QUESTIONMARK = 57407
const CARET = 57408
const LBRACKET = 57409
const RBRACKET = 57410
const LBRACE = 57411
const RBRACE = 57412
const DOLLARSIGN = 57413
const ATSIGN = 57414
const FILE_CONST_REF = 57415
const LINE_CONST_REF = 57416
const EOF = 57417

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1747

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 132,
	12, 115,
	13, 115,
	-2, 246,
	-1, 332,
	4, 21,
	37, 21,
	38, 21,
	45, 21,
	46, 21,
	50, 21,
	52, 21,
	61, 21,
	62, 21,
	63, 21,
	64, 21,
	-2, 115,
	-1, 343,
	12, 115,
	13, 115,
	-2, 246,
	-1, 382,
	4, 34,
	37, 34,
	38, 34,
	46, 34,
	50, 34,
	52, 34,
	58, 13,
	61, 34,
	62, 34,
	63, 34,
	64, 34,
	70, 13,
	-2, 15,
}

const RubyNprod = 303
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4205

var RubyAct = []int{

	310, 395, 5, 574, 174, 427, 430, 428, 317, 238,
	145, 134, 133, 242, 240, 55, 25, 135, 298, 405,
	316, 2, 3, 291, 285, 140, 141, 381, 26, 265,
	98, 316, 546, 99, 28, 316, 205, 100, 4, 206,
	316, 316, 350, 512, 316, 119, 386, 510, 256, 371,
	272, 141, 491, 489, 487, 159, 350, 171, 172, 155,
	153, 182, 183, 545, 393, 350, 301, 120, 186, 96,
	95, 294, 288, 155, 153, 158, 392, 268, 161, 199,
	122, 200, 201, 123, 91, 451, 97, 158, 14, 91,
	91, 198, 51, 246, 124, 91, 156, 387, 187, 210,
	211, 212, 207, 316, 199, 157, 119, 558, 219, 447,
	156, 372, 159, 224, 446, 170, 154, 121, 229, 230,
	349, 160, 234, 235, 236, 155, 153, 152, 120, 458,
	154, 243, 158, 457, 450, 537, 241, 247, 144, 165,
	245, 426, 149, 446, 358, 254, 232, 255, 166, 169,
	252, 165, 179, 162, 261, 179, 179, 280, 281, 249,
	283, 284, 259, 289, 290, 258, 295, 296, 297, 271,
	316, 276, 262, 264, 164, 179, 179, 179, 318, 244,
	279, 98, 154, 278, 99, 302, 239, 316, 100, 168,
	319, 320, 321, 322, 179, 316, 179, 179, 334, 179,
	118, 179, 179, 179, 179, 327, 179, 117, 162, 179,
	243, 571, 179, 179, 333, 241, 482, 163, 483, 245,
	552, 144, 179, 167, 243, 149, 340, 341, 72, 179,
	179, 179, 266, 245, 98, 191, 144, 99, 192, 410,
	149, 100, 144, 403, 429, 179, 149, 179, 408, 352,
	409, 179, 98, 570, 286, 99, 356, 292, 244, 100,
	98, 299, 98, 99, 561, 99, 144, 100, 243, 100,
	149, 410, 244, 553, 554, 126, 127, 245, 125, 400,
	105, 401, 559, 326, 543, 144, 538, 149, 179, 149,
	403, 306, 307, 503, 447, 589, 581, 586, 585, 314,
	259, 313, 98, 258, 497, 99, 312, 179, 189, 100,
	179, 190, 417, 114, 115, 93, 357, 415, 402, 179,
	179, 103, 104, 411, 407, 413, 106, 170, 107, 98,
	108, 116, 99, 524, 406, 355, 100, 102, 111, 109,
	110, 269, 525, 423, 456, 584, 544, 586, 585, 521,
	196, 463, 462, 422, 461, 155, 463, 462, 495, 368,
	338, 424, 179, 339, 431, 323, 179, 179, 437, 432,
	438, 436, 433, 355, 420, 256, 384, 256, 359, 441,
	445, 367, 368, 472, 434, 448, 129, 208, 130, 76,
	209, 130, 76, 130, 76, 193, 549, 464, 526, 509,
	467, 508, 391, 390, 389, 179, 477, 477, 379, 373,
	361, 179, 360, 359, 354, 485, 304, 303, 237, 493,
	214, 144, 580, 324, 471, 149, 330, 496, 378, 311,
	179, 329, 144, 1, 498, 499, 149, 197, 90, 179,
	89, 88, 87, 179, 504, 499, 86, 507, 85, 41,
	40, 179, 39, 506, 38, 54, 478, 20, 444, 515,
	43, 44, 149, 518, 21, 16, 12, 13, 11, 45,
	24, 23, 22, 27, 19, 10, 35, 30, 18, 15,
	527, 528, 42, 17, 37, 179, 179, 36, 31, 29,
	32, 73, 0, 0, 0, 105, 0, 0, 0, 535,
	0, 0, 0, 179, 0, 0, 0, 539, 541, 540,
	542, 0, 179, 0, 0, 547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 114, 115,
	0, 444, 0, 0, 0, 149, 103, 104, 52, 0,
	0, 106, 0, 107, 0, 108, 560, 499, 562, 499,
	0, 0, 102, 111, 109, 110, 0, 0, 568, 572,
	0, 0, 0, 0, 0, 0, 477, 477, 477, 0,
	578, 0, 565, 566, 567, 0, 587, 534, 0, 0,
	0, 149, 0, 179, 0, 0, 591, 0, 150, 477,
	0, 0, 0, 477, 477, 477, 588, 0, 180, 0,
	0, 180, 180, 0, 0, 0, 592, 593, 0, 0,
	0, 594, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 180, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	180, 0, 180, 180, 0, 180, 0, 180, 180, 180,
	180, 179, 180, 0, 0, 180, 0, 0, 180, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 150, 0, 0, 0, 180, 180, 180, 267, 69,
	147, 68, 77, 148, 76, 132, 150, 139, 0, 152,
	141, 180, 150, 180, 0, 0, 0, 180, 0, 0,
	287, 0, 0, 293, 0, 0, 0, 300, 0, 0,
	0, 0, 0, 79, 0, 0, 150, 93, 94, 0,
	0, 137, 80, 81, 0, 82, 0, 83, 84, 0,
	138, 0, 0, 150, 180, 150, 0, 0, 0, 0,
	0, 136, 0, 142, 0, 92, 91, 71, 70, 0,
	0, 0, 0, 180, 0, 0, 180, 69, 49, 68,
	77, 50, 76, 78, 0, 180, 180, 0, 0, 46,
	577, 479, 576, 575, 480, 47, 48, 0, 60, 61,
	58, 0, 0, 64, 65, 0, 66, 63, 59, 34,
	0, 79, 62, 0, 67, 93, 94, 0, 0, 0,
	80, 81, 0, 82, 0, 83, 84, 0, 180, 0,
	475, 476, 180, 180, 0, 0, 0, 0, 0, 74,
	0, 75, 0, 92, 91, 71, 70, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	0, 180, 146, 146, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 146, 146, 146, 0, 180, 0, 0, 0,
	0, 0, 150, 0, 0, 180, 0, 0, 0, 180,
	0, 146, 0, 146, 146, 0, 146, 180, 146, 146,
	146, 146, 0, 146, 0, 105, 146, 0, 150, 146,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	0, 0, 146, 0, 0, 0, 146, 146, 146, 0,
	0, 180, 180, 0, 0, 0, 0, 146, 114, 115,
	0, 0, 146, 146, 146, 0, 103, 104, 146, 180,
	0, 106, 0, 107, 0, 108, 116, 0, 180, 0,
	0, 0, 102, 111, 109, 110, 0, 146, 0, 385,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 146, 146, 146, 69, 147, 68,
	77, 148, 76, 132, 0, 0, 0, 152, 141, 0,
	0, 0, 0, 0, 146, 0, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 146, 0, 0,
	0, 79, 0, 0, 0, 93, 94, 150, 105, 180,
	80, 81, 0, 82, 0, 83, 84, 0, 0, 0,
	9, 0, 419, 0, 0, 0, 0, 0, 0, 274,
	0, 142, 0, 92, 91, 71, 70, 0, 0, 146,
	0, 114, 115, 382, 146, 0, 0, 0, 0, 103,
	104, 0, 0, 0, 106, 0, 107, 0, 108, 116,
	0, 0, 0, 0, 180, 102, 111, 109, 110, 0,
	143, 0, 370, 0, 0, 0, 0, 180, 0, 0,
	175, 0, 146, 184, 188, 0, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 202, 203, 204, 0, 382, 0, 0,
	0, 0, 0, 146, 0, 0, 146, 0, 0, 0,
	146, 0, 213, 0, 215, 216, 0, 218, 146, 220,
	221, 222, 223, 0, 225, 0, 105, 228, 0, 146,
	231, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 0, 253, 0, 0, 0, 257, 260, 263,
	0, 0, 146, 146, 0, 0, 0, 0, 143, 114,
	115, 0, 105, 275, 253, 277, 0, 103, 104, 282,
	146, 0, 106, 0, 107, 0, 108, 194, 0, 146,
	0, 0, 0, 102, 111, 109, 110, 0, 143, 0,
	517, 0, 0, 0, 0, 114, 115, 0, 0, 0,
	0, 0, 146, 103, 104, 325, 331, 253, 106, 0,
	107, 0, 108, 0, 0, 0, 0, 0, 0, 102,
	111, 109, 110, 0, 0, 344, 516, 0, 345, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 348, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	146, 0, 0, 195, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 69, 147, 68, 77, 148, 76,
	132, 0, 0, 0, 152, 141, 0, 0, 0, 0,
	375, 0, 0, 217, 331, 383, 0, 0, 0, 0,
	0, 0, 226, 227, 0, 0, 0, 0, 79, 0,
	0, 0, 93, 94, 0, 146, 137, 80, 81, 0,
	82, 151, 83, 84, 0, 0, 0, 0, 146, 0,
	273, 181, 0, 404, 181, 181, 274, 0, 142, 175,
	92, 91, 71, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 181, 181, 181, 0, 421, 0,
	0, 0, 0, 0, 253, 0, 0, 425, 305, 0,
	0, 375, 315, 181, 0, 181, 181, 0, 181, 435,
	181, 181, 181, 181, 0, 181, 0, 337, 181, 0,
	443, 181, 181, 0, 0, 105, 0, 0, 0, 0,
	0, 181, 0, 0, 151, 0, 0, 0, 181, 181,
	181, 0, 0, 459, 460, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 181, 151, 181, 173, 114, 115,
	181, 175, 0, 0, 0, 0, 103, 104, 0, 0,
	494, 106, 0, 107, 369, 108, 0, 0, 0, 151,
	0, 0, 102, 111, 109, 110, 0, 374, 0, 388,
	0, 0, 0, 443, 0, 0, 151, 181, 151, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 248, 181, 181,
	251, 0, 105, 0, 0, 0, 114, 115, 0, 533,
	270, 536, 412, 0, 103, 104, 0, 414, 416, 106,
	112, 107, 0, 108, 0, 0, 0, 101, 0, 0,
	102, 111, 109, 110, 0, 114, 115, 351, 0, 105,
	0, 181, 0, 103, 104, 181, 181, 0, 106, 0,
	107, 0, 108, 116, 0, 0, 442, 0, 0, 102,
	111, 109, 110, 113, 101, 0, 563, 0, 452, 0,
	454, 0, 114, 115, 0, 0, 0, 0, 0, 569,
	103, 104, 0, 0, 181, 106, 0, 107, 33, 108,
	181, 0, 0, 0, 0, 0, 102, 111, 109, 110,
	113, 488, 0, 490, 151, 492, 217, 353, 0, 181,
	0, 0, 0, 0, 0, 151, 362, 0, 181, 365,
	105, 0, 181, 0, 0, 0, 0, 0, 0, 0,
	181, 0, 0, 0, 0, 0, 128, 131, 0, 0,
	377, 151, 380, 513, 0, 514, 0, 0, 176, 0,
	0, 176, 176, 114, 115, 0, 0, 0, 0, 0,
	0, 103, 104, 0, 181, 181, 106, 0, 107, 0,
	108, 176, 176, 176, 532, 398, 399, 102, 111, 109,
	110, 113, 181, 0, 0, 0, 0, 0, 0, 0,
	176, 181, 176, 176, 0, 176, 0, 176, 176, 176,
	176, 0, 176, 0, 0, 176, 380, 0, 176, 176,
	0, 0, 0, 0, 151, 0, 0, 0, 176, 556,
	0, 0, 0, 0, 0, 176, 176, 176, 0, 0,
	0, 0, 0, 439, 0, 105, 0, 0, 0, 0,
	0, 176, 0, 176, 583, 217, 0, 176, 0, 0,
	453, 455, 0, 0, 0, 0, 0, 582, 0, 0,
	151, 0, 181, 0, 0, 0, 465, 0, 114, 115,
	469, 590, 470, 0, 0, 0, 103, 104, 484, 0,
	486, 106, 0, 107, 176, 108, 0, 0, 0, 0,
	0, 0, 102, 111, 109, 110, 0, 0, 500, 0,
	501, 0, 0, 176, 0, 502, 176, 69, 332, 68,
	77, 178, 76, 78, 0, 176, 176, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 0, 519, 520, 0, 0, 0, 0, 364, 0,
	523, 79, 0, 0, 0, 93, 94, 0, 0, 0,
	80, 81, 529, 82, 531, 83, 84, 0, 176, 0,
	316, 0, 176, 176, 272, 0, 0, 0, 0, 74,
	0, 75, 328, 92, 91, 71, 70, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 548, 0, 0,
	0, 0, 0, 0, 0, 551, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 176, 0, 0,
	69, 147, 68, 77, 148, 76, 78, 0, 564, 0,
	152, 0, 398, 399, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 176,
	0, 0, 0, 0, 79, 0, 0, 176, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 92, 91, 71, 70,
	0, 176, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 473, 0, 0, 0, 0, 0, 0, 176,
	69, 49, 68, 77, 50, 76, 78, 0, 176, 0,
	0, 0, 46, 573, 479, 576, 575, 480, 47, 48,
	0, 60, 61, 58, 0, 0, 64, 65, 0, 66,
	63, 59, 0, 0, 79, 62, 0, 67, 93, 94,
	0, 0, 0, 80, 81, 0, 82, 0, 83, 84,
	0, 0, 0, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 75, 0, 92, 91, 71, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 466, 56, 397, 396, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 550, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 176, 308, 309, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 176, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 394, 56, 397, 396, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 308, 309, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 403, 429, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 308, 309, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 6, 7, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 8, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 579, 479, 0, 0,
	480, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 555, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 530, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 522, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 511, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 505, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 481, 479, 0, 0,
	480, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 474, 479, 0, 0,
	480, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 468, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 449, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 440, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 376, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 366, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 363, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 0, 479, 0, 0,
	480, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 308, 309, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	336, 0, 0, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 49, 68, 77, 50, 76, 78,
	0, 0, 0, 0, 0, 46, 0, 56, 0, 0,
	57, 47, 48, 0, 60, 61, 58, 0, 0, 64,
	65, 0, 66, 63, 59, 0, 0, 79, 62, 0,
	67, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 69, 177, 68, 77, 178, 76, 78,
	0, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 316, 0, 0, 0,
	272, 0, 0, 0, 0, 74, 0, 75, 0, 92,
	91, 71, 70, 69, 177, 68, 77, 178, 76, 343,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 93, 94, 0, 0, 342, 80, 81, 0, 82,
	0, 83, 84, 69, 332, 68, 77, 178, 76, 78,
	0, 0, 0, 0, 0, 74, 0, 142, 0, 92,
	91, 71, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 75, 328, 92,
	91, 71, 70, 69, 147, 68, 77, 148, 76, 132,
	0, 0, 0, 152, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 69, 177, 68, 77, 178, 76, 78,
	0, 0, 0, 0, 0, 274, 0, 142, 0, 92,
	91, 71, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 93, 94, 0, 0, 0, 80, 81, 0, 82,
	0, 83, 84, 0, 0, 0, 316, 0, 69, 147,
	68, 77, 148, 76, 78, 74, 0, 75, 152, 92,
	91, 71, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 69, 177,
	68, 77, 178, 76, 78, 0, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 71, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 105, 93, 94, 0, 0,
	0, 80, 81, 0, 82, 0, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 557, 0, 0, 0, 0,
	74, 0, 75, 0, 92, 91, 71, 70, 114, 115,
	0, 0, 0, 0, 0, 105, 103, 104, 0, 0,
	0, 106, 0, 107, 0, 108, 0, 0, 114, 115,
	0, 346, 102, 111, 109, 110, 103, 104, 0, 0,
	0, 106, 0, 107, 418, 108, 0, 0, 114, 115,
	0, 0, 102, 111, 109, 110, 103, 104, 0, 0,
	0, 106, 0, 107, 0, 108, 0, 0, 0, 0,
	0, 0, 102, 111, 109, 110, 0, 114, 115, 0,
	0, 0, 0, 0, 0, 103, 104, 0, 0, 0,
	106, 0, 107, 0, 108, 0, 0, 0, 0, 0,
	0, 102, 111, 109, 110,
}
var RubyPact = []int{

	-37, 2307, -1000, -1000, -1000, 11, -1000, -1000, -1000, 1518,
	-1000, -1000, -1000, -1000, 185, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 153, 61, -1000, 33, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 272, 382, 384, 674,
	49, 65, 161, 92, 176, 102, 3638, 3638, -1000, 4033,
	3638, 3638, 4033, 4033, 289, 216, -1000, 388, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 339, -1000, 10,
	3638, 3638, 4033, 4033, 4033, -1000, -1000, -1000, -1000, -1000,
	-1000, 30, 381, -1000, -1000, -1000, -1000, -1000, 3638, 3638,
	3638, 4033, 414, 4033, 4033, -1000, 4033, 3638, 4033, 4033,
	4033, 4033, 3638, 4033, -1000, -1000, 4033, 3638, 3638, 4033,
	4033, 3638, 3638, 3638, 412, 125, 32, 204, 114, 4033,
	345, -1000, 3983, 10, -1000, 35, 4033, 4033, 4033, 23,
	328, -12, -1000, 4111, -1000, -1000, 0, 1289, 63, 8,
	106, 104, 4033, 3983, 4033, -1000, 3638, 3638, 4033, 3638,
	3638, 18, 3638, 3638, 17, 3638, 3638, 3638, 12, 411,
	410, 310, 233, 3428, 293, 4111, -1000, 3878, 115, 20,
	-1000, -1000, 243, 241, 4111, 137, 293, -1000, 1636, 3638,
	3638, 3638, 3638, 358, 1925, 3808, 3983, 3498, -1000, -1000,
	310, 310, 4111, 4111, 4111, -1000, -1000, 354, -1000, -1000,
	310, 310, 310, 4111, 3758, 4111, 4111, 3928, 4111, 310,
	4111, 4111, 4111, 4111, 310, 4071, 3928, 3928, 4111, 310,
	310, 4111, 52, 1489, 310, 310, 310, 10, -1000, 408,
	322, 262, -1000, 97, 407, 406, 404, -1000, 3288, 384,
	4111, 3218, 369, 4111, -1000, -1000, -1000, 1024, -19, 43,
	1555, -1000, -1000, 1636, -1000, -1000, -1000, -1000, 403, 4033,
	3148, -1000, 402, 1822, 4033, 4111, 364, 901, -22, 29,
	310, 310, 1411, 310, 310, -1000, -1000, -1000, 398, 310,
	310, -1000, -1000, -1000, 397, 310, 310, 310, -1000, -1000,
	-1000, 396, 314, 9, -3, 2167, -1000, -1000, -1000, -1000,
	310, 261, 4033, -1000, -1000, 137, -1000, 230, 4033, 310,
	310, 310, 310, -1000, 312, 4111, -1000, -1000, -1000, 304,
	299, 4140, 982, 362, 310, -1000, -1000, 3688, -1000, -1000,
	-1000, 10, 3638, 3983, 4111, 4111, 4033, 4111, 4111, -1000,
	4033, 94, -1000, 2237, 204, 218, 360, 372, 4033, -1000,
	-1000, 204, 2237, -1000, -1000, 3078, -1000, 10, -1000, 1925,
	96, -1000, -1000, -1000, 112, 4111, -1000, 3008, 72, -1000,
	3428, -1000, 0, 276, -1000, 86, -1000, -1000, 82, -1000,
	-1000, -1000, 4033, 4033, -1000, 336, 3638, -1000, 2097, 2938,
	-1000, -1000, -1000, 379, 4111, 2868, 2798, 198, -1000, -1000,
	4033, 293, -14, -1000, -17, -1000, -18, -1000, 3638, 4033,
	-1000, 4111, -1000, 310, 346, 4111, 3638, 286, 214, -1000,
	-1000, -1000, -1000, -1000, -1000, 4111, -1000, 275, 214, 2728,
	-1000, -1000, 1925, 4111, -1000, -1000, 3638, 395, -1000, -1000,
	-1000, 393, -23, 2658, -27, 3428, 67, -1000, 3638, 1188,
	1152, -1000, 3638, -1000, 310, 3428, -1000, 331, -1000, 2588,
	3428, 329, 392, -1000, -1000, -1000, -1000, 310, -1000, 3638,
	3638, -1000, -1000, -1000, 2518, 293, 3428, -1000, 1925, -1000,
	3928, -1000, 129, 310, 4111, -1000, 310, -1000, 268, -1000,
	3428, 2237, 2237, -1000, 266, -1000, 334, 310, -4, -1000,
	-1000, -1000, -1000, -38, 3568, 310, 281, -1000, 310, 3428,
	3428, -1000, -1000, 3428, 390, 384, -1000, 162, 215, 2448,
	-1000, 3428, 45, 4111, -1000, -1000, 4091, 47, -1000, 264,
	214, 246, 214, -1000, -1000, 4033, -1000, 310, 3428, -1000,
	-1000, 3428, -1000, -1000, -1000, -1000, 45, 3638, 4033, -1000,
	235, -1000, 193, 491, 3428, 2015, 752, 2378, 283, 1751,
	-1000, -1000, -1000, -1000, 327, 3638, -1000, -1000, 277, -1000,
	-1000, -1000, 45, -1000, -1000, 3638, -1000, 310, 3358, -1000,
	45, 310, 3358, 3358, 3358,
}
var RubyPgo = []int{

	0, 491, 0, 228, 490, 28, 11, 489, 488, 487,
	1291, 484, 6, 34, 483, 10, 482, 88, 479, 478,
	1040, 477, 538, 789, 476, 475, 474, 473, 472, 471,
	470, 469, 468, 467, 13, 92, 466, 465, 1608, 8,
	464, 461, 460, 16, 457, 456, 3, 455, 454, 452,
	450, 449, 448, 446, 442, 441, 440, 438, 1388, 437,
	7, 12, 27, 1, 433, 9, 431, 19, 5, 429,
	17, 428, 4, 426, 25, 15, 14, 424, 423, 422,
	1207,
}
var RubyR1 = []int{

	0, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 79, 79, 80, 80, 58, 58, 58, 58, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 31, 31, 31, 31,
	31, 31, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 43, 16, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 24, 61,
	61, 61, 61, 72, 72, 70, 70, 70, 70, 70,
	70, 70, 15, 74, 74, 68, 68, 25, 25, 25,
	25, 25, 25, 25, 25, 65, 65, 65, 76, 76,
	76, 34, 34, 34, 34, 32, 32, 33, 36, 38,
	38, 38, 17, 17, 17, 17, 17, 17, 17, 17,
	18, 18, 75, 75, 37, 37, 37, 37, 37, 37,
	37, 10, 10, 35, 35, 22, 22, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 8, 3, 1, 78, 78, 78, 78,
	78, 78, 78, 4, 4, 4, 66, 66, 73, 73,
	73, 6, 6, 6, 6, 6, 6, 62, 71, 71,
	71, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 63, 63, 63, 63, 59, 59, 59, 9,
	19, 19, 12, 12, 12, 12, 77, 77, 69, 69,
	60, 60, 26, 26, 27, 28, 28, 28, 30, 30,
	30, 29, 29, 29, 13, 44, 44, 44, 67, 67,
	67, 67, 67, 45, 45, 45, 45, 45, 46, 46,
	46, 46, 42, 41, 11, 40, 40, 40, 40, 39,
	39, 5, 7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 5, 1, 4, 4,
	2, 3, 2, 3, 4, 5, 4, 3, 4, 5,
	2, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 6, 7, 6, 6, 4, 3,
	6, 1, 4, 1, 3, 0, 1, 1, 1, 4,
	4, 4, 2, 1, 3, 0, 2, 6, 7, 8,
	8, 9, 9, 6, 7, 1, 3, 3, 0, 1,
	3, 1, 2, 3, 2, 4, 6, 5, 4, 1,
	2, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 9, 6, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	4, 3, 3, 3, 4, 3, 3, 3, 4, 3,
	3, 3, 4, 2, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 5, 1, 1, 0, 1, 1, 1,
	4, 4, 4, 3, 5, 5, 3, 7, 3, 7,
	8, 3, 4, 5, 5, 5, 6, 3, 0, 1,
	3, 4, 5, 3, 3, 3, 3, 3, 5, 6,
	5, 3, 4, 3, 3, 2, 0, 2, 2, 3,
	4, 6, 2, 3, 5, 4, 1, 3, 0, 2,
	1, 2, 2, 1, 1, 2, 2, 1, 1, 3,
	3, 1, 3, 3, 5, 5, 5, 3, 0, 2,
	2, 2, 2, 5, 6, 5, 6, 5, 4, 3,
	3, 2, 4, 4, 2, 5, 7, 4, 6, 4,
	5, 3, 3,
}
var RubyChk = []int{

	-1000, -64, 58, 59, 75, -2, 58, 59, 75, -20,
	-25, -32, -36, -33, -17, -18, -37, -14, -19, -26,
	-44, -40, -28, -29, -30, -43, -5, -27, -13, -7,
	-21, -8, -4, -38, -23, -24, -9, -11, -48, -49,
	-50, -51, -16, -42, -41, -31, 17, 23, 24, 6,
	9, -35, -22, -10, -47, -75, 19, 22, 28, 36,
	26, 27, 40, 35, 31, 32, 34, 42, 7, 5,
	74, 73, -3, -1, 67, 69, 10, 8, 11, 39,
	48, 49, 51, 53, 54, -52, -53, -54, -55, -56,
	-57, 72, 71, 43, 44, 59, 58, 75, 19, 22,
	26, 29, 61, 45, 46, 4, 50, 52, 54, 63,
	64, 62, 22, 65, 37, 38, 55, 22, 47, 45,
	67, 56, 19, 22, 61, 6, -3, 4, -38, 4,
	9, -38, 11, -61, -6, -70, 67, 47, 56, 13,
	-74, 16, 69, -20, -17, -15, -23, 6, 9, -35,
	-22, -10, 15, 11, 67, 10, 47, 56, 67, 47,
	56, 13, 47, 56, 13, 47, 56, 47, 13, 47,
	13, -2, -2, -58, -72, -20, -38, 6, 9, -35,
	-22, -10, -2, -2, -20, -80, -72, -13, -20, 19,
	22, 19, 22, 7, -80, -80, 11, -59, -6, 69,
	-2, -2, -20, -20, -20, 6, 9, 72, 6, 9,
	-2, -2, -2, -20, 6, -20, -20, -80, -20, -2,
	-20, -20, -20, -20, -2, -20, -80, -80, -20, -2,
	-2, -20, -74, -20, -2, -2, -2, 6, -65, 61,
	-76, 11, -34, 6, 54, 15, 61, -65, -58, 45,
	-20, -58, -70, -20, -6, -6, 13, -20, -5, -74,
	-20, -43, -13, -20, -13, 6, -35, -22, 54, 13,
	-58, -62, 62, -80, 67, -20, -70, -20, -5, -74,
	-2, -2, -20, -2, -2, 6, -35, -22, 54, -2,
	-2, 6, -35, -22, 54, -2, -2, -2, 6, -35,
	-22, 54, -75, 6, 6, -58, 58, 59, 58, 59,
	-2, -69, 13, 58, 58, -80, 58, -39, 41, -2,
	-2, -2, -2, 7, -78, -20, -17, -15, 70, -66,
	-73, -20, 6, -70, -2, 59, 12, -80, 6, 9,
	-6, -61, 47, 11, -20, -20, 60, -20, -20, 68,
	13, 68, -6, -58, 6, 13, -76, 54, 47, 6,
	6, 6, -58, 18, -38, -58, 18, 12, 13, -80,
	68, 68, 68, 6, -80, -20, 18, -58, -71, 6,
	-58, -62, -23, -20, 12, 68, 68, 68, 68, 6,
	6, 6, 67, 67, 18, -63, 21, 20, -58, -58,
	18, 20, -12, 29, -20, -67, -67, -39, 18, 20,
	41, -72, -80, 13, -80, 13, -80, 13, 4, 60,
	12, -20, -6, -2, -70, -20, 47, -68, -60, 30,
	-12, -65, -34, 12, 12, -20, -65, -68, -60, -58,
	18, -6, -80, -20, -17, -15, 47, 13, -15, 18,
	62, 13, -80, -58, -80, -58, 68, 47, 47, -20,
	-20, 18, 21, 20, -2, -58, 18, -63, 18, -58,
	-58, -77, 4, -38, 18, 58, 59, -2, -45, 19,
	22, 18, 18, 20, -58, -72, -58, 68, -80, 70,
	-80, 70, -80, -2, -20, 12, -2, 18, -68, -12,
	-58, -58, -58, 18, -68, 18, -15, -2, 6, 6,
	70, 70, 70, -80, -80, -2, 68, 68, -2, -58,
	-58, 18, 18, -58, 4, 13, 6, -2, -2, -58,
	18, -58, -80, -20, -17, -15, -20, 6, 18, -68,
	-60, -68, -60, 18, 12, 67, 70, -2, -58, 6,
	-38, -58, 58, 58, 59, 18, -80, 4, 60, 18,
	-68, 18, -68, -20, -58, -67, -67, -67, -2, -20,
	18, 18, 68, 18, -46, 21, 20, 18, -46, 18,
	-79, 13, -80, 13, 18, 21, 20, -2, -67, 18,
	-80, -2, -67, -67, -67,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 0, 0, 0, 21,
	22, 23, 24, 25, 0, 0, 0, 0, 15, 263,
	0, 0, 13, 267, 271, 268, 264, 0, 19, 20,
	26, 27, 28, 29, 13, 13, 151, 77, 246, 0,
	0, 0, 0, 0, 0, 46, 47, 48, 49, 50,
	51, 0, 0, 204, 205, 5, 6, 7, 0, 0,
	0, 0, 0, 0, 0, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 138, 15, 0,
	149, 15, -2, 80, 82, 90, 13, 0, 0, 0,
	111, 15, 13, 116, 117, 118, 34, 21, 22, 23,
	24, 25, 0, 115, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 15, 0, 258, 262, 113, 33, 21, 22, 23,
	24, 25, 0, 0, 13, 0, 265, 266, 113, 0,
	0, 0, 0, 0, 206, 0, 115, 0, 294, 13,
	193, 194, 195, 196, 74, 173, 174, 0, 171, 172,
	233, 241, 277, 73, 83, 92, 94, 0, 197, 198,
	199, 200, 201, 202, 235, 0, 0, 0, 301, 237,
	159, 93, 0, 123, 170, 234, 236, 87, 15, 0,
	135, 138, 139, 141, 0, 0, 0, 15, 0, 0,
	15, 0, 0, 116, 81, 91, 13, 123, 0, 0,
	152, 153, 154, 164, 165, 177, 178, 179, 0, 13,
	0, 15, 228, 15, 13, 122, 0, 123, 0, 0,
	155, 166, 0, 156, 167, 181, 182, 183, 0, 157,
	168, 185, 186, 187, 0, 158, 169, 160, 189, 190,
	191, 0, 161, 0, 0, 0, 15, 15, 16, 17,
	18, 0, 0, 278, 278, 0, 14, 0, 0, 272,
	273, 269, 270, 302, 13, 207, 208, 209, 213, 13,
	13, 0, -2, 0, 247, 248, 249, 15, 175, 176,
	84, 86, 0, -2, 123, 108, 0, 292, 293, 102,
	0, 103, 88, 125, 138, 0, 0, 0, 0, 142,
	144, 138, 125, 145, 15, 0, 148, 75, 13, 0,
	95, 98, 100, 180, 0, 124, 221, 0, 0, 229,
	13, 15, -2, 123, 79, 96, 99, 101, 97, 184,
	188, 192, 0, 0, 231, 0, 0, 15, 0, 0,
	250, 15, 259, 15, 114, 0, 0, 0, 297, 15,
	0, 15, 0, 13, 0, 13, 0, 13, 13, 0,
	78, 0, 85, 89, 0, 274, 0, 0, 125, 15,
	260, 15, 140, 136, 137, 143, 15, 0, 125, 0,
	147, 76, 0, 119, 120, 121, 0, 0, 112, 222,
	227, 0, 0, 0, 0, 13, 95, 13, 0, 0,
	0, 232, 0, 15, 15, 245, 238, 0, 240, 0,
	252, 15, 0, 256, 275, 279, 280, 281, 282, 0,
	0, 276, 295, 15, 0, 15, 13, 203, 0, 214,
	0, 215, 0, 216, 218, 109, 107, 127, 0, 261,
	126, 125, 125, 133, 0, 146, 121, 104, 0, 230,
	223, 224, 225, 0, 0, 106, 0, 163, 15, 243,
	244, 239, 251, 253, 0, 0, 15, 15, 0, 0,
	298, 13, 299, 210, 211, 212, 0, 0, 128, 0,
	125, 0, 125, 134, 110, 0, 226, 105, 242, 15,
	257, 255, 278, 15, 15, 296, 300, 13, 0, 129,
	0, 130, 0, 0, 254, 0, 0, 0, 11, 13,
	131, 132, 162, 283, 0, 0, 278, 285, 0, 287,
	217, 12, 219, 13, 284, 0, 278, 278, 291, 286,
	220, 278, 289, 290, 288,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:220
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:222
		{
		}
	case 3:
		//line parser.y:224
		{
		}
	case 4:
		//line parser.y:226
		{
		}
	case 5:
		//line parser.y:228
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:230
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:232
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:238
		{
		}
	case 11:
		//line parser.y:240
		{
		}
	case 12:
		//line parser.y:241
		{
		}
	case 13:
		//line parser.y:243
		{
		}
	case 14:
		//line parser.y:244
		{
		}
	case 15:
		//line parser.y:247
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:249
		{
		}
	case 17:
		//line parser.y:251
		{
		}
	case 18:
		//line parser.y:253
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:264
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 74:
		//line parser.y:267
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 75:
		//line parser.y:270
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 76:
		//line parser.y:279
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-2].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 77:
		//line parser.y:289
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:295
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:304
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-3].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-3].genericValue.LineNumber()},
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:313
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:322
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:332
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:342
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:351
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:362
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:373
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:383
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:393
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:404
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:417
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:426
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:436
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:446
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:456
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:468
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:478
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:488
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:498
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:508
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:518
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:528
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:538
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:548
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:560
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:570
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:580
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:590
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:602
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 109:
		//line parser.y:614
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 110:
		//line parser.y:616
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-1].genericValue)
		}
	case 111:
		//line parser.y:618
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 112:
		//line parser.y:620
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:623
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:625
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:627
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 116:
		//line parser.y:629
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:631
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:633
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:635
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:637
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:639
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:642
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 123:
		//line parser.y:652
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:654
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:657
		{
			RubyVAL.genericSlice = nil
		}
	case 126:
		//line parser.y:659
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 127:
		//line parser.y:662
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 128:
		//line parser.y:673
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 129:
		//line parser.y:685
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 130:
		//line parser.y:697
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 131:
		//line parser.y:709
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 132:
		//line parser.y:722
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 133:
		//line parser.y:735
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].genericSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 134:
		//line parser.y:746
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].genericSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 135:
		//line parser.y:760
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 136:
		//line parser.y:762
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 137:
		//line parser.y:764
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 138:
		//line parser.y:766
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 139:
		//line parser.y:768
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 140:
		//line parser.y:770
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 141:
		//line parser.y:773
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 142:
		//line parser.y:775
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 143:
		//line parser.y:777
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 144:
		//line parser.y:779
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 145:
		//line parser.y:783
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 146:
		//line parser.y:793
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 147:
		//line parser.y:805
		{
			name := RubyS[Rubypt-3].genericValue.(ast.BareReference).Name
			if name != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + name + ")")
			}

			class := ast.Eigenclass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 148:
		//line parser.y:820
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 149:
		//line parser.y:831
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 150:
		//line parser.y:840
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 151:
		//line parser.y:859
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 152:
		//line parser.y:877
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 153:
		//line parser.y:886
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 154:
		//line parser.y:892
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 155:
		//line parser.y:898
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 156:
		//line parser.y:907
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 157:
		//line parser.y:916
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 158:
		//line parser.y:925
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 159:
		//line parser.y:934
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 160:
		//line parser.y:937
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 161:
		//line parser.y:946
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 162:
		//line parser.y:956
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 163:
		//line parser.y:971
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 164:
		//line parser.y:977
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 165:
		//line parser.y:986
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:992
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:1001
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:1010
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 169:
		//line parser.y:1019
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 170:
		//line parser.y:1028
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 171:
		//line parser.y:1035
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 172:
		//line parser.y:1037
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
		}
	case 173:
		//line parser.y:1040
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 174:
		//line parser.y:1046
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 175:
		//line parser.y:1053
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 176:
		//line parser.y:1059
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 177:
		//line parser.y:1066
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 178:
		//line parser.y:1068
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 179:
		//line parser.y:1070
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 180:
		//line parser.y:1072
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 181:
		//line parser.y:1075
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 182:
		//line parser.y:1077
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 183:
		//line parser.y:1079
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 184:
		//line parser.y:1081
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 185:
		//line parser.y:1084
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 186:
		//line parser.y:1086
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 187:
		//line parser.y:1088
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 188:
		//line parser.y:1090
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 189:
		//line parser.y:1093
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 190:
		//line parser.y:1095
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 191:
		//line parser.y:1097
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 192:
		//line parser.y:1099
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 193:
		//line parser.y:1103
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 194:
		//line parser.y:1105
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 195:
		//line parser.y:1107
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 196:
		//line parser.y:1109
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 197:
		//line parser.y:1112
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 198:
		//line parser.y:1123
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 199:
		//line parser.y:1134
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 200:
		//line parser.y:1145
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 201:
		//line parser.y:1156
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 202:
		//line parser.y:1167
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 203:
		//line parser.y:1178
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 204:
		//line parser.y:1180
		{
		}
	case 205:
		//line parser.y:1181
		{
		}
	case 206:
		//line parser.y:1183
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 207:
		//line parser.y:1185
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 208:
		//line parser.y:1187
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 209:
		//line parser.y:1189
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 210:
		//line parser.y:1191
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 211:
		//line parser.y:1193
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 212:
		//line parser.y:1195
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 213:
		//line parser.y:1198
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 214:
		//line parser.y:1200
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 215:
		//line parser.y:1208
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 216:
		//line parser.y:1217
		{
			name := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 217:
		//line parser.y:1225
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 218:
		//line parser.y:1234
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 219:
		//line parser.y:1241
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 220:
		//line parser.y:1248
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 221:
		//line parser.y:1256
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 222:
		//line parser.y:1261
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 223:
		//line parser.y:1266
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 224:
		//line parser.y:1271
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 225:
		//line parser.y:1276
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 226:
		//line parser.y:1281
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 227:
		//line parser.y:1290
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 228:
		//line parser.y:1292
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 229:
		//line parser.y:1294
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 230:
		//line parser.y:1296
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 231:
		//line parser.y:1299
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 232:
		//line parser.y:1308
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 233:
		//line parser.y:1318
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 234:
		//line parser.y:1327
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 235:
		//line parser.y:1336
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 236:
		//line parser.y:1345
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 237:
		//line parser.y:1354
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 238:
		//line parser.y:1363
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 239:
		//line parser.y:1372
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 240:
		//line parser.y:1382
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 241:
		//line parser.y:1391
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 242:
		//line parser.y:1402
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 243:
		//line parser.y:1411
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 244:
		//line parser.y:1419
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 245:
		//line parser.y:1427
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 246:
		//line parser.y:1435
		{
		}
	case 247:
		//line parser.y:1436
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 248:
		//line parser.y:1437
		{
		}
	case 249:
		//line parser.y:1440
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 250:
		//line parser.y:1443
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 251:
		//line parser.y:1452
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 252:
		//line parser.y:1463
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 253:
		//line parser.y:1465
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 254:
		//line parser.y:1479
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 255:
		//line parser.y:1500
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 256:
		//line parser.y:1516
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 257:
		//line parser.y:1518
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 258:
		//line parser.y:1521
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 259:
		//line parser.y:1523
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 260:
		//line parser.y:1526
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 261:
		//line parser.y:1528
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 262:
		//line parser.y:1531
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 263:
		//line parser.y:1538
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 264:
		//line parser.y:1540
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 265:
		//line parser.y:1543
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 266:
		//line parser.y:1551
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 267:
		//line parser.y:1553
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 268:
		//line parser.y:1557
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 269:
		//line parser.y:1559
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 270:
		//line parser.y:1561
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 271:
		//line parser.y:1565
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 272:
		//line parser.y:1567
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 273:
		//line parser.y:1569
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 274:
		//line parser.y:1573
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 275:
		//line parser.y:1584
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 276:
		//line parser.y:1590
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 277:
		//line parser.y:1597
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 278:
		//line parser.y:1604
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 279:
		//line parser.y:1606
		{
		}
	case 280:
		//line parser.y:1608
		{
		}
	case 281:
		//line parser.y:1610
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 282:
		//line parser.y:1612
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 283:
		//line parser.y:1615
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 284:
		//line parser.y:1623
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 285:
		//line parser.y:1632
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 286:
		//line parser.y:1640
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 287:
		//line parser.y:1649
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 288:
		//line parser.y:1658
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 289:
		//line parser.y:1666
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 290:
		//line parser.y:1674
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 291:
		//line parser.y:1682
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 292:
		//line parser.y:1691
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 293:
		//line parser.y:1694
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 294:
		//line parser.y:1697
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 295:
		//line parser.y:1704
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 296:
		//line parser.y:1710
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 297:
		//line parser.y:1716
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 298:
		//line parser.y:1722
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 299:
		//line parser.y:1729
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 300:
		//line parser.y:1731
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 301:
		//line parser.y:1734
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 302:
		//line parser.y:1741
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	}
	goto Rubystack /* stack new state and value */
}

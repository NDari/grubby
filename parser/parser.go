//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CONSTANT = 57351
const NAMESPACED_CAPITAL_REF = 57352
const LPAREN = 57353
const RPAREN = 57354
const COMMA = 57355
const NamespacedModule = 57356
const ProcArg = 57357
const DO = 57358
const DEF = 57359
const END = 57360
const IF = 57361
const ELSE = 57362
const ELSIF = 57363
const UNLESS = 57364
const CLASS = 57365
const MODULE = 57366
const FOR = 57367
const WHILE = 57368
const UNTIL = 57369
const BEGIN = 57370
const RESCUE = 57371
const ENSURE = 57372
const BREAK = 57373
const NEXT = 57374
const REDO = 57375
const RETRY = 57376
const RETURN = 57377
const YIELD = 57378
const AND = 57379
const OR = 57380
const LAMBDA = 57381
const CASE = 57382
const WHEN = 57383
const ALIAS = 57384
const SELF = 57385
const NIL = 57386
const LESSTHAN = 57387
const GREATERTHAN = 57388
const EQUALTO = 57389
const BANG = 57390
const COMPLEMENT = 57391
const BINARY_PLUS = 57392
const UNARY_PLUS = 57393
const BINARY_MINUS = 57394
const UNARY_MINUS = 57395
const STAR = 57396
const RANGE = 57397
const OR_EQUALS = 57398
const WHITESPACE = 57399
const NEWLINE = 57400
const SEMICOLON = 57401
const COLON = 57402
const DOT = 57403
const PIPE = 57404
const SLASH = 57405
const AMPERSAND = 57406
const QUESTIONMARK = 57407
const CARET = 57408
const LBRACKET = 57409
const RBRACKET = 57410
const LBRACE = 57411
const RBRACE = 57412
const DOLLARSIGN = 57413
const ATSIGN = 57414
const FILE_CONST_REF = 57415
const LINE_CONST_REF = 57416
const EOF = 57417

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1732

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 132,
	12, 115,
	13, 115,
	-2, 244,
	-1, 330,
	4, 21,
	37, 21,
	38, 21,
	45, 21,
	46, 21,
	50, 21,
	52, 21,
	61, 21,
	62, 21,
	63, 21,
	64, 21,
	-2, 115,
	-1, 341,
	12, 115,
	13, 115,
	-2, 244,
	-1, 380,
	4, 34,
	37, 34,
	38, 34,
	46, 34,
	50, 34,
	52, 34,
	58, 13,
	61, 34,
	62, 34,
	63, 34,
	64, 34,
	70, 13,
	-2, 15,
}

const RubyNprod = 300
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4439

var RubyAct = []int{

	308, 427, 5, 562, 426, 145, 174, 236, 135, 393,
	315, 134, 240, 238, 26, 140, 141, 55, 133, 2,
	3, 25, 254, 379, 384, 141, 403, 98, 296, 314,
	99, 119, 369, 28, 100, 314, 4, 289, 105, 283,
	314, 538, 314, 203, 263, 314, 204, 506, 314, 348,
	537, 550, 504, 120, 488, 484, 391, 171, 172, 348,
	486, 182, 183, 390, 158, 270, 96, 95, 448, 197,
	186, 114, 115, 161, 155, 153, 299, 244, 197, 103,
	104, 198, 199, 97, 106, 292, 107, 286, 108, 116,
	51, 196, 266, 124, 91, 102, 111, 109, 110, 208,
	209, 210, 453, 91, 385, 91, 314, 159, 217, 205,
	91, 156, 159, 222, 370, 443, 160, 447, 227, 228,
	157, 348, 232, 233, 234, 155, 153, 158, 531, 241,
	455, 154, 158, 454, 239, 245, 230, 424, 243, 98,
	149, 250, 99, 356, 165, 252, 100, 253, 155, 153,
	179, 256, 257, 179, 179, 247, 162, 278, 279, 259,
	281, 282, 274, 287, 288, 269, 293, 294, 295, 276,
	277, 260, 262, 179, 179, 179, 347, 242, 545, 546,
	314, 118, 154, 152, 237, 156, 14, 300, 317, 318,
	319, 320, 179, 117, 179, 179, 332, 179, 325, 179,
	179, 179, 179, 331, 179, 154, 444, 179, 316, 122,
	179, 179, 123, 444, 170, 98, 168, 72, 99, 127,
	179, 125, 100, 149, 338, 314, 314, 179, 179, 179,
	264, 339, 105, 165, 310, 119, 144, 415, 149, 413,
	443, 536, 166, 179, 149, 179, 121, 350, 169, 179,
	167, 411, 284, 354, 544, 290, 170, 120, 93, 297,
	98, 164, 241, 99, 126, 114, 115, 100, 149, 98,
	241, 243, 99, 103, 104, 239, 100, 241, 106, 243,
	107, 353, 108, 149, 179, 149, 243, 256, 257, 102,
	111, 109, 110, 194, 98, 162, 560, 99, 552, 304,
	305, 100, 551, 179, 163, 479, 179, 480, 312, 401,
	242, 400, 406, 401, 407, 179, 179, 267, 242, 144,
	398, 498, 399, 409, 405, 355, 494, 577, 408, 574,
	573, 401, 401, 311, 144, 408, 569, 401, 155, 404,
	144, 421, 98, 321, 572, 99, 574, 573, 191, 100,
	422, 420, 105, 189, 98, 541, 190, 99, 179, 520,
	428, 100, 179, 179, 144, 435, 429, 433, 515, 503,
	460, 459, 458, 442, 460, 459, 502, 438, 445, 324,
	187, 144, 518, 188, 568, 114, 115, 492, 366, 430,
	353, 519, 389, 103, 104, 461, 418, 254, 106, 388,
	107, 179, 108, 116, 474, 474, 464, 179, 387, 102,
	111, 109, 110, 382, 254, 482, 383, 490, 365, 366,
	377, 149, 371, 357, 336, 493, 179, 337, 495, 431,
	130, 76, 149, 359, 358, 179, 469, 495, 322, 179,
	357, 130, 76, 129, 501, 500, 105, 179, 130, 76,
	206, 352, 302, 207, 301, 235, 509, 212, 149, 468,
	512, 328, 376, 309, 327, 1, 195, 90, 89, 88,
	87, 86, 85, 41, 40, 39, 38, 521, 522, 114,
	115, 179, 179, 52, 54, 475, 20, 103, 104, 43,
	44, 529, 106, 21, 107, 16, 108, 116, 12, 179,
	13, 533, 535, 102, 111, 109, 110, 11, 179, 539,
	368, 45, 24, 23, 22, 27, 19, 144, 10, 35,
	30, 18, 15, 42, 17, 37, 36, 31, 144, 29,
	149, 32, 73, 150, 0, 495, 0, 495, 0, 0,
	0, 0, 0, 180, 0, 0, 180, 180, 0, 0,
	558, 0, 0, 0, 441, 0, 474, 474, 474, 0,
	566, 0, 0, 0, 575, 0, 180, 180, 180, 0,
	0, 555, 556, 557, 579, 0, 149, 474, 179, 0,
	0, 474, 474, 474, 0, 180, 0, 180, 180, 0,
	180, 576, 180, 180, 180, 180, 0, 180, 0, 0,
	180, 580, 581, 180, 180, 0, 582, 0, 0, 0,
	34, 0, 0, 180, 0, 0, 150, 0, 0, 0,
	180, 180, 180, 265, 0, 0, 441, 0, 179, 0,
	0, 150, 0, 0, 0, 0, 180, 150, 180, 0,
	0, 179, 180, 0, 0, 285, 0, 0, 291, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	146, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 528, 146, 146, 0, 150, 180, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 146, 146, 180, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 180,
	0, 0, 146, 0, 146, 146, 0, 146, 0, 146,
	146, 146, 146, 0, 146, 0, 105, 146, 0, 0,
	146, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 146, 0, 0, 0, 146, 146, 146,
	0, 180, 0, 0, 0, 180, 180, 0, 146, 114,
	115, 0, 0, 146, 146, 146, 0, 103, 104, 146,
	0, 0, 106, 0, 107, 0, 108, 0, 0, 0,
	0, 0, 0, 102, 111, 109, 110, 0, 146, 0,
	511, 0, 0, 0, 180, 0, 0, 0, 0, 0,
	180, 0, 0, 146, 146, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 180,
	0, 0, 0, 146, 0, 150, 146, 0, 180, 0,
	0, 0, 180, 0, 0, 146, 146, 0, 0, 0,
	180, 0, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 150, 0, 0, 46, 565, 476, 564, 563, 477,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 180, 180, 79, 62, 146, 67,
	93, 94, 380, 146, 0, 80, 81, 0, 82, 0,
	83, 84, 180, 0, 0, 472, 473, 0, 0, 0,
	0, 180, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 146, 0, 150, 0, 0, 0, 146, 0, 0,
	0, 9, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 0, 380, 0, 114, 115,
	0, 0, 146, 0, 0, 146, 103, 104, 0, 146,
	0, 106, 0, 107, 0, 108, 0, 146, 0, 150,
	0, 180, 102, 111, 109, 110, 0, 0, 146, 510,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 184, 175, 0, 0, 0, 0,
	0, 146, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 201, 202, 0, 0, 146,
	0, 180, 0, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 0, 211, 180, 213, 214, 0, 216, 0,
	218, 219, 220, 221, 0, 223, 0, 105, 226, 0,
	146, 229, 231, 0, 0, 0, 0, 0, 53, 0,
	0, 248, 0, 0, 251, 0, 0, 0, 255, 258,
	261, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	114, 115, 0, 0, 273, 251, 275, 0, 103, 104,
	280, 0, 0, 106, 0, 107, 146, 108, 146, 0,
	0, 0, 0, 0, 102, 111, 109, 110, 151, 143,
	0, 386, 0, 0, 0, 0, 0, 0, 181, 0,
	0, 181, 181, 0, 323, 329, 251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 181, 181, 342, 0, 0, 343, 146, 0,
	0, 0, 0, 0, 0, 0, 345, 346, 0, 0,
	181, 146, 181, 181, 0, 181, 0, 181, 181, 181,
	181, 0, 181, 0, 105, 181, 0, 0, 181, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 0,
	0, 151, 0, 0, 0, 181, 181, 181, 0, 373,
	0, 0, 0, 329, 381, 0, 151, 114, 115, 0,
	0, 181, 151, 181, 0, 103, 104, 181, 0, 0,
	106, 0, 107, 0, 108, 0, 0, 0, 0, 0,
	0, 102, 111, 109, 110, 0, 151, 0, 349, 0,
	0, 0, 402, 0, 0, 105, 0, 0, 175, 0,
	0, 151, 181, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 112, 0, 0, 0, 419, 0, 0,
	101, 181, 0, 251, 181, 0, 423, 0, 114, 115,
	373, 0, 0, 181, 181, 0, 103, 104, 432, 0,
	0, 106, 0, 107, 0, 108, 116, 0, 0, 440,
	0, 0, 102, 111, 109, 110, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 456, 457, 0, 0, 181, 0, 0, 0,
	181, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 0, 0, 0, 0, 101, 0, 0, 0, 491,
	0, 0, 0, 114, 115, 0, 0, 192, 0, 0,
	0, 103, 104, 0, 0, 0, 106, 0, 107, 181,
	108, 440, 0, 0, 0, 181, 33, 102, 111, 109,
	110, 113, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 181, 0, 105, 0, 0, 0,
	151, 0, 0, 181, 0, 0, 0, 181, 0, 303,
	0, 0, 0, 0, 0, 181, 0, 527, 0, 530,
	185, 0, 0, 0, 128, 131, 151, 0, 0, 114,
	115, 0, 0, 193, 0, 0, 176, 103, 104, 176,
	176, 0, 106, 0, 107, 0, 108, 0, 0, 181,
	181, 0, 0, 102, 111, 109, 110, 113, 0, 176,
	176, 176, 0, 215, 0, 0, 0, 181, 173, 553,
	0, 0, 224, 225, 0, 0, 181, 0, 176, 0,
	176, 176, 559, 176, 0, 176, 176, 176, 176, 0,
	176, 0, 0, 176, 0, 0, 176, 176, 151, 0,
	271, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 176, 176, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 176, 0, 0, 0, 176, 0, 0, 246, 0,
	0, 249, 313, 0, 151, 0, 181, 0, 0, 0,
	0, 268, 0, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 69, 147, 68, 77, 148, 76, 132, 0,
	139, 0, 152, 141, 0, 0, 0, 0, 0, 176,
	0, 0, 176, 0, 0, 0, 181, 0, 0, 0,
	0, 176, 176, 0, 0, 0, 79, 0, 0, 181,
	93, 94, 367, 0, 137, 80, 81, 0, 82, 0,
	83, 84, 0, 138, 362, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 142, 0, 92, 91,
	71, 70, 105, 0, 176, 0, 351, 0, 176, 176,
	0, 571, 0, 0, 0, 360, 0, 0, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 115, 0, 0, 375,
	410, 378, 0, 103, 104, 412, 414, 176, 106, 549,
	107, 0, 108, 176, 0, 0, 0, 0, 0, 102,
	111, 109, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 396, 397, 0, 0, 0, 0,
	0, 176, 114, 115, 439, 176, 0, 0, 0, 0,
	103, 104, 0, 176, 0, 106, 449, 107, 451, 108,
	0, 0, 0, 0, 0, 378, 102, 111, 109, 110,
	0, 0, 0, 0, 69, 147, 68, 77, 148, 76,
	132, 0, 0, 0, 152, 141, 0, 176, 176, 485,
	0, 487, 436, 489, 215, 0, 0, 0, 470, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 79, 450,
	452, 0, 93, 94, 176, 0, 137, 80, 81, 0,
	82, 0, 83, 84, 0, 462, 0, 0, 0, 466,
	507, 467, 508, 0, 0, 105, 272, 481, 142, 483,
	92, 91, 71, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 496, 0,
	0, 526, 0, 497, 0, 0, 0, 0, 114, 115,
	0, 0, 105, 0, 0, 0, 103, 104, 0, 0,
	0, 106, 0, 107, 176, 108, 0, 0, 0, 0,
	513, 514, 102, 111, 109, 110, 0, 0, 517, 0,
	0, 0, 0, 548, 0, 114, 115, 0, 0, 0,
	523, 0, 525, 103, 104, 0, 542, 0, 106, 0,
	107, 0, 108, 0, 0, 0, 0, 215, 344, 102,
	111, 109, 110, 0, 176, 0, 0, 570, 0, 0,
	0, 0, 540, 0, 0, 0, 0, 176, 0, 578,
	543, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 561, 476, 564, 563, 477, 47,
	48, 554, 60, 61, 58, 396, 397, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 463, 56, 395, 394, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 306, 307, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 392, 56, 395, 394, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 306, 307, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 534, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 401, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 306, 307, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 532, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 401, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 306, 307, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 434, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 401, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 306, 307, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 425, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 401, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 306, 307, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 0, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 6, 7, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 8, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 567, 476, 0, 0, 477,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 547, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 524, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 516, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 505, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 499, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 478, 476, 0, 0, 477,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 471, 476, 0, 0, 477,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 465, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 446, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 437, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 374, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 364, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 361, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 476, 0, 0, 477,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 334,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 69, 147, 68, 77, 148, 76, 132, 0,
	0, 0, 152, 141, 74, 0, 75, 0, 92, 91,
	71, 70, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 0, 0, 417, 0, 0,
	0, 0, 0, 0, 272, 0, 142, 0, 92, 91,
	71, 70, 69, 330, 68, 77, 178, 76, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 314, 0, 0, 0, 270,
	0, 0, 0, 0, 74, 0, 75, 326, 92, 91,
	71, 70, 69, 147, 68, 77, 148, 76, 78, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 314, 69, 177, 68, 77,
	178, 76, 78, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 314,
	0, 0, 0, 270, 0, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 71, 70, 69, 177, 68, 77,
	178, 76, 341, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 340, 80,
	81, 0, 82, 0, 83, 84, 69, 330, 68, 77,
	178, 76, 78, 0, 0, 0, 0, 0, 74, 0,
	142, 0, 92, 91, 71, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 326, 92, 91, 71, 70, 69, 147, 68, 77,
	148, 76, 132, 0, 0, 0, 152, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 69, 177, 68, 77,
	178, 76, 78, 0, 0, 0, 0, 0, 272, 0,
	142, 0, 92, 91, 71, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 314,
	0, 69, 147, 68, 77, 148, 76, 78, 74, 0,
	75, 152, 92, 91, 71, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 69, 177, 68, 77, 178, 76, 78, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 416, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 114, 115, 0, 0, 0, 0, 0, 0, 103,
	104, 0, 0, 0, 106, 0, 107, 0, 108, 0,
	0, 0, 0, 0, 0, 102, 111, 109, 110,
}
var RubyPact = []int{

	-39, 2416, -1000, -1000, -1000, 8, -1000, -1000, -1000, 1241,
	-1000, -1000, -1000, -1000, 171, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 134, 190, -1000, 32, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 215, 439, 421, 1567,
	64, 60, 248, 186, 203, 201, 3747, 3747, -1000, 4336,
	3747, 3747, 4336, 4336, 361, 334, -1000, 341, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 282, -1000, 0,
	3747, 3747, 4336, 4336, 4336, -1000, -1000, -1000, -1000, -1000,
	-1000, 37, 444, -1000, -1000, -1000, -1000, -1000, 3747, 3747,
	3747, 4336, 451, 4336, 4336, -1000, 4336, 3747, 4336, 4336,
	4336, 4336, 3747, 4336, -1000, -1000, 4336, 3747, 3747, 4336,
	4336, 3747, 3747, 3747, 449, 123, 16, 264, 110, 4336,
	328, -1000, 4286, 0, -1000, 9, 4336, 4336, 4336, 38,
	304, 3, -1000, 1811, -1000, -1000, -14, 1749, 138, 65,
	109, 97, 4336, 4286, 4336, -1000, 3747, 3747, 4336, 3747,
	3747, 33, 3747, 3747, 31, 3747, 3747, 3747, 22, 448,
	446, 335, 241, 3537, 221, 1811, -1000, 4181, 115, -3,
	-1000, -1000, 275, 250, 1811, 167, 221, 3747, 3747, 3747,
	3747, 336, 3937, 4111, 4286, 3607, -1000, -1000, 335, 335,
	1811, 1811, 1811, -1000, -1000, 418, -1000, -1000, 335, 335,
	335, 1811, 4061, 1811, 1811, 4231, 1811, 335, 1811, 1811,
	1811, 1811, 335, 1848, 4231, 4231, 1811, 335, 335, 1811,
	108, 1170, 335, 335, 335, 0, -1000, 445, 268, 271,
	-1000, 96, 434, 428, 427, -1000, 3397, 421, 1811, 3327,
	406, 1811, -1000, -1000, -1000, 442, -36, 46, 1316, -1000,
	-1000, 1392, -1000, -1000, -1000, -1000, 416, 4336, 3257, -1000,
	414, 3867, 4336, 1811, 401, 348, -44, 36, 335, 335,
	1043, 335, 335, -1000, -1000, -1000, 402, 335, 335, -1000,
	-1000, -1000, 393, 335, 335, 335, -1000, -1000, -1000, 386,
	243, -4, -11, 2066, -1000, -1000, -1000, -1000, 335, 302,
	4336, -1000, -1000, 167, -1000, 294, 4336, 335, 335, 335,
	335, -1000, 238, 1811, -1000, -1000, -1000, 226, 224, 4374,
	3797, 384, 335, -1000, -1000, 3991, -1000, -1000, -1000, 0,
	3747, 4286, 1811, 1811, 4336, 1811, 1811, -1000, 4336, 90,
	-1000, 2346, 264, 256, 377, 417, 4336, -1000, -1000, 264,
	2276, -1000, -1000, 3187, -1000, 0, -1000, 3937, 193, -1000,
	-1000, -1000, 168, 1811, -1000, 3117, 55, -1000, 3537, -1000,
	-14, 34, -1000, 86, -1000, -1000, 83, -1000, -1000, -1000,
	4336, 4336, -1000, 354, 3747, -1000, 1996, 3047, -1000, -1000,
	-1000, 432, 1811, 2977, 2907, 287, -1000, -1000, 4336, 221,
	-13, -1000, -10, -1000, -16, -1000, 3747, 4336, -1000, 1811,
	-1000, 335, 375, 1811, 3747, -1000, 308, -1000, -1000, -1000,
	-1000, -1000, 1811, -1000, -1000, 303, 2837, -1000, -1000, 3937,
	1811, -1000, -1000, 3747, 370, -1000, -1000, -1000, 363, -18,
	2767, -23, 3537, 68, -1000, 3747, 911, 722, -1000, 3747,
	-1000, 335, 3537, -1000, 350, -1000, 2697, 3537, 378, 353,
	-1000, -1000, -1000, -1000, 335, -1000, 3747, 3747, -1000, -1000,
	-1000, 2627, 221, 3537, -1000, 3937, -1000, 4231, -1000, 122,
	335, 1811, -1000, 335, -1000, -1000, 2206, 2136, -1000, -1000,
	229, 335, -17, -1000, -1000, -1000, -1000, -29, 3677, 335,
	200, -1000, 335, 3537, 3537, -1000, -1000, 3537, 349, 421,
	-1000, 196, 120, 2557, -1000, 3537, 48, 1811, -1000, -1000,
	1685, -9, -1000, 284, -1000, 280, -1000, 4336, -1000, 335,
	3537, -1000, -1000, 3537, -1000, -1000, -1000, -1000, 48, 3747,
	4336, -1000, -1000, 228, 3537, 1926, 837, 2487, 323, 1638,
	-1000, -1000, 326, 3747, -1000, -1000, 309, -1000, -1000, -1000,
	48, -1000, -1000, 3747, -1000, 335, 3467, -1000, 48, 335,
	3467, 3467, 3467,
}
var RubyPgo = []int{

	0, 532, 0, 217, 531, 14, 11, 529, 527, 526,
	1058, 525, 1, 33, 524, 5, 523, 186, 522, 521,
	931, 520, 483, 610, 519, 518, 516, 515, 514, 513,
	512, 511, 507, 500, 12, 90, 498, 495, 1376, 10,
	493, 490, 489, 21, 486, 485, 3, 484, 476, 475,
	474, 473, 472, 471, 470, 469, 468, 467, 1409, 466,
	4, 18, 23, 9, 465, 7, 464, 26, 463, 8,
	462, 6, 461, 15, 17, 13, 459, 438, 384, 1357,
}
var RubyR1 = []int{

	0, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 78, 78, 79, 79, 58, 58, 58, 58, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 31, 31, 31, 31,
	31, 31, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 43, 16, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 24, 61,
	61, 61, 61, 71, 71, 69, 69, 69, 69, 69,
	69, 69, 15, 73, 73, 25, 25, 25, 25, 25,
	25, 25, 25, 65, 65, 65, 75, 75, 75, 34,
	34, 34, 34, 32, 32, 33, 36, 38, 38, 38,
	17, 17, 17, 17, 17, 17, 17, 17, 18, 18,
	74, 74, 37, 37, 37, 37, 37, 37, 37, 10,
	10, 35, 35, 22, 22, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 8, 3, 1, 77, 77, 77, 77, 77, 77,
	77, 4, 4, 4, 66, 66, 72, 72, 72, 6,
	6, 6, 6, 6, 6, 62, 70, 70, 70, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	63, 63, 63, 63, 59, 59, 59, 9, 19, 19,
	12, 12, 12, 12, 76, 76, 68, 68, 60, 60,
	26, 26, 27, 28, 28, 30, 30, 30, 29, 29,
	29, 13, 44, 44, 44, 67, 67, 67, 67, 67,
	45, 45, 45, 45, 45, 46, 46, 46, 46, 42,
	41, 11, 40, 40, 40, 40, 39, 39, 5, 7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 5, 1, 4, 4,
	2, 3, 2, 3, 4, 5, 4, 3, 4, 5,
	2, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 6, 7, 6, 6, 4, 3,
	6, 1, 4, 1, 3, 0, 1, 1, 1, 4,
	4, 4, 2, 1, 3, 5, 6, 7, 7, 8,
	8, 5, 6, 1, 3, 3, 0, 1, 3, 1,
	2, 3, 2, 4, 6, 5, 4, 1, 2, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	9, 6, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 3, 3, 3, 3, 3, 4, 3,
	3, 3, 4, 3, 3, 3, 4, 3, 3, 3,
	4, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 5, 1, 1, 0, 1, 1, 1, 4, 4,
	4, 3, 5, 5, 3, 7, 3, 7, 8, 3,
	4, 5, 5, 5, 6, 3, 0, 1, 3, 4,
	5, 3, 3, 3, 3, 3, 5, 6, 5, 3,
	4, 3, 3, 2, 0, 2, 2, 3, 4, 6,
	2, 3, 5, 4, 1, 3, 0, 2, 1, 2,
	2, 1, 1, 2, 1, 1, 3, 3, 1, 3,
	3, 5, 5, 5, 3, 0, 2, 2, 2, 2,
	5, 6, 5, 6, 5, 4, 3, 3, 2, 4,
	4, 2, 5, 7, 4, 6, 4, 5, 3, 3,
}
var RubyChk = []int{

	-1000, -64, 58, 59, 75, -2, 58, 59, 75, -20,
	-25, -32, -36, -33, -17, -18, -37, -14, -19, -26,
	-44, -40, -28, -29, -30, -43, -5, -27, -13, -7,
	-21, -8, -4, -38, -23, -24, -9, -11, -48, -49,
	-50, -51, -16, -42, -41, -31, 17, 23, 24, 6,
	9, -35, -22, -10, -47, -74, 19, 22, 28, 36,
	26, 27, 40, 35, 31, 32, 34, 42, 7, 5,
	74, 73, -3, -1, 67, 69, 10, 8, 11, 39,
	48, 49, 51, 53, 54, -52, -53, -54, -55, -56,
	-57, 72, 71, 43, 44, 59, 58, 75, 19, 22,
	26, 29, 61, 45, 46, 4, 50, 52, 54, 63,
	64, 62, 22, 65, 37, 38, 55, 22, 47, 45,
	67, 56, 19, 22, 61, 6, -3, 4, -38, 4,
	9, -38, 11, -61, -6, -69, 67, 47, 56, 13,
	-73, 16, 69, -20, -17, -15, -23, 6, 9, -35,
	-22, -10, 15, 11, 67, 10, 47, 56, 67, 47,
	56, 13, 47, 56, 13, 47, 56, 47, 13, 47,
	13, -2, -2, -58, -71, -20, -38, 6, 9, -35,
	-22, -10, -2, -2, -20, -79, -71, 19, 22, 19,
	22, 7, -79, -79, 11, -59, -6, 69, -2, -2,
	-20, -20, -20, 6, 9, 72, 6, 9, -2, -2,
	-2, -20, 6, -20, -20, -79, -20, -2, -20, -20,
	-20, -20, -2, -20, -79, -79, -20, -2, -2, -20,
	-73, -20, -2, -2, -2, 6, -65, 61, -75, 11,
	-34, 6, 54, 15, 61, -65, -58, 45, -20, -58,
	-69, -20, -6, -6, 13, -20, -5, -73, -20, -43,
	-13, -20, -13, 6, -35, -22, 54, 13, -58, -62,
	62, -79, 67, -20, -69, -20, -5, -73, -2, -2,
	-20, -2, -2, 6, -35, -22, 54, -2, -2, 6,
	-35, -22, 54, -2, -2, -2, 6, -35, -22, 54,
	-74, 6, 6, -58, 58, 59, 58, 59, -2, -68,
	13, 58, 58, -79, 58, -39, 41, -2, -2, -2,
	-2, 7, -77, -20, -17, -15, 70, -66, -72, -20,
	6, -69, -2, 59, 12, -79, 6, 9, -6, -61,
	47, 11, -20, -20, 60, -20, -20, 68, 13, 68,
	-6, -58, 6, 13, -75, 54, 47, 6, 6, 6,
	-58, 18, -38, -58, 18, 12, 13, -79, 68, 68,
	68, 6, -79, -20, 18, -58, -70, 6, -58, -62,
	-23, -20, 12, 68, 68, 68, 68, 6, 6, 6,
	67, 67, 18, -63, 21, 20, -58, -58, 18, 20,
	-12, 29, -20, -67, -67, -39, 18, 20, 41, -71,
	-79, 13, -79, 13, -79, 13, 4, 60, 12, -20,
	-6, -2, -69, -20, 47, 18, -60, -12, -65, -34,
	12, 12, -20, -65, 18, -60, -58, 18, -6, -79,
	-20, -17, -15, 47, 13, -15, 18, 62, 13, -79,
	-58, -79, -58, 68, 47, 47, -20, -20, 18, 21,
	20, -2, -58, 18, -63, 18, -58, -58, -76, 4,
	-38, 18, 58, 59, -2, -45, 19, 22, 18, 18,
	20, -58, -71, -58, 68, -79, 70, -79, 70, -79,
	-2, -20, 12, -2, 18, -12, -58, -58, 18, 18,
	-15, -2, 6, 6, 70, 70, 70, -79, -79, -2,
	68, 68, -2, -58, -58, 18, 18, -58, 4, 13,
	6, -2, -2, -58, 18, -58, -79, -20, -17, -15,
	-20, 6, 18, -60, 18, -60, 12, 67, 70, -2,
	-58, 6, -38, -58, 58, 58, 59, 18, -79, 4,
	60, 18, 18, -20, -58, -67, -67, -67, -2, -20,
	68, 18, -46, 21, 20, 18, -46, 18, -78, 13,
	-79, 13, 18, 21, 20, -2, -67, 18, -79, -2,
	-67, -67, -67,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 0, 0, 0, 21,
	22, 23, 24, 25, 0, 0, 0, 0, 15, 261,
	0, 0, 13, 264, 268, 265, 262, 0, 19, 20,
	26, 27, 28, 29, 13, 13, 149, 77, 244, 0,
	0, 0, 0, 0, 0, 46, 47, 48, 49, 50,
	51, 0, 0, 202, 203, 5, 6, 7, 0, 0,
	0, 0, 0, 0, 0, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 136, 15, 0,
	147, 15, -2, 80, 82, 90, 13, 0, 0, 0,
	111, 15, 13, 116, 117, 118, 34, 21, 22, 23,
	24, 25, 0, 115, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 15, 0, 256, 260, 113, 33, 21, 22, 23,
	24, 25, 0, 0, 13, 0, 263, 0, 0, 0,
	0, 0, 204, 0, 115, 0, 291, 13, 191, 192,
	193, 194, 74, 171, 172, 0, 169, 170, 231, 239,
	274, 73, 83, 92, 94, 0, 195, 196, 197, 198,
	199, 200, 233, 0, 0, 0, 298, 235, 157, 93,
	0, 123, 168, 232, 234, 87, 15, 0, 133, 136,
	137, 139, 0, 0, 0, 15, 0, 0, 15, 0,
	0, 116, 81, 91, 13, 123, 0, 0, 150, 151,
	152, 162, 163, 175, 176, 177, 0, 13, 0, 15,
	226, 15, 13, 122, 0, 123, 0, 0, 153, 164,
	0, 154, 165, 179, 180, 181, 0, 155, 166, 183,
	184, 185, 0, 156, 167, 158, 187, 188, 189, 0,
	159, 0, 0, 0, 15, 15, 16, 17, 18, 0,
	0, 275, 275, 0, 14, 0, 0, 269, 270, 266,
	267, 299, 13, 205, 206, 207, 211, 13, 13, 0,
	-2, 0, 245, 246, 247, 15, 173, 174, 84, 86,
	0, -2, 123, 108, 0, 289, 290, 102, 0, 103,
	88, 0, 136, 0, 0, 0, 0, 140, 142, 136,
	0, 143, 15, 0, 146, 75, 13, 0, 95, 98,
	100, 178, 0, 124, 219, 0, 0, 227, 13, 15,
	-2, 123, 79, 96, 99, 101, 97, 182, 186, 190,
	0, 0, 229, 0, 0, 15, 0, 0, 248, 15,
	257, 15, 114, 0, 0, 0, 294, 15, 0, 15,
	0, 13, 0, 13, 0, 13, 13, 0, 78, 0,
	85, 89, 0, 271, 0, 125, 0, 258, 15, 138,
	134, 135, 141, 15, 131, 0, 0, 145, 76, 0,
	119, 120, 121, 0, 0, 112, 220, 225, 0, 0,
	0, 0, 13, 95, 13, 0, 0, 0, 230, 0,
	15, 15, 243, 236, 0, 238, 0, 250, 15, 0,
	254, 272, 276, 277, 278, 279, 0, 0, 273, 292,
	15, 0, 15, 13, 201, 0, 212, 0, 213, 0,
	214, 216, 109, 107, 126, 259, 0, 0, 132, 144,
	121, 104, 0, 228, 221, 222, 223, 0, 0, 106,
	0, 161, 15, 241, 242, 237, 249, 251, 0, 0,
	15, 15, 0, 0, 295, 13, 296, 208, 209, 210,
	0, 0, 127, 0, 128, 0, 110, 0, 224, 105,
	240, 15, 255, 253, 275, 15, 15, 293, 297, 13,
	0, 129, 130, 0, 252, 0, 0, 0, 11, 13,
	160, 280, 0, 0, 275, 282, 0, 284, 215, 12,
	217, 13, 281, 0, 275, 275, 288, 283, 218, 275,
	286, 287, 285,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:219
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:221
		{
		}
	case 3:
		//line parser.y:223
		{
		}
	case 4:
		//line parser.y:225
		{
		}
	case 5:
		//line parser.y:227
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:229
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:231
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:237
		{
		}
	case 11:
		//line parser.y:239
		{
		}
	case 12:
		//line parser.y:240
		{
		}
	case 13:
		//line parser.y:242
		{
		}
	case 14:
		//line parser.y:243
		{
		}
	case 15:
		//line parser.y:246
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:248
		{
		}
	case 17:
		//line parser.y:250
		{
		}
	case 18:
		//line parser.y:252
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:263
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 74:
		//line parser.y:266
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 75:
		//line parser.y:269
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 76:
		//line parser.y:278
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-2].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 77:
		//line parser.y:288
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:294
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:303
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-3].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-3].genericValue.LineNumber()},
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:312
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:321
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:331
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:341
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:350
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:361
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:372
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:382
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:392
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:403
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:416
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:425
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:435
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:445
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:455
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:467
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:477
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:487
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:497
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:507
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:517
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:527
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:537
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:547
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:559
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:569
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:579
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:589
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:601
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 109:
		//line parser.y:613
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 110:
		//line parser.y:615
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-1].genericValue)
		}
	case 111:
		//line parser.y:617
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 112:
		//line parser.y:619
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:622
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:624
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:626
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 116:
		//line parser.y:628
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:630
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:632
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:634
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:636
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:638
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:641
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 123:
		//line parser.y:651
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:653
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:657
		{
			method := ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 126:
		//line parser.y:667
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 127:
		//line parser.y:678
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 128:
		//line parser.y:689
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 129:
		//line parser.y:700
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 130:
		//line parser.y:712
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 131:
		//line parser.y:724
		{
			method := ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 132:
		//line parser.y:734
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 133:
		//line parser.y:747
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 134:
		//line parser.y:749
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 135:
		//line parser.y:751
		{
			RubyVAL.genericSlice = []ast.Node{ast.MethodParam{Name: ast.BareReference{}, IsSplat: true}}
		}
	case 136:
		//line parser.y:753
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 137:
		//line parser.y:755
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:757
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 139:
		//line parser.y:760
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 140:
		//line parser.y:762
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 141:
		//line parser.y:764
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 142:
		//line parser.y:766
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 143:
		//line parser.y:770
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 144:
		//line parser.y:780
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 145:
		//line parser.y:792
		{
			name := RubyS[Rubypt-3].genericValue.(ast.BareReference).Name
			if name != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + name + ")")
			}

			class := ast.Eigenclass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 146:
		//line parser.y:807
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 147:
		//line parser.y:818
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 148:
		//line parser.y:827
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 149:
		//line parser.y:846
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 150:
		//line parser.y:864
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 151:
		//line parser.y:873
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 152:
		//line parser.y:879
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 153:
		//line parser.y:885
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 154:
		//line parser.y:894
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 155:
		//line parser.y:903
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 156:
		//line parser.y:912
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 157:
		//line parser.y:921
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 158:
		//line parser.y:924
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 159:
		//line parser.y:933
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 160:
		//line parser.y:943
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 161:
		//line parser.y:958
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 162:
		//line parser.y:964
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 163:
		//line parser.y:973
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 164:
		//line parser.y:979
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 165:
		//line parser.y:988
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:997
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:1006
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 168:
		//line parser.y:1015
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 169:
		//line parser.y:1022
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 170:
		//line parser.y:1024
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
		}
	case 171:
		//line parser.y:1027
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 172:
		//line parser.y:1033
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 173:
		//line parser.y:1040
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 174:
		//line parser.y:1046
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.Constant).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 175:
		//line parser.y:1053
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 176:
		//line parser.y:1055
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 177:
		//line parser.y:1057
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 178:
		//line parser.y:1059
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 179:
		//line parser.y:1062
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 180:
		//line parser.y:1064
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 181:
		//line parser.y:1066
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 182:
		//line parser.y:1068
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 183:
		//line parser.y:1071
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 184:
		//line parser.y:1073
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 185:
		//line parser.y:1075
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 186:
		//line parser.y:1077
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 187:
		//line parser.y:1080
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 188:
		//line parser.y:1082
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 189:
		//line parser.y:1084
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 190:
		//line parser.y:1086
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 191:
		//line parser.y:1090
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 192:
		//line parser.y:1092
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 193:
		//line parser.y:1094
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 194:
		//line parser.y:1096
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 195:
		//line parser.y:1099
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 196:
		//line parser.y:1110
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 197:
		//line parser.y:1121
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 198:
		//line parser.y:1132
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 199:
		//line parser.y:1143
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 200:
		//line parser.y:1154
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 201:
		//line parser.y:1165
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 202:
		//line parser.y:1167
		{
		}
	case 203:
		//line parser.y:1168
		{
		}
	case 204:
		//line parser.y:1170
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 205:
		//line parser.y:1172
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 206:
		//line parser.y:1174
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:1176
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 208:
		//line parser.y:1178
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 209:
		//line parser.y:1180
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 210:
		//line parser.y:1182
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 211:
		//line parser.y:1185
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 212:
		//line parser.y:1187
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 213:
		//line parser.y:1195
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 214:
		//line parser.y:1204
		{
			name := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 215:
		//line parser.y:1212
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 216:
		//line parser.y:1221
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 217:
		//line parser.y:1228
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 218:
		//line parser.y:1235
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 219:
		//line parser.y:1243
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 220:
		//line parser.y:1248
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 221:
		//line parser.y:1253
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 222:
		//line parser.y:1258
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 223:
		//line parser.y:1263
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 224:
		//line parser.y:1268
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 225:
		//line parser.y:1277
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 226:
		//line parser.y:1279
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 227:
		//line parser.y:1281
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 228:
		//line parser.y:1283
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 229:
		//line parser.y:1286
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 230:
		//line parser.y:1295
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 231:
		//line parser.y:1305
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 232:
		//line parser.y:1314
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 233:
		//line parser.y:1323
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 234:
		//line parser.y:1332
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 235:
		//line parser.y:1341
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 236:
		//line parser.y:1350
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 237:
		//line parser.y:1359
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 238:
		//line parser.y:1369
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 239:
		//line parser.y:1378
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 240:
		//line parser.y:1389
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 241:
		//line parser.y:1398
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 242:
		//line parser.y:1406
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 243:
		//line parser.y:1414
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 244:
		//line parser.y:1422
		{
		}
	case 245:
		//line parser.y:1423
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 246:
		//line parser.y:1424
		{
		}
	case 247:
		//line parser.y:1427
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 248:
		//line parser.y:1430
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 249:
		//line parser.y:1439
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 250:
		//line parser.y:1450
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 251:
		//line parser.y:1452
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 252:
		//line parser.y:1466
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 253:
		//line parser.y:1487
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 254:
		//line parser.y:1503
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 255:
		//line parser.y:1505
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 256:
		//line parser.y:1508
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 257:
		//line parser.y:1510
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 258:
		//line parser.y:1513
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 259:
		//line parser.y:1515
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 260:
		//line parser.y:1518
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 261:
		//line parser.y:1525
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 262:
		//line parser.y:1527
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 263:
		//line parser.y:1530
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 264:
		//line parser.y:1538
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 265:
		//line parser.y:1542
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 266:
		//line parser.y:1544
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 267:
		//line parser.y:1546
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 268:
		//line parser.y:1550
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 269:
		//line parser.y:1552
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 270:
		//line parser.y:1554
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 271:
		//line parser.y:1558
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 272:
		//line parser.y:1569
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 273:
		//line parser.y:1575
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 274:
		//line parser.y:1582
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 275:
		//line parser.y:1589
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 276:
		//line parser.y:1591
		{
		}
	case 277:
		//line parser.y:1593
		{
		}
	case 278:
		//line parser.y:1595
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 279:
		//line parser.y:1597
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 280:
		//line parser.y:1600
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 281:
		//line parser.y:1608
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 282:
		//line parser.y:1617
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 283:
		//line parser.y:1625
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 284:
		//line parser.y:1634
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 285:
		//line parser.y:1643
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 286:
		//line parser.y:1651
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 287:
		//line parser.y:1659
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 288:
		//line parser.y:1667
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 289:
		//line parser.y:1676
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 290:
		//line parser.y:1679
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 291:
		//line parser.y:1682
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 292:
		//line parser.y:1689
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 293:
		//line parser.y:1695
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 294:
		//line parser.y:1701
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 295:
		//line parser.y:1707
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 296:
		//line parser.y:1714
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 297:
		//line parser.y:1716
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 298:
		//line parser.y:1719
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 299:
		//line parser.y:1726
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	}
	goto Rubystack /* stack new state and value */
}

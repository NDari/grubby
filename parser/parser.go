//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
	hashPairSlice   []ast.HashKeyValuePair
	hashPair        ast.HashKeyValuePair
	astString       ast.String

	methodParam      ast.MethodParam
	methodParamSlice []ast.MethodParam
}

const OPERATOR = 57346
const HASH_ROCKET = 57347
const NODE = 57348
const REF = 57349
const SYMBOL = 57350
const SPECIAL_CHAR_REF = 57351
const CONSTANT = 57352
const NAMESPACED_CAPITAL_REF = 57353
const GLOBAL_VARIABLE = 57354
const IVAR_OR_CLASS_VARIABLE = 57355
const LPAREN = 57356
const RPAREN = 57357
const COMMA = 57358
const STRING = 57359
const NamespacedModule = 57360
const ProcArg = 57361
const DO = 57362
const DEF = 57363
const END = 57364
const IF = 57365
const ELSE = 57366
const ELSIF = 57367
const UNLESS = 57368
const CLASS = 57369
const MODULE = 57370
const FOR = 57371
const WHILE = 57372
const UNTIL = 57373
const BEGIN = 57374
const RESCUE = 57375
const ENSURE = 57376
const BREAK = 57377
const NEXT = 57378
const REDO = 57379
const RETRY = 57380
const RETURN = 57381
const YIELD = 57382
const AND = 57383
const OR = 57384
const LAMBDA = 57385
const CASE = 57386
const WHEN = 57387
const ALIAS = 57388
const SUPER = 57389
const SELF = 57390
const NIL = 57391
const DEFINED = 57392
const LESSTHAN = 57393
const GREATERTHAN = 57394
const EQUALTO = 57395
const BANG = 57396
const COMPLEMENT = 57397
const BINARY_PLUS = 57398
const UNARY_PLUS = 57399
const BINARY_MINUS = 57400
const UNARY_MINUS = 57401
const STAR = 57402
const RANGE = 57403
const EXCLUSIVE_RANGE = 57404
const OR_EQUALS = 57405
const AND_EQUALS = 57406
const WHITESPACE = 57407
const NEWLINE = 57408
const SEMICOLON = 57409
const COLON = 57410
const DOT = 57411
const PIPE = 57412
const SLASH = 57413
const AMPERSAND = 57414
const QUESTIONMARK = 57415
const CARET = 57416
const LBRACKET = 57417
const RBRACKET = 57418
const LBRACE = 57419
const RBRACE = 57420
const FILE_CONST_REF = 57421
const LINE_CONST_REF = 57422
const EOF = 57423

var RubyToknames = []string{
	"OPERATOR",
	"HASH_ROCKET",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CONSTANT",
	"NAMESPACED_CAPITAL_REF",
	"GLOBAL_VARIABLE",
	"IVAR_OR_CLASS_VARIABLE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"STRING",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SUPER",
	"SELF",
	"NIL",
	"DEFINED",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"EXCLUSIVE_RANGE",
	"OR_EQUALS",
	"AND_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1914

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 131,
	69, 20,
	-2, 158,
	-1, 142,
	21, 262,
	23, 262,
	26, 262,
	27, 262,
	28, 262,
	30, 262,
	31, 262,
	32, 262,
	35, 262,
	36, 262,
	38, 262,
	39, 262,
	40, 262,
	44, 262,
	46, 262,
	47, 262,
	67, 262,
	-2, 11,
	-1, 153,
	21, 13,
	23, 13,
	26, 13,
	27, 13,
	28, 13,
	30, 13,
	31, 13,
	32, 13,
	35, 13,
	36, 13,
	38, 13,
	39, 13,
	40, 13,
	44, 13,
	46, 13,
	47, 13,
	67, 13,
	-2, 11,
	-1, 211,
	21, 262,
	23, 262,
	26, 262,
	27, 262,
	28, 262,
	30, 262,
	31, 262,
	32, 262,
	35, 262,
	36, 262,
	38, 262,
	39, 262,
	40, 262,
	44, 262,
	46, 262,
	47, 262,
	67, 262,
	-2, 11,
	-1, 215,
	21, 13,
	23, 13,
	26, 13,
	27, 13,
	28, 13,
	30, 13,
	31, 13,
	32, 13,
	35, 13,
	36, 13,
	38, 13,
	39, 13,
	40, 13,
	44, 13,
	46, 13,
	47, 13,
	67, 13,
	78, 13,
	-2, 11,
	-1, 356,
	16, 127,
	-2, 20,
	-1, 367,
	21, 262,
	23, 262,
	26, 262,
	27, 262,
	28, 262,
	30, 262,
	31, 262,
	32, 262,
	35, 262,
	36, 262,
	38, 262,
	39, 262,
	40, 262,
	44, 262,
	46, 262,
	47, 262,
	67, 262,
	-2, 11,
	-1, 407,
	66, 11,
	78, 11,
	-2, 13,
	-1, 450,
	66, 11,
	78, 11,
	-2, 13,
	-1, 567,
	66, 11,
	78, 11,
	-2, 14,
	-1, 609,
	16, 136,
	-2, 11,
	-1, 613,
	66, 11,
	78, 11,
	-2, 14,
}

const RubyNprod = 328
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4786

var RubyAct = []int{

	335, 463, 5, 424, 654, 144, 157, 466, 145, 435,
	156, 380, 166, 188, 261, 342, 296, 56, 464, 25,
	143, 259, 21, 2, 3, 55, 374, 258, 542, 341,
	14, 134, 418, 70, 131, 69, 341, 135, 4, 136,
	137, 652, 152, 416, 94, 208, 610, 100, 638, 341,
	101, 401, 341, 341, 103, 102, 341, 341, 185, 186,
	341, 611, 194, 195, 565, 537, 374, 422, 535, 495,
	533, 169, 374, 275, 167, 95, 96, 152, 198, 374,
	374, 28, 155, 216, 217, 26, 541, 214, 210, 169,
	98, 97, 167, 177, 169, 200, 374, 167, 151, 215,
	421, 222, 223, 224, 225, 99, 73, 72, 378, 197,
	155, 232, 376, 170, 174, 173, 237, 122, 293, 124,
	383, 266, 244, 209, 248, 123, 417, 253, 254, 255,
	256, 170, 415, 158, 215, 168, 173, 159, 265, 399,
	377, 171, 172, 125, 130, 650, 199, 122, 598, 273,
	627, 274, 173, 168, 230, 341, 373, 128, 168, 293,
	129, 158, 267, 240, 241, 159, 370, 280, 596, 292,
	282, 305, 306, 307, 492, 310, 311, 312, 177, 316,
	317, 318, 297, 629, 597, 124, 293, 569, 272, 560,
	341, 343, 155, 487, 503, 502, 341, 126, 127, 294,
	486, 327, 239, 344, 345, 346, 347, 319, 247, 125,
	461, 251, 341, 302, 359, 174, 354, 460, 458, 352,
	386, 245, 155, 178, 250, 175, 176, 341, 269, 281,
	284, 286, 278, 363, 341, 341, 121, 173, 341, 351,
	341, 262, 340, 158, 262, 276, 488, 159, 364, 324,
	649, 260, 108, 264, 304, 325, 264, 358, 648, 309,
	313, 362, 100, 381, 178, 101, 314, 303, 204, 103,
	102, 205, 308, 158, 179, 180, 647, 159, 379, 287,
	320, 397, 384, 487, 100, 288, 184, 101, 31, 117,
	118, 103, 102, 74, 263, 262, 634, 263, 182, 106,
	107, 354, 326, 155, 109, 622, 110, 264, 111, 119,
	120, 414, 632, 315, 630, 406, 607, 105, 114, 112,
	113, 398, 100, 183, 500, 101, 600, 623, 624, 103,
	102, 100, 289, 155, 101, 181, 403, 132, 103, 102,
	557, 408, 133, 410, 432, 412, 433, 465, 385, 436,
	550, 207, 155, 528, 158, 529, 437, 441, 159, 202,
	488, 100, 203, 479, 101, 339, 452, 449, 103, 102,
	451, 429, 337, 430, 331, 332, 440, 468, 383, 438,
	299, 439, 433, 431, 158, 381, 278, 155, 159, 155,
	667, 462, 664, 663, 474, 442, 275, 582, 467, 276,
	444, 446, 440, 158, 338, 485, 447, 159, 583, 482,
	445, 475, 443, 455, 489, 456, 457, 471, 472, 473,
	459, 662, 184, 664, 663, 499, 509, 498, 374, 481,
	577, 512, 508, 507, 182, 383, 523, 523, 158, 387,
	158, 169, 159, 478, 159, 290, 348, 469, 100, 140,
	78, 101, 454, 493, 531, 103, 102, 206, 564, 547,
	501, 548, 549, 108, 543, 453, 551, 506, 617, 508,
	507, 420, 552, 584, 618, 419, 518, 558, 349, 585,
	483, 140, 78, 552, 484, 402, 155, 562, 563, 534,
	389, 536, 139, 538, 391, 540, 493, 390, 140, 78,
	117, 118, 388, 387, 571, 329, 328, 257, 574, 227,
	106, 107, 517, 355, 336, 109, 1, 110, 213, 111,
	119, 120, 92, 91, 90, 561, 586, 587, 105, 114,
	112, 113, 89, 88, 87, 400, 42, 158, 41, 40,
	566, 159, 39, 545, 524, 594, 20, 44, 570, 499,
	45, 16, 12, 108, 13, 11, 601, 603, 605, 46,
	24, 23, 22, 27, 19, 593, 608, 10, 485, 36,
	18, 614, 609, 602, 604, 606, 15, 71, 591, 43,
	17, 47, 38, 37, 32, 29, 33, 75, 0, 599,
	117, 118, 481, 0, 0, 0, 35, 0, 0, 628,
	106, 107, 0, 0, 631, 109, 633, 110, 635, 111,
	552, 0, 552, 612, 552, 0, 0, 0, 105, 114,
	112, 113, 0, 0, 0, 651, 0, 0, 0, 0,
	0, 0, 643, 644, 645, 0, 626, 0, 0, 0,
	0, 0, 0, 483, 523, 523, 523, 484, 160, 658,
	0, 0, 0, 0, 0, 636, 665, 160, 0, 639,
	160, 160, 0, 0, 669, 0, 666, 523, 0, 0,
	0, 523, 523, 523, 670, 671, 160, 0, 0, 672,
	0, 160, 160, 160, 0, 0, 108, 0, 0, 0,
	160, 0, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 160, 0, 160, 160, 0, 160, 668, 160, 160,
	160, 160, 0, 160, 0, 104, 160, 160, 0, 160,
	0, 160, 160, 117, 118, 0, 0, 0, 0, 108,
	0, 0, 0, 106, 107, 0, 160, 0, 109, 0,
	110, 0, 111, 160, 160, 160, 160, 0, 0, 0,
	0, 105, 114, 112, 113, 116, 0, 0, 160, 0,
	0, 0, 160, 0, 0, 160, 117, 118, 0, 0,
	160, 0, 0, 0, 0, 0, 106, 107, 160, 0,
	0, 109, 0, 110, 0, 111, 119, 120, 160, 0,
	0, 0, 0, 0, 105, 114, 112, 113, 0, 0,
	0, 375, 0, 0, 0, 160, 160, 0, 70, 161,
	69, 79, 162, 78, 164, 163, 142, 0, 150, 94,
	0, 165, 152, 0, 160, 0, 0, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 160, 0,
	0, 0, 0, 0, 0, 81, 108, 0, 0, 0,
	95, 96, 93, 0, 160, 147, 82, 83, 0, 84,
	0, 85, 86, 0, 0, 148, 149, 0, 115, 160,
	0, 0, 0, 0, 0, 104, 0, 146, 0, 153,
	0, 73, 72, 117, 118, 0, 0, 0, 0, 0,
	0, 160, 0, 106, 107, 160, 0, 160, 109, 160,
	110, 0, 111, 119, 120, 0, 0, 0, 0, 0,
	0, 105, 114, 112, 113, 116, 0, 0, 160, 0,
	0, 0, 0, 0, 0, 70, 161, 69, 79, 162,
	78, 164, 163, 142, 160, 0, 94, 0, 165, 152,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 160, 9, 0, 0, 160,
	0, 0, 81, 160, 0, 0, 0, 95, 96, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 160, 0, 0, 0, 448, 0, 0,
	0, 0, 0, 0, 300, 160, 153, 0, 73, 72,
	160, 0, 0, 0, 0, 0, 0, 0, 154, 160,
	0, 0, 0, 0, 0, 0, 0, 189, 160, 160,
	196, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 160, 0, 0,
	0, 218, 219, 220, 0, 160, 108, 0, 0, 0,
	221, 0, 160, 160, 160, 0, 160, 0, 0, 0,
	0, 226, 0, 228, 229, 0, 231, 0, 233, 234,
	235, 236, 0, 238, 0, 0, 242, 243, 0, 246,
	0, 249, 252, 117, 118, 0, 0, 0, 0, 108,
	0, 0, 0, 106, 107, 0, 270, 0, 109, 0,
	110, 0, 111, 277, 279, 283, 285, 0, 0, 0,
	0, 105, 114, 112, 113, 116, 0, 0, 154, 0,
	0, 0, 301, 0, 0, 252, 117, 118, 0, 0,
	252, 160, 0, 160, 0, 0, 106, 107, 323, 0,
	0, 109, 0, 110, 0, 111, 0, 0, 154, 0,
	0, 0, 0, 0, 105, 114, 112, 113, 160, 0,
	0, 573, 0, 0, 0, 350, 357, 70, 161, 69,
	79, 162, 78, 164, 163, 142, 0, 150, 94, 0,
	165, 152, 0, 0, 323, 0, 0, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 371, 372, 0,
	0, 0, 0, 0, 81, 0, 0, 160, 0, 95,
	96, 93, 0, 0, 323, 82, 83, 0, 84, 0,
	85, 86, 0, 0, 160, 0, 0, 0, 0, 212,
	0, 0, 0, 117, 118, 0, 300, 0, 153, 0,
	73, 72, 0, 106, 107, 0, 0, 0, 109, 0,
	110, 407, 111, 0, 0, 411, 0, 413, 0, 212,
	0, 105, 114, 112, 113, 0, 0, 0, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 70, 161, 69, 79, 162,
	78, 164, 163, 142, 434, 0, 94, 0, 165, 152,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 212, 34, 0, 0, 450,
	0, 0, 81, 252, 0, 0, 0, 95, 96, 93,
	0, 0, 147, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 300, 480, 153, 0, 73, 72,
	490, 0, 0, 0, 661, 0, 138, 141, 0, 357,
	0, 0, 0, 0, 295, 0, 0, 190, 504, 505,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	118, 0, 0, 0, 0, 0, 0, 189, 0, 106,
	107, 190, 190, 190, 109, 539, 110, 0, 111, 0,
	190, 0, 212, 544, 546, 0, 490, 105, 114, 112,
	113, 190, 0, 190, 190, 0, 190, 0, 190, 190,
	190, 190, 0, 190, 187, 0, 190, 190, 0, 190,
	108, 190, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 190, 190, 190, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 118, 0,
	0, 0, 190, 0, 0, 190, 0, 106, 107, 0,
	190, 592, 109, 357, 110, 0, 111, 0, 190, 0,
	0, 0, 0, 0, 0, 105, 114, 112, 113, 0,
	0, 0, 0, 268, 0, 0, 271, 0, 480, 0,
	0, 0, 0, 0, 0, 0, 190, 291, 70, 161,
	69, 79, 162, 78, 164, 163, 80, 0, 0, 94,
	0, 165, 0, 0, 190, 0, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 190, 190, 0,
	330, 0, 0, 0, 0, 81, 0, 637, 0, 0,
	95, 96, 93, 0, 190, 0, 82, 83, 0, 84,
	0, 85, 86, 0, 646, 0, 394, 0, 341, 0,
	0, 0, 0, 117, 118, 0, 0, 76, 0, 77,
	0, 73, 72, 106, 107, 0, 0, 0, 109, 0,
	110, 190, 111, 119, 120, 190, 0, 190, 0, 0,
	369, 105, 114, 112, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 392, 0, 0, 395, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	0, 409, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 51, 69, 79, 52, 78, 54,
	53, 80, 0, 190, 94, 0, 427, 428, 48, 657,
	525, 656, 655, 526, 49, 50, 0, 61, 62, 59,
	190, 0, 65, 66, 0, 67, 64, 60, 0, 190,
	81, 63, 0, 68, 30, 95, 96, 93, 190, 190,
	0, 82, 83, 0, 84, 0, 85, 86, 0, 0,
	519, 0, 0, 521, 522, 108, 298, 190, 0, 0,
	0, 0, 76, 0, 77, 190, 73, 72, 0, 476,
	0, 0, 0, 190, 190, 0, 190, 0, 0, 0,
	0, 0, 494, 0, 0, 497, 0, 0, 0, 108,
	298, 0, 117, 118, 0, 0, 0, 0, 0, 0,
	0, 510, 106, 107, 0, 514, 515, 109, 516, 110,
	0, 111, 119, 120, 530, 0, 532, 0, 0, 0,
	105, 114, 112, 113, 116, 494, 117, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 107, 0, 0,
	553, 109, 0, 110, 0, 111, 554, 555, 556, 0,
	0, 0, 0, 190, 105, 114, 112, 113, 0, 70,
	191, 69, 79, 192, 78, 136, 193, 80, 0, 0,
	94, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 576, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 81, 0, 0, 108,
	619, 95, 96, 93, 588, 0, 590, 82, 83, 0,
	84, 0, 85, 86, 0, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 0, 0, 0, 190, 76, 0,
	77, 595, 73, 72, 0, 0, 117, 118, 0, 0,
	0, 0, 0, 0, 190, 0, 106, 107, 0, 615,
	0, 109, 0, 110, 616, 111, 119, 120, 0, 620,
	621, 330, 0, 0, 105, 114, 112, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 641, 642, 0, 0, 0, 0, 427, 428,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 94, 0, 0, 0, 48, 653, 525, 656, 655,
	526, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 30, 95, 96, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	521, 522, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 94, 0, 0, 0,
	48, 511, 57, 426, 425, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 30, 95, 96, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 333, 334, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 94, 0, 0, 0, 48, 423, 57, 426, 425,
	58, 49, 50, 0, 61, 62, 59, 0, 0, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 30, 95, 96, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 94, 0, 0, 0,
	48, 0, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 433, 465, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 30, 95, 96, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 333, 334, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	70, 51, 69, 79, 52, 78, 54, 53, 80, 0,
	0, 94, 0, 0, 0, 48, 578, 57, 0, 0,
	58, 49, 50, 0, 61, 62, 59, 0, 579, 65,
	66, 0, 67, 64, 60, 0, 0, 81, 63, 0,
	68, 30, 95, 96, 93, 0, 0, 0, 82, 83,
	0, 84, 0, 85, 86, 0, 0, 0, 0, 0,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 77, 0, 73, 72, 70, 51, 69, 79, 52,
	78, 54, 53, 80, 0, 0, 94, 0, 0, 0,
	48, 0, 57, 0, 0, 58, 49, 50, 0, 61,
	62, 59, 0, 0, 65, 66, 0, 67, 64, 60,
	0, 0, 81, 63, 0, 68, 30, 95, 96, 93,
	0, 0, 0, 82, 83, 0, 84, 0, 85, 86,
	0, 0, 0, 0, 0, 6, 7, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 77, 0, 73, 72,
	8, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 659, 525, 0,
	0, 526, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 521, 522, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 0, 0, 94, 0, 0,
	0, 48, 640, 57, 0, 0, 58, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 73,
	72, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 625, 57, 0,
	0, 58, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 0, 0, 94, 0, 0,
	0, 48, 589, 57, 0, 0, 58, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 73,
	72, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 580, 57, 0,
	0, 58, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 0, 0, 94, 0, 0,
	0, 48, 559, 57, 0, 0, 58, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 73,
	72, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 527, 525, 0,
	0, 526, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 521, 522, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 0, 0, 94, 0, 0,
	0, 48, 520, 525, 0, 0, 526, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 521, 522, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 73,
	72, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 513, 57, 0,
	0, 58, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 0, 0, 94, 0, 0,
	0, 48, 0, 57, 0, 0, 58, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 496, 73,
	72, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 491, 57, 0,
	0, 58, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 0, 0, 94, 0, 0,
	0, 48, 477, 57, 0, 0, 58, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 73,
	72, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 404, 57, 0,
	0, 58, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 0, 0, 94, 0, 0,
	0, 48, 396, 57, 0, 0, 58, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 73,
	72, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 393, 57, 0,
	0, 58, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 0, 0, 94, 0, 0,
	0, 48, 0, 525, 0, 0, 526, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 521, 522, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 73,
	72, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 0, 57, 0,
	0, 58, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 0, 0, 94, 0, 0,
	0, 48, 0, 57, 0, 0, 58, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 613, 334, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 73,
	72, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 0, 57, 0,
	0, 58, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 567, 334, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 361, 0, 94, 0, 0,
	0, 48, 0, 57, 0, 0, 58, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 0, 360, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 0, 73,
	72, 70, 51, 69, 79, 52, 78, 54, 53, 80,
	0, 0, 94, 0, 0, 0, 48, 0, 57, 0,
	0, 58, 49, 50, 0, 61, 62, 59, 0, 0,
	65, 66, 0, 67, 64, 60, 0, 0, 81, 63,
	0, 68, 30, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 51, 69, 79,
	52, 78, 54, 53, 80, 0, 0, 94, 0, 0,
	0, 48, 0, 57, 0, 0, 58, 49, 50, 0,
	61, 62, 59, 0, 0, 65, 66, 0, 67, 64,
	60, 0, 0, 81, 63, 0, 68, 30, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 70, 191, 69, 79, 192, 78, 136, 193, 80,
	0, 0, 94, 0, 165, 76, 0, 77, 0, 73,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 356, 69, 79,
	192, 78, 136, 193, 80, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 0, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 77, 353, 73,
	72, 70, 191, 69, 79, 192, 78, 136, 193, 367,
	0, 0, 94, 0, 0, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 95, 96, 93, 0, 0, 365, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	366, 0, 153, 0, 73, 72, 70, 161, 69, 79,
	162, 78, 164, 163, 142, 0, 0, 94, 0, 165,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 70, 191, 69, 79, 192, 78, 136, 193, 80,
	0, 0, 94, 0, 0, 300, 0, 153, 0, 73,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 341, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72, 70, 191, 69, 79,
	192, 78, 136, 193, 367, 0, 0, 94, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 70, 191, 69, 79, 192, 78, 136, 193, 80,
	0, 0, 94, 0, 0, 76, 0, 153, 0, 73,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 63,
	0, 0, 0, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 70, 161, 69, 79,
	162, 78, 164, 163, 211, 0, 0, 94, 0, 165,
	76, 0, 77, 0, 73, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 70, 191, 69, 79, 192, 78, 136, 193, 80,
	0, 0, 94, 0, 0, 76, 0, 77, 0, 73,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 70, 321, 69, 79,
	192, 78, 136, 322, 80, 0, 0, 94, 0, 0,
	76, 0, 77, 0, 73, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 95, 96,
	93, 0, 0, 0, 82, 83, 0, 84, 0, 85,
	86, 70, 161, 69, 79, 162, 78, 164, 163, 80,
	0, 0, 94, 0, 0, 76, 0, 77, 0, 73,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 95, 96, 93, 0, 0, 0, 82,
	83, 0, 84, 0, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 77, 0, 73, 72,
}
var RubyPact = []int{

	-43, 2369, -1000, -1000, -1000, 24, -1000, -1000, -1000, 842,
	-1000, -1000, -1000, -1000, 210, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 72, 134, -1000, 75, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27, 488,
	439, 802, 78, 162, 211, 282, 270, 4020, 4020, -1000,
	4595, 4020, 4020, 4595, 4705, 336, 245, -1000, 449, -1000,
	-1000, 334, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4540,
	-1000, 22, 4020, 4020, 4595, 4595, 4595, -1000, -1000, -1000,
	-1000, -1000, -1000, 4595, -1000, -1000, -1000, -1000, -1000, -1000,
	4020, 4020, 4020, 4020, 4595, 502, 4595, 4595, -1000, 4595,
	4020, 4595, 4595, 4595, 4595, 4020, 4595, -1000, -1000, 4595,
	4595, 4020, 4595, 4020, 4595, 4595, 4020, 4020, 4020, 4020,
	500, 237, 69, 52, 237, -1000, -1000, -1000, 177, 4595,
	430, -1000, -1000, 22, -1000, 57, 4595, 4485, 4595, 4595,
	272, 429, 48, 116, 1751, -1000, -1000, 364, -1000, -1000,
	68, 1279, 60, 61, 170, 4595, -1000, -1000, 4595, -1000,
	4020, 4020, 4020, 4595, 4020, 4020, 4020, 253, 4020, 4020,
	4020, 4650, 242, 499, 498, 425, 308, 3645, 356, 1436,
	42, 4300, 83, 40, 338, 299, 1436, 146, 356, -1000,
	-1000, 1042, 4020, 4020, 4020, 4020, 438, -1000, 1522, 4150,
	380, -1000, 1751, 3870, -1000, 116, 425, 425, 1436, 1436,
	1436, 1436, 425, 425, 425, 425, 1436, 4225, 1436, 1436,
	4355, 1436, 425, 1436, 1436, 1436, 1436, 425, 1552, 98,
	4355, 4355, 1436, 1436, 425, 80, 725, 36, 425, 1436,
	64, 32, 1895, 425, 425, 425, 425, 4430, -1000, 419,
	288, -1000, 167, 496, 495, 483, 490, -1000, 3495, 439,
	1436, 3420, 1522, -1000, -1000, -1000, 63, 459, -25, 682,
	-1000, -1000, -1000, 1042, -1000, 1042, -1000, -1000, -1000, 478,
	-1000, 3345, -1000, 234, 4150, 3645, -1000, -1000, 4595, -1000,
	4595, 1436, 1522, 56, -33, 425, 425, 425, 50, -44,
	425, 425, 425, -1000, -1000, 468, 425, 425, 425, 418,
	412, 1161, 77, 1436, -1000, -1000, 464, 406, 25, -8,
	2144, -1000, -1000, -1000, -1000, 425, 349, 4595, -1000, -1000,
	146, -1000, 357, 4595, 425, 425, 425, 425, -1000, 396,
	1436, -1000, -1000, -1000, 394, 390, 919, 1785, 1522, 425,
	-1000, -1000, 4355, -1000, 22, 4020, 4595, -1000, 1436, -1000,
	-1000, 1436, 1436, 165, -1000, 164, -1000, 157, -1000, 22,
	-1000, -1000, 2219, 234, 362, 432, 4595, -1000, -1000, 237,
	237, 237, 2219, -1000, -1000, 3270, -1000, 347, 1522, 147,
	230, -1000, -1000, 4075, -1000, 3195, 104, 1785, -9, 3120,
	89, 1436, 4355, 248, 380, 142, -1000, 141, -1000, -1000,
	-1000, 4595, 4595, -1000, 445, 4020, -1000, 2069, 3045, -1000,
	-1000, -1000, -1000, 471, 1436, 2970, 2895, 331, -1000, -1000,
	4595, 356, -6, -1000, -10, -1000, -13, -1000, 4595, 380,
	1436, -1000, 425, 10, -48, 1522, 4355, 4355, 4020, 4355,
	4020, 4020, -1000, 328, 313, -1000, -1000, -1000, -1000, -1000,
	1436, -1000, -1000, -1000, 318, 313, 2820, -1000, 174, -1000,
	1751, -1000, -1000, -1000, -1000, 364, 4020, 4020, 451, -1000,
	1436, -1000, -1000, -14, 3645, -1000, -1000, 3795, -1000, -1000,
	140, 172, -1000, 4020, 1192, 1085, -1000, 4020, -1000, 425,
	3645, -1000, 408, -1000, 2294, 2745, 3645, 392, 466, -1000,
	-1000, -1000, -1000, 425, -1000, 4020, 4020, -1000, -1000, -1000,
	2670, 356, 3645, -1000, 1522, -1000, 1853, -1000, 161, 1436,
	169, 95, -1000, 347, 1436, -1000, 1895, 425, 425, 425,
	-1000, 304, -1000, 3645, 2219, 2219, 2219, -1000, 294, -1000,
	22, 1522, 425, 425, -29, -1000, -17, -1000, 3720, -1000,
	3945, 425, 344, -1000, 425, 3645, 3645, -1000, -1000, -1000,
	-1000, 3645, 461, 439, -1000, -1000, 239, 261, 2595, -1000,
	3645, 124, 1436, -1000, -1000, -1000, 82, -1000, 4020, 168,
	-1000, 292, 313, 290, 313, 274, 313, -1000, -1000, -1000,
	4595, -1000, -30, -1000, 425, 3645, 2520, -1000, -1000, -1000,
	3645, 3645, -1000, -1000, -1000, -1000, 124, 4595, 425, -1000,
	-1000, 254, -1000, 236, -1000, 228, 130, 549, -1000, -37,
	-1000, 3645, 3645, 1994, 1687, 2445, 1348, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 399, 4020, -1000, -1000, 368, -1000,
	124, -1000, -1000, 4020, -1000, 425, 3570, -1000, 124, 425,
	3570, 3570, 3570,
}
var RubyPgo = []int{

	0, 587, 0, 293, 586, 85, 5, 585, 584, 583,
	582, 7, 581, 81, 580, 10, 579, 30, 577, 576,
	570, 956, 288, 11, 596, 569, 567, 564, 563, 562,
	561, 560, 559, 555, 554, 552, 551, 1316, 15, 22,
	550, 547, 19, 546, 544, 4, 25, 542, 539, 538,
	536, 534, 533, 532, 524, 523, 522, 1374, 518, 18,
	20, 3, 516, 9, 1, 514, 8, 13, 513, 98,
	17, 512, 478, 14, 16, 27, 21, 12, 6, 45,
}
var RubyR1 = []int{

	0, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 79, 79, 57, 57, 57, 57, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 32, 32, 32, 32, 32,
	32, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 18, 18, 42, 16, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	25, 60, 60, 60, 60, 67, 67, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	15, 69, 69, 64, 64, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 75, 75, 75, 76, 76,
	76, 73, 73, 73, 73, 33, 33, 34, 35, 37,
	37, 37, 17, 17, 17, 17, 17, 17, 17, 17,
	19, 19, 19, 70, 70, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 8, 3, 1, 72,
	72, 72, 72, 72, 72, 72, 4, 4, 4, 4,
	77, 78, 78, 68, 68, 68, 6, 6, 6, 6,
	6, 6, 6, 6, 23, 23, 74, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 61, 61,
	61, 61, 58, 58, 58, 9, 20, 20, 20, 20,
	11, 11, 11, 11, 11, 11, 71, 71, 65, 65,
	59, 59, 27, 27, 28, 29, 29, 29, 29, 31,
	31, 31, 30, 30, 30, 13, 13, 43, 43, 43,
	43, 63, 63, 63, 63, 63, 44, 44, 44, 44,
	44, 45, 45, 45, 45, 41, 40, 10, 39, 39,
	39, 39, 38, 38, 5, 5, 7, 12,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 2, 0, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 3, 2, 6, 7, 1,
	2, 6, 6, 2, 3, 2, 3, 4, 5, 4,
	5, 4, 5, 2, 3, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	6, 6, 6, 6, 6, 6, 7, 6, 6, 8,
	4, 5, 8, 1, 4, 1, 3, 0, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	2, 1, 4, 0, 2, 6, 7, 8, 8, 8,
	9, 9, 9, 6, 7, 1, 3, 3, 0, 1,
	3, 1, 2, 3, 2, 4, 6, 5, 4, 1,
	2, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 9, 6, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 3, 4, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 5, 1, 1, 0,
	1, 1, 1, 4, 4, 4, 3, 5, 6, 5,
	3, 1, 4, 3, 7, 8, 3, 4, 4, 4,
	7, 8, 5, 6, 0, 1, 3, 4, 5, 3,
	3, 3, 3, 3, 5, 6, 5, 3, 4, 3,
	3, 2, 0, 2, 2, 3, 4, 6, 8, 6,
	2, 3, 5, 5, 4, 4, 1, 3, 0, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 1, 1,
	3, 3, 1, 3, 3, 6, 6, 5, 5, 3,
	3, 0, 2, 2, 2, 2, 5, 6, 5, 6,
	5, 4, 3, 3, 2, 4, 4, 2, 5, 7,
	4, 6, 4, 5, 3, 3, 3, 2,
}
var RubyChk = []int{

	-1000, -62, 66, 67, 81, -2, 66, 67, 81, -21,
	-26, -33, -35, -34, -17, -19, -36, -14, -20, -27,
	-43, -39, -29, -30, -31, -42, -5, -28, -13, -7,
	47, -22, -8, -4, -37, -24, -25, -9, -10, -47,
	-48, -49, -50, -16, -41, -40, -32, -12, 21, 27,
	28, 7, 10, 13, 12, -46, -70, 23, 26, 32,
	40, 30, 31, 44, 39, 35, 36, 38, 46, 8,
	6, -18, 80, 79, -3, -1, 75, 77, 11, 9,
	14, 43, 54, 55, 57, 59, 60, -51, -52, -53,
	-54, -55, -56, 50, 17, 48, 49, 67, 66, 81,
	23, 26, 31, 30, 33, 69, 51, 52, 4, 56,
	58, 60, 71, 72, 70, 26, 73, 41, 42, 61,
	62, 26, 75, 53, 51, 75, 63, 64, 23, 26,
	69, 7, -22, -3, 4, 10, 12, 13, -37, 4,
	10, -37, 14, -60, -6, -66, 75, 53, 63, 64,
	16, -69, 20, 77, -21, -17, -15, -78, -13, -5,
	-24, 7, 10, 13, 12, 19, -77, 14, 75, 11,
	53, 63, 64, 75, 53, 63, 64, 16, 53, 63,
	64, 53, 16, 53, 16, -2, -2, -57, -67, -21,
	-37, 7, 10, 13, -2, -2, -21, -79, -67, -13,
	-17, -21, 23, 26, 23, 26, 8, 17, -79, -79,
	-66, 14, -21, -58, -6, 77, -2, -2, -21, -21,
	-21, -21, -2, -2, -2, -2, -21, 7, -21, -21,
	-79, -21, -2, -21, -21, -21, -21, -2, -21, -5,
	-79, -79, -21, -21, -2, -69, -21, -5, -2, -21,
	-69, -5, -21, -2, -2, -2, -2, 7, -75, -76,
	14, -73, 7, 60, 19, 69, 69, -75, -57, 51,
	-21, -57, -79, -6, -6, 16, -69, -21, -5, -21,
	-42, -13, -39, -21, -13, -21, -13, 7, 13, 60,
	16, -57, -74, 70, -79, -57, -74, 66, 5, 16,
	75, -21, -79, -69, -5, -2, -2, -2, -69, -5,
	-2, -2, -2, 7, 13, 60, -2, -2, -2, -46,
	-69, 7, 13, -21, 7, 13, 60, -70, 7, 7,
	-57, 66, 67, 66, 67, -2, -65, 16, 66, 66,
	-79, 66, -38, 45, -2, -2, -2, -2, 8, -72,
	-21, -17, -15, 78, -78, -68, 7, -21, -79, -2,
	67, 15, -79, -6, -60, 53, 75, 14, -21, 68,
	68, -21, -21, 76, 16, 76, 76, 76, 76, -60,
	-23, -6, -57, 16, -76, 60, 53, 7, 7, 7,
	7, 4, -57, 22, -37, -57, 22, -66, -79, 76,
	76, 76, 7, -79, 22, -57, -76, -21, -79, -57,
	-79, -21, -79, -21, -66, 76, 76, 76, 76, 7,
	7, 75, 75, 22, -61, 25, 24, -57, -57, 22,
	24, 34, -11, 33, -21, -63, -63, -38, 22, 24,
	45, -67, -79, 16, -79, 16, -79, 16, 68, -66,
	-21, -6, -2, -69, -5, -79, -79, -79, 53, -79,
	53, 53, -23, -64, -59, 34, -11, -73, 15, 15,
	-21, -75, -75, -75, -64, -59, -57, 22, -79, 16,
	-21, -17, -15, -13, -5, -78, 53, 53, 16, -15,
	-21, 22, 70, -79, -57, 78, 78, -57, -74, -77,
	76, -79, 53, 53, -21, -21, 22, 25, 24, -2,
	-57, 22, -61, 22, -57, -57, -57, -71, 5, -37,
	22, 66, 67, -2, -44, 23, 26, 22, 22, 24,
	-57, -67, -57, 76, -79, 78, -79, 78, -79, -21,
	-79, 76, 76, -66, -21, -5, -21, -2, -2, -2,
	22, -64, -11, -57, -57, -57, -57, 22, -64, 22,
	15, -79, -2, -2, 7, 78, -79, 66, -57, 15,
	-79, -2, 76, 76, -2, -57, -57, 22, 22, 34,
	22, -57, 5, 16, 7, 13, -2, -2, -57, 22,
	-57, -79, -21, -17, -15, 78, 7, 15, 53, -79,
	22, -64, -59, -64, -59, -64, -59, 22, -6, -15,
	75, 78, -79, 66, -2, -57, -57, 7, 13, -37,
	-57, -57, 66, 66, 67, 22, -79, 68, -2, 15,
	22, -64, 22, -64, 22, -64, -79, -21, 78, -79,
	22, -57, -57, -63, -63, -63, -21, 22, 22, 22,
	15, 76, 78, 22, -45, 25, 24, 22, -45, 22,
	-79, 16, 22, 25, 24, -2, -63, 22, -79, -2,
	-63, -63, -63,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 0, 0,
	0, 20, 21, 23, 22, 0, 0, 0, 0, 13,
	283, 0, 0, 11, 288, 292, 289, 284, 0, 17,
	18, 19, 24, 25, 26, 27, 11, 11, 171, 79,
	262, 0, 0, 0, 0, 0, 0, 45, 46, 47,
	48, 49, 50, 0, 73, 217, 218, 5, 6, 7,
	0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
	0, 0, 0, 0, 0, 0, 0, 11, 11, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, 0, 0, 158, 21, 22, 23, 13, 0,
	169, 13, -2, 83, 85, 93, 11, 0, 0, 0,
	0, 123, 13, -2, 128, 129, 130, 131, 132, 133,
	32, 20, 21, 23, 22, 0, 231, 11, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 13, 0, 278, 282, 125,
	31, 20, 21, 23, 0, 0, 11, 0, 285, 286,
	287, 125, 0, 0, 0, 0, 0, 74, 219, 0,
	80, -2, 128, 0, 317, -2, 206, 207, 208, 209,
	76, 327, 249, 257, 299, 300, 75, 86, 95, 97,
	0, 210, 211, 212, 213, 214, 215, 251, 0, 0,
	0, 0, 324, 325, 253, 0, 141, 0, 179, 96,
	0, 0, 141, 190, 196, 250, 252, 244, 13, 155,
	158, 159, 161, 0, 0, 0, 0, 13, 0, 0,
	13, 0, 127, 84, 94, 11, 0, 141, 0, 172,
	173, 174, 175, 185, 186, 191, 192, 197, 198, 0,
	11, 0, 13, 158, 0, 11, 13, 11, 0, 11,
	11, 140, 127, 0, 0, 176, 187, 193, 0, 0,
	177, 188, 194, 200, 201, 0, 178, 189, 195, 180,
	181, 20, 23, 141, 203, 204, 0, 182, 0, 0,
	0, 13, 13, 14, 15, 16, 0, 0, 301, 301,
	0, 12, 0, 0, 293, 294, 290, 291, 326, 11,
	220, 221, 222, 226, 11, 11, -2, 0, 127, 263,
	264, 265, 0, 87, 89, 0, 11, -2, 120, 11,
	11, 315, 316, 101, 11, 102, 103, 108, 109, 244,
	91, 245, 143, 0, 0, 0, 0, 162, 164, 158,
	158, 158, 143, 165, 13, 0, 168, 11, 0, 98,
	99, 100, 199, 0, 236, 0, 0, -2, 0, 0,
	13, 230, 0, 141, 11, 104, 105, 106, 107, 202,
	205, 0, 0, 247, 0, 0, 13, 0, 0, 266,
	13, 13, 279, 13, 126, 0, 0, 0, 320, 13,
	0, 13, 0, 11, 0, 11, 0, 11, 0, 11,
	-2, 88, 92, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 90, 0, 143, 13, 280, 160, 156, 157,
	163, 13, 13, 13, 0, 143, 0, 167, 0, 11,
	134, 135, 136, 137, 138, 139, 0, 0, 0, 124,
	142, 237, 246, 0, 11, 238, 239, 0, 13, 232,
	99, 0, 11, 0, 0, 0, 248, 0, 13, 13,
	261, 254, 0, 256, 0, 0, 270, 13, 0, 276,
	297, 302, 303, 304, 305, 0, 0, 298, 318, 13,
	0, 13, 11, 216, 0, 227, 0, 229, 0, 233,
	0, 110, 111, 11, 295, 296, 0, 114, 115, 118,
	145, 0, 281, 144, 143, 143, 143, 153, 0, 166,
	77, 0, 112, 113, 0, 242, 0, -2, 0, 82,
	0, 117, 0, 184, 13, 259, 260, 255, 267, 13,
	269, 271, 0, 0, 13, 13, 13, 0, 0, 321,
	11, 322, 223, 224, 225, 228, 0, 81, 0, 0,
	146, 0, 143, 0, 143, 0, 143, 154, 78, -2,
	0, 243, 0, -2, 116, 258, 0, 13, 13, 277,
	274, 275, 301, 13, 13, 319, 323, 0, 119, 121,
	147, 0, 148, 0, 149, 0, 0, 0, 240, 0,
	268, 272, 273, 0, 0, 0, 11, 150, 151, 152,
	122, 183, 241, 306, 0, 0, 301, 308, 0, 310,
	234, 11, 307, 0, 301, 301, 314, 309, 235, 301,
	312, 313, 311,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:238
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:240
		{
		}
	case 3:
		//line parser.y:242
		{
		}
	case 4:
		//line parser.y:244
		{
		}
	case 5:
		//line parser.y:246
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:248
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:250
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:256
		{
		}
	case 11:
		//line parser.y:258
		{
		}
	case 12:
		//line parser.y:259
		{
		}
	case 13:
		//line parser.y:262
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 14:
		//line parser.y:264
		{
		}
	case 15:
		//line parser.y:266
		{
		}
	case 16:
		//line parser.y:268
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 17:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 18:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:279
		{
			RubyVAL.genericValue = RubyS[Rubypt-0].astString
		}
	case 74:
		//line parser.y:281
		{
			RubyVAL.genericValue = ast.InterpolatedString{
				Line:  RubyS[Rubypt-1].genericValue.LineNumber(),
				Value: RubyS[Rubypt-1].genericValue.(ast.String).StringValue() + RubyS[Rubypt-0].astString.StringValue(),
			}
		}
	case 75:
		//line parser.y:289
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 76:
		//line parser.y:292
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 77:
		//line parser.y:295
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:304
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-6].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-3].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:314
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:320
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 81:
		//line parser.y:328
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:337
		{
			callExpr := ast.CallExpression{
				Func: ast.BareReference{Name: RubyS[Rubypt-5].genericValue.(ast.Constant).Name, Line: RubyS[Rubypt-5].genericValue.LineNumber()},
				Args: RubyS[Rubypt-2].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:346
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:355
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:365
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:375
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
		}
	case 87:
		//line parser.y:383
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:394
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:405
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:415
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-4].genericValue.LineNumber(),
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 91:
		//line parser.y:425
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-3].genericValue.LineNumber(),
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 92:
		//line parser.y:435
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:448
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-1].genericValue.LineNumber(),
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
		}
	case 94:
		//line parser.y:456
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:          RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
		}
	case 95:
		//line parser.y:465
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 96:
		//line parser.y:474
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 97:
		//line parser.y:483
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
		}
	case 98:
		//line parser.y:494
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 99:
		//line parser.y:503
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 100:
		//line parser.y:512
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 101:
		//line parser.y:521
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 102:
		//line parser.y:530
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 103:
		//line parser.y:539
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 104:
		//line parser.y:548
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 105:
		//line parser.y:557
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 106:
		//line parser.y:566
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 107:
		//line parser.y:575
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 108:
		//line parser.y:584
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 109:
		//line parser.y:593
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 110:
		//line parser.y:602
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 111:
		//line parser.y:615
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-5].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Name: "[]"},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
					Target: RubyS[Rubypt-5].genericValue,
					Func:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				},
				Args: []ast.Node{RubyS[Rubypt-1].genericValue},
			}
		}
	case 112:
		//line parser.y:631
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 113:
		//line parser.y:640
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 114:
		//line parser.y:649
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 115:
		//line parser.y:658
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 116:
		//line parser.y:667
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-6].genericValue.LineNumber(),
			}
		}
	case 117:
		//line parser.y:676
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 118:
		//line parser.y:685
		{
			RubyVAL.genericValue = ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericSlice.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 119:
		//line parser.y:694
		{
			RubyVAL.genericValue = ast.CallExpression{
				Line: RubyS[Rubypt-7].genericValue.LineNumber(),
				Func: ast.BareReference{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Name: "[]="},
				Target: ast.CallExpression{
					Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
					Func:   RubyS[Rubypt-5].genericValue.(ast.BareReference),
					Target: RubyS[Rubypt-7].genericValue,
				},
				Args: append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue),
			}
		}
	case 120:
		//line parser.y:709
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 121:
		//line parser.y:721
		{
			RubyVAL.genericSlice = RubyS[Rubypt-2].genericSlice
		}
	case 122:
		//line parser.y:723
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, RubyS[Rubypt-2].genericValue)
		}
	case 123:
		//line parser.y:725
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 124:
		//line parser.y:727
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:730
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 126:
		//line parser.y:732
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 127:
		//line parser.y:735
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 128:
		//line parser.y:737
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 129:
		//line parser.y:739
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 130:
		//line parser.y:741
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 131:
		//line parser.y:743
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-0].hashPairSlice[0].LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 132:
		//line parser.y:750
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 133:
		//line parser.y:752
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 134:
		//line parser.y:754
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 135:
		//line parser.y:756
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 136:
		//line parser.y:758
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:760
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:762
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 139:
		//line parser.y:764
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.Hash{
				Line:  RubyS[Rubypt-2].genericValue.LineNumber(),
				Pairs: RubyS[Rubypt-0].hashPairSlice,
			})
		}
	case 140:
		//line parser.y:773
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 141:
		//line parser.y:784
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 142:
		//line parser.y:786
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 143:
		//line parser.y:790
		{
			RubyVAL.genericSlice = nil
		}
	case 144:
		//line parser.y:792
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 145:
		//line parser.y:795
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 146:
		//line parser.y:806
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 147:
		//line parser.y:818
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 148:
		//line parser.y:830
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 149:
		//line parser.y:842
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-6].genericValue,
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 150:
		//line parser.y:854
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 151:
		//line parser.y:867
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 152:
		//line parser.y:880
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-7].genericValue,
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-7].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 153:
		//line parser.y:893
		{
			method := ast.FuncDecl{
				Name:   RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-3].methodParamSlice,
				Body:   RubyS[Rubypt-2].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 154:
		//line parser.y:904
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-5].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-4].methodParamSlice,
				Body:    RubyS[Rubypt-3].genericSlice,
				Rescues: RubyS[Rubypt-2].genericSlice,
				Ensure:  RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 155:
		//line parser.y:918
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-0].methodParamSlice
		}
	case 156:
		//line parser.y:920
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 157:
		//line parser.y:922
		{
			RubyVAL.methodParamSlice = []ast.MethodParam{{Name: "", IsSplat: true}}
		}
	case 158:
		//line parser.y:924
		{
		}
	case 159:
		//line parser.y:926
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 160:
		//line parser.y:928
		{
			RubyVAL.methodParamSlice = append(RubyVAL.methodParamSlice, RubyS[Rubypt-0].methodParam)
		}
	case 161:
		//line parser.y:931
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 162:
		//line parser.y:933
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsSplat: true}
		}
	case 163:
		//line parser.y:935
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name, DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 164:
		//line parser.y:937
		{
			RubyVAL.methodParam = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, IsProc: true}
		}
	case 165:
		//line parser.y:941
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 166:
		//line parser.y:951
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 167:
		//line parser.y:963
		{
			if RubyS[Rubypt-3].genericValue.(ast.BareReference).Name != "<<" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Eigenclass{
				Line:   RubyS[Rubypt-2].genericValue.LineNumber(),
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
		}
	case 168:
		//line parser.y:976
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 169:
		//line parser.y:987
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.Constant).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 170:
		//line parser.y:996
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.Constant).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 171:
		//line parser.y:1015
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 172:
		//line parser.y:1033
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 173:
		//line parser.y:1042
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 174:
		//line parser.y:1048
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 175:
		//line parser.y:1054
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 176:
		//line parser.y:1056
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 177:
		//line parser.y:1065
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 178:
		//line parser.y:1067
		{
			RubyVAL.genericValue = ast.Assignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 179:
		//line parser.y:1069
		{
			RubyVAL.genericValue = ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 180:
		//line parser.y:1072
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 181:
		//line parser.y:1081
		{
			var rhs ast.Node = RubyS[Rubypt-0].genericSlice
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				rhs = RubyS[Rubypt-0].genericSlice[0]
			}
			RubyVAL.genericValue = ast.Assignment{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				LHS:  RubyS[Rubypt-2].genericValue,
				RHS:  rhs,
			}
		}
	case 182:
		//line parser.y:1093
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 183:
		//line parser.y:1103
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 184:
		//line parser.y:1118
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 185:
		//line parser.y:1124
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 186:
		//line parser.y:1133
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 187:
		//line parser.y:1139
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 188:
		//line parser.y:1148
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 189:
		//line parser.y:1150
		{
			RubyVAL.genericValue = ast.ConditionalAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 190:
		//line parser.y:1152
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 191:
		//line parser.y:1161
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 192:
		//line parser.y:1170
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 193:
		//line parser.y:1176
		{
			eql := ast.ConditionalTruthyAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 194:
		//line parser.y:1185
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 195:
		//line parser.y:1187
		{
			RubyVAL.genericValue = ast.ConditionalTruthyAssignment{Line: RubyS[Rubypt-2].genericValue.LineNumber(), LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 196:
		//line parser.y:1189
		{
			eql := ast.ConditionalTruthyAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 197:
		//line parser.y:1197
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 198:
		//line parser.y:1199
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 199:
		//line parser.y:1201
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 200:
		//line parser.y:1204
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 201:
		//line parser.y:1206
		{
			RubyVAL.genericValue = ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 202:
		//line parser.y:1208
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 203:
		//line parser.y:1211
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 204:
		//line parser.y:1213
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 205:
		//line parser.y:1215
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 206:
		//line parser.y:1219
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 207:
		//line parser.y:1221
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 208:
		//line parser.y:1223
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 209:
		//line parser.y:1225
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 210:
		//line parser.y:1228
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 211:
		//line parser.y:1239
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 212:
		//line parser.y:1250
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 213:
		//line parser.y:1261
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 214:
		//line parser.y:1272
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 215:
		//line parser.y:1283
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 216:
		//line parser.y:1294
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 217:
		//line parser.y:1296
		{
		}
	case 218:
		//line parser.y:1297
		{
		}
	case 219:
		//line parser.y:1299
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 220:
		//line parser.y:1301
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 221:
		//line parser.y:1303
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 222:
		//line parser.y:1305
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 223:
		//line parser.y:1307
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 224:
		//line parser.y:1309
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 225:
		//line parser.y:1311
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1314
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 227:
		//line parser.y:1316
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: RubyS[Rubypt-2].hashPairSlice}
		}
	case 228:
		//line parser.y:1318
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Pairs: RubyS[Rubypt-3].hashPairSlice}
		}
	case 229:
		//line parser.y:1320
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 230:
		//line parser.y:1329
		{
			RubyVAL.hashPair = ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue}
		}
	case 231:
		//line parser.y:1332
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 232:
		//line parser.y:1334
		{
			RubyVAL.hashPairSlice = append(RubyVAL.hashPairSlice, RubyS[Rubypt-0].hashPair)
		}
	case 233:
		//line parser.y:1337
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 234:
		//line parser.y:1344
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 235:
		//line parser.y:1351
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 236:
		//line parser.y:1359
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
		}
	case 237:
		//line parser.y:1363
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 238:
		//line parser.y:1367
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
		}
	case 239:
		//line parser.y:1371
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].methodParamSlice, Body: RubyS[Rubypt-1].genericSlice}
		}
	case 240:
		//line parser.y:1375
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Body: RubyS[Rubypt-3].genericSlice}
		}
	case 241:
		//line parser.y:1379
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-7].genericValue.LineNumber(), Args: RubyS[Rubypt-4].methodParamSlice, Body: RubyS[Rubypt-3].genericSlice}
		}
	case 242:
		//line parser.y:1383
		{
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
		}
	case 243:
		//line parser.y:1387
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			RubyVAL.genericBlock = ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
		}
	case 244:
		//line parser.y:1395
		{
		}
	case 245:
		//line parser.y:1395
		{
			RubyVAL.genericBlock = RubyS[Rubypt-0].genericBlock
		}
	case 246:
		//line parser.y:1399
		{
			RubyVAL.methodParamSlice = RubyS[Rubypt-1].methodParamSlice
		}
	case 247:
		//line parser.y:1403
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 248:
		//line parser.y:1412
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 249:
		//line parser.y:1422
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 250:
		//line parser.y:1431
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 251:
		//line parser.y:1440
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 252:
		//line parser.y:1449
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 253:
		//line parser.y:1458
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 254:
		//line parser.y:1467
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 255:
		//line parser.y:1476
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 256:
		//line parser.y:1486
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 257:
		//line parser.y:1495
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 258:
		//line parser.y:1506
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 259:
		//line parser.y:1515
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 260:
		//line parser.y:1523
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 261:
		//line parser.y:1531
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 262:
		//line parser.y:1539
		{
		}
	case 263:
		//line parser.y:1540
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 264:
		//line parser.y:1541
		{
		}
	case 265:
		//line parser.y:1544
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 266:
		//line parser.y:1547
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 267:
		//line parser.y:1556
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 268:
		//line parser.y:1566
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-7].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-6].genericSlice,
				Rescue: RubyS[Rubypt-5].genericSlice,
				Else:   RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 269:
		//line parser.y:1576
		{
			RubyVAL.genericValue = ast.Begin{
				Line:   RubyS[Rubypt-5].genericValue.LineNumber(),
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Ensure: RubyS[Rubypt-1].genericSlice,
			}
		}
	case 270:
		//line parser.y:1586
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 271:
		//line parser.y:1588
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 272:
		//line parser.y:1602
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 273:
		//line parser.y:1618
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue,
					Classes: classes,
				},
			}
		}
	case 274:
		//line parser.y:1634
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 275:
		//line parser.y:1644
		{
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue,
				},
			}
		}
	case 276:
		//line parser.y:1656
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 277:
		//line parser.y:1658
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 278:
		//line parser.y:1661
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 279:
		//line parser.y:1663
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 280:
		//line parser.y:1666
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 281:
		//line parser.y:1668
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 282:
		//line parser.y:1671
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 283:
		//line parser.y:1678
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 284:
		//line parser.y:1680
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 285:
		//line parser.y:1683
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 286:
		//line parser.y:1691
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 287:
		//line parser.y:1693
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericValue}
		}
	case 288:
		//line parser.y:1695
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 289:
		//line parser.y:1699
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 290:
		//line parser.y:1701
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 291:
		//line parser.y:1703
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 292:
		//line parser.y:1707
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 293:
		//line parser.y:1709
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 294:
		//line parser.y:1711
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 295:
		//line parser.y:1715
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-5].genericValue,
				True:      RubyS[Rubypt-3].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 296:
		//line parser.y:1725
		{
			RubyVAL.genericValue = ast.Ternary{
				Condition: RubyS[Rubypt-5].genericValue,
				True:      RubyS[Rubypt-3].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
				Line:      RubyS[Rubypt-5].genericValue.LineNumber(),
			}
		}
	case 297:
		//line parser.y:1735
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 298:
		//line parser.y:1741
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 299:
		//line parser.y:1748
		{
			RubyVAL.genericValue = ast.Loop{
				Line:      RubyS[Rubypt-2].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
		}
	case 300:
		//line parser.y:1756
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 301:
		//line parser.y:1763
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 302:
		//line parser.y:1765
		{
		}
	case 303:
		//line parser.y:1767
		{
		}
	case 304:
		//line parser.y:1769
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 305:
		//line parser.y:1771
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 306:
		//line parser.y:1774
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 307:
		//line parser.y:1782
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 308:
		//line parser.y:1791
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 309:
		//line parser.y:1799
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 310:
		//line parser.y:1808
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 311:
		//line parser.y:1817
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 312:
		//line parser.y:1825
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 313:
		//line parser.y:1833
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 314:
		//line parser.y:1841
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 315:
		//line parser.y:1850
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 316:
		//line parser.y:1853
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 317:
		//line parser.y:1856
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 318:
		//line parser.y:1863
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 319:
		//line parser.y:1869
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 320:
		//line parser.y:1875
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 321:
		//line parser.y:1881
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 322:
		//line parser.y:1888
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 323:
		//line parser.y:1890
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 324:
		//line parser.y:1893
		{
			RubyVAL.genericValue = ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue, Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 325:
		//line parser.y:1895
		{
			RubyVAL.genericValue = ast.Range{
				Start:            RubyS[Rubypt-2].genericValue,
				End:              RubyS[Rubypt-0].genericValue,
				Line:             RubyS[Rubypt-2].genericValue.LineNumber(),
				ExcludeLastValue: true,
			}
		}
	case 326:
		//line parser.y:1905
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	case 327:
		//line parser.y:1912
		{
			RubyVAL.genericValue = ast.Defined{Node: RubyS[Rubypt-0].genericValue}
		}
	}
	goto Rubystack /* stack new state and value */
}
